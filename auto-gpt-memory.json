[{"raw_content":"The libp2p docs have a new look! Help docs.libp2p.io continue to improve by providing feedback and contributing.\nlibp2pAbout libp2pGuidesReference\nSpecificationsImplementationsCommunity\nGet InvolvedForumConnectivityBlogGitHubTwitter\nGet StartedRun a go-libp2p nodeRun a js-libp2p nodeRun a rust-libp2p nodeRun a nim-libp2p nodeGet StartedRun a go-libp2p nodeRun a js-libp2p nodeRun a rust-libp2p nodeRun a nim-libp2p node\nOn this page\nExpandCollapseInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!On this pageInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!Run a go-libp2p node\nOn this page\nExpandCollapseInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!On this pageInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!The getting started tutorial covers setting up a development environment, getting familiar\nwith libp2p basics, and implementing a simple node that can send and receive \"ping\" messages\nin go-libp2p.The Protocol Labs Launchpad curriculum also includes\na tutorial on spinning up a libp2p node using a go-libp2p bolierplate. Check it out\nhere.This is the first in a series of tutorials on working with libp2p's Go implementation,\ngo-libp2p. We'll cover installing Go, setting up\na new Go module, starting libp2p nodes, and sending ping messages between them.Install Go #Ensure your Go version is at least 1.19.You can install a recent version of Go by following the official installation instructions.Once installed, you should be able to run go version and see a version >= 1.19, for example:$ go version\ngo version go1.19 darwin/arm64\nCreate a Go module #We're going to create a Go module that can be run from the command line.Let's create a new directory and use go mod to initialize it as a module. We'll create it in\n/tmp, but you can equally create it anywhere on your filesystem. We'll also initialize it with the\nmodule name github.com/user/go-libp2p-tutorial, but you may want to replace this with a name that\ncorresponds to a repository name you have the rights to push to if you want to publish your version\nof the code.mkdir -p /tmp/go-libp2p-tutorial\ncd /tmp/go-libp2p-tutorial\ngo mod init github.com/user/go-libp2p-tutorial\nYou should now have a go.mod file in the current directory containing the name of the module you\ninitialized and the version of Go you're using, for example:$ cat go.mod\nmodule github.com/user/go-libp2p-tutorial\ngo 1.19\nStart a libp2p node #We'll now add some code to our module to start a libp2p node.\nLet's start by creating a main.go file that simply starts a libp2p node with default settings,\nprints the node's listening addresses, then shuts the node down:package main\nimport (\n\"fmt\"\n\"github.com/libp2p/go-libp2p\"\n)\nfunc main() {\n// start a libp2p node with default settings\nnode, err := libp2p.New()\nif err != nil {\npanic(err)\n}\n// print the node's listening addresses\nfmt.Println(\"Listen addresses:\", node.Addrs())\n// shut the node down\nif err := node.Close(); err != nil {\npanic(err)\n}\n}\nImport the libp2p/go-libp2p module:go get github.com/libp2p/go-libp2p\nWe can now compile this into an executable using go build and run it from the command line:$ go build -o libp2p-node\n$ ./libp2p-node\nListen addresses: [/ip6/::1/tcp/57666 /ip4/192.0.2.0/tcp/57665 /ip4/198.51.100.0/tcp/57665]\nThe listening addresses are formatted using the multiaddr\nformat, and there is typically more than one printed because go-libp2p will listen on all available\nIPv4 and IPv6 network interfaces by default.Configure the node #A node's default settings can be overridden by passing extra arguments to libp2p.New. Let's use\nlibp2p.ListenAddrStrings to configure the node to listen on TCP port 2000 on the IPv4 loopback\ninterface:func main() {\n...\n// start a libp2p node that listens on TCP port 2000 on the IPv4\n// loopback interface\nnode, err := libp2p.New(\nlibp2p.ListenAddrStrings(\"/ip4/192.0.2.0/tcp/2000\"),\n)\nif err != nil {\npanic(err)\n}\n...\n}\nRe-building and running the executable again now prints the explicit listen address we've configured:$ go build -o libp2p-node\n$ ./libp2p-node\nListening addresses: [/ip4/192.0.2.0/tcp/2000]\nlibp2p.New accepts a variety of arguments to configure most aspects of the node. See\noptions.go for a full list of those\noptions.Wait for a signal #A node that immediately exits is not all that useful. Let's add the following towards the end of the\nmain function that blocks waiting for an OS signal before shutting down the node:func main() {\n...\n// wait for a SIGINT or SIGTERM signal\nch := make(chan os.Signal, 1)\nsignal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)\n<-ch\nfmt.Println(\"Received signal, shutting down...\")\n// shut the node down\nif err := node.Close(); err != nil {\npanic(err)\n}\n}\nWe also need to update the list of imports at the top of the file to include the os, os/signal\nand syscall packages we're now using:import (\n\"fmt\"\n\"os\"\n\"os/signal\"\n\"syscall\"\n\"github.com/libp2p/go-libp2p\"\n)\nRunning the node now waits until it receives a SIGINT (i.e. a ctrl-c key press) or a SIGTERM signal\nbefore shutting down:$ ./libp2p-node\nListening addresses: [/ip4/192.0.2.0/tcp/2000]\n^CReceived signal, shutting down...\nRun the ping protocol #Now that we have the ability to configure and start libp2p nodes, we can start communicating!Set a stream handler #A node started with go-libp2p will run its own ping protocol by default, but let's disable it and\nset it up manually to demonstrate the process of running protocols by registering stream handlers.The object returned from libp2p.New implements the Host interface,\nand we'll use the SetStreamHandler method to set a handler for our ping protocol.First, let's add the github.com/libp2p/go-libp2p/p2p/protocol/ping package to our list of\nimported packages:import (\n...\n\"github.com/libp2p/go-libp2p\"\n\"github.com/libp2p/go-libp2p/p2p/protocol/ping\"\n)\nNow we'll pass an argument to libp2p.New to disable the built-in ping protocol, and then use the\nPingService type from the ping package to set a stream handler manually (note that we're also\nconfiguring the node to listen on a random local TCP port rather than a hard coded one, which means\nwe'll be able to run multiple nodes on the same machine without them trying to listen on the same\nport):func main() {\n...\n// start a libp2p node that listens on a random local TCP port,\n// but without running the built-in ping protocol\nnode, err := libp2p.New(\nlibp2p.ListenAddrStrings(\"/ip4/192.0.2.0/tcp/0\"),\nlibp2p.Ping(false),\n)\nif err != nil {\npanic(err)\n}\n// configure our own ping protocol\npingService := &ping.PingService{Host: node}\nnode.SetStreamHandler(ping.ID, pingService.PingHandler)\n...\n}\nConnect to a peer #With the ping protocol configured, we need a way to instruct the node to connect to another node and\nsend it ping messages.We'll first expand the log message that we've been printing after starting the node to include\nits PeerId value, as we'll need that to instruct other nodes to connect to it. Let's import the\ngithub.com/libp2p/go-libp2p/core/peer package and use it to replace the \"Listen addresses\" log\nmessage with something that prints both the listen address and the PeerId as a multiaddr string:import (\n...\n\"github.com/libp2p/go-libp2p\"\npeerstore \"github.com/libp2p/go-libp2p/core/peer\"\n\"github.com/libp2p/go-libp2p/p2p/protocol/ping\"\n)\nfunc main() {\n...\n// print the node's PeerInfo in multiaddr format\npeerInfo := peerstore.AddrInfo{\nID:\nnode.ID(),\nAddrs: node.Addrs(),\n}\naddrs, err := peerstore.AddrInfoToP2pAddrs(&peerInfo)\nfmt.Println(\"libp2p node address:\", addrs[0])\n...\n}\nRunning the node now prints the node's address that can be used to connect to it:$ ./libp2p-node\nlibp2p node address: /ip4/192.0.2.0/tcp/62268/ipfs/QmfQzWnLu4UX1cW7upgyuFLyuBXqze7nrPB4qWYqQiTHwt\nLet's also accept a command line argument that is the address of a peer to send ping messages to,\nallowing us to either just run a listening node that waits for a signal, or run a node that connects\nto another node and pings it a few times before shutting down (we'll use the github.com/multiformats/go-multiaddr\npackage to parse the peer's address from the command line argument):import (\n...\n\"github.com/libp2p/go-libp2p\"\npeerstore \"github.com/libp2p/go-libp2p/core/peer\"\n\"github.com/libp2p/go-libp2p/p2p/protocol/ping\"\nmultiaddr \"github.com/multiformats/go-multiaddr\"\n)\nfunc main() {\n...\nfmt.Println(\"libp2p node address:\", addrs[0])\n// if a remote peer has been passed on the command line, connect to it\n// and send it 5 ping messages, otherwise wait for a signal to stop\nif len(os.Args) > 1 {\naddr, err := multiaddr.NewMultiaddr(os.Args[1])\nif err != nil {\npanic(err)\n}\npeer, err := peerstore.AddrInfoFromP2pAddr(addr)\nif err != nil {\npanic(err)\n}\nif err := node.Connect(context.Background(), *peer); err != nil {\npanic(err)\n}\nfmt.Println(\"sending 5 ping messages to\", addr)\nch := pingService.Ping(context.Background(), peer.ID)\nfor i := 0; i < 5; i++ {\nres := <-ch\nfmt.Println(\"got ping response!\", \"RTT:\", res.RTT)\n}\n} else {\n// wait for a SIGINT or SIGTERM signal\nch := make(chan os.Signal, 1)\nsignal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)\n<-ch\nfmt.Println(\"Received signal, shutting down...\")\n}\n// shut the node down\nif err := node.Close(); err != nil {\npanic(err)\n}\n}\nLet's play ping pong! #We are finally in a position to run two libp2p nodes, have one connect to the other and for\nthem to run a protocol!To recap, here is the full program we have written:package main\nimport (\n\"context\"\n\"fmt\"\n\"os\"\n\"os/signal\"\n\"syscall\"\n\"github.com/libp2p/go-libp2p\"\npeerstore \"github.com/libp2p/go-libp2p/core/peer\"\n\"github.com/libp2p/go-libp2p/p2p/protocol/ping\"\nmultiaddr \"github.com/multiformats/go-multiaddr\"\n)\nfunc main() {\n// start a libp2p node that listens on a random local TCP port,\n// but without running the built-in ping protocol\nnode, err := libp2p.New(\nlibp2p.ListenAddrStrings(\"/ip4/192.0.2.0/tcp/0\"),\nlibp2p.Ping(false),\n)\nif err != nil {\npanic(err)\n}\n// configure our own ping protocol\npingService := &ping.PingService{Host: node}\nnode.SetStreamHandler(ping.ID, pingService.PingHandler)\n// print the node's PeerInfo in multiaddr format\npeerInfo := peerstore.AddrInfo{\nID:\nnode.ID(),\nAddrs: node.Addrs(),\n}\naddrs, err := peerstore.AddrInfoToP2pAddrs(&peerInfo)\nif err != nil {\npanic(err)\n}\nfmt.Println(\"libp2p node address:\", addrs[0])\n// if a remote peer has been passed on the command line, connect to it\n// and send it 5 ping messages, otherwise wait for a signal to stop\nif len(os.Args) > 1 {\naddr, err := multiaddr.NewMultiaddr(os.Args[1])\nif err != nil {\npanic(err)\n}\npeer, err := peerstore.AddrInfoFromP2pAddr(addr)\nif err != nil {\npanic(err)\n}\nif err := node.Connect(context.Background(), *peer); err != nil {\npanic(err)\n}\nfmt.Println(\"sending 5 ping messages to\", addr)\nch := pingService.Ping(context.Background(), peer.ID)\nfor i := 0; i < 5; i++ {\nres := <-ch\nfmt.Println(\"pinged\", addr, \"in\", res.RTT)\n}\n} else {\n// wait for a SIGINT or SIGTERM signal\nch := make(chan os.Signal, 1)\nsignal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)\n<-ch\nfmt.Println(\"Received signal, shutting down...\")\n}\n// shut the node down\nif err := node.Close(); err != nil {\npanic(err)\n}\n}\nIn one terminal window, let's start a listening node (i.e. don't pass any command line arguments):$ ./libp2p-node\nlibp2p node address: /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL\nIn another terminal window, let's run a second node but pass the address of the first node, and we\nshould see some ping responses logged:$ ./libp2p-node /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL\nlibp2p node address: /ip4/192.0.2.0/tcp/61846/ipfs/QmVyKLTLswap3VYbpBATsgNpi6JdwSwsZALPxEnEbEndup\nsending 5 ping messages to /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL\npinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 431.231µs\npinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 164.94µs\npinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 220.544µs\npinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 208.761µs\npinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 201.37µs\nSuccess! Our two peers are now communicating using go-libp2p! Sure, they can only say \"ping\", but it's a start!Edit this page on GitHubRun a js-libp2p node →Built with ❤️ from libp2p, Hugo, and Doks\nTop","summary":"a tutorial on creating a basic libp2p host in Go, including instructions and code examples for installing Go, creating a Go module, starting a libp2p node, running the ping protocol, and setting up communication between nodes. It also demonstrates how to connect to other nodes, send ping messages, and pass node addresses for communication.","chunks":["The libp2p docs have a new look! Help docs.libp2p.io continue to improve by providing feedback and contributing. libp2pAbout libp2pGuidesReference SpecificationsImplementationsCommunity Get InvolvedForumConnectivityBlogGitHubTwitter Get StartedRun a go-libp2p nodeRun a js-libp2p nodeRun a rust-libp2p nodeRun a nim-libp2p nodeGet StartedRun a go-libp2p nodeRun a js-libp2p nodeRun a rust-libp2p nodeRun a nim-libp2p node On this page ExpandCollapseInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!On this pageInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!Run a go-libp2p node On this page ExpandCollapseInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!On this pageInstall GoCreate a Go moduleStart a libp2p nodeRun the ping protocolLet's play ping pong!The getting started tutorial covers setting up a development environment, getting familiar with libp2p basics, and implementing a simple node that can send and receive \"ping\" messages in go-libp2p.The Protocol Labs Launchpad curriculum also includes a tutorial on spinning up a libp2p node using a go-libp2p bolierplate. Check it out here.This is the first in a series of tutorials on working with libp2p's Go implementation, go-libp2p. We'll cover installing Go, setting up a new Go module, starting libp2p nodes, and sending ping messages between them.Install Go #Ensure your Go version is at least 1.19.You can install a recent version of Go by following the official installation instructions.Once installed, you should be able to run go version and see a version >= 1.19, for example:$ go version go version go1.19 darwin/arm64 Create a Go module #We're going to create a Go module that can be run from the command line.Let's create a new directory and use go mod to initialize it as a module. We'll create it in /tmp, but you can equally create it anywhere on your filesystem. We'll also initialize it with the module name github.com/user/go-libp2p-tutorial, but you may want to replace this with a name that corresponds to a repository name you have the rights to push to if you want to publish your version of the code.mkdir -p /tmp/go-libp2p-tutorial cd /tmp/go-libp2p-tutorial go mod init github.com/user/go-libp2p-tutorial You should now have a go.mod file in the current directory containing the name of the module you initialized and the version of Go you're using, for example:$ cat go.mod module github.com/user/go-libp2p-tutorial go 1.19 Start a libp2p node #We'll now add some code to our module to start a libp2p node. Let's start by creating a main.go file that simply starts a libp2p node with default settings, prints the node's listening addresses, then shuts the node down:package main import ( \"fmt\" \"github.com/libp2p/go-libp2p\" ) func main() { // start a libp2p node with default settings node, err := libp2p.New() if err != nil { panic(err) } // print the node's listening addresses fmt.Println(\"Listen addresses:\", node.Addrs()) // shut the node down if err := node.Close(); err != nil { panic(err) } } Import the libp2p/go-libp2p module:go get github.com/libp2p/go-libp2p We can now compile this into an executable using go build and run it from the command line:$ go build -o libp2p-node $ ./libp2p-node Listen addresses: [/ip6/::1/tcp/57666 /ip4/192.0.2.0/tcp/57665 /ip4/198.51.100.0/tcp/57665] The listening addresses are formatted using the multiaddr format, and there is typically more than one printed because go-libp2p will listen on all available IPv4 and IPv6 network interfaces by default.Configure the node #A node's default settings can be overridden by passing extra arguments to libp2p.New. Let's use libp2p.ListenAddrStrings to configure the node to listen on TCP port 2000 on the IPv4 loopback interface:func main() { ... // start a libp2p node that listens on TCP port 2000 on the IPv4 // loopback interface node, err := libp2p.New( libp2p.ListenAddrStrings(\"/ip4/192.0.2.0/tcp/2000\"), ) if err != nil { panic(err) } ... } Re-building and running the executable again now prints the explicit listen address we've configured:$ go build -o libp2p-node $ ./libp2p-node Listening addresses: [/ip4/192.0.2.0/tcp/2000] libp2p.New accepts a variety of arguments to configure most aspects of the node. See options.go for a full list of those options.Wait for a signal #A node that immediately exits is not all that useful. Let's add the following towards the end of the main function that blocks waiting for an OS signal before shutting down the node:func main() { ... // wait for a SIGINT or SIGTERM signal ch := make(chan os.Signal, 1) signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM) <-ch fmt.Println(\"Received signal, shutting down...\") // shut the node down if err := node.Close(); err != nil { panic(err) } } We also need to update the list of imports at the top of the file to include the os, os/signal and syscall packages we're now using:import ( \"fmt\" \"os\" \"os/signal\" \"syscall\" \"github.com/libp2p/go-libp2p\" ) Running the node now waits until it receives a SIGINT (i.e. a ctrl-c key press) or a SIGTERM signal before shutting down:$ ./libp2p-node Listening addresses: [/ip4/192.0.2.0/tcp/2000] ^CReceived signal, shutting down... Run the ping protocol #Now that we have the ability to configure and start libp2p nodes, we can start communicating!Set a stream handler #A node started with go-libp2p will run its own ping protocol by default, but let's disable it and set it up manually to demonstrate the process of running protocols by registering stream handlers.The object returned from libp2p.New implements the Host interface, and we'll use the SetStreamHandler method to set a handler for our ping protocol.First, let's add the github.com/libp2p/go-libp2p/p2p/protocol/ping package to our list of imported packages:import ( ... \"github.com/libp2p/go-libp2p\" \"github.com/libp2p/go-libp2p/p2p/protocol/ping\" ) Now we'll pass an argument to libp2p.New to disable the built-in ping protocol, and then use the PingService type from the ping package to set a stream handler manually (note that we're also configuring the node to listen on a random local TCP port rather than a hard coded one, which means we'll be able to run multiple nodes on the same machine without them trying to listen on the same port):func main() { ... // start a libp2p node that listens on a random local TCP port, // but without running the built-in ping protocol node, err := libp2p.New( libp2p.ListenAddrStrings(\"/ip4/192.0.2.0/tcp/0\"), libp2p.Ping(false), ) if err != nil { panic(err) } // configure our own ping protocol pingService := &ping.PingService{Host: node} node.SetStreamHandler(ping.ID, pingService.PingHandler) ... } Connect to a peer #With the ping protocol configured, we need a way to instruct the node to connect to another node and send it ping messages.We'll first expand the log message that we've been printing after starting the node to include its PeerId value, as we'll need that to instruct other nodes to connect to it. Let's import the github.com/libp2p/go-libp2p/core/peer package and use it to replace the \"Listen addresses\" log message with something that prints both the listen address and the PeerId as a multiaddr string:import ( ... \"github.com/libp2p/go-libp2p\" peerstore \"github.com/libp2p/go-libp2p/core/peer\" \"github.com/libp2p/go-libp2p/p2p/protocol/ping\" ) func main() { ... // print the node's PeerInfo in multiaddr format peerInfo := peerstore.AddrInfo{ ID: node.ID(), Addrs: node.Addrs(), } addrs, err := peerstore.AddrInfoToP2pAddrs(&peerInfo) fmt.Println(\"libp2p node address:\", addrs[0]) ... } Running the node now prints the node's address that can be used to connect to it:$ ./libp2p-node libp2p node address: /ip4/192.0.2.0/tcp/62268/ipfs/QmfQzWnLu4UX1cW7upgyuFLyuBXqze7nrPB4qWYqQiTHwt Let's also accept a command line argument that is the address of a peer to send ping messages to, allowing us to either just run a listening node that waits for a signal, or run a node that connects to another node and pings it a few times before shutting down (we'll use the github.com/multiformats/go-multiaddr package to parse the peer's address from the command line argument):import ( ... \"github.com/libp2p/go-libp2p\" peerstore \"github.com/libp2p/go-libp2p/core/peer\" \"github.com/libp2p/go-libp2p/p2p/protocol/ping\" multiaddr \"github.com/multiformats/go-multiaddr\" ) func main() { ... fmt.Println(\"libp2p node address:\", addrs[0]) // if a remote peer has been passed on the command line, connect to it // and send it 5 ping messages, otherwise wait for a signal to stop if len(os.Args) > 1 { addr, err := multiaddr.NewMultiaddr(os.Args[1]) if err != nil { panic(err) } peer, err := peerstore.AddrInfoFromP2pAddr(addr) if err != nil { panic(err) } if err := node.Connect(context.Background(), *peer); err != nil { panic(err) } fmt.Println(\"sending 5 ping messages to\", addr) ch := pingService.Ping(context.Background(), peer.ID) for i := 0; i < 5; i++ { res := <-ch fmt.Println(\"got ping response!\", \"RTT:\", res.RTT) } } else { // wait for a SIGINT or SIGTERM signal ch := make(chan os.Signal, 1) signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM) <-ch fmt.Println(\"Received signal, shutting down...\") } // shut the node down if err := node.Close(); err != nil { panic(err) } } Let's play ping pong! #We are finally in a position to run two libp2p nodes, have one connect to the other and for them to run a protocol!To recap, here is the full program we have written:package main import ( \"context\" \"fmt\" \"os\" \"os/signal\" \"syscall\" \"github.com/libp2p/go-libp2p\" peerstore \"github.com/libp2p/go-libp2p/core/peer\" \"github.com/libp2p/go-libp2p/p2p/protocol/ping\" multiaddr \"github.com/multiformats/go-multiaddr\" ) func main() { // start a libp2p node that listens on a random local TCP port, // but without running the built-in ping protocol node, err := libp2p.New( libp2p.ListenAddrStrings(\"/ip4/192.0.2.0/tcp/0\"), libp2p.Ping(false), ) if err != nil { panic(err) } // configure our own ping protocol pingService := &ping.PingService{Host: node} node.SetStreamHandler(ping.ID, pingService.PingHandler) // print the node's PeerInfo in multiaddr format peerInfo := peerstore.AddrInfo{ ID: node.ID(), Addrs: node.Addrs(), } addrs, err := peerstore.AddrInfoToP2pAddrs(&peerInfo) if err != nil { panic(err) } fmt.Println(\"libp2p node address:\", addrs[0]) // if a remote peer has been passed on the command line, connect to it // and send it 5 ping messages, otherwise wait for a signal to stop if len(os.Args) > 1 { addr, err := multiaddr.NewMultiaddr(os.Args[1]) if err != nil { panic(err) } peer, err := peerstore.AddrInfoFromP2pAddr(addr) if err != nil { panic(err) } if err := node.Connect(context.Background(), *peer); err != nil { panic(err) } fmt.Println(\"sending 5 ping messages to\", addr) ch := pingService.Ping(context.Background(), peer.ID) for i := 0; i < 5; i++ { res := <-ch fmt.Println(\"pinged\", addr, \"in\", res.RTT) } } else { // wait for a SIGINT or SIGTERM signal ch := make(chan os.Signal, 1) signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM) <-ch fmt.Println(\"Received signal, shutting down...\") } // shut the node down if err := node.Close(); err != nil { panic(err) } } In one terminal window, let's start a listening node (i.e. don't pass any command line arguments):$ ./libp2p-node libp2p node address: /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL In another terminal window, let's run a second node but pass the address of the first node, and we should see some ping responses logged:$ ./libp2p-node /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL libp2p node address: /ip4/192.0.2.0/tcp/61846/ipfs/QmVyKLTLswap3VYbpBATsgNpi6JdwSwsZALPxEnEbEndup sending 5 ping messages to /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL pinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 431.231µs pinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 164.94µs pinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 220.544µs pinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 208.761µs pinged /ip4/192.0.2.0/tcp/61790/ipfs/QmZKjsGJ6ukXVRXVEcExx9GhiyWoJC97onYpzBwCHPWqpL in 201.37µs Success! Our two peers are now communicating using go-libp2p! Sure, they can only say \"ping\", but it's a start!Edit this page on GitHubRun a js-libp2p node →Built with ❤️ from libp2p, Hugo, and Doks Top"],"chunk_summaries":["a tutorial on creating a basic libp2p host in Go, including instructions and code examples for installing Go, creating a Go module, starting a libp2p node, running the ping protocol, and setting up communication between nodes. It also demonstrates how to connect to other nodes, send ping messages, and pass node addresses for communication."],"e_summary":[0.00763664348050952,0.01173352636396885,0.01010972075164318,-0.010795931331813335,0.003648467594757676,0.023127345368266106,-0.020165087655186653,0.007718173786997795,-0.011808262206614017,-0.038183219730854034,-0.0010513972956687212,0.001924447831697762,-0.026728253811597824,0.009409921243786812,0.010680430568754673,0.007969558238983154,0.0031558906193822622,-0.03263917937874794,-0.004086691420525312,0.018303485587239265,-0.016170118004083633,0.0017528950702399015,0.0018565061036497355,-0.015477112494409084,-0.001968609867617488,-0.012922505848109722,0.02377958409488201,-0.001264564343728125,-0.001653530402109027,-0.007779321167618036,0.020980387926101685,-0.032367412000894547,-0.01982537843286991,0.0009834556840360165,0.002355877310037613,-0.01630600169301033,0.013194272294640541,-0.0024798710364848375,0.00006130673864390701,-0.0063117812387645245,0.03185105323791504,-0.00021889957133680582,-0.002045044209808111,-0.01812683790922165,-0.010965785942971706,0.007065933663398027,-0.003872675122693181,-0.02910621091723442,-0.005598393734544516,-0.001308726379647851,0.0020331544801592827,-0.001318068359978497,-0.02421441115438938,-0.007772527169436216,-0.020926034078001976,0.0034989959094673395,-0.006685460451990366,-0.0006772935157641768,-0.0070591396652162075,-0.006386517081409693,0.007290141191333532,0.008812034502625465,-0.01299044769257307,-0.0007210309850051999,-0.003709615208208561,-0.002897712169215083,-0.006172500550746918,0.018656782805919647,-0.03000304102897644,-0.012433325871825218,0.02687772549688816,0.015477112494409084,-0.011074491776525974,-0.014471575617790222,0.023236051201820374,-0.008343237452208996,-0.028372440487146378,-0.0134456567466259,-0.01682235673069954,0.007188228890299797,-0.008112234994769096,-0.010211632587015629,0.00313720665872097,0.04581986367702484,-0.007154257968068123,-0.018330663442611694,0.019091609865427017,0.006651489529758692,-0.01238576602190733,-0.009206096641719341,0.0134456567466259,0.006036617327481508,0.003003021702170372,0.02297787368297577,-0.022393574938178062,0.019703084602952003,-0.020124321803450584,0.014417222701013088,-0.0017477994551882148,-0.0094914510846138,-0.005730879958719015,0.020504796877503395,-0.005034477915614843,-0.012345001101493835,-0.0021384640131145716,-0.008356825448572636,0.02214898355305195,-0.03005739487707615,0.022692518308758736,0.010965785942971706,-0.008730504661798477,0.0433739610016346,0.0063321636989712715,-0.021469566971063614,-0.0268913134932518,0.02776096574962139,0.015504289418458939,-0.01947208307683468,0.01675441488623619,-0.019241081550717354,0.011645202524960041,0.006947035901248455,0.007888027466833591,0.011223963461816311,-0.006389914080500603,-0.017420243471860886,-0.023575758561491966,-0.019078020006418228,-0.0046166363172233105,-0.024961769580841064,0.011156022548675537,0.024893827736377716,0.01587117463350296,0.02034173533320427,-0.0007384410127997398,0.0010284670861437917,-0.020137911662459373,-0.014417222701013088,-0.02031455934047699,-0.016537003219127655,0.0006607327377423644,0.014308515936136246,-0.016645709052681923,0.00506844837218523,0.001662872382439673,0.024921003729104996,0.018317073583602905,0.013404891826212406,0.006950432900339365,0.005601790733635426,0.023113755509257317,-0.002106191823258996,-0.008710121735930443,0.010741578415036201,-0.02648366242647171,0.035927556455135345,-0.013669864274561405,0.019227491691708565,0.006400105077773333,0.006043411325663328,0.006372928619384766,0.03584602475166321,-0.007426024414598942,-0.01936337538063526,-0.007337700575590134,0.023263227194547653,0.03886263445019722,-0.004504532553255558,0.002736350754275918,-0.005041271913796663,0.006186089012771845,0.022189749404788017,-0.052369438111782074,0.01982537843286991,-0.005927910562604666,0.016971828415989876,-0.008771269582211971,0.030791165307164192,-0.00275843171402812,-0.0009146647062152624,0.007670614402741194,-0.003916837275028229,0.004721946083009243,0.05902772396802902,-0.022869165986776352,-0.01171993836760521,0.00903624203056097,0.014607459306716919,0.014308515936136246,0.011590848676860332,0.005975469946861267,0.025478126481175423,0.019145961850881577,0.010639665648341179,-0.6278897523880005,-0.0017749761464074254,0.016958240419626236,-0.035030726343393326,0.00042654629214666784,-0.0063797226175665855,0.0058259982615709305,0.016604945063591003,0.013364126905798912,0.020966799929738045,0.004246354568749666,0.01583040878176689,0.013207860291004181,-0.003157589118927717,-0.0021333685144782066,-0.007575496099889278,0.0025444156490266323,-0.027910437434911728,-0.0075687021017074585,0.014294927008450031,-0.006559768225997686,0.01981179043650627,0.02204027771949768,-0.012270265258848667,0.009586569853127003,-0.018330663442611694,0.022801224142313004,-0.020762974396348,0.00442300271242857,0.023317581042647362,-0.03185105323791504,-0.0026395339518785477,0.00011613779497565702,0.02509765326976776,0.04519479721784592,-0.016197293996810913,-0.020002027973532677,0.020817328244447708,-0.0076298494823277,0.033237066119909286,-0.017284361645579338,-0.020586326718330383,0.0008624345646239817,-0.001228894921950996,-0.005020889453589916,-0.009511834010481834,0.02733972854912281,-0.0009308008593507111,-0.013642687350511551,0.008540268056094646,0.0073512885719537735,-0.0071066985838115215,-0.005112610757350922,-0.015069462358951569,-0.014593870379030704,-0.013887276872992516,0.044406674802303314,-0.0029282858595252037,0.009702070616185665,0.004711754620075226,0.001968609867617488,-0.0016144639812409878,-0.0056289671920239925,-0.014879225753247738,-0.018738312646746635,0.004901991691440344,-0.03840063139796257,-0.0032866783440113068,0.01671365089714527,-0.01852089911699295,0.03937899321317673,0.015069462358951569,-0.04149877279996872,-0.008309266529977322,0.003763968590646982,0.04087371006608009,0.015545054338872433,-0.0004692221700679511,-0.0162788238376379,0.0022573620080947876,-0.011325876228511333,0.018181191757321358,-0.018439369276165962,-0.016428295522928238,0.02647007443010807,-0.007392053492367268,-0.02956821396946907,-0.0037198064383119345,0.023616524413228035,0.006040014326572418,-0.0013104249956086278,0.02023302949965,-0.020912446081638336,-0.020613502711057663,-0.0033325389958918095,0.016441883519291878,0.010619282722473145,0.010884255170822144,0.004572474397718906,-0.002495157765224576,-0.01848013512790203,-0.01210041157901287,0.01498793251812458,-0.019607966765761375,0.04891800135374069,-0.02339911088347435,-0.029242094606161118,0.02433670684695244,0.023684466257691383,-0.020504796877503395,-0.019295433536171913,-0.012881740927696228,-0.0076298494823277,-0.008458738215267658,0.008017117157578468,-0.03054657392203808,0.027991967275738716,0.010530958883464336,0.04856470599770546,-0.023956233635544777,0.012440119870007038,-0.005445525050163269,-0.0008382303640246391,-0.01301082968711853,-0.013167095370590687,0.028318088501691818,-0.0035125843714922667,-0.005985660944133997,-0.028345264494419098,-0.004796681925654411,-0.031117284670472145,-0.00024395306536462158,0.01129190530627966,-0.0028841239400207996,0.056310057640075684,0.006209868472069502,0.027964791283011436,-0.009219684638082981,0.0006399255944415927,-0.026225484907627106,0.00282467482611537,0.02519277110695839,-0.0030913460068404675,-0.0025817835703492165,0.003385193645954132,-0.0011719937901943922,-0.03927028551697731,-0.02558683231472969,0.014892813749611378,-0.0009978932794183493,0.010544546879827976,-0.002495157765224576,0.0025002534966915846,-0.0031796700786799192,-0.025437360629439354,-0.026347778737545013,0.014716166071593761,0.006705842912197113,-0.007296935189515352,0.005839586723595858,0.011081286706030369,0.009226478636264801,-0.02962256781756878,0.01759689301252365,0.00030786069692112505,0.0013766681076958776,-0.005486289970576763,0.015572230331599712,0.016958240419626236,-0.019716672599315643,0.011651996523141861,0.015694525092840195,-0.034623075276613235,-0.019091609865427017,0.024363882839679718,0.002389848232269287,-0.008615003898739815,-0.0158847626298666,-0.00841117836534977,0.009987425059080124,0.012290648184716702,0.009722452610731125,-0.01481128390878439,0.00336650968529284,0.029676921665668488,0.01944490522146225,0.017121300101280212,0.020464031025767326,-0.008913947269320488,-0.0172028299421072,-0.006128338631242514,0.051853083074092865,0.00034076994052156806,0.012868152000010014,-0.008350031450390816,0.012908916920423508,-0.008064676076173782,0.0055814082734286785,0.023276817053556442,0.009566186927258968,0.021374449133872986,-0.03432413190603256,0.011353053152561188,-0.02700001932680607,0.0002830195298884064,-0.028807267546653748,0.008438355289399624,-0.01803172007203102,0.0048340498469769955,0.018004542216658592,0.013955218717455864,-0.018357839435338974,-0.024934593588113785,-0.00641709053888917,0.02561401017010212,0.04978765547275543,-0.022379986941814423,0.01301762368530035,-0.025247124955058098,0.0006152967689558864,-0.009803983382880688,0.019526435062289238,0.013078771531581879,-0.01082310825586319,-0.021809276193380356,0.01856166496872902,0.004137647803872824,-0.002841660287231207,-0.0030743605457246304,-0.03000304102897644,-0.020817328244447708,-0.003485407680273056,0.008642180822789669,0.01637394167482853,0.016917476430535316,0.003281582612544298,-0.009260449558496475,0.002004279289394617,0.019771026447415352,-0.008954712189733982,-0.008540268056094646,0.022828401997685432,0.019594376906752586,-0.023059403523802757,0.026374956592917442,0.01498793251812458,0.015531465411186218,0.005330023821443319,-0.030600927770137787,-0.004657401703298092,-0.015286875888705254,0.02470359206199646,-0.01899649016559124,0.0013902564533054829,0.02694566547870636,-0.014294927008450031,0.01815401390194893,0.012963270768523216,0.012861358001828194,-0.0015134006971493363,0.003003021702170372,0.0008314361912198365,0.027149491012096405,0.01281379908323288,-0.010164073668420315,-0.03405236452817917,-0.0073037296533584595,-0.027991967275738716,-0.038210395723581314,0.0045894598588347435,0.015748878940939903,0.000208071360248141,0.000780479924287647,-0.025953717529773712,0.019132373854517937,0.016156530007719994,-0.016441883519291878,0.005985660944133997,0.022760460153222084,-0.026130367070436478,-0.04024864360690117,0.001010632375255227,0.010381487198174,0.0050752428360283375,-0.008947918191552162,-0.04340113699436188,-0.015123815275728703,0.011509318836033344,-0.006461252924054861,-0.017121300101280212,0.01018445659428835,-0.0193769633769989,0.013506803661584854,0.0033546199556440115,0.0076162610203027725,-0.031225992366671562,0.03095422498881817,-0.009158536791801453,-0.0015176470624282956,-0.015042285434901714,-0.013928042724728584,0.017338713631033897,-0.022692518308758736,-0.025763481855392456,0.019512847065925598,0.006705842912197113,-0.007426024414598942,-0.011359847150743008,-0.0053639947436749935,0.00381492474116385,-0.008180176839232445,0.002287935698404908,0.004073102958500385,-0.056201349943876266,0.022284867241978645,0.0010615886421874166,-0.020830916240811348,0.01102693285793066,0.019757438451051712,0.005007300991564989,-0.007792909629642963,-0.0265651922672987,0.0023219066206365824,0.004603048320859671,0.03924310952425003,0.005425142124295235,0.019771026447415352,0.0010021396446973085,-0.01899649016559124,-0.019105197861790657,-0.02159186266362667,0.0070863161236047745,0.026211896911263466,-0.008254912681877613,0.005034477915614843,0.015164581127464771,-0.018466545268893242,0.00030276505276560783,0.026157543063163757,0.013547568581998348,-0.0032730898819863796,-0.025342242792248726,0.006692254450172186,-0.012698298320174217,0.02077656239271164,-0.016985418274998665,-0.014498752541840076,0.00518734659999609,0.016102176159620285,0.00641369353979826,0.027529964223504066,0.01018445659428835,0.01903725601732731,-0.01674082688987255,-0.017026182264089584,0.007242581807076931,0.02123856544494629,-0.004270134028047323,-0.020192263647913933,0.05125519633293152,-0.012086822651326656,0.007208611350506544,0.013792159035801888,0.015667349100112915,0.02343987673521042,0.0023847525008022785,-0.0005983113078400493,0.008485914207994938,0.013404891826212406,-0.005482892971485853,-0.027910437434911728,-0.004793284926563501,0.001785167376510799,-0.001010632375255227,0.03913440182805061,0.002996227703988552,-0.019580788910388947,0.0073309061117470264,0.009695276618003845,0.016509825363755226,0.004769505001604557,0.0034327527973800898,0.02337193489074707,-0.0073309061117470264,-0.02735331654548645,-0.02297787368297577,-0.003482010681182146,-0.01481128390878439,-0.005421745125204325,-0.04236842691898346,-0.00812582392245531,0.0013911057030782104,-0.027163079008460045,-0.022774048149585724,0.008458738215267658,-0.013153507374227047,-0.018398603424429893,-0.008533474057912827,0.009518628008663654,0.012202324345707893,0.014512340538203716,0.017012594267725945,-0.017664834856987,0.013316567055881023,0.01814042590558529,-0.009090595878660679,-0.010313545353710651,-0.02380676195025444,0.025383008643984795,0.02301863767206669,-0.000531218945980072,0.008628591895103455,0.027108727023005486,0.011115257628262043,-0.02165980450809002,-0.002756733214482665,-0.0009384443401359022,-0.013038006611168385,0.0015235919272527099,0.02301863767206669,0.01892854832112789,0.013343743979930878,0.0045860628597438335,-0.008798446506261826,0.010503781959414482,-0.029242094606161118,-0.0028042923659086227,-0.03312835842370987,-0.007670614402741194,0.015164581127464771,-0.000902774918358773,0.011706349439918995,-0.04288478195667267,-0.015735290944576263,0.01723000779747963,-0.014756930992007256,0.01625164784491062,0.002736350754275918,0.0189829021692276,0.020980387926101685,-0.025505302473902702,0.010150485672056675,0.015069462358951569,0.00035202279104851186,-0.011849027127027512,-0.006916461978107691,-0.0006059547886252403,0.0053164358250796795,-0.027625083923339844,0.009559392929077148,-0.01103372685611248,-0.016537003219127655,0.0015269890427589417,0.00748717226088047,-0.025885775685310364,0.016985418274998665,0.016659297049045563,-0.015395582653582096,0.0008705026702955365,-0.01587117463350296,0.0015983277698978782,-0.007860851474106312,-0.014390045776963234,-0.0005159320426173508,-0.011685967445373535,-0.011502524837851524,0.004538503475487232,0.0034786134492605925,-0.025274300947785378,-0.023480640724301338,-0.05557628720998764,0.020926034078001976,-0.0008127522305585444,0.004772902466356754,0.02377958409488201,0.018425781279802322,-0.019091609865427017,-0.027693023905158043,-0.005910925101488829,-0.027448434382677078,-0.007065933663398027,-0.008057882077991962,0.005251890979707241,0.013669864274561405,0.00814620591700077,-0.0000642261074972339,0.013289391063153744,0.00486802076920867,-0.0038081305101513863,0.002410230692476034,0.002508746227249503,0.005224714521318674,-0.020572736859321594,-0.026334190741181374,-0.007412436418235302,0.008791652508080006,-0.0024034364614635706,0.006586944684386253,-0.010449429042637348,0.01327580213546753,0.001944830291904509,0.01804530806839466,-0.0017393067246302962,-0.045249152928590775,-0.02426876500248909,0.010925020091235638,-0.015096639283001423,0.01903725601732731,-0.009844748303294182,-0.0004454425652511418,0.01254882663488388,-0.023303993046283722,0.024961769580841064,0.009810777381062508,0.021360861137509346,-0.019947674125432968,0.028562678024172783,0.012868152000010014,0.0152596989646554,0.0068145496770739555,-0.010694018565118313,-0.04130853712558746,0.01682235673069954,-0.002337193349376321,0.0063355606980621815,0.023616524413228035,0.001785167376510799,0.00858782697468996,-0.012018881738185883,0.009668099693953991,-0.015708114951848984,-0.0017461009556427598,0.004990315530449152,-0.01671365089714527,-0.02296428382396698,-0.033237066119909286,-0.01861601695418358,0.009579775854945183,-0.013751394115388393,-0.006138530094176531,-0.002109588822349906,-0.0073309061117470264,-0.00074608443537727,-0.00035032423329539597,0.014254162088036537,-0.006060396786779165,0.023290405049920082,0.01633317768573761,0.0012373876525089145,-0.00564595265313983,-0.029459508135914803,0.00564595265313983,0.010789137333631516,-0.004959742072969675,0.0053639947436749935,0.014648224227130413,0.02693207748234272,-0.012039263732731342,-0.011230758391320705,0.007120287045836449,0.0029248888604342937,-0.019594376906752586,-0.02733972854912281,0.0025851805694401264,0.023168109357357025,0.006882491055876017,-0.01638753153383732,-0.004681181162595749,-0.03883545845746994,0.03130752220749855,-0.008200559765100479,0.006152118090540171,0.0012059645960107446,0.003322347765788436,-0.017012594267725945,0.011855821125209332,-0.024934593588113785,0.011590848676860332,-0.029459508135914803,0.00857423897832632,-0.0011702952906489372,0.006237045396119356,-0.009158536791801453,0.010299957357347012,0.008044294081628323,0.0010590407764539123,-0.015680937096476555,-0.012080028653144836,0.017080536112189293,0.02030097134411335,-0.013567951507866383,-0.012446913868188858,-0.0031694788485765457,0.036851562559604645,-0.021727746352553368,-0.0012314427876845002,0.005700306035578251,-0.0001431021373718977,0.016061410307884216,-0.015341228805482388,0.005679923575371504,-0.012643944472074509,-0.009817571379244328,0.0010726291220635176,0.018711136654019356,0.0028059908654540777,0.0075483196415007114,-0.006831535138189793,0.004769505001604557,-0.018262721598148346,-0.0325576476752758,0.01036789920181036,0.008057882077991962,-0.01761048100888729,-0.014716166071593761,-0.02905185893177986,-0.04239560291171074,0.0009469370124861598,0.02829091064631939,-0.020124321803450584,0.01147534791380167,0.06457176059484482,-0.027584318071603775,-0.0009078705916181207,0.009165331721305847,-0.0056357616558671,-0.03622649982571602,0.0032696928828954697,-0.011101668700575829,-0.011448170989751816,0.006790769752115011,-0.003264597151428461,-0.009899101220071316,-0.030600927770137787,0.013092359527945518,0.006804358214139938,0.01302441768348217,0.01585758663713932,0.009770012460649014,-0.009885513223707676,0.002469679806381464,-0.01860242895781994,0.0134456567466259,0.0009163632639683783,0.014621047303080559,0.008173382841050625,0.0023575760424137115,-0.00037559005431830883,0.0079423813149333,-0.007222199346870184,0.007657026406377554,-0.0046370187774300575,-0.03225870430469513,-0.019716672599315643,0.014186220243573189,-0.021890806034207344,-0.025056887418031693,-0.007915204390883446,0.016224469989538193,-0.02159186266362667,0.0015550149837508798,-0.006481635384261608,0.0325576476752758,0.026361368596553802,0.01434928085654974,0.017053358256816864,0.017569715157151222,0.004711754620075226,0.003994970116764307,-0.0015601105988025665,-0.010089337825775146,-0.01347283273935318,-0.0406019426882267,-0.008988683111965656,0.004908785689622164,0.045765507966279984,0.009572980925440788,-0.01934978738427162,-0.020192263647913933,-0.015042285434901714,-0.03674285486340523,0.00673301937058568,0.0005787780974060297,-0.0019159551011398435,-0.01633317768573761,0.024024173617362976,0.01581682078540325,0.024391058832406998,0.016604945063591003,0.03530248999595642,0.0006552124978043139,-0.009973837062716484,0.002734652254730463,-0.009980631060898304,-0.0026819973718374968,0.0007834523566998541,-0.04821141064167023,-0.013398096896708012,0.01809966005384922,0.014648224227130413,-0.02164621651172638,0.010768754407763481,0.008954712189733982,-0.02956821396946907,-0.021727746352553368,-0.002719365293160081,-0.004141044802963734,-0.02117062360048294,-0.011685967445373535,-0.03766686096787453,-0.010965785942971706,0.024866651743650436,-0.005758056417107582,-0.005217920057475567,-0.013928042724728584,0.019173139706254005,0.009321597404778004,-0.005482892971485853,-0.011257934384047985,-0.017882248386740685,0.013167095370590687,-0.015776054933667183,0.01017766259610653,-0.031035754829645157,-0.006393311079591513,0.0387539267539978,-0.020124321803450584,0.018004542216658592,0.0016637216322124004,0.017882248386740685,-0.045330680906772614,-0.021333685144782066,-0.00518734659999609,-0.010802725329995155,-0.023630112409591675,0.004198795184493065,-0.008166588842868805,-0.01591193862259388,-0.012657533399760723,-0.0158847626298666,-0.015286875888705254,-0.0038217189721763134,0.018466545268893242,0.019553612917661667,-0.015626583248376846,0.0014004476834088564,-0.011590848676860332,0.015463524498045444,-0.009104183875024319,-0.030791165307164192,-0.011060903780162334,-0.014322103932499886,0.004976727534085512,-0.025681952014565468,0.016537003219127655,-0.010483399964869022,0.004603048320859671,-0.00006167829997139052,-0.0015643569640815258,-0.015110227279365063,0.18795382976531982,0.011794674210250378,0.012032469734549522,0.01172673236578703,-0.01716206595301628,0.009803983382880688,0.021496744826436043,-0.0034089733380824327,0.014159044250845909,0.027217432856559753,-0.01944490522146225,0.0004322788736317307,-0.0037843510508537292,-0.00840438436716795,-0.0012263471726328135,-0.023929055780172348,-0.0305193979293108,-0.0203689131885767,-0.02561401017010212,-0.008696533739566803,-0.000891734438482672,-0.013235037215054035,-0.01716206595301628,-0.0193769633769989,-0.0017902629915624857,0.0229371078312397,-0.017474597319960594,0.02645648643374443,0.022176161408424377,0.033264242112636566,-0.019091609865427017,-0.02477153204381466,0.012766240164637566,-0.012433325871825218,-0.004677784163504839,0.02477153204381466,0.03761250898241997,-0.02433670684695244,0.009539010003209114,0.011794674210250378,0.00948465708643198,0.014607459306716919,0.004497738555073738,-0.021061917766928673,0.011577260680496693,-0.0011898285010829568,-0.012759445235133171,-0.010232015512883663,0.01191017497330904,0.011584054678678513,-0.02566836215555668,0.0021962143946439028,-0.00641029654070735,0.00551686342805624,-0.031090108677744865,-0.001217854442074895,0.005747865419834852,0.00793558731675148,0.015150992199778557,0.010299957357347012,0.01527328696101904,0.033671893179416656,-0.018765488639473915,0.03266635537147522,-0.01281379908323288,0.00796276330947876,-0.015979880467057228,-0.003307060804218054,0.007004786282777786,-0.0025885775685310364,-0.013506803661584854,-0.013887276872992516,0.007833674550056458,0.002979242242872715,-0.0024832680355757475,-0.03293812274932861,0.0008131768554449081,0.020056381821632385,0.02167339250445366,0.04810270294547081,-0.023168109357357025,0.023208875209093094,-0.013323361054062843,0.017664834856987,-0.01678159274160862,-0.03899851813912392,0.022733282297849655,-0.018344251438975334,-0.001785167376510799,0.010945403017103672,0.014661812223494053,-0.023059403523802757,0.011040521785616875,0.0015660554636269808,0.0024187234230339527,0.013547568581998348,-0.010911432094871998,0.003927028737962246,-0.019295433536171913,0.008010323159396648,-0.03984099626541138,0.06766990572214127,0.028915975242853165,-0.003729997668415308,-0.016863122582435608,-0.033780597150325775,0.005741070955991745,0.018806254491209984,0.0024442016147077084,-0.011685967445373535,-0.010082543827593327,-0.008057882077991962,0.027190256863832474,-0.01763765700161457,0.004161427263170481,0.02112985961139202,0.027176668867468834,0.004796681925654411,-0.01902366802096367,0.012589591555297375,-0.014580282382667065,-0.02463565021753311,-0.008288883604109287,-0.009851542301476002,-0.023086579516530037,0.0030930445063859224,-0.03959640488028526,-0.007826880551874638,-0.023616524413228035,-0.0486462339758873,0.025736304000020027,0.009233272634446621,-0.0006178445764817297,-0.004198795184493065,0.017827894538640976,-0.004161427263170481,0.03136187419295311,-0.01892854832112789,-0.029432332143187523,0.006213265936821699,0.017488185316324234,-0.0032713913824409246,0.014390045776963234,0.025790657848119736,0.02905185893177986,-0.017080536112189293,0.020165087655186653,0.0016348464414477348,-0.010354310274124146,0.0031796700786799192,-0.024948181584477425,-0.022869165986776352,0.0022013101261109114,0.0023015241604298353,-0.025518890470266342,-0.018412193283438683,-0.0051024192944169044,-0.023861113935709,0.020151499658823013,-0.02079015038907528,-0.04000405594706535,0.0011032028123736382,0.010150485672056675,-0.0010352612007409334,-0.024187235161662102,-0.02112985961139202,-0.17208266258239746,0.0030234043952077627,0.03383495286107063,-0.01018445659428835,0.01682235673069954,-0.006882491055876017,0.013866894878447056,0.0019754040986299515,0.007344494573771954,0.0015779453096911311,0.00792879331856966,-0.013038006611168385,0.004507930018007755,-0.01593911647796631,-0.0073716710321605206,0.012501267716288567,0.010884255170822144,0.02167339250445366,0.056310057640075684,0.00313720665872097,0.037775568664073944,-0.003183067310601473,-0.0013596826465800405,-0.015409170649945736,-0.0030743605457246304,0.003733394667506218,-0.01723000779747963,-0.016224469989538193,-0.027054373174905777,-0.032367412000894547,0.004935962148010731,0.01280700508505106,0.007256170269101858,-0.0035533492919057608,0.03723203390836716,0.006763593293726444,0.026578782126307487,0.00243231188505888,0.015531465411186218,0.013398096896708012,0.023059403523802757,0.02869856171309948,0.00275843171402812,-0.004966536071151495,0.017121300101280212,0.02114344760775566,-0.019526435062289238,-0.02214898355305195,0.010075749829411507,-0.0027448434848338366,0.039107225835323334,0.0052960533648729324,-0.0025664966087788343,-0.008506297133862972,0.015395582653582096,-0.004803475923836231,0.010232015512883663,0.0032662958838045597,-0.000020873485482297838,-0.0020569341722875834,0.005547437351197004,-0.031062930822372437,-0.008540268056094646,-0.005982263945043087,-0.0007044702069833875,-0.020572736859321594,-0.005228111520409584,-0.016197293996810913,-0.01949925906956196,0.013853306882083416,0.003471819218248129,-0.03666132688522339,-0.003869278123602271,-0.02466282621026039,0.037721216678619385,0.004358458332717419,-0.002773718675598502,0.016659297049045563,0.012949681840837002,0.004728740081191063,0.003590717213228345,0.019988439977169037,0.014824872836470604,0.027122315019369125,-0.012249883264303207,0.002558003878220916,-0.03652544319629669,0.0019295434467494488,-0.0025614008773118258,0.010673636570572853,0.014471575617790222,-0.003101537236943841,0.0017027880530804396,-0.0010420553153380752,-0.002165640704333782,0.014131867326796055,0.036905914545059204,-0.0016153132310137153,0.01678159274160862,-0.014444398693740368,0.0018514104885980487,0.021374449133872986,-0.006192883010953665,0.0031440008897334337,0.05163566768169403,-0.002916396129876375,0.02026020549237728,0.004579268395900726,0.03234023600816727,0.0026242469903081656,-0.032802239060401917,0.02121138945221901,0.01039507519453764,0.029676921665668488,0.005394568666815758,0.04054758697748184,-0.00595508748665452,-0.012249883264303207,-0.03706897422671318,0.004983521532267332,0.04030299931764603,0.013955218717455864,-0.004069705959409475,-0.0036348793655633926,-0.009083800949156284,-0.011536495760083199,-0.11512036621570587,-0.01905084401369095,0.032041292637586594,0.03144340589642525,-0.029242094606161118,0.016482649371027946,0.014240574091672897,0.012779828161001205,-0.006233648397028446,0.02553248032927513,-0.018738312646746635,-0.02119780145585537,-0.015979880467057228,0.017841482535004616,-0.012623562477529049,-0.014621047303080559,-0.0004501135554164648,-0.01763765700161457,-0.0019346390618011355,0.017827894538640976,0.01945849508047104,-0.012766240164637566,0.00748717226088047,-0.003341031726449728,-0.0013460943009704351,-0.007446406874805689,-0.013629099354147911,0.011162816546857357,0.010028190910816193,-0.0011422693496569991,0.008003529161214828,-0.01941772922873497,0.01581682078540325,-0.007711379323154688,0.02421441115438938,-0.018670370802283287,0.001507455832324922,-0.023725230246782303,0.042558662593364716,0.004052720498293638,-0.006661680527031422,0.0030064189340919256,0.006631107069551945,0.007758938707411289,-0.0034786134492605925,-0.012942887842655182,-0.042966313660144806,0.022692518308758736,0.006787372753024101,0.011618025600910187,-0.013296185061335564,0.00009819694241741672,-0.04378161206841469,-0.0137106291949749,0.04098241403698921,-0.026755429804325104,0.014688989147543907,0.01634676568210125,-0.023589348420500755,0.0020654266700148582,0.024024173617362976,0.004806872922927141,0.019662318751215935,0.022284867241978645,0.0014097896637395024,-0.012501267716288567,-0.036009084433317184,0.007677408866584301,0.014756930992007256,-0.019105197861790657,-0.024907415732741356,-0.0011465157149359584,-0.012324619106948376,0.008818828500807285,-0.007222199346870184,0.0005562723963521421,0.007222199346870184,-0.02111627161502838,0.014661812223494053,0.005747865419834852,-0.023331169039011,-0.018792666494846344,0.015055874362587929,-0.03293812274932861,0.04557527229189873,0.018711136654019356,0.0053877742029726505,0.000517205975484103,0.008492709137499332,-0.01716206595301628,-0.006366134621202946,0.014009572565555573,-0.007738556247204542,0.008064676076173782,0.008336442522704601,-0.02343987673521042,-0.019675906747579575,0.004035735037177801,-0.023072991520166397,0.03147058188915253,-0.0387539267539978,0.009539010003209114,-0.06761554628610611,0.004439988173544407,0.0041274563409388065,-0.026266248896718025,-0.00022930314298719168,0.009634128771722317,0.002943572821095586,-0.029839981347322464,-0.010408664122223854,-0.017039770260453224,-0.030791165307164192,0.014770518988370895,-0.0305193979293108,0.004898594226688147,0.014621047303080559,-0.030682457610964775,0.0361177921295166,-0.0251112412661314,0.0005664636846631765,0.01543634757399559,0.01848013512790203,0.007222199346870184,0.008526679128408432,0.023589348420500755,-0.02390187978744507,-0.02736690454185009,-0.005160169675946236,0.015504289418458939,-0.006372928619384766,-0.006709239911288023,0.009661305695772171,-0.012773034162819386,0.008764475584030151,-0.003831910202279687,0.024975357577204704,-0.018874196335673332,0.018806254491209984,0.016863122582435608,0.01581682078540325,0.05125519633293152,-0.0193769633769989,-0.006699048448354006,0.009878719225525856,-0.04155312478542328,0.00796276330947876,-0.010429046116769314,0.011747114360332489,0.007657026406377554,0.02648366242647171,0.004949550610035658,0.056690528988838196,0.006488429382443428,-0.026279838755726814,-0.026171131059527397,-0.0013537377817556262,-0.029377978295087814,0.011550083756446838,-0.021442390978336334,-0.019662318751215935,-0.002141861245036125,0.04823858663439751,0.0168087687343359,0.03766686096787453,-0.009640922769904137,0.017297949641942978,-0.013846511952579021,-0.03263917937874794,0.013296185061335564,0.037367917597293854,-0.05701664835214615,-0.013928042724728584,-0.02690490148961544,-0.0035805259831249714,-0.0024289146531373262,0.014226986095309258,-0.020083557814359665,-0.006746607832610607,0.010218427516520023,-0.00796276330947876,0.012066440656781197,0.04106394574046135,0.010333928279578686,-0.008417973294854164,0.021795688197016716,0.006766990292817354,0.013955218717455864,0.015150992199778557,0.005982263945043087,0.0038590868934988976,-0.0058531747199594975,-0.04581986367702484,0.009314803406596184,0.015205346047878265,0.036851562559604645,-0.0026378354523330927,0.007860851474106312,0.011373435147106647,0.026130367070436478,0.038237571716308594,-0.020069969817996025,0.015368405729532242,0.017461009323596954,-0.0018004542216658592,-0.034704603254795074,-0.0028127850964665413,0.006716033909469843,-0.027937615290284157,-0.019295433536171913,0.004093485418707132,-0.007738556247204542,-0.023494228720664978,0.0035567465238273144,-0.025070475414395332,0.021958747878670692,0.016414707526564598,0.015341228805482388,0.018181191757321358,0.005048065911978483,-0.012236294336616993,0.029024681076407433,0.009335185401141644,0.026796193793416023,-0.011618025600910187,-0.005048065911978483,0.016401119530200958,0.005275670904666185,-0.0007019223994575441,-0.011740320362150669,0.0018378221429884434,-0.025804245844483376,0.001501510851085186,-0.010007807984948158,-0.028562678024172783,-0.021415214985609055,-0.0023083181586116552,-0.008615003898739815,-0.007901616394519806,0.006977609358727932,-0.016115764155983925,0.07555113732814789,0.010972579941153526,-0.014852048829197884,-0.004762711003422737,-0.014322103932499886,0.019716672599315643,-0.007256170269101858,0.020083557814359665,0.004317692946642637,-0.0494343601167202,0.008458738215267658,0.01497434452176094,0.005438730586320162,-0.023643700405955315,0.0037198064383119345,-0.0010998058132827282,-0.033237066119909286,0.0211570356041193,-0.02214898355305195,0.007025168742984533,0.04098241403698921,0.020599914714694023,-0.0025257316883653402,-0.006053602788597345,-0.012657533399760723,0.004817064385861158,0.028997505083680153,-0.008316060528159142,-0.006155515089631081,-0.04560244828462601,0.019621554762125015,0.012494472786784172,-0.0378299206495285,-0.04109112173318863,-0.01723000779747963,0.0012688107090070844,0.01762406900525093,-0.020069969817996025,0.03263917937874794,0.017447421327233315,0.014485163614153862,-0.003696026746183634,-0.013078771531581879,-0.016428295522928238,0.00015573504788335413,0.017406655475497246,-0.02861703187227249,-0.0013962013181298971,-0.026755429804325104],"e_chunks":[[-0.0040214573964476585,0.028695134446024895,0.009436284191906452,-0.014858009293675423,-0.013692270033061504,0.030460989102721214,-0.00990533921867609,0.005873535294085741,-0.02083156444132328,-0.038683246821165085,0.004059395752847195,-0.0017486097058281302,-0.0232734102755785,0.010484760627150536,0.013278397731482983,0.005587273743003607,0.010940019972622395,-0.03578614443540573,0.01078826654702425,0.008574050851166248,-0.005825250409543514,-0.003914540633559227,-0.006980643142014742,-0.013237010687589645,-0.014016469940543175,0.00243839668110013,0.02715001255273819,-0.0007708368357270956,-0.0032540697138756514,-0.0021417883690446615,0.026225697249174118,-0.020941929891705513,-0.032337211072444916,0.011015896685421467,0.00489403773099184,-0.02092813327908516,0.005718333180993795,-0.003942131996154785,0.008008426055312157,-0.02749490551650524,0.027784615755081177,-0.0061115119606256485,-0.008242953568696976,-0.019396807998418808,-0.017410220578312874,0.008394706062972546,-0.008849965408444405,-0.02141098491847515,-0.006308101117610931,0.00512166740372777,0.003481699386611581,0.0043870448134839535,-0.00844299141317606,-0.001729640644043684,-0.01600305549800396,-0.025397952646017075,-0.01607203483581543,0.010367496870458126,-0.017175693064928055,0.008918944746255875,0.008808578364551067,-0.010622718371450901,-0.009553547948598862,0.0010795164853334427,-0.014416545629501343,0.0040214573964476585,-0.009960522875189781,0.018306944519281387,-0.033661600202322006,-0.01709291897714138,0.01855526678264141,0.004538797773420811,-0.010967611335217953,-0.0016503151273354888,0.03208888694643974,-0.011885028332471848,-0.034544527530670166,-0.027191398665308952,-0.020141776651144028,-0.005939065013080835,8.507820894010365e-6,-0.00016781222075223923,0.005007852800190449,0.03995245695114136,0.010022603906691074,-0.006749564781785011,0.028667543083429337,0.028943458572030067,-0.014761439524590969,-0.02429429441690445,0.009367305785417557,0.00266775069758296,-0.0019158830400556326,0.005038893315941095,0.012091964483261108,0.006973745301365852,-0.01029851846396923,0.016458315774798393,-0.002566007198765874,0.00511476956307888,-0.026184309273958206,0.024859920144081116,0.005090627353638411,-0.00978807546198368,-0.0010407159570604563,-0.0043870448134839535,0.019176075235009193,-0.014347567223012447,0.027715636417269707,-0.001627897028811276,0.010215743444859982,0.034268613904714584,-0.0010924499947577715,-0.011257321573793888,-0.015423635020852089,0.016527293249964714,0.010305415838956833,-0.007118600886315107,0.01089173462241888,-0.02436327189207077,0.0180034376680851,0.01627897098660469,0.01767233945429325,0.01923125796020031,0.006177041679620743,-0.00575282284989953,-0.032337211072444916,-0.02001761458814144,-0.0013166307471692562,-0.025356566533446312,0.022749170660972595,0.02501167170703411,0.006863379385322332,0.015478817746043205,-0.005501050502061844,0.012643793597817421,-0.012629997916519642,0.0013925072271376848,-0.014292384497821331,-0.015492613427340984,0.004714693408459425,0.026349859312176704,-0.009187960997223854,-0.0007902370998635888,-0.005263073835521936,0.027881186455488205,0.029743609949946404,0.011174547486007214,-0.0008221397292800248,-0.0069116647355258465,0.017782706767320633,0.00030178175074979663,-0.014071652665734291,-0.001834833063185215,-0.017424017190933228,0.033247727900743484,-0.011491849087178707,0.02130061946809292,0.016196196898818016,0.009629424661397934,0.005845943931490183,0.02120404876768589,-0.01620999164879322,-0.007270353846251965,0.0004884553491137922,0.031040409579873085,0.027853595092892647,-0.00523203331977129,0.014802826568484306,-0.0012433408992365003,0.013112848624587059,0.022031793370842934,-0.03862806409597397,0.032778672873973846,-0.010795164853334427,0.017713727429509163,-0.010595127008855343,0.028364036232233047,-0.003326497273519635,0.00643916055560112,-0.003721400164067745,-0.007746306713670492,0.007104804739356041,0.06368112564086914,-0.020748790353536606,-0.0038283171597868204,0.004183557350188494,0.007656634319573641,0.03410306200385094,0.011698785237967968,0.014375158585608006,0.02833644486963749,0.0077118175104260445,-0.008891353383660316,-0.6017149090766907,-0.011954006738960743,0.008387808687984943,-0.03068172000348568,-0.004818161483854055,-0.004311168100684881,-0.0028126060497015715,0.04149758070707321,0.008705110289156437,0.017520586028695107,0.0026660263538360596,0.0302402563393116,0.014195813797414303,-0.011560828424990177,-0.007008234970271587,-0.010167459025979042,0.013788839802145958,-0.003247171873226762,0.0028988292906433344,0.00017675789422355592,-0.005100973881781101,0.020127981901168823,0.023452753201127052,-0.02079017646610737,0.008291237987577915,-0.019079504534602165,0.027370743453502655,-0.017920663580298424,-0.015575387515127659,0.013154235668480396,-0.031454283744096756,-0.026018761098384857,0.01073998212814331,0.017782706767320633,0.055817555636167526,-0.018362127244472504,-0.0037282980047166348,0.01489939633756876,-0.005690741818398237,0.04050428420305252,-0.00577696505934,-0.015023558400571346,0.0031523259822279215,-0.0038800511974841356,-0.0017270538955926895,-0.024308089166879654,0.039262671023607254,-0.019921045750379562,-0.01167119387537241,0.0028626155108213425,0.00488369120284915,-0.010808960534632206,-0.0046112253330647945,-0.0005039755487814546,-0.020307326689362526,-0.01583750732243061,0.04530520364642143,-0.0056321099400520325,0.0014804551610723138,-0.002157308394089341,0.004452574532479048,0.012609303928911686,-0.007815285585820675,-0.004918180406093597,-0.019451990723609924,0.009298327378928661,-0.0322820246219635,0.000855766877066344,0.009367305785417557,-0.0027608720120042562,0.029578061774373055,0.012816240079700947,-0.025397952646017075,-0.01769993081688881,0.008912046439945698,0.029605653136968613,0.014485524967312813,-0.002391836140304804,0.00699099013581872,0.014775235205888748,-0.015506409108638763,0.016196196898818016,-0.01488560065627098,-0.017148101702332497,0.03349605202674866,-0.0028591665904968977,-0.03388233110308647,-0.009519059211015701,0.014030265621840954,0.0028626155108213425,-0.0006665065884590149,0.008532663807272911,-0.010546841658651829,-0.012733465991914272,0.012478244490921497,0.022707784548401833,0.013050767593085766,0.02548072673380375,0.01739642582833767,-0.006404671352356672,-0.015809915959835052,-0.024887511506676674,0.011202138848602772,-0.008532663807272911,0.04765047878026962,-0.0072220684960484505,-0.02670854888856411,0.01667904667556286,0.01902432180941105,-0.01576852798461914,-0.022266320884227753,-0.019217463210225105,-0.020362509414553642,-0.013112848624587059,0.006352937314659357,-0.028419218957424164,0.03893157094717026,0.019107095897197723,0.040449101477861404,-0.020431486889719963,0.014375158585608006,-0.0019055362790822983,-0.016527293249964714,-0.0014459657249972224,-0.005859739612787962,0.005059586837887764,-0.011140057817101479,-0.015423635020852089,-0.028115713968873024,-0.004566389136016369,-0.027439722791314125,-0.013292193412780762,0.00543552078306675,-0.007746306713670492,0.048340264707803726,0.03313736245036125,0.017686136066913605,0.005590722896158695,0.009594935923814774,-0.03203370422124863,0.00878098700195551,0.026653366163372993,0.0027298314962536097,-0.02083156444132328,0.010560637339949608,-0.005087178200483322,-0.033082179725170135,-0.026667160913348198,0.023742465302348137,-0.007046172861009836,-0.0019245054572820663,0.0005582962767221034,-0.004725039936602116,0.007684225682169199,-0.005825250409543514,-0.006739217787981033,-0.008511969819664955,0.0042766788974404335,-0.0104502709582448,0.0002929438778664917,0.004293923266232014,0.006639198865741491,-0.019079504534602165,0.016527293249964714,-0.011043488048017025,-0.009125880897045135,-0.0203901007771492,0.024777144193649292,0.02045907825231552,-0.015437430702149868,-0.011581521481275558,0.021493759006261826,-0.04050428420305252,-0.024818532168865204,0.02341136708855629,0.015092536807060242,-0.011340096592903137,-0.010270927101373672,-0.006928909104317427,0.017437811940908432,0.021797265857458115,-0.009615628980100155,-0.006725422106683254,-0.001908985199406743,0.029688427224755287,0.02490130625665188,0.030323032289743423,0.0222525242716074,-0.009629424661397934,-0.01396818459033966,-0.009712199680507183,0.03774513676762581,-0.01583750732243061,0.02092813327908516,-0.02745351754128933,0.017755113542079926,0.0005526917520910501,-0.0007622145349159837,0.02715001255273819,0.022128364071249962,0.02294231206178665,-0.01299558486789465,0.026308471336960793,-0.04265642166137695,-0.015037354081869125,-0.02847440354526043,0.016472110524773598,-0.01672043465077877,0.002397009404376149,0.0027884633745998144,0.004673306364566088,-0.007684225682169199,-0.03275107964873314,0.010526147671043873,0.01111246645450592,0.04977502301335335,-0.006094267126172781,0.0017744767246767879,-0.010774470865726471,-0.002038320293650031,-0.008932740427553654,0.011071079410612583,0.0023194083478301764,0.0015994433779269457,-0.014609686098992825,0.03181296959519386,0.012816240079700947,-0.0021555840503424406,0.005904575809836388,-0.03564818575978279,-0.012892116792500019,0.008056710474193096,0.005438969470560551,0.003091969760134816,0.016127217561006546,0.02561868540942669,0.012767955660820007,0.004373248666524887,0.02083156444132328,-0.015589183196425438,0.0015097711002454162,0.012133351527154446,0.008394706062972546,-0.009732892736792564,0.03197852149605751,0.020500466227531433,0.025342769920825958,0.016596272587776184,-0.03901434689760208,-0.010664105415344238,-0.007532472722232342,0.03319254517555237,-0.014720052480697632,-0.009174165315926075,0.020334918051958084,-0.002257327549159527,0.011760866269469261,0.016389336436986923,-0.0029867771081626415,0.011202138848602772,0.0004940598737448454,-0.011933312751352787,0.019314032047986984,-0.0003925318596884608,0.0024539169389754534,-0.03374437615275383,-0.014182018116116524,-0.02361830323934555,-0.026239493861794472,0.008863761089742184,0.011395279318094254,-0.009939828887581825,-0.005873535294085741,-0.020141776651144028,0.014913192018866539,0.020583240315318108,-0.02392181009054184,0.007642838638275862,0.01277485303580761,-0.02310786023736,-0.03730367496609688,-0.01199539378285408,0.022928515449166298,0.001738262944854796,-0.012429960072040558,-0.053637828677892685,-0.01702393963932991,0.00997431855648756,-0.0017632676754146814,-0.01783788949251175,-0.026156717911362648,-0.023701077327132225,-0.0027022401336580515,0.007180681452155113,0.008718905970454216,-0.02687409706413746,0.03578614443540573,-0.02273537591099739,-0.0063218967989087105,-0.021148866042494774,0.0027746676933020353,0.023259613662958145,-0.03346845880150795,-0.03697257861495018,0.01913468912243843,0.016554884612560272,0.0031402548775076866,-0.007580758072435856,0.000892411801032722,-0.0010657206876203418,0.004631918855011463,0.000013492608559317887,0.0009260388906113803,-0.05661770701408386,0.013699167408049107,-0.0045870826579630375,-0.007104804739356041,-0.0017744767246767879,0.014444136992096901,0.0021228191908448935,-0.0090913912281394,-0.02103850059211254,0.0072220684960484505,0.012885219417512417,0.040725018829107285,0.02045907825231552,0.033247727900743484,0.0034851483069360256,-0.004525002092123032,-0.032061293721199036,-0.014623481780290604,0.009408692829310894,0.02085915580391884,0.0010174356866627932,0.01834833063185215,0.011912619695067406,-0.01162290945649147,0.00542862294241786,0.01862424612045288,0.006856481544673443,-0.010167459025979042,-0.027274172753095627,-0.0036110342480242252,-0.0039041938725858927,0.019424399361014366,-0.007097906898707151,-0.008146382868289948,0.02429429441690445,0.013616393320262432,0.03562059625983238,0.005883882287889719,0.003928336314857006,0.021424781531095505,-0.010691696777939796,0.006280509755015373,0.0057459245435893536,0.013457742519676685,-0.012119555845856667,-0.020472874864935875,0.03537227213382721,0.004897486884146929,0.004121476784348488,0.01586509868502617,0.01906570978462696,0.025191016495227814,-0.00032678653951734304,-0.008587846532464027,-0.00029703948530368507,-0.0017210182268172503,0.006025288254022598,-0.01981067843735218,0.0019158830400556326,0.005845943931490183,-0.001531326910480857,0.030047116801142693,0.00029100384563207626,-0.011809151619672775,0.0006984092178754508,0.016803208738565445,0.007518677040934563,-0.0023383775260299444,0.0006703866529278457,0.012409266084432602,-0.02979879267513752,-0.01467866450548172,-0.024321885779500008,-0.008070506155490875,-0.02280435524880886,-0.0033885780721902847,-0.04593980684876442,-0.012850729748606682,-0.010284722782671452,-0.024101153016090393,-0.02735694870352745,-0.005059586837887764,-0.007891162298619747,-0.019258849322795868,-0.0024832328781485558,0.012733465991914272,0.0036593193653970957,0.015037354081869125,0.021907631307840347,-0.010408883914351463,0.03813141956925392,0.009367305785417557,-0.01343704853206873,-0.003431689692661166,-0.020196959376335144,0.014761439524590969,0.023356184363365173,0.002400458324700594,0.0049664657562971115,0.007325536571443081,-0.0007031515124253929,-0.012029883451759815,0.0003938252048101276,-0.00954665057361126,-0.011864334344863892,0.006697830744087696,0.03181296959519386,0.026253288611769676,0.010802062228322029,0.007822182960808277,-0.0033385686110705137,-0.005138912238180637,-0.03208888694643974,0.0031850908417254686,0.0021762775722891092,-0.011781560257077217,0.016568681225180626,0.00036170700332149863,0.006953051779419184,-0.029246963560581207,-0.01967272162437439,0.007525574881583452,-0.011146956123411655,0.012354083359241486,-0.012416164390742779,0.011167650111019611,0.029109006747603416,0.002346999943256378,0.004780223127454519,0.004287025425583124,-0.015989260748028755,-0.020845359191298485,0.005038893315941095,0.01277485303580761,0.0112987095490098,-0.00575972069054842,0.019217463210225105,-0.011174547486007214,-0.017134306952357292,-0.0009406968601979315,0.008891353383660316,-0.012381674721837044,0.010677901096642017,0.011926415376365185,-0.01330598909407854,0.014071652665734291,-0.015754733234643936,0.003990417346358299,-0.00227284780703485,-0.022956106811761856,0.019824475049972534,-0.03752440586686134,-0.004411187022924423,-0.001867598039098084,0.006008043885231018,-0.022887129336595535,-0.033799558877944946,-0.050989046692848206,0.012154044583439827,0.01034680288285017,0.01352672092616558,-0.00009236677578883246,-0.0035299845039844513,-0.02294231206178665,-0.007842876948416233,-0.017065327614545822,-0.012974890880286694,0.00985705479979515,-0.02092813327908516,0.004783672280609608,0.019686518236994743,0.00910518690943718,0.0035593004431575537,0.012899015098810196,-0.00011995824752375484,0.0014476901851594448,-0.023052677512168884,0.01763095334172249,-0.016527293249964714,-0.013733657076954842,-0.008684417232871056,0.007422106806188822,0.032199252396821976,-0.012326491996645927,-0.00910518690943718,-0.019245054572820663,0.020265938714146614,0.005580375902354717,0.017644748091697693,-0.010898632928729057,-0.05545886605978012,-0.03081967867910862,-0.004759529605507851,-0.018941547721624374,0.03051617182791233,-0.026556795462965965,-0.006339141633361578,-0.0040559470653533936,-0.024997876957058907,0.025466931983828545,0.007973936386406422,0.01641692779958248,-0.022418074309825897,0.0219214279204607,0.01736883446574211,0.016899779438972473,-0.004004213027656078,-0.018596654757857323,-0.025853212922811508,0.005380337592214346,0.004535348620265722,-0.0038559087552130222,0.03123355098068714,-0.006670239381492138,0.016637660562992096,-0.019341623410582542,-0.005514846183359623,-0.016168605536222458,-0.01974170096218586,-0.008698212914168835,-0.0009320745011791587,-0.01576852798461914,-0.04662959277629852,-0.03081967867910862,0.005035444162786007,-0.019258849322795868,-0.003183366497978568,0.0026522306725382805,0.007842876948416233,-0.015437430702149868,-0.0122299212962389,0.012036780826747417,0.004452574532479048,0.024321885779500008,0.0108710415661335,0.0062356735579669476,-0.0033144259359687567,0.00767043000087142,-0.0004386613436508924,0.001590820960700512,0.0005074244691058993,-0.007297945208847523,0.024928897619247437,0.014092345722019672,-0.016472110524773598,-0.0224318690598011,-0.00998811423778534,0.005483805667608976,-0.02415633760392666,-0.03402028977870941,0.019990023225545883,0.016830800101161003,0.010760675184428692,-0.021010909229516983,-0.000782045884989202,-0.021866245195269585,0.03435138612985611,-0.012236819602549076,0.005849392618983984,0.005583825055509806,-0.007815285585820675,-0.024487433955073357,0.03551022708415985,-0.001761543215252459,0.014664868824183941,-0.029716018587350845,0.009615628980100155,-0.004183557350188494,0.017286058515310287,-0.0061115119606256485,-0.0011872956529259682,0.005080280359834433,0.029384922236204147,-0.019410602748394012,-0.0010984856635332108,0.0366966612637043,0.010119173675775528,-0.013043870218098164,-0.010884837247431278,0.005680394824594259,0.04185626655817032,-0.014995967037975788,0.0006268438301049173,-0.003126458963379264,0.0045870826579630375,0.014871804974973202,-0.02052805759012699,0.002731556072831154,0.0039938660338521,-0.030405806377530098,-0.004231842700392008,0.021728286519646645,-0.000795841624494642,0.003973172511905432,-0.019176075235009193,-0.006897869054228067,-0.019451990723609924,-0.038517698645591736,0.0033420175313949585,0.021976610645651817,-0.034875623881816864,-0.01760336197912693,-0.014830417931079865,-0.021259231492877007,0.001756369834765792,0.03672425448894501,-0.01841730996966362,0.0009863952873274684,0.06059088185429573,-0.03539986163377762,0.008794782683253288,0.009394897148013115,0.0005789898568764329,-0.03390992432832718,-0.006487445440143347,-0.0057321288622915745,-0.0057424758560955524,0.001338186557404697,-0.007794591598212719,-0.01122973021119833,-0.010808960534632206,0.024280497804284096,0.0036903598811477423,0.009229348972439766,0.015368451364338398,0.01233338937163353,0.010622718371450901,-0.01892775297164917,-0.01920366659760475,0.007297945208847523,0.014775235205888748,0.009967420250177383,0.004493961576372385,0.002967808162793517,0.00004707256448455155,0.006363283842802048,-0.013706065714359283,0.01540983933955431,-0.009712199680507183,-0.017989642918109894,-0.03010229952633381,0.013954388909041882,-0.04392562806606293,-0.028501994907855988,-0.006501241587102413,-0.0005880433018319309,-0.036034468561410904,-0.004124925471842289,-0.002074534073472023,0.04869895428419113,0.026142923161387444,0.009387999773025513,0.036613889038562775,0.03476525843143463,0.0007441075867973268,-0.004493961576372385,-0.003057480324059725,-0.01872081682085991,-0.01024333480745554,-0.0366966612637043,-0.017893072217702866,0.004062844906002283,0.05361023545265198,0.02443225122988224,-0.014264793135225773,-0.036751843988895416,-0.012140248902142048,-0.03854529187083244,-0.010795164853334427,-0.004114578943699598,0.013712963089346886,-0.005259625148028135,0.023452753201127052,-0.0004332723910920322,0.03385474160313606,0.015009762719273567,0.04605017229914665,-0.02654299885034561,-0.016458315774798393,0.01725846715271473,0.0030505824834108353,0.0039041938725858927,0.002278021303936839,-0.04842304065823555,-0.01518910750746727,0.029991934075951576,0.010105377994477749,0.006370181683450937,0.019341623410582542,0.0050423420034348965,-0.016127217561006546,-0.029302146285772324,-0.0017201560549438,-0.0011062456760555506,-0.023466549813747406,-0.004356004297733307,-0.03275107964873314,-0.017010144889354706,0.0333029106259346,0.006052880082279444,-0.004493961576372385,-0.008484378457069397,0.03217165917158127,0.02487371489405632,-0.022776763886213303,-0.010015705600380898,-0.018058620393276215,0.0033402929548174143,-0.01760336197912693,0.012374776415526867,-0.03437897935509682,-0.014982171356678009,0.03079208731651306,-0.016292765736579895,0.01797584630548954,0.011284913867712021,0.016775617375969887,-0.040559470653533936,-0.013430150225758553,0.008456787094473839,0.008229157887399197,-0.004642265848815441,0.004459472373127937,-0.0020831564906984568,-0.014009571634232998,-0.019383011385798454,-0.01085724588483572,-0.013575006276369095,-0.009491467848420143,0.01716189831495285,0.026142923161387444,-0.030019525438547134,-0.01540983933955431,-0.017451608553528786,0.0016770443180575967,-0.01712051033973694,-0.029964342713356018,-0.00876719132065773,-0.015423635020852089,-0.005442418623715639,-0.025715254247188568,0.013568107970058918,-0.006359835155308247,0.01644451916217804,0.02847440354526043,-0.005528641864657402,-0.01899673044681549,0.2079293578863144,0.009305224753916264,0.025328975170850754,0.02266639657318592,-0.024446047842502594,0.01073998212814331,0.00844299141317606,0.009932931512594223,0.001711533754132688,0.019658926874399185,-0.013754350133240223,-0.00039899861440062523,-0.006246020086109638,-0.0013226662995293736,0.01042957790195942,-0.0038248682394623756,-0.039676543325185776,-0.029853977262973785,-0.01561677549034357,-0.003973172511905432,0.008912046439945698,-0.013140439987182617,-0.0019262299174442887,-0.0173274464905262,0.011802253313362598,0.02392181009054184,-0.017713727429509163,0.010305415838956833,0.039869681000709534,0.024390865117311478,-0.0155477961525321,-0.010022603906691074,-0.00012200605851830915,-0.006152899004518986,0.004245638381689787,0.013781942427158356,0.0516512431204319,-0.02280435524880886,-0.007739408873021603,0.009608731605112553,0.007891162298619747,0.0024953039828687906,0.0007699746056459844,-0.0246391873806715,0.020803973078727722,-0.00521478895097971,-0.006970296613872051,-0.011802253313362598,0.016527293249964714,0.00332994619384408,-0.035427454859018326,0.006170143838971853,0.01876220293343067,0.0020762584172189236,-0.020817767828702927,-0.0017555076628923416,-0.008049813099205494,0.0349859893321991,0.01658247597515583,0.01705153100192547,0.006684035062789917,0.019396807998418808,-0.010457169264554977,0.04064224287867546,-0.027481108903884888,0.010574433021247387,-0.00589422881603241,-0.009250042028725147,0.01623758301138878,0.004093884956091642,-0.014471729286015034,-0.020362509414553642,0.007373821921646595,-0.004128374624997377,-0.006214980036020279,-0.030709311366081238,0.002184899989515543,0.027481108903884888,0.01556159183382988,0.05090627074241638,-0.009394897148013115,0.016665251925587654,-0.02041769213974476,0.017548179253935814,-0.01036059856414795,-0.02232150360941887,0.02303888276219368,-0.016527293249964714,0.002022800035774708,-0.0018175884615629911,0.0017098092939704657,-0.00767043000087142,0.0035041174851357937,-0.0017201560549438,0.012278206646442413,0.019727904349565506,-0.010112275369465351,0.008098098449409008,-0.013409457169473171,0.007911855354905128,-0.030598945915699005,0.06224636733531952,0.03727608174085617,0.00010680918785510585,-0.03622760623693466,-0.03658629581332207,0.0062356735579669476,0.018458697944879532,-0.0016080656787380576,-0.017893072217702866,-0.020403895527124405,-0.022073179483413696,0.03451693430542946,-0.008180872537195683,0.014568299055099487,0.019769292324781418,0.02385283075273037,-0.005801107734441757,-0.021824857220053673,0.0013597423676401377,-0.024680575355887413,-0.030047116801142693,-0.01620999164879322,-0.0022849191445857286,-0.028253670781850815,-0.006628851871937513,-0.03435138612985611,0.007304843049496412,-0.023397570475935936,-0.029467696323990822,0.025135833770036697,0.010395088233053684,-0.0007596277864649892,-0.0097673824056983,0.006428813561797142,0.012464448809623718,0.015782324597239494,-0.01474764384329319,-0.025742847472429276,0.01031231414526701,0.022100772708654404,-0.005514846183359623,-0.007097906898707151,0.024321885779500008,0.019355420023202896,-0.006442609708756208,0.02320443093776703,-0.0005945100565440953,0.007360026240348816,0.0005319981137290597,-0.02647402137517929,-0.023438958451151848,0.001591683248989284,-0.007284149527549744,-0.0290538240224123,-0.01783788949251175,0.012526529841125011,-0.022790558636188507,0.01899673044681549,-0.01776891015470028,-0.036889802664518356,0.0074910856783390045,0.010850347578525543,-0.0032161313574761152,-0.0290538240224123,-0.020031411200761795,-0.17481958866119385,0.017217081040143967,0.015920281410217285,-0.015727141872048378,0.029881568625569344,0.0027436274103820324,0.0023607956245541573,0.006039084400981665,0.021148866042494774,-0.008622336201369762,0.007353128399699926,-0.015685753896832466,-0.0017813746817409992,-0.013940593227744102,-0.008525765500962734,0.002728107152506709,0.0027384539134800434,0.015437430702149868,0.06003905087709427,-0.0021004010923206806,0.04003522917628288,-0.02793636918067932,0.018431104719638824,-0.017920663580298424,-0.0008165352046489716,-0.0031005919445306063,-0.016196196898818016,-0.009118982590734959,-0.032502759248018265,-0.027274172753095627,-0.00856025516986847,0.005549335386604071,0.015740936622023582,-0.014292384497821331,0.02749490551650524,0.009408692829310894,0.027205195277929306,0.007546268403530121,0.01841730996966362,0.03275107964873314,0.033247727900743484,0.0315922386944294,0.006997887976467609,-0.0049319760873913765,0.01330598909407854,0.009243144653737545,-0.004428431857377291,-0.03570336848497391,-0.0001043841548380442,0.0038662555161863565,0.027025850489735603,0.005304461345076561,0.004852650687098503,-0.011581521481275558,0.023963196203112602,-0.0009674261091277003,-0.0017520587425678968,0.008615437895059586,0.009629424661397934,-0.0034748015459626913,0.007870468311011791,-0.017355037853121758,-0.006049430929124355,-0.01430618017911911,0.005000954959541559,-0.013830226846039295,-0.005939065013080835,-0.0051768505945801735,-0.03123355098068714,0.015465022064745426,0.007629042956978083,-0.03175778687000275,0.007215170655399561,-0.0016606618883088231,0.02966083586215973,0.0060770222917199135,-0.007401413284242153,0.007053070701658726,0.011160751804709435,-0.00575972069054842,-0.010374395176768303,0.01811380311846733,0.021010909229516983,0.022114567458629608,-0.024321885779500008,0.002336653182283044,-0.03346845880150795,0.005283767357468605,-0.000017365924577461556,0.0009234522003680468,0.007277251686900854,-0.0041318233124911785,-0.0004084831743966788,-0.01118144579231739,-0.0006203770753927529,0.013906103558838367,0.03051617182791233,-0.0050561376847326756,0.015851302072405815,-0.014050958678126335,0.007180681452155113,0.008367114700376987,-0.008836169727146626,0.00216248189099133,0.046464044600725174,-0.0025194466579705477,0.01167119387537241,-0.015147720463573933,0.03286144882440567,-0.004245638381689787,-0.0397593155503273,0.027977755293250084,0.015258085913956165,0.02324581891298294,-0.009981215931475163,0.038103826344013214,0.012257512658834457,-0.021617921069264412,-0.018900159746408463,-0.0033609867095947266,0.049554288387298584,0.0007466942770406604,-0.007932549342513084,-0.006059777922928333,-0.005525193177163601,-0.01705153100192547,-0.10247474163770676,-0.029412513598799706,0.02354932390153408,0.008511969819664955,-0.008070506155490875,0.029329737648367882,0.006639198865741491,0.005928718484938145,0.008374013006687164,0.02331479638814926,-0.026860300451517105,-0.017920663580298424,-0.01097450964152813,0.018155191093683243,-0.003976621199399233,-0.009670811705291271,0.007208272814750671,-0.017644748091697693,-0.01736883446574211,0.017341243103146553,0.014913192018866539,-0.01883118227124214,-0.016596272587776184,0.005466561298817396,-0.007787693757563829,-0.01709291897714138,-0.02480473555624485,0.02079017646610737,-0.008036017417907715,-0.0037558896001428366,-0.000551829522009939,-0.021010909229516983,0.017286058515310287,-0.012091964483261108,0.018237965181469917,-0.001218336052261293,0.007870468311011791,-0.004304270260035992,0.0445050485432148,-0.011098670773208141,-0.01674802601337433,0.004383595660328865,0.015299472957849503,-0.012912810780107975,-0.012340287677943707,-0.0013131818268448114,-0.028115713968873024,0.036751843988895416,-0.003986968193203211,-0.017644748091697693,-0.030874861404299736,-0.009470773860812187,-0.01561677549034357,-0.013561210595071316,0.037193309515714645,-0.01331978477537632,-0.0009803596185520291,0.02452882193028927,-0.03079208731651306,-0.012843831442296505,0.01620999164879322,-0.009284531697630882,0.009270736016333103,0.020569445565342903,0.016775617375969887,-0.021990405395627022,-0.023742465302348137,0.02062462829053402,0.017824092879891396,-0.020072799175977707,-0.0326131246984005,0.010167459025979042,-0.010981407016515732,0.009946727193892002,-0.005332052707672119,-0.005914922337979078,0.007291047368198633,-0.009139676578342915,0.01630656234920025,0.009167267940938473,-0.01827935315668583,-0.010829654522240162,0.019962431862950325,-0.009774279780685902,0.034268613904714584,0.004797467961907387,0.01374745275825262,0.0018175884615629911,0.014816622249782085,-0.04676755145192146,-0.003078174078837037,-0.0022280116099864244,-0.0075669619254767895,-0.008656825870275497,0.01009158231317997,-0.001711533754132688,0.014002673327922821,-0.015216698870062828,-0.0048078144900500774,0.022418074309825897,-0.06301893293857574,-0.0011114191729575396,-0.06152899190783501,0.021024703979492188,0.014816622249782085,-0.029440104961395264,0.003492046147584915,-0.001545122591778636,-0.011484951712191105,-0.02341136708855629,0.008394706062972546,-0.02313545159995556,-0.04039391875267029,0.0015028731431812048,-0.010560637339949608,-0.0028815846890211105,0.022914720699191093,-0.024073561653494835,0.03562059625983238,-0.020169368013739586,0.007615247275680304,-0.0023797648027539253,0.004635368008166552,-0.0014839040813967586,0.0027884633745998144,0.02181106060743332,-0.020514262840151787,-0.010422679595649242,-0.010105377994477749,0.009160369634628296,-0.003959376830607653,-0.004456023219972849,0.00575972069054842,-0.026722343638539314,0.008084302768111229,-0.006121858488768339,0.005466561298817396,-0.008587846532464027,0.012002292089164257,0.024915102869272232,0.017010144889354706,0.03826937824487686,-0.04389803856611252,-0.011829844675958157,0.01496837567538023,-0.032061293721199036,0.0073669240809977055,-0.012409266084432602,-0.006818543188273907,-0.010912428610026836,0.025880804285407066,0.007291047368198633,0.05860429257154465,0.0210660919547081,-0.03418583795428276,-0.036779437214136124,-0.0029143495485186577,-0.03021266497671604,0.002417702926322818,-0.005256175994873047,-0.015823710709810257,0.0012683456297963858,0.05223066359758377,0.020652219653129578,0.02181106060743332,-0.010498556308448315,0.02338377572596073,-0.011574624106287956,-0.04977502301335335,0.014002673327922821,0.02701205387711525,-0.05269971862435341,-0.006697830744087696,-0.008091200143098831,-0.0028108814731240273,0.008374013006687164,0.0035299845039844513,-0.021452372893691063,-0.018886364996433258,0.012843831442296505,-0.0225974190980196,-0.002322857268154621,0.03313736245036125,-0.018513880670070648,-0.012126453220844269,0.006059777922928333,0.006204633042216301,0.012154044583439827,-0.0011303882347419858,0.015782324597239494,-0.008553357794880867,-0.0012666211696341634,-0.049223192036151886,-0.004159415140748024,0.005911473650485277,0.03937303647398949,0.014168222434818745,0.00044275695108808577,0.007532472722232342,0.032226841896772385,0.023397570475935936,-0.03275107964873314,0.015685753896832466,0.005914922337979078,-0.004273229744285345,-0.03564818575978279,-0.006590913515537977,0.007325536571443081,-0.03051617182791233,-0.03139909729361534,0.01255412120372057,-0.0024435699451714754,-0.017286058515310287,-0.006956500932574272,-0.028667543083429337,0.023935604840517044,0.011319402605295181,0.00332994619384408,0.00599769689142704,-0.0014330322155728936,-0.018058620393276215,0.03112318366765976,0.010333007201552391,0.007042724173516035,0.01604444347321987,-0.003326497273519635,0.016458315774798393,-0.0004054653400089592,-0.0028539933264255524,-0.012236819602549076,0.002160757314413786,-0.0203901007771492,0.0018003437435254455,-0.0010846898658201098,-0.03482044115662575,-0.022197341546416283,0.00523203331977129,-0.003817970398813486,0.01029851846396923,-0.012160942889750004,-0.0050561376847326756,0.09077595174312592,0.018058620393276215,-0.02452882193028927,0.0017322272760793567,-0.002303888089954853,0.022445665672421455,-0.02993675135076046,0.03371678292751312,-0.008808578364551067,-0.058935392647981644,0.004573286976665258,0.013637086376547813,-0.0036593193653970957,-0.025660071521997452,-0.0009441457805223763,0.005145810078829527,-0.03407547250390053,0.024915102869272232,-0.0029333187267184258,-0.004780223127454519,0.04022837057709694,-0.00030760184745304286,-0.0010139867663383484,0.0008346421527676284,-0.015727141872048378,0.001848628860898316,0.03493080660700798,-0.00383521500043571,0.010705492459237576,-0.03446175158023834,0.013416354544460773,0.006718524266034365,-0.0455259345471859,-0.03007470816373825,-0.025646276772022247,0.015920281410217285,0.01561677549034357,-0.027163807302713394,0.008180872537195683,0.0112987095490098,0.027950163930654526,-0.0028091571293771267,-0.02775702439248562,-0.01364398468285799,0.00920865498483181,0.014416545629501343,-0.029136598110198975,-0.003188539994880557,-0.03608965128660202]],"metadata":{"location":"https://docs.libp2p.io/guides/getting-started/go/","source_type":"webpage"}},{"raw_content":"Skip to Main Content\nWhy Go\nCase Studies\nCommon problems companies solve with Go\nUse Cases\nStories about how and why companies use Go\nSecurity Policy\nHow Go can help keep you secure by default\nLearn\nDocs\nEffective Go\nTips for writing clear, performant, and idiomatic Go code\nGo User Manual\nA complete introduction to building software with Go\nStandard library\nReference documentation for Go's standard library\nRelease Notes\nLearn what's new in each Go release\nPackages\nCommunity\nRecorded Talks\nVideos from prior events\nMeetups\nMeet other local Go developers\nConferences\nLearn and network with Go developers from around the world\nGo blog\nThe Go project's official blog.\nGo project\nGet help and stay informed from Go\nGet connected\nWhy Go\nWhy Go\nCase Studies\nUse Cases\nSecurity Policy\nLearn\nDocs\nDocs\nEffective Go\nGo User Manual\nStandard library\nRelease Notes\nPackages\nCommunity\nCommunity\nRecorded Talks\nMeetups\nConferences\nGo blog\nGo project\nGet connected\nDiscover Packages\ngithub.com/libp2p/go-libp2p-pubsub\npubsub\npackage\nmodule\nVersion:\nv0.10.0\nOpens a new window with list of versions in this module.\nLatest\nLatest\nThis package is not in the latest version of its module.\nGo to latest\nPublished: Nov\n1, 2023\nLicense: Apache-2.0, MIT, Apache-2.0, + 1 more\nOpens a new window with license information.\nImports: 37\nOpens a new window with list of imports.\nImported by: 631\nOpens a new window with list of known importers.\nMain\nVersions\nLicenses\nImports\nImported By\nDetails\nValid go.mod file\nThe Go module system was introduced in Go 1.11 and is the official dependency management\nsolution for Go.\nRedistributable license\nRedistributable licenses place minimal restrictions on how software can be used,\nmodified, and redistributed.\nTagged version\nModules with tagged versions give importers more predictable builds.\nStable version\nWhen a project reaches major version v1 it is considered stable.\nLearn more about best practices\nRepository\ngithub.com/libp2p/go-libp2p-pubsub\nLinks\nOpen Source Insights\nJump to ...\nREADME\nRepo Lead Maintainer\nTable of Contents\nInstall\nUsage\nExample\nDocumentation\nIn this repo, you will find\nTracing\nContribute\nLicense\nDocumentation\nOverview\nIndex\nConstants\nVariables\nFunctions\nDefaultMsgIdFn(pmsg)\nDefaultPeerFilter(pid, topic)\nFilterSubscriptions(subs, filter)\nGossipSubDefaultFeatures(feat, proto)\nScoreParameterDecay(decay)\nScoreParameterDecayWithBase(decay, base, decayToZero)\nTypes\ntype AcceptStatus\ntype BackoffConnectorFactory\ntype BasicSeqnoValidator\ntype Blacklist\nNewMapBlacklist()\nNewTimeCachedBlacklist(expiry)\ntype CacheEntry\ntype DiscoverOpt\nWithDiscoverConnector(connFactory)\nWithDiscoveryOpts(opts)\ntype EventTracer\ntype EventType\ntype ExtendedPeerScoreInspectFn\ntype FloodSubRouter\n(fs) AcceptFrom()\n(fs) AddPeer(p, proto)\n(fs) Attach(p)\n(fs) EnoughPeers(topic, suggested)\n(fs) HandleRPC(rpc)\n(fs) Join(topic)\n(fs) Leave(topic)\n(fs) Protocols()\n(fs) Publish(msg)\n(fs) RemovePeer(p)\ntype GossipSubFeature\ntype GossipSubFeatureTest\ntype GossipSubParams\nDefaultGossipSubParams()\ntype GossipSubRouter\nDefaultGossipSubRouter(h)\n(gs) AcceptFrom(p)\n(gs) AddPeer(p, proto)\n(gs) Attach(p)\n(gs) EnoughPeers(topic, suggested)\n(gs) HandleRPC(rpc)\n(gs) Join(topic)\n(gs) Leave(topic)\n(gs) Protocols()\n(gs) Publish(msg)\n(gs) RemovePeer(p)\n(gs) WithDefaultTagTracer()\ntype JSONTracer\nNewJSONTracer(file)\nOpenJSONTracer(file, flags, perm)\n(t) Close()\n(t) Trace(evt)\ntype MapBlacklist\n(b) Add(p)\n(b) Contains(p)\ntype Message\n(m) GetFrom()\ntype MessageCache\nNewMessageCache(gossip, history)\n(mc) Get(mid)\n(mc) GetForPeer(mid, p)\n(mc) GetGossipIDs(topic)\n(mc) Put(msg)\n(mc) SetMsgIdFn(msgID)\n(mc) Shift()\ntype MessageSignaturePolicy\ntype MsgIdFunction\ntype Option\nWithAppSpecificRpcInspector(inspector)\nWithBlacklist(b)\nWithDefaultValidator(val, opts)\nWithDirectConnectTicks(t)\nWithDirectPeers(pis)\nWithDiscovery(d, opts)\nWithEventTracer(tracer)\nWithFloodPublish(floodPublish)\nWithGossipSubParams(cfg)\nWithGossipSubProtocols(protos, feature)\nWithMaxMessageSize(maxMessageSize)\nWithMessageAuthor(author)\nWithMessageIdFn(fn)\nWithMessageSignaturePolicy(policy)\nWithMessageSigning(enabled)\nWithNoAuthor()\nWithPeerExchange(doPX)\nWithPeerFilter(filter)\nWithPeerGater(params)\nWithPeerOutboundQueueSize(size)\nWithPeerScore(params, thresholds)\nWithPeerScoreInspect(inspect, period)\nWithProtocolMatchFn(m)\nWithRawTracer(tracer)\nWithSeenMessagesStrategy(strategy)\nWithSeenMessagesTTL(ttl)\nWithStrictSignatureVerification(required)\nWithSubscriptionFilter(subFilter)\nWithValidateQueueSize(n)\nWithValidateThrottle(n)\nWithValidateWorkers(n)\ntype PBTracer\nNewPBTracer(file)\nOpenPBTracer(file, flags, perm)\n(t) Close()\n(t) Trace(evt)\ntype PeerEvent\ntype PeerFilter\ntype PeerGaterParams\nDefaultPeerGaterParams()\nNewPeerGaterParams(threshold, globalDecay, sourceDecay)\n(p) WithTopicDeliveryWeights(w)\ntype PeerMetadataStore\ntype PeerScoreInspectFn\ntype PeerScoreParams\ntype PeerScoreSnapshot\ntype PeerScoreThresholds\ntype ProtocolMatchFn\ntype ProvideKey\ntype PubOpt\nWithLocalPublication(local)\nWithReadiness(ready)\nWithSecretKeyAndPeerId(key, pid)\ntype PubSub\nNewFloodSub(ctx, h, opts)\nNewFloodsubWithProtocols(ctx, h, ps, opts)\nNewGossipSub(ctx, h, opts)\nNewGossipSubWithRouter(ctx, h, rt, opts)\nNewPubSub(ctx, h, rt, opts)\nNewRandomSub(ctx, h, size, opts)\n(p) BlacklistPeer(pid)\n(p) GetTopics()\n(p) Join(topic, opts)\n(p) ListPeers(topic)\n(p) Publish(topic, data, opts)\n(p) RegisterTopicValidator(topic, val, opts)\n(p) Subscribe(topic, opts)\n(p) UnregisterTopicValidator(topic)\ntype PubSubNotif\n(p) ClosedStream(n, s)\n(p) Connected(n, c)\n(p) Disconnected(n, c)\n(p) Initialize()\n(p) Listen(n, _)\n(p) ListenClose(n, _)\n(p) OpenedStream(n, s)\ntype PubSubRouter\ntype PublishOptions\ntype RPC\ntype RandomSubRouter\n(rs) AcceptFrom()\n(rs) AddPeer(p, proto)\n(rs) Attach(p)\n(rs) EnoughPeers(topic, suggested)\n(rs) HandleRPC(rpc)\n(rs) Join(topic)\n(rs) Leave(topic)\n(rs) Protocols()\n(rs) Publish(msg)\n(rs) RemovePeer(p)\ntype RawTracer\ntype RelayCancelFunc\ntype RemoteTracer\nNewRemoteTracer(ctx, host, pi)\n(t) Close()\n(t) Trace(evt)\ntype RouterReady\nMinTopicSize(size)\ntype SubOpt\nWithBufferSize(size)\ntype Subscription\n(sub) Cancel()\n(sub) Next(ctx)\n(sub) Topic()\ntype SubscriptionFilter\nNewAllowlistSubscriptionFilter(topics)\nNewRegexpSubscriptionFilter(rx)\nWrapLimitSubscriptionFilter(filter, limit)\ntype TimeCachedBlacklist\n(b) Add(p)\n(b) Contains(p)\ntype Topic\n(t) Close()\n(t) EventHandler(opts)\n(t) ListPeers()\n(t) Publish(ctx, data, opts)\n(t) Relay()\n(t) SetScoreParams(p)\n(t) String()\n(t) Subscribe(opts)\ntype TopicEventHandler\n(t) Cancel()\n(t) NextPeerEvent(ctx)\ntype TopicEventHandlerOpt\ntype TopicOpt\nWithTopicMessageIdFn(msgId)\ntype TopicOptions\ntype TopicScoreParams\ntype TopicScoreSnapshot\ntype ValidationError\n(e) Error()\ntype ValidationResult\ntype Validator\ntype ValidatorEx\nNewBasicSeqnoValidator(meta)\ntype ValidatorOpt\nWithValidatorConcurrency(n)\nWithValidatorInline(inline)\nWithValidatorTimeout(timeout)\nSource Files\nDirectories\nREADMEDocumentationSource FilesDirectoriesRepo Lead MaintainerTable of ContentsInstallUsageDocumentationContributeLicenseExampleIn this repo, you will findTracingOverviewIndexConstantsVariablesFunctionsTypesDefaultMsgIdFn(pmsg)DefaultPeerFilter(pid, topic)FilterSubscriptions(subs, filter)GossipSubDefaultFeatures(feat, proto)ScoreParameterDecay(decay)ScoreParameterDecayWithBase(decay, base, decayToZero)type AcceptStatustype BackoffConnectorFactorytype BasicSeqnoValidatortype Blacklisttype CacheEntrytype DiscoverOpttype EventTracertype EventTypetype ExtendedPeerScoreInspectFntype FloodSubRoutertype GossipSubFeaturetype GossipSubFeatureTesttype GossipSubParamstype GossipSubRoutertype JSONTracertype MapBlacklisttype Messagetype MessageCachetype MessageSignaturePolicytype MsgIdFunctiontype Optiontype PBTracertype PeerEventtype PeerFiltertype PeerGaterParamstype PeerMetadataStoretype PeerScoreInspectFntype PeerScoreParamstype PeerScoreSnapshottype PeerScoreThresholdstype ProtocolMatchFntype ProvideKeytype PubOpttype PubSubtype PubSubNotiftype PubSubRoutertype PublishOptionstype RPCtype RandomSubRoutertype RawTracertype RelayCancelFunctype RemoteTracertype RouterReadytype SubOpttype Subscriptiontype SubscriptionFiltertype TimeCachedBlacklisttype Topictype TopicEventHandlertype TopicEventHandlerOpttype TopicOpttype TopicOptionstype TopicScoreParamstype TopicScoreSnapshottype ValidationErrortype ValidationResulttype Validatortype ValidatorExtype ValidatorOptNewMapBlacklist()NewTimeCachedBlacklist(expiry)WithDiscoverConnector(connFactory)WithDiscoveryOpts(opts)(fs) AcceptFrom()(fs) AddPeer(p, proto)(fs) Attach(p)(fs) EnoughPeers(topic, suggested)(fs) HandleRPC(rpc)(fs) Join(topic)(fs) Leave(topic)(fs) Protocols()(fs) Publish(msg)(fs) RemovePeer(p)DefaultGossipSubParams()DefaultGossipSubRouter(h)(gs) AcceptFrom(p)(gs) AddPeer(p, proto)(gs) Attach(p)(gs) EnoughPeers(topic, suggested)(gs) HandleRPC(rpc)(gs) Join(topic)(gs) Leave(topic)(gs) Protocols()(gs) Publish(msg)(gs) RemovePeer(p)(gs) WithDefaultTagTracer()NewJSONTracer(file)OpenJSONTracer(file, flags, perm)(t) Close()(t) Trace(evt)(b) Add(p)(b) Contains(p)(m) GetFrom()NewMessageCache(gossip, history)(mc) Get(mid)(mc) GetForPeer(mid, p)(mc) GetGossipIDs(topic)(mc) Put(msg)(mc) SetMsgIdFn(msgID)(mc) Shift()WithAppSpecificRpcInspector(inspector)WithBlacklist(b)WithDefaultValidator(val, opts)WithDirectConnectTicks(t)WithDirectPeers(pis)WithDiscovery(d, opts)WithEventTracer(tracer)WithFloodPublish(floodPublish)WithGossipSubParams(cfg)WithGossipSubProtocols(protos, feature)WithMaxMessageSize(maxMessageSize)WithMessageAuthor(author)WithMessageIdFn(fn)WithMessageSignaturePolicy(policy)WithMessageSigning(enabled)WithNoAuthor()WithPeerExchange(doPX)WithPeerFilter(filter)WithPeerGater(params)WithPeerOutboundQueueSize(size)WithPeerScore(params, thresholds)WithPeerScoreInspect(inspect, period)WithProtocolMatchFn(m)WithRawTracer(tracer)WithSeenMessagesStrategy(strategy)WithSeenMessagesTTL(ttl)WithStrictSignatureVerification(required)WithSubscriptionFilter(subFilter)WithValidateQueueSize(n)WithValidateThrottle(n)WithValidateWorkers(n)NewPBTracer(file)OpenPBTracer(file, flags, perm)(t) Close()(t) Trace(evt)DefaultPeerGaterParams()NewPeerGaterParams(threshold, globalDecay, sourceDecay)(p) WithTopicDeliveryWeights(w)WithLocalPublication(local)WithReadiness(ready)WithSecretKeyAndPeerId(key, pid)NewFloodSub(ctx, h, opts)NewFloodsubWithProtocols(ctx, h, ps, opts)NewGossipSub(ctx, h, opts)NewGossipSubWithRouter(ctx, h, rt, opts)NewPubSub(ctx, h, rt, opts)NewRandomSub(ctx, h, size, opts)(p) BlacklistPeer(pid)(p) GetTopics()(p) Join(topic, opts)(p) ListPeers(topic)(p) Publish(topic, data, opts)(p) RegisterTopicValidator(topic, val, opts)(p) Subscribe(topic, opts)(p) UnregisterTopicValidator(topic)(p) ClosedStream(n, s)(p) Connected(n, c)(p) Disconnected(n, c)(p) Initialize()(p) Listen(n, _)(p) ListenClose(n, _)(p) OpenedStream(n, s)(rs) AcceptFrom()(rs) AddPeer(p, proto)(rs) Attach(p)(rs) EnoughPeers(topic, suggested)(rs) HandleRPC(rpc)(rs) Join(topic)(rs) Leave(topic)(rs) Protocols()(rs) Publish(msg)(rs) RemovePeer(p)NewRemoteTracer(ctx, host, pi)(t) Close()(t) Trace(evt)MinTopicSize(size)WithBufferSize(size)(sub) Cancel()(sub) Next(ctx)(sub) Topic()NewAllowlistSubscriptionFilter(topics)NewRegexpSubscriptionFilter(rx)WrapLimitSubscriptionFilter(filter, limit)(b) Add(p)(b) Contains(p)(t) Close()(t) EventHandler(opts)(t) ListPeers()(t) Publish(ctx, data, opts)(t) Relay()(t) SetScoreParams(p)(t) String()(t) Subscribe(opts)(t) Cancel()(t) NextPeerEvent(ctx)WithTopicMessageIdFn(msgId)(e) Error()NewBasicSeqnoValidator(meta)WithValidatorConcurrency(n)WithValidatorInline(inline)WithValidatorTimeout(timeout)\nREADME\n¶\ngo-libp2p-pubsub\nThis repo contains the canonical pubsub implementation for libp2p. We currently provide three message router options:\nFloodsub, which is the baseline flooding protocol.\nRandomsub, which is a simple probabilistic router that propagates to random subsets of peers.\nGossipsub, which is a more advanced router with mesh formation and gossip propagation. See spec and\nimplementation for more details.\nRepo Lead Maintainer\n@vyzo\nThis repo follows the Repo Lead Maintainer Protocol\nTable of Contents\nInstall\nUsage\nExample\nDocumentation\nTracing\nContribute\nLicense\nInstall\ngo get github.com/libp2p/go-libp2p-pubsub\nUsage\nTo be used for messaging in p2p instrastructure (as part of libp2p) such as IPFS, Ethereum, other blockchains, etc.\nExample\nhttps://github.com/libp2p/go-libp2p/tree/master/examples/pubsub\nDocumentation\nSee the libp2p specs for high level documentation and godoc for API documentation.\nIn this repo, you will find\n.\n├── LICENSE\n├── README.md\n# Regular Golang repo set up\n├── codecov.yml\n├── pb\n├── go.mod\n├── go.sum\n├── doc.go\n# PubSub base\n├── pubsub.go\n├── blacklist.go\n├── notify.go\n├── comm.go\n├── discovery.go\n├── sign.go\n├── subscription.go\n├── topic.go\n├── trace.go\n├── tracer.go\n├── validation.go\n# Floodsub router\n├── floodsub.go\n# Randomsub router\n├── randomsub.go\n# Gossipsub router\n├── gossipsub.go\n├── score.go\n├── score_params.go\n└── mcache.go\nTracing\nThe pubsub system supports tracing, which collects all events pertaining to the internals of the system. This allows you to recreate the complete message flow and state of the system for analysis purposes.\nTo enable tracing, instantiate the pubsub system using the WithEventTracer option; the option accepts a tracer with three available implementations in-package (trace to json, pb, or a remote peer).\nIf you want to trace using a remote peer, you can do so using the traced daemon from go-libp2p-pubsub-tracer. The package also includes a utility program, tracestat, for analyzing the traces collected by the daemon.\nFor instance, to capture the trace as a json file, you can use the following option:\ntracer, err := pubsub.NewJSONTracer(\"/path/to/trace.json\")\nif err != nil {\npanic(err)\n}\npubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nTo capture the trace as a protobuf, you can use the following option:\ntracer, err := pubsub.NewPBTracer(\"/path/to/trace.pb\")\nif err != nil {\npanic(err)\n}\npubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nFinally, to use the remote tracer, you can use the following incantations:\n// assuming that your tracer runs in x.x.x.x and has a peer ID of QmTracer\npi, err := peer.AddrInfoFromP2pAddr(ma.StringCast(\"/ip4/x.x.x.x/tcp/4001/p2p/QmTracer\"))\nif err != nil {\npanic(err)\n}\ntracer, err := pubsub.NewRemoteTracer(ctx, host, pi)\nif err != nil {\npanic(err)\n}\nps, err := pubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nContribute\nContributions welcome. Please check out the issues.\nCheck out our contributing document for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS Code of Conduct.\nSmall note: If editing the README, please conform to the standard-readme specification.\nLicense\nThe go-libp2p-pubsub project is dual-licensed under Apache 2.0 and MIT terms:\nApache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)\nMIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\nExpand ▾\nCollapse ▴\nDocumentation\n¶\nOverview ¶\nThe pubsub package provides facilities for the Publish/Subscribe pattern of message\npropagation, also known as overlay multicast.\nThe implementation provides topic-based pubsub, with pluggable routing algorithms.\nThe main interface to the library is the PubSub object.\nYou can construct this object with the following constructors:\n- NewFloodSub creates an instance that uses the floodsub routing algorithm.\n- NewGossipSub creates an instance that uses the gossipsub routing algorithm.\n- NewRandomSub creates an instance that uses the randomsub routing algorithm.\nIn addition, there is a generic constructor that creates a pubsub instance with\na custom PubSubRouter interface. This procedure is currently reserved for internal\nuse within the package.\nOnce you have constructed a PubSub instance, you need to establish some connections\nto your peers; the implementation relies on ambient peer discovery, leaving bootstrap\nand active peer discovery up to the client.\nTo publish a message to some topic, use Publish; you don't need to be subscribed\nto the topic in order to publish.\nTo subscribe to a topic, use Subscribe; this will give you a subscription interface\nfrom which new messages can be pumped.\nIndex ¶\nConstants\nVariables\nfunc DefaultMsgIdFn(pmsg *pb.Message) string\nfunc DefaultPeerFilter(pid peer.ID, topic string) bool\nfunc FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts\nfunc GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol.ID) bool\nfunc ScoreParameterDecay(decay time.Duration) float64\nfunc ScoreParameterDecayWithBase(decay time.Duration, base time.Duration, decayToZero float64) float64\ntype AcceptStatus\ntype BackoffConnectorFactory\ntype BasicSeqnoValidator\ntype Blacklist\nfunc NewMapBlacklist() Blacklist\nfunc NewTimeCachedBlacklist(expiry time.Duration) (Blacklist, error)\ntype CacheEntry\ntype DiscoverOpt\nfunc WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt\nfunc WithDiscoveryOpts(opts ...discovery.Option) DiscoverOpt\ntype EventTracer\ntype EventType\ntype ExtendedPeerScoreInspectFn\ntype FloodSubRouter\nfunc (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (fs *FloodSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (fs *FloodSubRouter) Attach(p *PubSub)\nfunc (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (fs *FloodSubRouter) HandleRPC(rpc *RPC)\nfunc (fs *FloodSubRouter) Join(topic string)\nfunc (fs *FloodSubRouter) Leave(topic string)\nfunc (fs *FloodSubRouter) Protocols() []protocol.ID\nfunc (fs *FloodSubRouter) Publish(msg *Message)\nfunc (fs *FloodSubRouter) RemovePeer(p peer.ID)\ntype GossipSubFeature\ntype GossipSubFeatureTest\ntype GossipSubParams\nfunc DefaultGossipSubParams() GossipSubParams\ntype GossipSubRouter\nfunc DefaultGossipSubRouter(h host.Host) *GossipSubRouter\nfunc (gs *GossipSubRouter) AcceptFrom(p peer.ID) AcceptStatus\nfunc (gs *GossipSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (gs *GossipSubRouter) Attach(p *PubSub)\nfunc (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (gs *GossipSubRouter) HandleRPC(rpc *RPC)\nfunc (gs *GossipSubRouter) Join(topic string)\nfunc (gs *GossipSubRouter) Leave(topic string)\nfunc (gs *GossipSubRouter) Protocols() []protocol.ID\nfunc (gs *GossipSubRouter) Publish(msg *Message)\nfunc (gs *GossipSubRouter) RemovePeer(p peer.ID)\nfunc (gs *GossipSubRouter) WithDefaultTagTracer() Option\ntype JSONTracer\nfunc NewJSONTracer(file string) (*JSONTracer, error)\nfunc OpenJSONTracer(file string, flags int, perm os.FileMode) (*JSONTracer, error)\nfunc (t *JSONTracer) Close()\nfunc (t *JSONTracer) Trace(evt *pb.TraceEvent)\ntype MapBlacklist\nfunc (b MapBlacklist) Add(p peer.ID) bool\nfunc (b MapBlacklist) Contains(p peer.ID) bool\ntype Message\nfunc (m *Message) GetFrom() peer.ID\ntype MessageCache\nfunc NewMessageCache(gossip, history int) *MessageCache\nfunc (mc *MessageCache) Get(mid string) (*Message, bool)\nfunc (mc *MessageCache) GetForPeer(mid string, p peer.ID) (*Message, int, bool)\nfunc (mc *MessageCache) GetGossipIDs(topic string) []string\nfunc (mc *MessageCache) Put(msg *Message)\nfunc (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string)\nfunc (mc *MessageCache) Shift()\ntype MessageSignaturePolicy\ntype MsgIdFunction\ntype Option\nfunc WithAppSpecificRpcInspector(inspector func(peer.ID, *RPC) error) Option\nfunc WithBlacklist(b Blacklist) Option\nfunc WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option\nfunc WithDirectConnectTicks(t uint64) Option\nfunc WithDirectPeers(pis []peer.AddrInfo) Option\nfunc WithDiscovery(d discovery.Discovery, opts ...DiscoverOpt) Option\nfunc WithEventTracer(tracer EventTracer) Option\nfunc WithFloodPublish(floodPublish bool) Option\nfunc WithGossipSubParams(cfg GossipSubParams) Option\nfunc WithGossipSubProtocols(protos []protocol.ID, feature GossipSubFeatureTest) Option\nfunc WithMaxMessageSize(maxMessageSize int) Option\nfunc WithMessageAuthor(author peer.ID) Option\nfunc WithMessageIdFn(fn MsgIdFunction) Option\nfunc WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option\nfunc WithMessageSigning(enabled bool) Option\nfunc WithNoAuthor() Option\nfunc WithPeerExchange(doPX bool) Option\nfunc WithPeerFilter(filter PeerFilter) Option\nfunc WithPeerGater(params *PeerGaterParams) Option\nfunc WithPeerOutboundQueueSize(size int) Option\nfunc WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option\nfunc WithPeerScoreInspect(inspect interface{}, period time.Duration) Option\nfunc WithProtocolMatchFn(m ProtocolMatchFn) Option\nfunc WithRawTracer(tracer RawTracer) Option\nfunc WithSeenMessagesStrategy(strategy timecache.Strategy) Option\nfunc WithSeenMessagesTTL(ttl time.Duration) Option\nfunc WithStrictSignatureVerification(required bool) Option\nfunc WithSubscriptionFilter(subFilter SubscriptionFilter) Option\nfunc WithValidateQueueSize(n int) Option\nfunc WithValidateThrottle(n int) Option\nfunc WithValidateWorkers(n int) Option\ntype PBTracer\nfunc NewPBTracer(file string) (*PBTracer, error)\nfunc OpenPBTracer(file string, flags int, perm os.FileMode) (*PBTracer, error)\nfunc (t *PBTracer) Close()\nfunc (t *PBTracer) Trace(evt *pb.TraceEvent)\ntype PeerEvent\ntype PeerFilter\ntype PeerGaterParams\nfunc DefaultPeerGaterParams() *PeerGaterParams\nfunc NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams\nfunc (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams\ntype PeerMetadataStore\ntype PeerScoreInspectFn\ntype PeerScoreParams\ntype PeerScoreSnapshot\ntype PeerScoreThresholds\ntype ProtocolMatchFn\ntype ProvideKey\ntype PubOpt\nfunc WithLocalPublication(local bool) PubOpt\nfunc WithReadiness(ready RouterReady) PubOpt\nfunc WithSecretKeyAndPeerId(key crypto.PrivKey, pid peer.ID) PubOpt\ntype PubSub\nfunc NewFloodSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nfunc NewFloodsubWithProtocols(ctx context.Context, h host.Host, ps []protocol.ID, opts ...Option) (*PubSub, error)\nfunc NewGossipSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nfunc NewGossipSubWithRouter(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nfunc NewPubSub(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nfunc NewRandomSub(ctx context.Context, h host.Host, size int, opts ...Option) (*PubSub, error)\nfunc (p *PubSub) BlacklistPeer(pid peer.ID)\nfunc (p *PubSub) GetTopics() []string\nfunc (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error)\nfunc (p *PubSub) ListPeers(topic string) []peer.ID\nfunc (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) errordeprecated\nfunc (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error\nfunc (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)deprecated\nfunc (p *PubSub) UnregisterTopicValidator(topic string) error\ntype PubSubNotif\nfunc (p *PubSubNotif) ClosedStream(n network.Network, s network.Stream)\nfunc (p *PubSubNotif) Connected(n network.Network, c network.Conn)\nfunc (p *PubSubNotif) Disconnected(n network.Network, c network.Conn)\nfunc (p *PubSubNotif) Initialize()\nfunc (p *PubSubNotif) Listen(n network.Network, _ ma.Multiaddr)\nfunc (p *PubSubNotif) ListenClose(n network.Network, _ ma.Multiaddr)\nfunc (p *PubSubNotif) OpenedStream(n network.Network, s network.Stream)\ntype PubSubRouter\ntype PublishOptions\ntype RPC\ntype RandomSubRouter\nfunc (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (rs *RandomSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (rs *RandomSubRouter) Attach(p *PubSub)\nfunc (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (rs *RandomSubRouter) HandleRPC(rpc *RPC)\nfunc (rs *RandomSubRouter) Join(topic string)\nfunc (rs *RandomSubRouter) Leave(topic string)\nfunc (rs *RandomSubRouter) Protocols() []protocol.ID\nfunc (rs *RandomSubRouter) Publish(msg *Message)\nfunc (rs *RandomSubRouter) RemovePeer(p peer.ID)\ntype RawTracer\ntype RelayCancelFunc\ntype RemoteTracer\nfunc NewRemoteTracer(ctx context.Context, host host.Host, pi peer.AddrInfo) (*RemoteTracer, error)\nfunc (t *RemoteTracer) Close()\nfunc (t *RemoteTracer) Trace(evt *pb.TraceEvent)\ntype RouterReady\nfunc MinTopicSize(size int) RouterReady\ntype SubOpt\nfunc WithBufferSize(size int) SubOpt\ntype Subscription\nfunc (sub *Subscription) Cancel()\nfunc (sub *Subscription) Next(ctx context.Context) (*Message, error)\nfunc (sub *Subscription) Topic() string\ntype SubscriptionFilter\nfunc NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter\nfunc NewRegexpSubscriptionFilter(rx *regexp.Regexp) SubscriptionFilter\nfunc WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter\ntype TimeCachedBlacklist\nfunc (b *TimeCachedBlacklist) Add(p peer.ID) bool\nfunc (b *TimeCachedBlacklist) Contains(p peer.ID) bool\ntype Topic\nfunc (t *Topic) Close() error\nfunc (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error)\nfunc (t *Topic) ListPeers() []peer.ID\nfunc (t *Topic) Publish(ctx context.Context, data []byte, opts ...PubOpt) error\nfunc (t *Topic) Relay() (RelayCancelFunc, error)\nfunc (t *Topic) SetScoreParams(p *TopicScoreParams) error\nfunc (t *Topic) String() string\nfunc (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error)\ntype TopicEventHandler\nfunc (t *TopicEventHandler) Cancel()\nfunc (t *TopicEventHandler) NextPeerEvent(ctx context.Context) (PeerEvent, error)\ntype TopicEventHandlerOpt\ntype TopicOpt\nfunc WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt\ntype TopicOptions\ntype TopicScoreParams\ntype TopicScoreSnapshot\ntype ValidationError\nfunc (e ValidationError) Error() string\ntype ValidationResult\ntype Validator\ntype ValidatorEx\nfunc NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx\ntype ValidatorOpt\nfunc WithValidatorConcurrency(n int) ValidatorOpt\nfunc WithValidatorInline(inline bool) ValidatorOpt\nfunc WithValidatorTimeout(timeout time.Duration) ValidatorOpt\nConstants ¶\nView Source\nconst (\nMinBackoffDelay\n= 100 * time.Millisecond\nMaxBackoffDelay\n= 10 * time.Second\nTimeToLive\n= 10 * time.Minute\nBackoffCleanupInterval = 1 * time.Minute\nBackoffMultiplier\n= 2\nMaxBackoffJitterCoff\n= 100\nMaxBackoffAttempts\n= 4\n)\nView Source\nconst (\nFloodSubID\n= protocol.ID(\"/floodsub/1.0.0\")\nFloodSubTopicSearchSize = 5\n)\nView Source\nconst (\n// GossipSubID_v10 is the protocol ID for version 1.0.0 of the GossipSub protocol.\n// It is advertised along with GossipSubID_v11 for backwards compatibility.\nGossipSubID_v10 = protocol.ID(\"/meshsub/1.0.0\")\n// GossipSubID_v11 is the protocol ID for version 1.1.0 of the GossipSub protocol.\n// See the spec for details about how v1.1.0 compares to v1.0.0:\n// https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\nGossipSubID_v11 = protocol.ID(\"/meshsub/1.1.0\")\n)\nView Source\nconst (\n// Protocol supports basic GossipSub Mesh -- gossipsub-v1.0 compatible\nGossipSubFeatureMesh = iota\n// Protocol supports Peer eXchange on prune -- gossipsub-v1.1 compatible\nGossipSubFeaturePX\n)\nView Source\nconst (\nDefaultDecayInterval = time.Second\nDefaultDecayToZero\n= 0.01\n)\nView Source\nconst (\n// StrictSign produces signatures and expects and verifies incoming signatures\nStrictSign = msgSigning | msgVerification\n// StrictNoSign does not produce signatures and drops and penalises incoming messages that carry one\nStrictNoSign = msgVerification\n// LaxSign produces signatures and validates incoming signatures iff one is present\n// Deprecated: it is recommend to either strictly enable, or strictly disable, signatures.\nLaxSign = msgSigning\n// LaxNoSign does not produce signatures and validates incoming signatures iff one is present\n// Deprecated: it is recommend to either strictly enable, or strictly disable, signatures.\nLaxNoSign = 0\n)\nView Source\nconst (\nRejectBlacklstedPeer\n= \"blacklisted peer\"\nRejectBlacklistedSource\n= \"blacklisted source\"\nRejectMissingSignature\n= \"missing signature\"\nRejectUnexpectedSignature = \"unexpected signature\"\nRejectUnexpectedAuthInfo\n= \"unexpected auth info\"\nRejectInvalidSignature\n= \"invalid signature\"\nRejectValidationQueueFull = \"validation queue full\"\nRejectValidationThrottled = \"validation throttled\"\nRejectValidationFailed\n= \"validation failed\"\nRejectValidationIgnored\n= \"validation ignored\"\nRejectSelfOrigin\n= \"self originated message\"\n)\nrejection reasons\nView Source\nconst (\n// ValidationAccept is a validation decision that indicates a valid message that should be accepted and\n// delivered to the application and forwarded to the network.\nValidationAccept = ValidationResult(0)\n// ValidationReject is a validation decision that indicates an invalid message that should not be\n// delivered to the application or forwarded to the application. Furthermore the peer that forwarded\n// the message should be penalized by peer scoring routers.\nValidationReject = ValidationResult(1)\n// ValidationIgnore is a validation decision that indicates a message that should be ignored: it will\n// be neither delivered to the application nor forwarded to the network. However, in contrast to\n// ValidationReject, the peer that forwarded the message must not be penalized by peer scoring routers.\nValidationIgnore = ValidationResult(2)\n)\nView Source\nconst DefaultMaxMessageSize = 1 << 20\nDefaultMaximumMessageSize is 1mb.\nView Source\nconst (\nRandomSubID = protocol.ID(\"/randomsub/1.0.0\")\n)\nView Source\nconst RemoteTracerProtoID = protocol.ID(\"/libp2p/pubsub/tracer/1.0.0\")\nView Source\nconst SignPrefix = \"libp2p-pubsub:\"\nVariables ¶\nView Source\nvar (\n// DiscoveryPollInitialDelay is how long the discovery system waits after it first starts before polling\nDiscoveryPollInitialDelay = 0 * time.Millisecond\n// DiscoveryPollInterval is approximately how long the discovery system waits in between checks for whether the\n// more peers are needed for any topic\nDiscoveryPollInterval = 1 * time.Second\n)\nView Source\nvar (\nGossipSubD\n= 6\nGossipSubDlo\n= 5\nGossipSubDhi\n= 12\nGossipSubDscore\n= 4\nGossipSubDout\n= 2\nGossipSubHistoryLength\n= 5\nGossipSubHistoryGossip\n= 3\nGossipSubDlazy\n= 6\nGossipSubGossipFactor\n= 0.25\nGossipSubGossipRetransmission\n= 3\nGossipSubHeartbeatInitialDelay\n= 100 * time.Millisecond\nGossipSubHeartbeatInterval\n= 1 * time.Second\nGossipSubFanoutTTL\n= 60 * time.Second\nGossipSubPrunePeers\n= 16\nGossipSubPruneBackoff\n= time.Minute\nGossipSubUnsubscribeBackoff\n= 10 * time.Second\nGossipSubConnectors\n= 8\nGossipSubMaxPendingConnections\n= 128\nGossipSubConnectionTimeout\n= 30 * time.Second\nGossipSubDirectConnectTicks\nuint64 = 300\nGossipSubDirectConnectInitialDelay\n= time.Second\nGossipSubOpportunisticGraftTicks\nuint64 = 60\nGossipSubOpportunisticGraftPeers\n= 2\nGossipSubGraftFloodThreshold\n= 10 * time.Second\nGossipSubMaxIHaveLength\n= 5000\nGossipSubMaxIHaveMessages\n= 10\nGossipSubIWantFollowupTime\n= 3 * time.Second\n)\nDefines the default gossipsub parameters.\nView Source\nvar (\nDefaultPeerGaterRetainStats\n= 6 * time.Hour\nDefaultPeerGaterQuiet\n= time.Minute\nDefaultPeerGaterDuplicateWeight = 0.125\nDefaultPeerGaterIgnoreWeight\n= 1.0\nDefaultPeerGaterRejectWeight\n= 16.0\nDefaultPeerGaterThreshold\n= 0.33\nDefaultPeerGaterGlobalDecay\n= ScoreParameterDecay(2 * time.Minute)\nDefaultPeerGaterSourceDecay\n= ScoreParameterDecay(time.Hour)\n)\nView Source\nvar (\n// TimeCacheDuration specifies how long a message ID will be remembered as seen.\n// Use WithSeenMessagesTTL to configure this per pubsub instance, instead of overriding the global default.\nTimeCacheDuration = 120 * time.Second\n// TimeCacheStrategy specifies which type of lookup/cleanup strategy is used by the seen messages cache.\n// Use WithSeenMessagesStrategy to configure this per pubsub instance, instead of overriding the global default.\nTimeCacheStrategy = timecache.Strategy_FirstSeen\n// ErrSubscriptionCancelled may be returned when a subscription Next() is called after the\n// subscription has been cancelled.\nErrSubscriptionCancelled = errors.New(\"subscription cancelled\")\n)\nView Source\nvar (\n// GossipSubConnTagBumpMessageDelivery is the amount to add to the connection manager\n// tag that tracks message deliveries. Each time a peer is the first to deliver a\n// message within a topic, we \"bump\" a tag by this amount, up to a maximum\n// of GossipSubConnTagMessageDeliveryCap.\n// Note that the delivery tags decay over time, decreasing by GossipSubConnTagDecayAmount\n// at every GossipSubConnTagDecayInterval.\nGossipSubConnTagBumpMessageDelivery = 1\n// GossipSubConnTagDecayInterval is the decay interval for decaying connection manager tags.\nGossipSubConnTagDecayInterval = 10 * time.Minute\n// GossipSubConnTagDecayAmount is subtracted from decaying tag values at each decay interval.\nGossipSubConnTagDecayAmount = 1\n// GossipSubConnTagMessageDeliveryCap is the maximum value for the connection manager tags that\n// track message deliveries.\nGossipSubConnTagMessageDeliveryCap = 15\n)\nView Source\nvar ErrEmptyPeerID = errors.New(\"empty peer ID\")\nErrEmptyPeerID is returned if an empty peer ID was provided\nView Source\nvar ErrNilSignKey = errors.New(\"nil sign key\")\nErrNilSignKey is returned if a nil private key was provided\nView Source\nvar ErrTooManySubscriptions = errors.New(\"too many subscriptions\")\nErrTooManySubscriptions may be returned by a SubscriptionFilter to signal that there are too many\nsubscriptions to process.\nView Source\nvar ErrTopicClosed = errors.New(\"this Topic is closed, try opening a new one\")\nErrTopicClosed is returned if a Topic is utilized after it has been closed\nView Source\nvar GossipSubDefaultProtocols = []protocol.ID{GossipSubID_v11, GossipSubID_v10, FloodSubID}\nGossipSubDefaultProtocols is the default gossipsub router protocol list\nView Source\nvar MinTraceBatchSize = 16\nView Source\nvar (\nRandomSubD = 6\n)\nView Source\nvar TraceBufferSize = 1 << 16 // 64K ought to be enough for everyone; famous last words.\nFunctions ¶\nfunc DefaultMsgIdFn ¶\nadded in\nv0.2.5\nfunc DefaultMsgIdFn(pmsg *pb.Message) string\nDefaultMsgIdFn returns a unique ID of the passed Message\nfunc DefaultPeerFilter ¶\nadded in\nv0.5.5\nfunc DefaultPeerFilter(pid peer.ID, topic string) bool\nDefaultPeerFilter accepts all peers on all topics\nfunc FilterSubscriptions ¶\nadded in\nv0.3.6\nfunc FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts\nFilterSubscriptions filters (and deduplicates) a list of subscriptions.\nfilter should return true if a topic is of interest.\nfunc GossipSubDefaultFeatures ¶\nadded in\nv0.5.0\nfunc GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol.ID) bool\nGossipSubDefaultFeatures is the feature test function for the default gossipsub protocols\nfunc ScoreParameterDecay ¶\nadded in\nv0.3.0\nfunc ScoreParameterDecay(decay time.Duration) float64\nScoreParameterDecay computes the decay factor for a parameter, assuming the DecayInterval is 1s\nand that the value decays to zero if it drops below 0.01\nfunc ScoreParameterDecayWithBase ¶\nadded in\nv0.3.0\nfunc ScoreParameterDecayWithBase(decay time.Duration, base time.Duration, decayToZero float64) float64\nScoreParameterDecayWithBase computes the decay factor for a parameter using base as the DecayInterval\nTypes ¶\ntype AcceptStatus ¶\nadded in\nv0.3.6\ntype AcceptStatus int\nconst (\n// AcceptNone signals to drop the incoming RPC\nAcceptNone AcceptStatus = iota\n// AcceptControl signals to accept the incoming RPC only for control message processing by\n// the router. Included payload messages will _not_ be pushed to the validation queue.\nAcceptControl\n// AcceptAll signals to accept the incoming RPC for full processing\nAcceptAll\n)\ntype BackoffConnectorFactory ¶\nadded in\nv0.2.0\ntype BackoffConnectorFactory func(host host.Host) (*discimpl.BackoffConnector, error)\nBackoffConnectorFactory creates a BackoffConnector that is attached to a given host\ntype BasicSeqnoValidator ¶\nadded in\nv0.9.2\ntype BasicSeqnoValidator struct {\n// contains filtered or unexported fields\n}\nBasicSeqnoValidator is a basic validator, usable as a default validator, that ignores replayed\nmessages outside the seen cache window. The validator uses the message seqno as a peer-specific\nnonce to decide whether the message should be propagated, comparing to the maximal nonce store\nin the peer metadata store. This is useful to ensure that there can be no infinitely propagating\nmessages in the network regardless of the seen cache span and network diameter.\nIt requires that pubsub is instantiated with a strict message signing policy and that seqnos\nare not disabled, ie it doesn't support anonymous mode.\nWarning: See https://github.com/libp2p/rust-libp2p/issues/3453\nTL;DR: rust is currently violating the spec by issuing a random seqno, which creates an\ninteroperability hazard. We expect this issue to be addressed in the not so distant future,\nbut keep this in mind if you are in a mixed environment with (older) rust nodes.\ntype Blacklist ¶\ntype Blacklist interface {\nAdd(peer.ID) bool\nContains(peer.ID) bool\n}\nBlacklist is an interface for peer blacklisting.\nfunc NewMapBlacklist ¶\nfunc NewMapBlacklist() Blacklist\nNewMapBlacklist creates a new MapBlacklist\nfunc NewTimeCachedBlacklist ¶\nadded in\nv0.2.6\nfunc NewTimeCachedBlacklist(expiry time.Duration) (Blacklist, error)\nNewTimeCachedBlacklist creates a new TimeCachedBlacklist with the given expiry duration\ntype CacheEntry ¶\ntype CacheEntry struct {\n// contains filtered or unexported fields\n}\ntype DiscoverOpt ¶\nadded in\nv0.2.0\ntype DiscoverOpt func(*discoverOptions) error\nfunc WithDiscoverConnector ¶\nadded in\nv0.2.0\nfunc WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt\nWithDiscoverConnector adds a custom connector that deals with how the discovery subsystem connects to peers\nfunc WithDiscoveryOpts ¶\nadded in\nv0.2.0\nfunc WithDiscoveryOpts(opts ...discovery.Option) DiscoverOpt\nWithDiscoveryOpts passes libp2p Discovery options into the PubSub discovery subsystem\ntype EventTracer ¶\nadded in\nv0.2.3\ntype EventTracer interface {\nTrace(evt *pb.TraceEvent)\n}\nEventTracer is a generic event tracer interface.\nThis is a high level tracing interface which delivers tracing events, as defined by the protobuf\nschema in pb/trace.proto.\ntype EventType ¶\nadded in\nv0.1.1\ntype EventType int\nconst (\nPeerJoin EventType = iota\nPeerLeave\n)\ntype ExtendedPeerScoreInspectFn ¶\nadded in\nv0.3.3\ntype ExtendedPeerScoreInspectFn = func(map[peer.ID]*PeerScoreSnapshot)\ntype FloodSubRouter ¶\ntype FloodSubRouter struct {\n// contains filtered or unexported fields\n}\nfunc (*FloodSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (*FloodSubRouter) AddPeer ¶\nfunc (fs *FloodSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*FloodSubRouter) Attach ¶\nfunc (fs *FloodSubRouter) Attach(p *PubSub)\nfunc (*FloodSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*FloodSubRouter) HandleRPC ¶\nfunc (fs *FloodSubRouter) HandleRPC(rpc *RPC)\nfunc (*FloodSubRouter) Join ¶\nfunc (fs *FloodSubRouter) Join(topic string)\nfunc (*FloodSubRouter) Leave ¶\nfunc (fs *FloodSubRouter) Leave(topic string)\nfunc (*FloodSubRouter) Protocols ¶\nfunc (fs *FloodSubRouter) Protocols() []protocol.ID\nfunc (*FloodSubRouter) Publish ¶\nfunc (fs *FloodSubRouter) Publish(msg *Message)\nfunc (*FloodSubRouter) RemovePeer ¶\nfunc (fs *FloodSubRouter) RemovePeer(p peer.ID)\ntype GossipSubFeature ¶\nadded in\nv0.5.0\ntype GossipSubFeature int\nGossipSubFeature is a feature discriminant enum\ntype GossipSubFeatureTest ¶\nadded in\nv0.5.0\ntype GossipSubFeatureTest = func(GossipSubFeature, protocol.ID) bool\nGossipSubFeatureTest is a feature test function; it takes a feature and a protocol ID and\nshould return true if the feature is supported by the protocol\ntype GossipSubParams ¶\nadded in\nv0.5.0\ntype GossipSubParams struct {\n// D sets the optimal degree for a GossipSub topic mesh. For example, if D == 6,\n// each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n// D should be set somewhere between Dlo and Dhi.\nD int\n// Dlo sets the lower bound on the number of peers we keep in a GossipSub topic mesh.\n// If we have fewer than Dlo peers, we will attempt to graft some more into the mesh at\n// the next heartbeat.\nDlo int\n// Dhi sets the upper bound on the number of peers we keep in a GossipSub topic mesh.\n// If we have more than Dhi peers, we will select some to prune from the mesh at the next heartbeat.\nDhi int\n// Dscore affects how peers are selected when pruning a mesh due to over subscription.\n// At least Dscore of the retained peers will be high-scoring, while the remainder are\n// chosen randomly.\nDscore int\n// Dout sets the quota for the number of outbound connections to maintain in a topic mesh.\n// When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n// to at least Dout of the survivor peers. This prevents sybil attackers from overwhelming\n// our mesh with incoming connections.\n//\n// Dout must be set below Dlo, and must not exceed D / 2.\nDout int\n// HistoryLength controls the size of the message cache used for gossip.\n// The message cache will remember messages for HistoryLength heartbeats.\nHistoryLength int\n// HistoryGossip controls how many cached message ids we will advertise in\n// IHAVE gossip messages. When asked for our seen message IDs, we will return\n// only those from the most recent HistoryGossip heartbeats. The slack between\n// HistoryGossip and HistoryLength allows us to avoid advertising messages\n// that will be expired by the time they're requested.\n//\n// HistoryGossip must be less than or equal to HistoryLength to\n// avoid a runtime panic.\nHistoryGossip int\n// Dlazy affects how many peers we will emit gossip to at each heartbeat.\n// We will send gossip to at least Dlazy peers outside our mesh. The actual\n// number may be more, depending on GossipFactor and how many peers we're\n// connected to.\nDlazy int\n// GossipFactor affects how many peers we will emit gossip to at each heartbeat.\n// We will send gossip to GossipFactor * (total number of non-mesh peers), or\n// Dlazy, whichever is greater.\nGossipFactor float64\n// GossipRetransmission controls how many times we will allow a peer to request\n// the same message id through IWANT gossip before we start ignoring them. This is designed\n// to prevent peers from spamming us with requests and wasting our resources.\nGossipRetransmission int\n// HeartbeatInitialDelay is the short delay before the heartbeat timer begins\n// after the router is initialized.\nHeartbeatInitialDelay time.Duration\n// HeartbeatInterval controls the time between heartbeats.\nHeartbeatInterval time.Duration\n// SlowHeartbeatWarning is the duration threshold for heartbeat processing before emitting\n// a warning; this would be indicative of an overloaded peer.\nSlowHeartbeatWarning float64\n// FanoutTTL controls how long we keep track of the fanout state. If it's been\n// FanoutTTL since we've published to a topic that we're not subscribed to,\n// we'll delete the fanout map for that topic.\nFanoutTTL time.Duration\n// PrunePeers controls the number of peers to include in prune Peer eXchange.\n// When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n// send them signed peer records for up to PrunePeers other peers that we\n// know of.\nPrunePeers int\n// PruneBackoff controls the backoff time for pruned peers. This is how long\n// a peer must wait before attempting to graft into our mesh again after being pruned.\n// When pruning a peer, we send them our value of PruneBackoff so they know\n// the minimum time to wait. Peers running older versions may not send a backoff time,\n// so if we receive a prune message without one, we will wait at least PruneBackoff\n// before attempting to re-graft.\nPruneBackoff time.Duration\n// UnsubscribeBackoff controls the backoff time to use when unsuscribing\n// from a topic. A peer should not resubscribe to this topic before this\n// duration.\nUnsubscribeBackoff time.Duration\n// Connectors controls the number of active connection attempts for peers obtained through PX.\nConnectors int\n// MaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\nMaxPendingConnections int\n// ConnectionTimeout controls the timeout for connection attempts.\nConnectionTimeout time.Duration\n// DirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n// that are not currently connected.\nDirectConnectTicks uint64\n// DirectConnectInitialDelay is the initial delay before opening connections to direct peers\nDirectConnectInitialDelay time.Duration\n// OpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n// with opportunistic grafting. Every OpportunisticGraftTicks we will attempt to select some\n// high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n// below a threshold (see https://godoc.org/github.com/libp2p/go-libp2p-pubsub#PeerScoreThresholds).\nOpportunisticGraftTicks uint64\n// OpportunisticGraftPeers is the number of peers to opportunistically graft.\nOpportunisticGraftPeers int\n// If a GRAFT comes before GraftFloodThreshold has elapsed since the last PRUNE,\n// then there is an extra score penalty applied to the peer through P7.\nGraftFloodThreshold time.Duration\n// MaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n// Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n// peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n// default if your system is pushing more than 5000 messages in HistoryGossip heartbeats;\n// with the defaults this is 1666 messages/s.\nMaxIHaveLength int\n// MaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\nMaxIHaveMessages int\n// Time to wait for a message requested through IWANT following an IHAVE advertisement.\n// If the message is not received within this window, a broken promise is declared and\n// the router may apply bahavioural penalties.\nIWantFollowupTime time.Duration\n}\nGossipSubParams defines all the gossipsub specific parameters.\nfunc DefaultGossipSubParams ¶\nadded in\nv0.5.0\nfunc DefaultGossipSubParams() GossipSubParams\nDefaultGossipSubParams returns the default gossip sub parameters\nas a config.\ntype GossipSubRouter ¶\ntype GossipSubRouter struct {\n// contains filtered or unexported fields\n}\nGossipSubRouter is a router that implements the gossipsub protocol.\nFor each topic we have joined, we maintain an overlay through which\nmessages flow; this is the mesh map.\nFor each topic we publish to without joining, we maintain a list of peers\nto use for injecting our messages in the overlay with stable routes; this\nis the fanout map. Fanout peer lists are expired if we don't publish any\nmessages to their topic for GossipSubFanoutTTL.\nfunc DefaultGossipSubRouter ¶\nadded in\nv0.8.2\nfunc DefaultGossipSubRouter(h host.Host) *GossipSubRouter\nDefaultGossipSubRouter returns a new GossipSubRouter with default parameters.\nfunc (*GossipSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (gs *GossipSubRouter) AcceptFrom(p peer.ID) AcceptStatus\nfunc (*GossipSubRouter) AddPeer ¶\nfunc (gs *GossipSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*GossipSubRouter) Attach ¶\nfunc (gs *GossipSubRouter) Attach(p *PubSub)\nfunc (*GossipSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*GossipSubRouter) HandleRPC ¶\nfunc (gs *GossipSubRouter) HandleRPC(rpc *RPC)\nfunc (*GossipSubRouter) Join ¶\nfunc (gs *GossipSubRouter) Join(topic string)\nfunc (*GossipSubRouter) Leave ¶\nfunc (gs *GossipSubRouter) Leave(topic string)\nfunc (*GossipSubRouter) Protocols ¶\nfunc (gs *GossipSubRouter) Protocols() []protocol.ID\nfunc (*GossipSubRouter) Publish ¶\nfunc (gs *GossipSubRouter) Publish(msg *Message)\nfunc (*GossipSubRouter) RemovePeer ¶\nfunc (gs *GossipSubRouter) RemovePeer(p peer.ID)\nfunc (*GossipSubRouter) WithDefaultTagTracer ¶\nadded in\nv0.8.2\nfunc (gs *GossipSubRouter) WithDefaultTagTracer() Option\nWithDefaultTagTracer returns the tag tracer of the GossipSubRouter as a PubSub option.\nThis is useful for cases where the GossipSubRouter is instantiated externally, and is\ninjected into the GossipSub constructor as a dependency. This allows the tag tracer to be\nalso injected into the GossipSub constructor as a PubSub option dependency.\ntype JSONTracer ¶\nadded in\nv0.2.3\ntype JSONTracer struct {\n// contains filtered or unexported fields\n}\nJSONTracer is a tracer that writes events to a file, encoded in ndjson.\nfunc NewJSONTracer ¶\nadded in\nv0.2.3\nfunc NewJSONTracer(file string) (*JSONTracer, error)\nNewJsonTracer creates a new JSONTracer writing traces to file.\nfunc OpenJSONTracer ¶\nadded in\nv0.2.3\nfunc OpenJSONTracer(file string, flags int, perm os.FileMode) (*JSONTracer, error)\nOpenJSONTracer creates a new JSONTracer, with explicit control of OpenFile flags and permissions.\nfunc (*JSONTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *JSONTracer) Close()\nfunc (*JSONTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *JSONTracer) Trace(evt *pb.TraceEvent)\ntype MapBlacklist ¶\ntype MapBlacklist map[peer.ID]struct{}\nMapBlacklist is a blacklist implementation using a perfect map\nfunc (MapBlacklist) Add ¶\nfunc (b MapBlacklist) Add(p peer.ID) bool\nfunc (MapBlacklist) Contains ¶\nfunc (b MapBlacklist) Contains(p peer.ID) bool\ntype Message ¶\ntype Message struct {\n*pb.Message\nID\nstring\nReceivedFrom\npeer.ID\nValidatorData interface{}\nLocal\nbool\n}\nfunc (*Message) GetFrom ¶\nfunc (m *Message) GetFrom() peer.ID\ntype MessageCache ¶\ntype MessageCache struct {\n// contains filtered or unexported fields\n}\nfunc NewMessageCache ¶\nfunc NewMessageCache(gossip, history int) *MessageCache\nNewMessageCache creates a sliding window cache that remembers messages for as\nlong as `history` slots.\nWhen queried for messages to advertise, the cache only returns messages in\nthe last `gossip` slots.\nThe `gossip` parameter must be smaller or equal to `history`, or this\nfunction will panic.\nThe slack between `gossip` and `history` accounts for the reaction time\nbetween when a message is advertised via IHAVE gossip, and the peer pulls it\nvia an IWANT command.\nfunc (*MessageCache) Get ¶\nfunc (mc *MessageCache) Get(mid string) (*Message, bool)\nfunc (*MessageCache) GetForPeer ¶\nadded in\nv0.3.0\nfunc (mc *MessageCache) GetForPeer(mid string, p peer.ID) (*Message, int, bool)\nfunc (*MessageCache) GetGossipIDs ¶\nfunc (mc *MessageCache) GetGossipIDs(topic string) []string\nfunc (*MessageCache) Put ¶\nfunc (mc *MessageCache) Put(msg *Message)\nfunc (*MessageCache) SetMsgIdFn ¶\nadded in\nv0.2.5\nfunc (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string)\nfunc (*MessageCache) Shift ¶\nfunc (mc *MessageCache) Shift()\ntype MessageSignaturePolicy ¶\nadded in\nv0.3.3\ntype MessageSignaturePolicy uint8\nMessageSignaturePolicy describes if signatures are produced, expected, and/or verified.\ntype MsgIdFunction ¶\nadded in\nv0.2.5\ntype MsgIdFunction func(pmsg *pb.Message) string\nMsgIdFunction returns a unique ID for the passed Message, and PubSub can be customized to use any\nimplementation of this function by configuring it with the Option from WithMessageIdFn.\ntype Option ¶\ntype Option func(*PubSub) error\nfunc WithAppSpecificRpcInspector ¶\nadded in\nv0.8.2\nfunc WithAppSpecificRpcInspector(inspector func(peer.ID, *RPC) error) Option\nWithAppSpecificRpcInspector sets a hook that inspect incomings RPCs prior to\nprocessing them.\nThe inspector is invoked on an accepted RPC just before it\nis handled.\nIf inspector's error is nil, the RPC is handled. Otherwise, it\nis dropped.\nfunc WithBlacklist ¶\nfunc WithBlacklist(b Blacklist) Option\nWithBlacklist provides an implementation of the blacklist; the default is a\nMapBlacklist\nfunc WithDefaultValidator ¶\nadded in\nv0.9.2\nfunc WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option\n/ Options\nWithDefaultValidator adds a validator that applies to all topics by default; it can be used\nmore than once and add multiple validators. Having a defult validator does not inhibit registering\na per topic validator.\nfunc WithDirectConnectTicks ¶\nadded in\nv0.3.2\nfunc WithDirectConnectTicks(t uint64) Option\nWithDirectConnectTicks is a gossipsub router option that sets the number of\nheartbeat ticks between attempting to reconnect direct peers that are not\ncurrently connected. A \"tick\" is based on the heartbeat interval, which is\n1s by default. The default value for direct connect ticks is 300.\nfunc WithDirectPeers ¶\nadded in\nv0.3.0\nfunc WithDirectPeers(pis []peer.AddrInfo) Option\nWithDirectPeers is a gossipsub router option that specifies peers with direct\npeering agreements. These peers are connected outside of the mesh, with all (valid)\nmessage unconditionally forwarded to them. The router will maintain open connections\nto these peers. Note that the peering agreement should be reciprocal with direct peers\nsymmetrically configured at both ends.\nfunc WithDiscovery ¶\nadded in\nv0.2.0\nfunc WithDiscovery(d discovery.Discovery, opts ...DiscoverOpt) Option\nWithDiscovery provides a discovery mechanism used to bootstrap and provide peers into PubSub\nfunc WithEventTracer ¶\nadded in\nv0.2.3\nfunc WithEventTracer(tracer EventTracer) Option\nWithEventTracer provides a tracer for the pubsub system\nfunc WithFloodPublish ¶\nadded in\nv0.3.0\nfunc WithFloodPublish(floodPublish bool) Option\nWithFloodPublish is a gossipsub router option that enables flood publishing.\nWhen this is enabled, published messages are forwarded to all peers with score >=\nto publishThreshold\nfunc WithGossipSubParams ¶\nadded in\nv0.5.0\nfunc WithGossipSubParams(cfg GossipSubParams) Option\nWithGossipSubParams is a gossip sub router option that allows a custom\nconfig to be set when instantiating the gossipsub router.\nfunc WithGossipSubProtocols ¶\nadded in\nv0.5.0\nfunc WithGossipSubProtocols(protos []protocol.ID, feature GossipSubFeatureTest) Option\nWithGossipSubProtocols is a gossipsub router option that configures a custom protocol list\nand feature test function\nfunc WithMaxMessageSize ¶\nadded in\nv0.3.0\nfunc WithMaxMessageSize(maxMessageSize int) Option\nWithMaxMessageSize sets the global maximum message size for pubsub wire\nmessages. The default value is 1MiB (DefaultMaxMessageSize).\nObserve the following warnings when setting this option.\nWARNING #1: Make sure to change the default protocol prefixes for floodsub\n(FloodSubID) and gossipsub (GossipSubID). This avoids accidentally joining\nthe public default network, which uses the default max message size, and\ntherefore will cause messages to be dropped.\nWARNING #2: Reducing the default max message limit is fine, if you are\ncertain that your application messages will not exceed the new limit.\nHowever, be wary of increasing the limit, as pubsub networks are naturally\nwrite-amplifying, i.e. for every message we receive, we send D copies of the\nmessage to our peers. If those messages are large, the bandwidth requirements\nwill grow linearly. Note that propagation is sent on the uplink, which\ntraditionally is more constrained than the downlink. Instead, consider\nout-of-band retrieval for large messages, by sending a CID (Content-ID) or\nanother type of locator, such that messages can be fetched on-demand, rather\nthan being pushed proactively. Under this design, you'd use the pubsub layer\nas a signalling system, rather than a data delivery system.\nfunc WithMessageAuthor ¶\nfunc WithMessageAuthor(author peer.ID) Option\nWithMessageAuthor sets the author for outbound messages to the given peer ID\n(defaults to the host's ID). If message signing is enabled, the private key\nmust be available in the host's peerstore.\nfunc WithMessageIdFn ¶\nadded in\nv0.2.5\nfunc WithMessageIdFn(fn MsgIdFunction) Option\nWithMessageIdFn is an option to customize the way a message ID is computed for a pubsub message.\nThe default ID function is DefaultMsgIdFn (concatenate source and seq nr.),\nbut it can be customized to e.g. the hash of the message.\nfunc WithMessageSignaturePolicy ¶\nadded in\nv0.3.3\nfunc WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option\nWithMessageSignaturePolicy sets the mode of operation for producing and verifying message signatures.\nfunc WithMessageSigning ¶\nfunc WithMessageSigning(enabled bool) Option\nWithMessageSigning enables or disables message signing (enabled by default).\nDeprecated: signature verification without message signing,\nor message signing without verification, are not recommended.\nfunc WithNoAuthor ¶\nadded in\nv0.3.3\nfunc WithNoAuthor() Option\nWithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures.\nNot recommended to use with the default message ID function, see WithMessageIdFn.\nfunc WithPeerExchange ¶\nadded in\nv0.3.0\nfunc WithPeerExchange(doPX bool) Option\nWithPeerExchange is a gossipsub router option that enables Peer eXchange on PRUNE.\nThis should generally be enabled in bootstrappers and well connected/trusted nodes\nused for bootstrapping.\nfunc WithPeerFilter ¶\nadded in\nv0.5.5\nfunc WithPeerFilter(filter PeerFilter) Option\nWithPeerFilter is an option to set a filter for pubsub peers.\nThe default peer filter is DefaultPeerFilter (which always returns true), but it can be customized\nto any custom implementation.\nfunc WithPeerGater ¶\nadded in\nv0.3.6\nfunc WithPeerGater(params *PeerGaterParams) Option\nWithPeerGater is a gossipsub router option that enables reactive validation queue\nmanagement.\nThe Gater is activated if the ratio of throttled/validated messages exceeds the specified\nthreshold.\nOnce active, the Gater probabilistically throttles peers _before_ they enter the validation\nqueue, performing Random Early Drop.\nThe throttle decision is randomized, with the probability of allowing messages to enter the\nvalidation queue controlled by the statistical observations of the performance of all peers\nin the IP address of the gated peer.\nThe Gater deactivates if there is no validation throttlinc occurring for the specified quiet\ninterval.\nfunc WithPeerOutboundQueueSize ¶\nadded in\nv0.2.2\nfunc WithPeerOutboundQueueSize(size int) Option\nWithPeerOutboundQueueSize is an option to set the buffer size for outbound messages to a peer\nWe start dropping messages to a peer if the outbound queue if full\nfunc WithPeerScore ¶\nadded in\nv0.3.0\nfunc WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option\nWithPeerScore is a gossipsub router option that enables peer scoring.\nfunc WithPeerScoreInspect ¶\nadded in\nv0.3.0\nfunc WithPeerScoreInspect(inspect interface{}, period time.Duration) Option\nWithPeerScoreInspect is a gossipsub router option that enables peer score debugging.\nWhen this option is enabled, the supplied function will be invoked periodically to allow\nthe application to inspect or dump the scores for connected peers.\nThe supplied function can have one of two signatures:\nPeerScoreInspectFn, which takes a map of peer IDs to score.\nExtendedPeerScoreInspectFn, which takes a map of peer IDs to\nPeerScoreSnapshots and allows inspection of individual score\ncomponents for debugging peer scoring.\nThis option must be passed _after_ the WithPeerScore option.\nfunc WithProtocolMatchFn ¶\nadded in\nv0.5.4\nfunc WithProtocolMatchFn(m ProtocolMatchFn) Option\nWithProtocolMatchFn sets a custom matching function for protocol selection to\nbe used by the protocol handler on the Host's Mux. Should be combined with\nWithGossipSubProtocols feature function for checking if certain protocol features\nare supported\nfunc WithRawTracer ¶\nadded in\nv0.5.0\nfunc WithRawTracer(tracer RawTracer) Option\nWithRawTracer adds a raw tracer to the pubsub system.\nMultiple tracers can be added using multiple invocations of the option.\nfunc WithSeenMessagesStrategy ¶\nadded in\nv0.8.3\nfunc WithSeenMessagesStrategy(strategy timecache.Strategy) Option\nWithSeenMessagesStrategy configures which type of lookup/cleanup strategy is used by the seen messages cache\nfunc WithSeenMessagesTTL ¶\nadded in\nv0.7.0\nfunc WithSeenMessagesTTL(ttl time.Duration) Option\nWithSeenMessagesTTL configures when a previously seen message ID can be forgotten about\nfunc WithStrictSignatureVerification ¶\nfunc WithStrictSignatureVerification(required bool) Option\nWithStrictSignatureVerification is an option to enable or disable strict message signing.\nWhen enabled (which is the default), unsigned messages will be discarded.\nDeprecated: signature verification without message signing,\nor message signing without verification, are not recommended.\nfunc WithSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc WithSubscriptionFilter(subFilter SubscriptionFilter) Option\nWithSubscriptionFilter is a pubsub option that specifies a filter for subscriptions\nin topics of interest.\nfunc WithValidateQueueSize ¶\nadded in\nv0.2.6\nfunc WithValidateQueueSize(n int) Option\nWithValidateQueueSize sets the buffer of validate queue. Defaults to 32.\nWhen queue is full, validation is throttled and new messages are dropped.\nfunc WithValidateThrottle ¶\nfunc WithValidateThrottle(n int) Option\nWithValidateThrottle sets the upper bound on the number of active validation\ngoroutines across all topics. The default is 8192.\nfunc WithValidateWorkers ¶\nadded in\nv0.0.3\nfunc WithValidateWorkers(n int) Option\nWithValidateWorkers sets the number of synchronous validation worker goroutines.\nDefaults to NumCPU.\nThe synchronous validation workers perform signature validation, apply inline\nuser validators, and schedule asynchronous user validators.\nYou can adjust this parameter to devote less cpu time to synchronous validation.\ntype PBTracer ¶\nadded in\nv0.2.3\ntype PBTracer struct {\n// contains filtered or unexported fields\n}\nPBTracer is a tracer that writes events to a file, as delimited protobufs.\nfunc NewPBTracer ¶\nadded in\nv0.2.3\nfunc NewPBTracer(file string) (*PBTracer, error)\nfunc OpenPBTracer ¶\nadded in\nv0.2.3\nfunc OpenPBTracer(file string, flags int, perm os.FileMode) (*PBTracer, error)\nOpenPBTracer creates a new PBTracer, with explicit control of OpenFile flags and permissions.\nfunc (*PBTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *PBTracer) Close()\nfunc (*PBTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *PBTracer) Trace(evt *pb.TraceEvent)\ntype PeerEvent ¶\nadded in\nv0.1.1\ntype PeerEvent struct {\nType EventType\nPeer peer.ID\n}\ntype PeerFilter ¶\nadded in\nv0.5.5\ntype PeerFilter func(pid peer.ID, topic string) bool\nPeerFilter is used to filter pubsub peers. It should return true for peers that are accepted for\na given topic. PubSub can be customized to use any implementation of this function by configuring\nit with the Option from WithPeerFilter.\ntype PeerGaterParams ¶\nadded in\nv0.3.6\ntype PeerGaterParams struct {\n// when the ratio of throttled/validated messages exceeds this threshold, the gater turns on\nThreshold float64\n// (linear) decay parameter for gater counters\nGlobalDecay float64 // global counter decay\nSourceDecay float64 // per IP counter decay\n// decay interval\nDecayInterval time.Duration\n// counter zeroing threshold\nDecayToZero float64\n// how long to retain stats\nRetainStats time.Duration\n// quiet interval before turning off the gater; if there are no validation throttle events\n// for this interval, the gater turns off\nQuiet time.Duration\n// weight of duplicate message deliveries\nDuplicateWeight float64\n// weight of ignored messages\nIgnoreWeight float64\n// weight of rejected messages\nRejectWeight float64\n// priority topic delivery weights\nTopicDeliveryWeights map[string]float64\n}\nPeerGaterParams groups together parameters that control the operation of the peer gater\nfunc DefaultPeerGaterParams ¶\nadded in\nv0.3.6\nfunc DefaultPeerGaterParams() *PeerGaterParams\nDefaultPeerGaterParams creates a new PeerGaterParams struct using default values\nfunc NewPeerGaterParams ¶\nadded in\nv0.3.6\nfunc NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams\nNewPeerGaterParams creates a new PeerGaterParams struct, using the specified threshold and decay\nparameters and default values for all other parameters.\nfunc (*PeerGaterParams) WithTopicDeliveryWeights ¶\nadded in\nv0.3.6\nfunc (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams\nWithTopicDeliveryWeights is a fluid setter for the priority topic delivery weights\ntype PeerMetadataStore ¶\nadded in\nv0.9.2\ntype PeerMetadataStore interface {\n// Get retrieves the metadata associated with a peer;\n// It should return nil if there is no metadata associated with the peer and not an error.\nGet(context.Context, peer.ID) ([]byte, error)\n// Put sets the metadata associated with a peer.\nPut(context.Context, peer.ID, []byte) error\n}\nPeerMetadataStore is an interface for storing and retrieving per peer metadata\ntype PeerScoreInspectFn ¶\nadded in\nv0.3.0\ntype PeerScoreInspectFn = func(map[peer.ID]float64)\ntype PeerScoreParams ¶\nadded in\nv0.3.0\ntype PeerScoreParams struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// Score parameters per topic.\nTopics map[string]*TopicScoreParams\n// Aggregate topic score cap; this limits the total contribution of topics towards a positive\n// score. It must be positive (or 0 for no cap).\nTopicScoreCap float64\n// P5: Application-specific peer scoring\nAppSpecificScore\nfunc(p peer.ID) float64\nAppSpecificWeight float64\n// P6: IP-colocation factor.\n// The parameter has an associated counter which counts the number of peers with the same IP.\n// If the number of peers in the same IP exceeds IPColocationFactorThreshold, then the value\n// is the square of the difference, ie (PeersInSameIP - IPColocationThreshold)^2.\n// If the number of peers in the same IP is less than the threshold, then the value is 0.\n// The weight of the parameter MUST be negative, unless you want to disable for testing.\n// Note: In order to simulate many IPs in a managable manner when testing, you can set the weight to 0\n//\nthus disabling the IP colocation penalty.\nIPColocationFactorWeight\nfloat64\nIPColocationFactorThreshold int\nIPColocationFactorWhitelist []*net.IPNet\n// P7: behavioural pattern penalties.\n// This parameter has an associated counter which tracks misbehaviour as detected by the\n// router. The router currently applies penalties for the following behaviors:\n// - attempting to re-graft before the prune backoff time has elapsed.\n// - not following up in IWANT requests for messages advertised with IHAVE.\n//\n// The value of the parameter is the square of the counter over the threshold, which decays with\n// BehaviourPenaltyDecay.\n// The weight of the parameter MUST be negative (or zero to disable).\nBehaviourPenaltyWeight, BehaviourPenaltyThreshold, BehaviourPenaltyDecay float64\n// the decay interval for parameter counters.\nDecayInterval time.Duration\n// counter value below which it is considered 0.\nDecayToZero float64\n// time to remember counters for a disconnected peer.\nRetainScore time.Duration\n// time to remember a message delivery for. Default to global TimeCacheDuration if 0.\nSeenMsgTTL time.Duration\n}\ntype PeerScoreSnapshot ¶\nadded in\nv0.3.3\ntype PeerScoreSnapshot struct {\nScore\nfloat64\nTopics\nmap[string]*TopicScoreSnapshot\nAppSpecificScore\nfloat64\nIPColocationFactor float64\nBehaviourPenalty\nfloat64\n}\ntype PeerScoreThresholds ¶\nadded in\nv0.3.0\ntype PeerScoreThresholds struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// GossipThreshold is the score threshold below which gossip propagation is suppressed;\n// should be negative.\nGossipThreshold float64\n// PublishThreshold is the score threshold below which we shouldn't publish when using flood\n// publishing (also applies to fanout and floodsub peers); should be negative and <= GossipThreshold.\nPublishThreshold float64\n// GraylistThreshold is the score threshold below which message processing is suppressed altogether,\n// implementing an effective gray list according to peer score; should be negative and <= PublishThreshold.\nGraylistThreshold float64\n// AcceptPXThreshold is the score threshold below which PX will be ignored; this should be positive\n// and limited to scores attainable by bootstrappers and other trusted nodes.\nAcceptPXThreshold float64\n// OpportunisticGraftThreshold is the median mesh score threshold before triggering opportunistic\n// grafting; this should have a small positive value.\nOpportunisticGraftThreshold float64\n}\ntype ProtocolMatchFn ¶\nadded in\nv0.5.4\ntype ProtocolMatchFn = func(protocol.ID) func(protocol.ID) bool\ntype ProvideKey ¶\nadded in\nv0.7.0\ntype ProvideKey func() (crypto.PrivKey, peer.ID)\nProvideKey is a function that provides a private key and its associated peer ID when publishing a new message\ntype PubOpt ¶\nadded in\nv0.2.0\ntype PubOpt func(pub *PublishOptions) error\nfunc WithLocalPublication ¶\nadded in\nv0.8.0\nfunc WithLocalPublication(local bool) PubOpt\nWithLocalPublication returns a publishing option to notify in-process subscribers only.\nIt prevents message publication to mesh peers.\nUseful in edge cases where the msg needs to be only delivered to the in-process subscribers,\ne.g. not to spam the network with outdated msgs.\nShould not be used specifically for in-process pubsubing.\nfunc WithReadiness ¶\nadded in\nv0.2.0\nfunc WithReadiness(ready RouterReady) PubOpt\nWithReadiness returns a publishing option for only publishing when the router is ready.\nThis option is not useful unless PubSub is also using WithDiscovery\nfunc WithSecretKeyAndPeerId ¶\nadded in\nv0.7.0\nfunc WithSecretKeyAndPeerId(key crypto.PrivKey, pid peer.ID) PubOpt\nWithSecretKeyAndPeerId returns a publishing option for providing a custom private key and its corresponding peer ID\nThis option is useful when we want to send messages from \"virtual\", never-connectable peers in the network\ntype PubSub ¶\ntype PubSub struct {\n// contains filtered or unexported fields\n}\nPubSub is the implementation of the pubsub system.\nfunc NewFloodSub ¶\nfunc NewFloodSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nNewFloodSub returns a new PubSub object using the FloodSubRouter.\nfunc NewFloodsubWithProtocols ¶\nfunc NewFloodsubWithProtocols(ctx context.Context, h host.Host, ps []protocol.ID, opts ...Option) (*PubSub, error)\nNewFloodsubWithProtocols returns a new floodsub-enabled PubSub objecting using the protocols specified in ps.\nfunc NewGossipSub ¶\nfunc NewGossipSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nNewGossipSub returns a new PubSub object using the default GossipSubRouter as the router.\nfunc NewGossipSubWithRouter ¶\nadded in\nv0.8.2\nfunc NewGossipSubWithRouter(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nNewGossipSubWithRouter returns a new PubSub object using the given router.\nfunc NewPubSub ¶\nfunc NewPubSub(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nNewPubSub returns a new PubSub management object.\nfunc NewRandomSub ¶\nfunc NewRandomSub(ctx context.Context, h host.Host, size int, opts ...Option) (*PubSub, error)\nNewRandomSub returns a new PubSub object using RandomSubRouter as the router.\nfunc (*PubSub) BlacklistPeer ¶\nfunc (p *PubSub) BlacklistPeer(pid peer.ID)\nBlacklistPeer blacklists a peer; all messages from this peer will be unconditionally dropped.\nfunc (*PubSub) GetTopics ¶\nfunc (p *PubSub) GetTopics() []string\nGetTopics returns the topics this node is subscribed to.\nfunc (*PubSub) Join ¶\nadded in\nv0.2.0\nfunc (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error)\nJoin joins the topic and returns a Topic handle. Only one Topic handle should exist per topic, and Join will error if\nthe Topic handle already exists.\nfunc (*PubSub) ListPeers ¶\nfunc (p *PubSub) ListPeers(topic string) []peer.ID\nListPeers returns a list of peers we are connected to in the given topic.\nfunc (*PubSub) Publish\ndeprecated\nfunc (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) error\nPublish publishes data to the given topic.\nDeprecated: use pubsub.Join() and topic.Publish() instead\nfunc (*PubSub) RegisterTopicValidator ¶\nfunc (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error\nRegisterTopicValidator registers a validator for topic.\nBy default validators are asynchronous, which means they will run in a separate goroutine.\nThe number of active goroutines is controlled by global and per topic validator\nthrottles; if it exceeds the throttle threshold, messages will be dropped.\nfunc (*PubSub) Subscribe\ndeprecated\nfunc (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)\nSubscribe returns a new Subscription for the given topic.\nNote that subscription is not an instantaneous operation. It may take some time\nbefore the subscription is processed by the pubsub main loop and propagated to our peers.\nDeprecated: use pubsub.Join() and topic.Subscribe() instead\nfunc (*PubSub) UnregisterTopicValidator ¶\nfunc (p *PubSub) UnregisterTopicValidator(topic string) error\nUnregisterTopicValidator removes a validator from a topic.\nReturns an error if there was no validator registered with the topic.\ntype PubSubNotif ¶\ntype PubSubNotif PubSub\nfunc (*PubSubNotif) ClosedStream ¶\nfunc (p *PubSubNotif) ClosedStream(n network.Network, s network.Stream)\nfunc (*PubSubNotif) Connected ¶\nfunc (p *PubSubNotif) Connected(n network.Network, c network.Conn)\nfunc (*PubSubNotif) Disconnected ¶\nfunc (p *PubSubNotif) Disconnected(n network.Network, c network.Conn)\nfunc (*PubSubNotif) Initialize ¶\nadded in\nv0.4.1\nfunc (p *PubSubNotif) Initialize()\nfunc (*PubSubNotif) Listen ¶\nfunc (p *PubSubNotif) Listen(n network.Network, _ ma.Multiaddr)\nfunc (*PubSubNotif) ListenClose ¶\nfunc (p *PubSubNotif) ListenClose(n network.Network, _ ma.Multiaddr)\nfunc (*PubSubNotif) OpenedStream ¶\nfunc (p *PubSubNotif) OpenedStream(n network.Network, s network.Stream)\ntype PubSubRouter ¶\ntype PubSubRouter interface {\n// Protocols returns the list of protocols supported by the router.\nProtocols() []protocol.ID\n// Attach is invoked by the PubSub constructor to attach the router to a\n// freshly initialized PubSub instance.\nAttach(*PubSub)\n// AddPeer notifies the router that a new peer has been connected.\nAddPeer(peer.ID, protocol.ID)\n// RemovePeer notifies the router that a peer has been disconnected.\nRemovePeer(peer.ID)\n// EnoughPeers returns whether the router needs more peers before it's ready to publish new records.\n// Suggested (if greater than 0) is a suggested number of peers that the router should need.\nEnoughPeers(topic string, suggested int) bool\n// AcceptFrom is invoked on any incoming message before pushing it to the validation pipeline\n// or processing control information.\n// Allows routers with internal scoring to vet peers before committing any processing resources\n// to the message and implement an effective graylist and react to validation queue overload.\nAcceptFrom(peer.ID) AcceptStatus\n// HandleRPC is invoked to process control messages in the RPC envelope.\n// It is invoked after subscriptions and payload messages have been processed.\nHandleRPC(*RPC)\n// Publish is invoked to forward a new message that has been validated.\nPublish(*Message)\n// Join notifies the router that we want to receive and forward messages in a topic.\n// It is invoked after the subscription announcement.\nJoin(topic string)\n// Leave notifies the router that we are no longer interested in a topic.\n// It is invoked after the unsubscription announcement.\nLeave(topic string)\n}\nPubSubRouter is the message router component of PubSub.\ntype PublishOptions ¶\nadded in\nv0.2.0\ntype PublishOptions struct {\n// contains filtered or unexported fields\n}\ntype RPC ¶\ntype RPC struct {\npb.RPC\n// contains filtered or unexported fields\n}\ntype RandomSubRouter ¶\ntype RandomSubRouter struct {\n// contains filtered or unexported fields\n}\nRandomSubRouter is a router that implements a random propagation strategy.\nFor each message, it selects the square root of the network size peers, with a min of RandomSubD,\nand forwards the message to them.\nfunc (*RandomSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (*RandomSubRouter) AddPeer ¶\nfunc (rs *RandomSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*RandomSubRouter) Attach ¶\nfunc (rs *RandomSubRouter) Attach(p *PubSub)\nfunc (*RandomSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*RandomSubRouter) HandleRPC ¶\nfunc (rs *RandomSubRouter) HandleRPC(rpc *RPC)\nfunc (*RandomSubRouter) Join ¶\nfunc (rs *RandomSubRouter) Join(topic string)\nfunc (*RandomSubRouter) Leave ¶\nfunc (rs *RandomSubRouter) Leave(topic string)\nfunc (*RandomSubRouter) Protocols ¶\nfunc (rs *RandomSubRouter) Protocols() []protocol.ID\nfunc (*RandomSubRouter) Publish ¶\nfunc (rs *RandomSubRouter) Publish(msg *Message)\nfunc (*RandomSubRouter) RemovePeer ¶\nfunc (rs *RandomSubRouter) RemovePeer(p peer.ID)\ntype RawTracer ¶\nadded in\nv0.5.0\ntype RawTracer interface {\n// AddPeer is invoked when a new peer is added.\nAddPeer(p peer.ID, proto protocol.ID)\n// RemovePeer is invoked when a peer is removed.\nRemovePeer(p peer.ID)\n// Join is invoked when a new topic is joined\nJoin(topic string)\n// Leave is invoked when a topic is abandoned\nLeave(topic string)\n// Graft is invoked when a new peer is grafted on the mesh (gossipsub)\nGraft(p peer.ID, topic string)\n// Prune is invoked when a peer is pruned from the message (gossipsub)\nPrune(p peer.ID, topic string)\n// ValidateMessage is invoked when a message first enters the validation pipeline.\nValidateMessage(msg *Message)\n// DeliverMessage is invoked when a message is delivered\nDeliverMessage(msg *Message)\n// RejectMessage is invoked when a message is Rejected or Ignored.\n// The reason argument can be one of the named strings Reject*.\nRejectMessage(msg *Message, reason string)\n// DuplicateMessage is invoked when a duplicate message is dropped.\nDuplicateMessage(msg *Message)\n// ThrottlePeer is invoked when a peer is throttled by the peer gater.\nThrottlePeer(p peer.ID)\n// RecvRPC is invoked when an incoming RPC is received.\nRecvRPC(rpc *RPC)\n// SendRPC is invoked when a RPC is sent.\nSendRPC(rpc *RPC, p peer.ID)\n// DropRPC is invoked when an outbound RPC is dropped, typically because of a queue full.\nDropRPC(rpc *RPC, p peer.ID)\n// UndeliverableMessage is invoked when the consumer of Subscribe is not reading messages fast enough and\n// the pressure release mechanism trigger, dropping messages.\nUndeliverableMessage(msg *Message)\n}\nRawTracer is a low level tracing interface that allows an application to trace the internal\noperation of the pubsub subsystem.\nNote that the tracers are invoked synchronously, which means that application tracers must\ntake care to not block or modify arguments.\nWarning: this interface is not fixed, we may be adding new methods as necessitated by the system\nin the future.\ntype RelayCancelFunc ¶\nadded in\nv0.3.0\ntype RelayCancelFunc func()\ntype RemoteTracer ¶\nadded in\nv0.2.3\ntype RemoteTracer struct {\n// contains filtered or unexported fields\n}\nRemoteTracer is a tracer that sends trace events to a remote peer\nfunc NewRemoteTracer ¶\nadded in\nv0.2.3\nfunc NewRemoteTracer(ctx context.Context, host host.Host, pi peer.AddrInfo) (*RemoteTracer, error)\nNewRemoteTracer constructs a RemoteTracer, tracing to the peer identified by pi\nfunc (*RemoteTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *RemoteTracer) Close()\nfunc (*RemoteTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *RemoteTracer) Trace(evt *pb.TraceEvent)\ntype RouterReady ¶\nadded in\nv0.2.0\ntype RouterReady func(rt PubSubRouter, topic string) (bool, error)\nRouterReady is a function that decides if a router is ready to publish\nfunc MinTopicSize ¶\nadded in\nv0.2.0\nfunc MinTopicSize(size int) RouterReady\nMinTopicSize returns a function that checks if a router is ready for publishing based on the topic size.\nThe router ultimately decides the whether it is ready or not, the given size is just a suggestion. Note\nthat the topic size does not include the router in the count.\ntype SubOpt ¶\ntype SubOpt func(sub *Subscription) error\nfunc WithBufferSize ¶\nadded in\nv0.5.0\nfunc WithBufferSize(size int) SubOpt\nWithBufferSize is a Subscribe option to customize the size of the subscribe output buffer.\nThe default length is 32 but it can be configured to avoid dropping messages if the consumer is not reading fast\nenough.\ntype Subscription ¶\ntype Subscription struct {\n// contains filtered or unexported fields\n}\nSubscription handles the details of a particular Topic subscription.\nThere may be many subscriptions for a given Topic.\nfunc (*Subscription) Cancel ¶\nfunc (sub *Subscription) Cancel()\nCancel closes the subscription. If this is the last active subscription then pubsub will send an unsubscribe\nannouncement to the network.\nfunc (*Subscription) Next ¶\nfunc (sub *Subscription) Next(ctx context.Context) (*Message, error)\nNext returns the next message in our subscription\nfunc (*Subscription) Topic ¶\nfunc (sub *Subscription) Topic() string\nTopic returns the topic string associated with the Subscription\ntype SubscriptionFilter ¶\nadded in\nv0.3.6\ntype SubscriptionFilter interface {\n// CanSubscribe returns true if the topic is of interest and we can subscribe to it\nCanSubscribe(topic string) bool\n// FilterIncomingSubscriptions is invoked for all RPCs containing subscription notifications.\n// It should filter only the subscriptions of interest and my return an error if (for instance)\n// there are too many subscriptions.\nFilterIncomingSubscriptions(peer.ID, []*pb.RPC_SubOpts) ([]*pb.RPC_SubOpts, error)\n}\nSubscriptionFilter is a function that tells us whether we are interested in allowing and tracking\nsubscriptions for a given topic.\nThe filter is consulted whenever a subscription notification is received by another peer; if the\nfilter returns false, then the notification is ignored.\nThe filter is also consulted when joining topics; if the filter returns false, then the Join\noperation will result in an error.\nfunc NewAllowlistSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter\nNewAllowlistSubscriptionFilter creates a subscription filter that only allows explicitly\nspecified topics for local subscriptions and incoming peer subscriptions.\nfunc NewRegexpSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc NewRegexpSubscriptionFilter(rx *regexp.Regexp) SubscriptionFilter\nNewRegexpSubscriptionFilter creates a subscription filter that only allows topics that\nmatch a regular expression for local subscriptions and incoming peer subscriptions.\nWarning: the user should take care to match start/end of string in the supplied regular\nexpression, otherwise the filter might match unwanted topics unexpectedly.\nfunc WrapLimitSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter\nWrapLimitSubscriptionFilter wraps a subscription filter with a hard limit in the number of\nsubscriptions allowed in an RPC message.\ntype TimeCachedBlacklist ¶\nadded in\nv0.2.6\ntype TimeCachedBlacklist struct {\n// contains filtered or unexported fields\n}\nTimeCachedBlacklist is a blacklist implementation using a time cache\nfunc (*TimeCachedBlacklist) Add ¶\nadded in\nv0.2.6\nfunc (b *TimeCachedBlacklist) Add(p peer.ID) bool\nAdd returns a bool saying whether Add of peer was successful\nfunc (*TimeCachedBlacklist) Contains ¶\nadded in\nv0.2.6\nfunc (b *TimeCachedBlacklist) Contains(p peer.ID) bool\ntype Topic ¶\nadded in\nv0.2.0\ntype Topic struct {\n// contains filtered or unexported fields\n}\nTopic is the handle for a pubsub topic\nfunc (*Topic) Close ¶\nadded in\nv0.2.0\nfunc (t *Topic) Close() error\nClose closes down the topic. Will return an error unless there are no active event handlers or subscriptions.\nDoes not error if the topic is already closed.\nfunc (*Topic) EventHandler ¶\nadded in\nv0.2.0\nfunc (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error)\nEventHandler creates a handle for topic specific events\nMultiple event handlers may be created and will operate independently of each other\nfunc (*Topic) ListPeers ¶\nadded in\nv0.2.0\nfunc (t *Topic) ListPeers() []peer.ID\nListPeers returns a list of peers we are connected to in the given topic.\nfunc (*Topic) Publish ¶\nadded in\nv0.2.0\nfunc (t *Topic) Publish(ctx context.Context, data []byte, opts ...PubOpt) error\nPublish publishes data to topic.\nfunc (*Topic) Relay ¶\nadded in\nv0.3.0\nfunc (t *Topic) Relay() (RelayCancelFunc, error)\nRelay enables message relaying for the topic and returns a reference\ncancel function. Subsequent calls increase the reference counter.\nTo completely disable the relay, all references must be cancelled.\nfunc (*Topic) SetScoreParams ¶\nadded in\nv0.3.6\nfunc (t *Topic) SetScoreParams(p *TopicScoreParams) error\nSetScoreParams sets the topic score parameters if the pubsub router supports peer\nscoring\nfunc (*Topic) String ¶\nadded in\nv0.3.5\nfunc (t *Topic) String() string\nString returns the topic associated with t\nfunc (*Topic) Subscribe ¶\nadded in\nv0.2.0\nfunc (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error)\nSubscribe returns a new Subscription for the topic.\nNote that subscription is not an instantaneous operation. It may take some time\nbefore the subscription is processed by the pubsub main loop and propagated to our peers.\ntype TopicEventHandler ¶\nadded in\nv0.2.0\ntype TopicEventHandler struct {\n// contains filtered or unexported fields\n}\nTopicEventHandler is used to manage topic specific events. No Subscription is required to receive events.\nfunc (*TopicEventHandler) Cancel ¶\nadded in\nv0.2.0\nfunc (t *TopicEventHandler) Cancel()\nCancel closes the topic event handler\nfunc (*TopicEventHandler) NextPeerEvent ¶\nadded in\nv0.2.0\nfunc (t *TopicEventHandler) NextPeerEvent(ctx context.Context) (PeerEvent, error)\nNextPeerEvent returns the next event regarding subscribed peers\nGuarantees: Peer Join and Peer Leave events for a given peer will fire in order.\nUnless a peer both Joins and Leaves before NextPeerEvent emits either event\nall events will eventually be received from NextPeerEvent.\ntype TopicEventHandlerOpt ¶\nadded in\nv0.2.0\ntype TopicEventHandlerOpt func(t *TopicEventHandler) error\ntype TopicOpt ¶\nadded in\nv0.2.0\ntype TopicOpt func(t *Topic) error\nfunc WithTopicMessageIdFn ¶\nadded in\nv0.7.0\nfunc WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt\nWithTopicMessageIdFn sets custom MsgIdFunction for a Topic, enabling topics to have own msg id generation rules.\ntype TopicOptions ¶\nadded in\nv0.2.0\ntype TopicOptions struct{}\ntype TopicScoreParams ¶\nadded in\nv0.3.0\ntype TopicScoreParams struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// The weight of the topic.\nTopicWeight float64\n// P1: time in the mesh\n// This is the time the peer has been grafted in the mesh.\n// The value of the parameter is the time/TimeInMeshQuantum, capped by TimeInMeshCap.\n// The weight of the parameter MUST be positive (or zero to disable).\nTimeInMeshWeight\nfloat64\nTimeInMeshQuantum time.Duration\nTimeInMeshCap\nfloat64\n// P2: first message deliveries\n// This is the number of message deliveries in the topic.\n// The value of the parameter is a counter, decaying with FirstMessageDeliveriesDecay, and capped\n// by FirstMessageDeliveriesCap.\n// The weight of the parameter MUST be positive (or zero to disable).\nFirstMessageDeliveriesWeight, FirstMessageDeliveriesDecay float64\nFirstMessageDeliveriesCap\nfloat64\n// P3: mesh message deliveries\n// This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of\n// message validation; deliveries during validation also count and are retroactively applied\n// when validation succeeds.\n// This window accounts for the minimum time before a hostile mesh peer trying to game the score\n// could replay back a valid message we just sent them.\n// It effectively tracks first and near-first deliveries, i.e., a message seen from a mesh peer\n// before we have forwarded it to them.\n// The parameter has an associated counter, decaying with MeshMessageDeliveriesDecay.\n// If the counter exceeds the threshold, its value is 0.\n// If the counter is below the MeshMessageDeliveriesThreshold, the value is the square of\n// the deficit, ie (MessageDeliveriesThreshold - counter)^2\n// The penalty is only activated after MeshMessageDeliveriesActivation time in the mesh.\n// The weight of the parameter MUST be negative (or zero to disable).\nMeshMessageDeliveriesWeight, MeshMessageDeliveriesDecay\nfloat64\nMeshMessageDeliveriesCap, MeshMessageDeliveriesThreshold\nfloat64\nMeshMessageDeliveriesWindow, MeshMessageDeliveriesActivation time.Duration\n// P3b: sticky mesh propagation failures\n// This is a sticky penalty that applies when a peer gets pruned from the mesh with an active\n// mesh message delivery penalty.\n// The weight of the parameter MUST be negative (or zero to disable)\nMeshFailurePenaltyWeight, MeshFailurePenaltyDecay float64\n// P4: invalid messages\n// This is the number of invalid messages in the topic.\n// The value of the parameter is the square of the counter, decaying with\n// InvalidMessageDeliveriesDecay.\n// The weight of the parameter MUST be negative (or zero to disable).\nInvalidMessageDeliveriesWeight, InvalidMessageDeliveriesDecay float64\n}\ntype TopicScoreSnapshot ¶\nadded in\nv0.3.3\ntype TopicScoreSnapshot struct {\nTimeInMesh\ntime.Duration\nFirstMessageDeliveries\nfloat64\nMeshMessageDeliveries\nfloat64\nInvalidMessageDeliveries float64\n}\ntype ValidationError ¶\nadded in\nv0.5.0\ntype ValidationError struct {\nReason string\n}\nValidationError is an error that may be signalled from message publication when the message\nfails validation\nfunc (ValidationError) Error ¶\nadded in\nv0.5.0\nfunc (e ValidationError) Error() string\ntype ValidationResult ¶\nadded in\nv0.3.0\ntype ValidationResult int\nValidationResult represents the decision of an extended validator\ntype Validator ¶\ntype Validator func(context.Context, peer.ID, *Message) bool\nValidator is a function that validates a message with a binary decision: accept or reject.\ntype ValidatorEx ¶\nadded in\nv0.3.0\ntype ValidatorEx func(context.Context, peer.ID, *Message) ValidationResult\nValidatorEx is an extended validation function that validates a message with an enumerated decision\nfunc NewBasicSeqnoValidator ¶\nadded in\nv0.9.2\nfunc NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx\nNewBasicSeqnoValidator constructs a BasicSeqnoValidator using the givven PeerMetadataStore.\ntype ValidatorOpt ¶\ntype ValidatorOpt func(addVal *addValReq) error\nValidatorOpt is an option for RegisterTopicValidator.\nfunc WithValidatorConcurrency ¶\nfunc WithValidatorConcurrency(n int) ValidatorOpt\nWithValidatorConcurrency is an option that sets the topic validator throttle.\nThis controls the number of active validation goroutines for the topic; the default is 1024.\nfunc WithValidatorInline ¶\nadded in\nv0.0.3\nfunc WithValidatorInline(inline bool) ValidatorOpt\nWithValidatorInline is an option that sets the validation disposition to synchronous:\nit will be executed inline in validation front-end, without spawning a new goroutine.\nThis is suitable for simple or cpu-bound validators that do not block.\nfunc WithValidatorTimeout ¶\nfunc WithValidatorTimeout(timeout time.Duration) ValidatorOpt\nWithValidatorTimeout is an option that sets a timeout for an (asynchronous) topic validator.\nBy default there is no timeout in asynchronous validators.\nSource Files\n¶\nView all Source files\nbackoff.go\nblacklist.go\ncomm.go\ndiscovery.go\ndoc.go\nfloodsub.go\ngossip_tracer.go\ngossipsub.go\ngossipsub_feat.go\nmcache.go\nmidgen.go\nnotify.go\npeer_gater.go\npubsub.go\nrandomsub.go\nscore.go\nscore_params.go\nsign.go\nsubscription.go\nsubscription_filter.go\ntag_tracer.go\ntopic.go\ntrace.go\ntracer.go\nvalidation.go\nvalidation_builtin.go\nDirectories\n¶\nShow internal\nCollapse all\nPath\nSynopsis\ncompat\npb\ntimecache\nClick to show internal directories.\nClick to hide internal directories.\nWhy Go\nUse Cases\nCase Studies\nGet Started\nPlayground\nTour\nStack Overflow\nHelp\nPackages\nStandard Library\nSub-repositories\nAbout Go Packages\nAbout\nDownload\nBlog\nIssue Tracker\nRelease Notes\nBrand Guidelines\nCode of Conduct\nConnect\nTwitter\nGitHub\nSlack\nr/golang\nMeetup\nGolang Weekly\nCopyright\nTerms of Service\nPrivacy Policy\nReport an Issue\nTheme Toggle\nShortcuts Modal\nJump to\nClose\nKeyboard shortcuts\n? : This menu\n/ : Search site\nf or F : Jump to\ny or Y\n: Canonical URL\nClose\ngo.dev uses cookies from Google to deliver and enhance the quality of its services and to\nanalyze traffic. Learn more.\nOkay","summary":"providing information about initializing a PubSub service in Go using libp2p. It covers various constants, variables, functions, and types related to the initialization process. The text also discusses parameters, options, and functions for configuring the PubSub router, including message caching, gossiping, pruning peers, and message signatures. It also mentions the existence of routers and tracers for the PubSub service.","chunks":["Skip to Main Content Why Go Case Studies Common problems companies solve with Go Use Cases Stories about how and why companies use Go Security Policy How Go can help keep you secure by default Learn Docs Effective Go Tips for writing clear, performant, and idiomatic Go code Go User Manual A complete introduction to building software with Go Standard library Reference documentation for Go's standard library Release Notes Learn what's new in each Go release Packages Community Recorded Talks Videos from prior events Meetups Meet other local Go developers Conferences Learn and network with Go developers from around the world Go blog The Go project's official blog. Go project Get help and stay informed from Go Get connected Why Go Why Go Case Studies Use Cases Security Policy Learn Docs Docs Effective Go Go User Manual Standard library Release Notes Packages Community Community Recorded Talks Meetups Conferences Go blog Go project Get connected Discover Packages github.com/libp2p/go-libp2p-pubsub pubsub package module Version: v0.10.0 Opens a new window with list of versions in this module. Latest Latest This package is not in the latest version of its module. Go to latest Published: Nov 1, 2023 License: Apache-2.0, MIT, Apache-2.0, + 1 more Opens a new window with license information. Imports: 37 Opens a new window with list of imports. Imported by: 631 Opens a new window with list of known importers. Main Versions Licenses Imports Imported By Details Valid go.mod file The Go module system was introduced in Go 1.11 and is the official dependency management solution for Go. Redistributable license Redistributable licenses place minimal restrictions on how software can be used, modified, and redistributed. Tagged version Modules with tagged versions give importers more predictable builds. Stable version When a project reaches major version v1 it is considered stable. Learn more about best practices Repository github.com/libp2p/go-libp2p-pubsub Links Open Source Insights Jump to ... README Repo Lead Maintainer Table of Contents Install Usage Example Documentation In this repo, you will find Tracing Contribute License Documentation Overview Index Constants Variables Functions DefaultMsgIdFn(pmsg) DefaultPeerFilter(pid, topic) FilterSubscriptions(subs, filter) GossipSubDefaultFeatures(feat, proto) ScoreParameterDecay(decay) ScoreParameterDecayWithBase(decay, base, decayToZero) Types type AcceptStatus type BackoffConnectorFactory type BasicSeqnoValidator type Blacklist NewMapBlacklist() NewTimeCachedBlacklist(expiry) type CacheEntry type DiscoverOpt WithDiscoverConnector(connFactory) WithDiscoveryOpts(opts) type EventTracer type EventType type ExtendedPeerScoreInspectFn type FloodSubRouter (fs) AcceptFrom() (fs) AddPeer(p, proto) (fs) Attach(p) (fs) EnoughPeers(topic, suggested) (fs) HandleRPC(rpc) (fs) Join(topic) (fs) Leave(topic) (fs) Protocols() (fs) Publish(msg) (fs) RemovePeer(p) type GossipSubFeature type GossipSubFeatureTest type GossipSubParams DefaultGossipSubParams() type GossipSubRouter DefaultGossipSubRouter(h) (gs) AcceptFrom(p) (gs) AddPeer(p, proto) (gs) Attach(p) (gs) EnoughPeers(topic, suggested) (gs) HandleRPC(rpc) (gs) Join(topic) (gs) Leave(topic) (gs) Protocols() (gs) Publish(msg) (gs) RemovePeer(p) (gs) WithDefaultTagTracer() type JSONTracer NewJSONTracer(file) OpenJSONTracer(file, flags, perm) (t) Close() (t) Trace(evt) type MapBlacklist (b) Add(p) (b) Contains(p) type Message (m) GetFrom() type MessageCache NewMessageCache(gossip, history) (mc) Get(mid) (mc) GetForPeer(mid, p) (mc) GetGossipIDs(topic) (mc) Put(msg) (mc) SetMsgIdFn(msgID) (mc) Shift() type MessageSignaturePolicy type MsgIdFunction type Option WithAppSpecificRpcInspector(inspector) WithBlacklist(b) WithDefaultValidator(val, opts) WithDirectConnectTicks(t) WithDirectPeers(pis) WithDiscovery(d, opts) WithEventTracer(tracer) WithFloodPublish(floodPublish) WithGossipSubParams(cfg) WithGossipSubProtocols(protos, feature) WithMaxMessageSize(maxMessageSize) WithMessageAuthor(author) WithMessageIdFn(fn) WithMessageSignaturePolicy(policy) WithMessageSigning(enabled) WithNoAuthor() WithPeerExchange(doPX) WithPeerFilter(filter) WithPeerGater(params) WithPeerOutboundQueueSize(size) WithPeerScore(params, thresholds) WithPeerScoreInspect(inspect, period) WithProtocolMatchFn(m) WithRawTracer(tracer) WithSeenMessagesStrategy(strategy) WithSeenMessagesTTL(ttl) WithStrictSignatureVerification(required) WithSubscriptionFilter(subFilter) WithValidateQueueSize(n) WithValidateThrottle(n) WithValidateWorkers(n) type PBTracer NewPBTracer(file) OpenPBTracer(file, flags, perm) (t) Close() (t) Trace(evt) type PeerEvent type PeerFilter type PeerGaterParams DefaultPeerGaterParams() NewPeerGaterParams(threshold, globalDecay, sourceDecay) (p) WithTopicDeliveryWeights(w) type PeerMetadataStore type PeerScoreInspectFn type PeerScoreParams type PeerScoreSnapshot type PeerScoreThresholds type ProtocolMatchFn type ProvideKey type PubOpt WithLocalPublication(local) WithReadiness(ready) WithSecretKeyAndPeerId(key, pid) type PubSub NewFloodSub(ctx, h, opts) NewFloodsubWithProtocols(ctx, h, ps, opts) NewGossipSub(ctx, h, opts) NewGossipSubWithRouter(ctx, h, rt, opts) NewPubSub(ctx, h, rt, opts) NewRandomSub(ctx, h, size, opts) (p) BlacklistPeer(pid) (p) GetTopics() (p) Join(topic, opts) (p) ListPeers(topic) (p) Publish(topic, data, opts) (p) RegisterTopicValidator(topic, val, opts) (p) Subscribe(topic, opts) (p) UnregisterTopicValidator(topic) type PubSubNotif (p) ClosedStream(n, s) (p) Connected(n, c) (p) Disconnected(n, c) (p) Initialize() (p) Listen(n, _) (p) ListenClose(n, _) (p) OpenedStream(n, s) type PubSubRouter type PublishOptions type RPC type RandomSubRouter (rs) AcceptFrom() (rs) AddPeer(p, proto) (rs) Attach(p) (rs) EnoughPeers(topic, suggested) (rs) HandleRPC(rpc) (rs) Join(topic) (rs) Leave(topic) (rs) Protocols() (rs) Publish(msg) (rs) RemovePeer(p) type RawTracer type RelayCancelFunc type RemoteTracer NewRemoteTracer(ctx, host, pi) (t) Close() (t) Trace(evt) type RouterReady MinTopicSize(size) type SubOpt WithBufferSize(size) type Subscription (sub) Cancel() (sub) Next(ctx) (sub) Topic() type SubscriptionFilter NewAllowlistSubscriptionFilter(topics) NewRegexpSubscriptionFilter(rx) WrapLimitSubscriptionFilter(filter, limit) type TimeCachedBlacklist (b) Add(p) (b) Contains(p) type Topic (t) Close() (t) EventHandler(opts) (t) ListPeers() (t) Publish(ctx, data, opts) (t) Relay() (t) SetScoreParams(p) (t) String() (t) Subscribe(opts) type TopicEventHandler (t) Cancel() (t) NextPeerEvent(ctx) type TopicEventHandlerOpt type TopicOpt WithTopicMessageIdFn(msgId) type TopicOptions type TopicScoreParams type TopicScoreSnapshot type ValidationError (e) Error() type ValidationResult type Validator type ValidatorEx NewBasicSeqnoValidator(meta) type ValidatorOpt WithValidatorConcurrency(n) WithValidatorInline(inline) WithValidatorTimeout(timeout) Source Files Directories READMEDocumentationSource FilesDirectoriesRepo Lead MaintainerTable of ContentsInstallUsageDocumentationContributeLicenseExampleIn this repo, you will findTracingOverviewIndexConstantsVariablesFunctionsTypesDefaultMsgIdFn(pmsg)DefaultPeerFilter(pid, topic)FilterSubscriptions(subs, filter)GossipSubDefaultFeatures(feat, proto)ScoreParameterDecay(decay)ScoreParameterDecayWithBase(decay, base, decayToZero)type AcceptStatustype BackoffConnectorFactorytype BasicSeqnoValidatortype Blacklisttype CacheEntrytype DiscoverOpttype EventTracertype EventTypetype ExtendedPeerScoreInspectFntype FloodSubRoutertype GossipSubFeaturetype GossipSubFeatureTesttype GossipSubParamstype GossipSubRoutertype JSONTracertype MapBlacklisttype Messagetype MessageCachetype MessageSignaturePolicytype MsgIdFunctiontype Optiontype PBTracertype PeerEventtype PeerFiltertype PeerGaterParamstype PeerMetadataStoretype PeerScoreInspectFntype PeerScoreParamstype PeerScoreSnapshottype PeerScoreThresholdstype ProtocolMatchFntype ProvideKeytype PubOpttype PubSubtype PubSubNotiftype PubSubRoutertype PublishOptionstype RPCtype RandomSubRoutertype RawTracertype RelayCancelFunctype RemoteTracertype RouterReadytype SubOpttype Subscriptiontype SubscriptionFiltertype TimeCachedBlacklisttype Topictype TopicEventHandlertype TopicEventHandlerOpttype TopicOpttype TopicOptionstype TopicScoreParamstype TopicScoreSnapshottype ValidationErrortype ValidationResulttype Validatortype ValidatorExtype ValidatorOptNewMapBlacklist()NewTimeCachedBlacklist(expiry)WithDiscoverConnector(connFactory)WithDiscoveryOpts(opts)(fs) AcceptFrom()(fs) AddPeer(p, proto)(fs) Attach(p)(fs) EnoughPeers(topic, suggested)(fs) HandleRPC(rpc)(fs) Join(topic)(fs) Leave(topic)(fs) Protocols()(fs) Publish(msg)(fs) RemovePeer(p)DefaultGossipSubParams()DefaultGossipSubRouter(h)(gs) AcceptFrom(p)(gs) AddPeer(p, proto)(gs) Attach(p)(gs) EnoughPeers(topic, suggested)(gs) HandleRPC(rpc)(gs) Join(topic)(gs) Leave(topic)(gs) Protocols()(gs) Publish(msg)(gs) RemovePeer(p)(gs) WithDefaultTagTracer()NewJSONTracer(file)OpenJSONTracer(file, flags, perm)(t) Close()(t) Trace(evt)(b) Add(p)(b) Contains(p)(m) GetFrom()NewMessageCache(gossip, history)(mc) Get(mid)(mc) GetForPeer(mid, p)(mc) GetGossipIDs(topic)(mc) Put(msg)(mc) SetMsgIdFn(msgID)(mc) Shift()WithAppSpecificRpcInspector(inspector)WithBlacklist(b)WithDefaultValidator(val, opts)WithDirectConnectTicks(t)WithDirectPeers(pis)WithDiscovery(d, opts)WithEventTracer(tracer)WithFloodPublish(floodPublish)WithGossipSubParams(cfg)WithGossipSubProtocols(protos, feature)WithMaxMessageSize(maxMessageSize)WithMessageAuthor(author)WithMessageIdFn(fn)WithMessageSignaturePolicy(policy)WithMessageSigning(enabled)WithNoAuthor()WithPeerExchange(doPX)WithPeerFilter(filter)WithPeerGater(params)WithPeerOutboundQueueSize(size)WithPeerScore(params, thresholds)WithPeerScoreInspect(inspect, period)WithProtocolMatchFn(m)WithRawTracer(tracer)WithSeenMessagesStrategy(strategy)WithSeenMessagesTTL(ttl)WithStrictSignatureVerification(required)WithSubscriptionFilter(subFilter)WithValidateQueueSize(n)WithValidateThrottle(n)WithValidateWorkers(n)NewPBTracer(file)OpenPBTracer(file, flags, perm)(t) Close()(t) Trace(evt)DefaultPeerGaterParams()NewPeerGaterParams(threshold, globalDecay, sourceDecay)(p) WithTopicDeliveryWeights(w)WithLocalPublication(local)WithReadiness(ready)WithSecretKeyAndPeerId(key, pid)NewFloodSub(ctx, h, opts)NewFloodsubWithProtocols(ctx, h, ps, opts)NewGossipSub(ctx, h, opts)NewGossipSubWithRouter(ctx, h, rt, opts)NewPubSub(ctx, h, rt, opts)NewRandomSub(ctx, h, size, opts)(p) BlacklistPeer(pid)(p) GetTopics()(p) Join(topic, opts)(p) ListPeers(topic)(p) Publish(topic, data, opts)(p) RegisterTopicValidator(topic, val, opts)(p) Subscribe(topic, opts)(p) UnregisterTopicValidator(topic)(p) ClosedStream(n, s)(p) Connected(n, c)(p) Disconnected(n, c)(p) Initialize()(p) Listen(n, _)(p) ListenClose(n, _)(p) OpenedStream(n, s)(rs) AcceptFrom()(rs) AddPeer(p, proto)(rs) Attach(p)(rs) EnoughPeers(topic, suggested)(rs) HandleRPC(rpc)(rs) Join(topic)(rs) Leave(topic)(rs) Protocols()(rs) Publish(msg)(rs) RemovePeer(p)NewRemoteTracer(ctx, host, pi)(t) Close()(t) Trace(evt)MinTopicSize(size)WithBufferSize(size)(sub) Cancel()(sub) Next(ctx)(sub) Topic()NewAllowlistSubscriptionFilter(topics)NewRegexpSubscriptionFilter(rx)WrapLimitSubscriptionFilter(filter, limit)(b) Add(p)(b) Contains(p)(t) Close()(t) EventHandler(opts)(t) ListPeers()(t) Publish(ctx, data, opts)(t) Relay()(t) SetScoreParams(p)(t) String()(t) Subscribe(opts)(t) Cancel()(t) NextPeerEvent(ctx)WithTopicMessageIdFn(msgId)(e) Error()NewBasicSeqnoValidator(meta)WithValidatorConcurrency(n)WithValidatorInline(inline)WithValidatorTimeout(timeout) README ¶ go-libp2p-pubsub This repo contains the canonical pubsub implementation for libp2p. We currently provide three message router options: Floodsub, which is the baseline flooding protocol. Randomsub, which is a simple probabilistic router that propagates to random subsets of peers. Gossipsub, which is a more advanced router with mesh formation and gossip propagation. See spec and implementation for more details. Repo Lead Maintainer @vyzo This repo follows the Repo Lead Maintainer Protocol Table of Contents Install Usage Example Documentation Tracing Contribute License Install go get github.com/libp2p/go-libp2p-pubsub Usage To be used for messaging in p2p instrastructure (as part of libp2p) such as IPFS, Ethereum, other blockchains, etc. Example https://github.com/libp2p/go-libp2p/tree/master/examples/pubsub Documentation See the libp2p specs for high level documentation and godoc for API documentation. In this repo, you will find . ├── LICENSE ├── README.md # Regular Golang repo set up ├── codecov.yml ├── pb ├── go.mod ├── go.sum ├── doc.go # PubSub base ├── pubsub.go ├── blacklist.go ├── notify.go ├── comm.go ├── discovery.go ├── sign.go ├── subscription.go ├── topic.go ├── trace.go ├── tracer.go ├── validation.go # Floodsub router ├── floodsub.go # Randomsub router ├── randomsub.go # Gossipsub router ├── gossipsub.go ├── score.go ├── score_params.go └── mcache.go Tracing The pubsub system supports tracing, which collects all events pertaining to the internals of the system. This allows you to recreate the complete message flow and state of the system for analysis purposes. To enable tracing, instantiate the pubsub system using the WithEventTracer option; the option accepts a tracer with three available implementations in-package (trace to json, pb, or a remote peer). If you want to trace using a remote peer, you can do so using the traced daemon from go-libp2p-pubsub-tracer. The package also includes a utility program, tracestat, for analyzing the traces collected by the daemon. For instance, to capture the trace as a json file, you can use the following option: tracer, err := pubsub. NewJSONTracer(\"/path/to/trace.json\") if err ! = nil { panic(err) } pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) To capture the trace as a protobuf, you can use the following option: tracer, err := pubsub. NewPBTracer(\"/path/to/trace.pb\") if err ! = nil { panic(err) } pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) Finally, to use the remote tracer, you can use the following incantations: // assuming that your tracer runs in x.x.x.x and has a peer ID of QmTracer pi, err := peer. AddrInfoFromP2pAddr(ma. StringCast(\"/ip4/x.x.x.x/tcp/4001/p2p/QmTracer\")) if err ! = nil { panic(err) } tracer, err := pubsub. NewRemoteTracer(ctx, host, pi) if err ! = nil { panic(err) } ps, err := pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) Contribute Contributions welcome. Please check out the issues. Check out our contributing document for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS Code of Conduct. Small note: If editing the README, please conform to the standard-readme specification. License The go-libp2p-pubsub project is dual-licensed under Apache 2.0 and MIT terms: Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) Expand ▾ Collapse ▴ Documentation ¶ Overview ¶ The pubsub package provides facilities for the Publish/Subscribe pattern of message propagation, also known as overlay multicast. The implementation provides topic-based pubsub, with pluggable routing algorithms. The main interface to the library is the PubSub object. You can construct this object with the following constructors: - NewFloodSub creates an instance that uses the floodsub routing algorithm. - NewGossipSub creates an instance that uses the gossipsub routing algorithm. - NewRandomSub creates an instance that uses the randomsub routing algorithm. In addition, there is a generic constructor that creates a pubsub instance with a custom PubSubRouter interface. This procedure is currently reserved for internal use within the package. Once you have constructed a PubSub instance, you need to establish some connections to your peers; the implementation relies on ambient peer discovery, leaving bootstrap and active peer discovery up to the client. To publish a message to some topic, use Publish; you don't need to be subscribed to the topic in order to publish. To subscribe to a topic, use Subscribe; this will give you a subscription interface from which new messages can be pumped. Index ¶ Constants Variables func DefaultMsgIdFn(pmsg *pb.Message) string func DefaultPeerFilter(pid peer. ID, topic string) bool func FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts func GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol. ID) bool func ScoreParameterDecay(decay time. Duration) float64 func ScoreParameterDecayWithBase(decay time. Duration, base time. Duration, decayToZero float64) float64 type AcceptStatus type BackoffConnectorFactory type BasicSeqnoValidator type Blacklist func NewMapBlacklist() Blacklist func NewTimeCachedBlacklist(expiry time. Duration) (Blacklist, error) type CacheEntry type DiscoverOpt func WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt func WithDiscoveryOpts(opts ...discovery. Option) DiscoverOpt type EventTracer type EventType type ExtendedPeerScoreInspectFn type FloodSubRouter func (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus func (fs *FloodSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (fs *FloodSubRouter) Attach(p *PubSub) func (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool func (fs *FloodSubRouter) HandleRPC(rpc *RPC) func (fs *FloodSubRouter) Join(topic string) func (fs *FloodSubRouter) Leave(topic string) func (fs *FloodSubRouter) Protocols() []protocol. ID func (fs *FloodSubRouter) Publish(msg *Message) func (fs *FloodSubRouter) RemovePeer(p peer. ID) type GossipSubFeature type GossipSubFeatureTest type GossipSubParams func DefaultGossipSubParams() GossipSubParams type GossipSubRouter func DefaultGossipSubRouter(h host. Host) *GossipSubRouter func (gs *GossipSubRouter) AcceptFrom(p peer. ID) AcceptStatus func (gs *GossipSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (gs *GossipSubRouter) Attach(p *PubSub) func (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool func (gs *GossipSubRouter) HandleRPC(rpc *RPC) func (gs *GossipSubRouter) Join(topic string) func (gs *GossipSubRouter) Leave(topic string) func (gs *GossipSubRouter) Protocols() []protocol. ID func (gs *GossipSubRouter) Publish(msg *Message) func (gs *GossipSubRouter) RemovePeer(p peer. ID) func (gs *GossipSubRouter) WithDefaultTagTracer() Option type JSONTracer func NewJSONTracer(file string) (*JSONTracer, error) func OpenJSONTracer(file string, flags int, perm os. FileMode) (*JSONTracer, error) func (t *JSONTracer) Close() func (t *JSONTracer) Trace(evt * pb. TraceEvent) type MapBlacklist func (b MapBlacklist) Add(p peer. ID) bool func (b MapBlacklist) Contains(p peer. ID) bool type Message func (m *Message) GetFrom() peer. ID type MessageCache func NewMessageCache(gossip, history int) * MessageCache func (mc *MessageCache) Get(mid string) (*Message, bool) func (mc *MessageCache) GetForPeer(mid string, p peer. ID) (*Message, int, bool) func (mc *MessageCache) GetGossipIDs(topic string) []string func (mc *MessageCache) Put(msg *Message) func (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string) func (mc *MessageCache) Shift() type MessageSignaturePolicy type MsgIdFunction type Option func WithAppSpecificRpcInspector(inspector func(peer. ID, *RPC) error) Option func WithBlacklist(b Blacklist) Option func WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option func WithDirectConnectTicks(t uint64) Option func WithDirectPeers(pis []peer. AddrInfo) Option func WithDiscovery(d discovery. Discovery, opts ...DiscoverOpt) Option func WithEventTracer(tracer EventTracer) Option func WithFloodPublish(floodPublish bool) Option func WithGossipSubParams(cfg GossipSubParams) Option func WithGossipSubProtocols(protos []protocol. ID, feature GossipSubFeatureTest) Option func WithMaxMessageSize(maxMessageSize int) Option func WithMessageAuthor(author peer. ID) Option func WithMessageIdFn(fn MsgIdFunction) Option func WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option func WithMessageSigning(enabled bool) Option func WithNoAuthor() Option func WithPeerExchange(doPX bool) Option func WithPeerFilter(filter PeerFilter) Option func WithPeerGater(params *PeerGaterParams) Option func WithPeerOutboundQueueSize(size int) Option func WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option func WithPeerScoreInspect(inspect interface{}, period time. Duration) Option func WithProtocolMatchFn(m ProtocolMatchFn) Option func WithRawTracer(tracer RawTracer) Option func WithSeenMessagesStrategy(strategy timecache. Strategy) Option func WithSeenMessagesTTL(ttl time. Duration) Option func WithStrictSignatureVerification(required bool) Option func WithSubscriptionFilter(subFilter SubscriptionFilter) Option func WithValidateQueueSize(n int) Option func WithValidateThrottle(n int) Option func WithValidateWorkers(n int) Option type PBTracer func NewPBTracer(file string) (*PBTracer, error) func OpenPBTracer(file string, flags int, perm os. FileMode) (*PBTracer, error) func (t *PBTracer) Close() func (t *PBTracer) Trace(evt * pb. TraceEvent) type PeerEvent type PeerFilter type PeerGaterParams func DefaultPeerGaterParams() *PeerGaterParams func NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams func (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams type PeerMetadataStore type PeerScoreInspectFn type PeerScoreParams type PeerScoreSnapshot type PeerScoreThresholds type ProtocolMatchFn type ProvideKey type PubOpt func WithLocalPublication(local bool) PubOpt func WithReadiness(ready RouterReady) PubOpt func WithSecretKeyAndPeerId(key crypto. PrivKey, pid peer. ID) PubOpt type PubSub func NewFloodSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) func NewFloodsubWithProtocols(ctx context. Context, h host. Host, ps []protocol. ID, opts ...Option) (*PubSub, error) func NewGossipSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) func NewGossipSubWithRouter(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) func NewPubSub(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) func NewRandomSub(ctx context. Context, h host. Host, size int, opts ...Option) (*PubSub, error) func (p *PubSub) BlacklistPeer(pid peer. ID) func (p *PubSub) GetTopics() []string func (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error) func (p *PubSub) ListPeers(topic string) []peer. ID func (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) errordeprecated func (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error func (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)deprecated func (p *PubSub) UnregisterTopicValidator(topic string) error type PubSubNotif func (p *PubSubNotif) ClosedStream(n network. Network, s network. Stream) func (p *PubSubNotif) Connected(n network. Network, c network. Conn) func (p *PubSubNotif) Disconnected(n network. Network, c network. Conn) func (p *PubSubNotif) Initialize() func (p *PubSubNotif) Listen(n network. Network, _ ma. Multiaddr) func (p *PubSubNotif) ListenClose(n network. Network, _ ma. Multiaddr) func (p *PubSubNotif) OpenedStream(n network. Network, s network. Stream) type PubSubRouter type PublishOptions type RPC type RandomSubRouter func (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus func (rs *RandomSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (rs *RandomSubRouter) Attach(p *PubSub) func (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool func (rs *RandomSubRouter) HandleRPC(rpc *RPC) func (rs *RandomSubRouter) Join(topic string) func (rs *RandomSubRouter) Leave(topic string) func (rs *RandomSubRouter) Protocols() []protocol. ID func (rs *RandomSubRouter) Publish(msg *Message) func (rs *RandomSubRouter) RemovePeer(p peer. ID) type RawTracer type RelayCancelFunc type RemoteTracer func NewRemoteTracer(ctx context. Context, host host. Host, pi peer. AddrInfo) (*RemoteTracer, error) func (t *RemoteTracer) Close() func (t *RemoteTracer) Trace(evt * pb. TraceEvent) type RouterReady func MinTopicSize(size int) RouterReady type SubOpt func WithBufferSize(size int) SubOpt type Subscription func (sub *Subscription) Cancel() func (sub *Subscription) Next(ctx context. Context) (*Message, error) func (sub *Subscription) Topic() string type SubscriptionFilter func NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter func NewRegexpSubscriptionFilter(rx *regexp. Regexp) SubscriptionFilter func WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter type TimeCachedBlacklist func (b *TimeCachedBlacklist) Add(p peer. ID) bool func (b *TimeCachedBlacklist) Contains(p peer. ID) bool type Topic func (t *Topic) Close() error func (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error) func (t *Topic) ListPeers() []peer. ID func (t *Topic) Publish(ctx context. Context, data []byte, opts ...PubOpt) error func (t *Topic) Relay() (RelayCancelFunc, error) func (t *Topic) SetScoreParams(p *TopicScoreParams) error func (t *Topic) String() string func (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error) type TopicEventHandler func (t *TopicEventHandler) Cancel() func (t *TopicEventHandler) NextPeerEvent(ctx context. Context) (PeerEvent, error) type TopicEventHandlerOpt type TopicOpt func WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt type TopicOptions type TopicScoreParams type TopicScoreSnapshot type ValidationError func (e ValidationError) Error() string type ValidationResult type Validator type ValidatorEx func NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx type ValidatorOpt func WithValidatorConcurrency(n int) ValidatorOpt func WithValidatorInline(inline bool) ValidatorOpt func WithValidatorTimeout(timeout time. Duration) ValidatorOpt Constants ¶ View Source const ( MinBackoffDelay = 100 * time. Millisecond MaxBackoffDelay = 10 * time. Second TimeToLive = 10 * time. Minute BackoffCleanupInterval = 1 * time. Minute BackoffMultiplier = 2 MaxBackoffJitterCoff = 100 MaxBackoffAttempts = 4 ) View Source const ( FloodSubID = protocol. ID(\"/floodsub/1.0.0\") FloodSubTopicSearchSize = 5 ) View Source const ( // GossipSubID_v10 is the protocol ID for version 1.0.0 of the GossipSub protocol. // It is advertised along with GossipSubID_v11 for backwards compatibility. GossipSubID_v10 = protocol. ID(\"/meshsub/1.0.0\") // GossipSubID_v11 is the protocol ID for version 1.1.0 of the GossipSub protocol. // See the spec for details about how v1.1.0 compares to v1.0.0: // https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md GossipSubID_v11 = protocol. ID(\"/meshsub/1.1.0\") ) View Source const ( // Protocol supports basic GossipSub Mesh -- gossipsub-v1.0 compatible GossipSubFeatureMesh = iota // Protocol supports Peer eXchange on prune -- gossipsub-v1.1 compatible GossipSubFeaturePX ) View Source const ( DefaultDecayInterval = time. Second DefaultDecayToZero = 0.01 )","Second DefaultDecayToZero = 0.01 ) View Source const ( // StrictSign produces signatures and expects and verifies incoming signatures StrictSign = msgSigning | msgVerification // StrictNoSign does not produce signatures and drops and penalises incoming messages that carry one StrictNoSign = msgVerification // LaxSign produces signatures and validates incoming signatures iff one is present // Deprecated: it is recommend to either strictly enable, or strictly disable, signatures. LaxSign = msgSigning // LaxNoSign does not produce signatures and validates incoming signatures iff one is present // Deprecated: it is recommend to either strictly enable, or strictly disable, signatures. LaxNoSign = 0 ) View Source const ( RejectBlacklstedPeer = \"blacklisted peer\" RejectBlacklistedSource = \"blacklisted source\" RejectMissingSignature = \"missing signature\" RejectUnexpectedSignature = \"unexpected signature\" RejectUnexpectedAuthInfo = \"unexpected auth info\" RejectInvalidSignature = \"invalid signature\" RejectValidationQueueFull = \"validation queue full\" RejectValidationThrottled = \"validation throttled\" RejectValidationFailed = \"validation failed\" RejectValidationIgnored = \"validation ignored\" RejectSelfOrigin = \"self originated message\" ) rejection reasons View Source const ( // ValidationAccept is a validation decision that indicates a valid message that should be accepted and // delivered to the application and forwarded to the network. ValidationAccept = ValidationResult(0) // ValidationReject is a validation decision that indicates an invalid message that should not be // delivered to the application or forwarded to the application. Furthermore the peer that forwarded // the message should be penalized by peer scoring routers. ValidationReject = ValidationResult(1) // ValidationIgnore is a validation decision that indicates a message that should be ignored: it will // be neither delivered to the application nor forwarded to the network. However, in contrast to // ValidationReject, the peer that forwarded the message must not be penalized by peer scoring routers. ValidationIgnore = ValidationResult(2) ) View Source const DefaultMaxMessageSize = 1 << 20 DefaultMaximumMessageSize is 1mb. View Source const ( RandomSubID = protocol. ID(\"/randomsub/1.0.0\") ) View Source const RemoteTracerProtoID = protocol. ID(\"/libp2p/pubsub/tracer/1.0.0\") View Source const SignPrefix = \"libp2p-pubsub:\" Variables ¶ View Source var ( // DiscoveryPollInitialDelay is how long the discovery system waits after it first starts before polling DiscoveryPollInitialDelay = 0 * time. Millisecond // DiscoveryPollInterval is approximately how long the discovery system waits in between checks for whether the // more peers are needed for any topic DiscoveryPollInterval = 1 * time. Second ) View Source var ( GossipSubD = 6 GossipSubDlo = 5 GossipSubDhi = 12 GossipSubDscore = 4 GossipSubDout = 2 GossipSubHistoryLength = 5 GossipSubHistoryGossip = 3 GossipSubDlazy = 6 GossipSubGossipFactor = 0.25 GossipSubGossipRetransmission = 3 GossipSubHeartbeatInitialDelay = 100 * time. Millisecond GossipSubHeartbeatInterval = 1 * time. Second GossipSubFanoutTTL = 60 * time. Second GossipSubPrunePeers = 16 GossipSubPruneBackoff = time. Minute GossipSubUnsubscribeBackoff = 10 * time. Second GossipSubConnectors = 8 GossipSubMaxPendingConnections = 128 GossipSubConnectionTimeout = 30 * time. Second GossipSubDirectConnectTicks uint64 = 300 GossipSubDirectConnectInitialDelay = time. Second GossipSubOpportunisticGraftTicks uint64 = 60 GossipSubOpportunisticGraftPeers = 2 GossipSubGraftFloodThreshold = 10 * time. Second GossipSubMaxIHaveLength = 5000 GossipSubMaxIHaveMessages = 10 GossipSubIWantFollowupTime = 3 * time. Second ) Defines the default gossipsub parameters. View Source var ( DefaultPeerGaterRetainStats = 6 * time. Hour DefaultPeerGaterQuiet = time. Minute DefaultPeerGaterDuplicateWeight = 0.125 DefaultPeerGaterIgnoreWeight = 1.0 DefaultPeerGaterRejectWeight = 16.0 DefaultPeerGaterThreshold = 0.33 DefaultPeerGaterGlobalDecay = ScoreParameterDecay(2 * time. Minute) DefaultPeerGaterSourceDecay = ScoreParameterDecay(time. Hour) ) View Source var ( // TimeCacheDuration specifies how long a message ID will be remembered as seen. // Use WithSeenMessagesTTL to configure this per pubsub instance, instead of overriding the global default. TimeCacheDuration = 120 * time. Second // TimeCacheStrategy specifies which type of lookup/cleanup strategy is used by the seen messages cache. // Use WithSeenMessagesStrategy to configure this per pubsub instance, instead of overriding the global default. TimeCacheStrategy = timecache. Strategy_FirstSeen // ErrSubscriptionCancelled may be returned when a subscription Next() is called after the // subscription has been cancelled. ErrSubscriptionCancelled = errors. New(\"subscription cancelled\") ) View Source var ( // GossipSubConnTagBumpMessageDelivery is the amount to add to the connection manager // tag that tracks message deliveries. Each time a peer is the first to deliver a // message within a topic, we \"bump\" a tag by this amount, up to a maximum // of GossipSubConnTagMessageDeliveryCap. // Note that the delivery tags decay over time, decreasing by GossipSubConnTagDecayAmount // at every GossipSubConnTagDecayInterval. GossipSubConnTagBumpMessageDelivery = 1 // GossipSubConnTagDecayInterval is the decay interval for decaying connection manager tags. GossipSubConnTagDecayInterval = 10 * time. Minute // GossipSubConnTagDecayAmount is subtracted from decaying tag values at each decay interval. GossipSubConnTagDecayAmount = 1 // GossipSubConnTagMessageDeliveryCap is the maximum value for the connection manager tags that // track message deliveries. GossipSubConnTagMessageDeliveryCap = 15 ) View Source var ErrEmptyPeerID = errors. New(\"empty peer ID\") ErrEmptyPeerID is returned if an empty peer ID was provided View Source var ErrNilSignKey = errors. New(\"nil sign key\") ErrNilSignKey is returned if a nil private key was provided View Source var ErrTooManySubscriptions = errors. New(\"too many subscriptions\") ErrTooManySubscriptions may be returned by a SubscriptionFilter to signal that there are too many subscriptions to process. View Source var ErrTopicClosed = errors. New(\"this Topic is closed, try opening a new one\") ErrTopicClosed is returned if a Topic is utilized after it has been closed View Source var GossipSubDefaultProtocols = []protocol. ID{GossipSubID_v11, GossipSubID_v10, FloodSubID} GossipSubDefaultProtocols is the default gossipsub router protocol list View Source var MinTraceBatchSize = 16 View Source var ( RandomSubD = 6 ) View Source var TraceBufferSize = 1 << 16 // 64K ought to be enough for everyone; famous last words. Functions ¶ func DefaultMsgIdFn ¶ added in v0.2.5 func DefaultMsgIdFn(pmsg *pb.Message) string DefaultMsgIdFn returns a unique ID of the passed Message func DefaultPeerFilter ¶ added in v0.5.5 func DefaultPeerFilter(pid peer. ID, topic string) bool DefaultPeerFilter accepts all peers on all topics func FilterSubscriptions ¶ added in v0.3.6 func FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts FilterSubscriptions filters (and deduplicates) a list of subscriptions. filter should return true if a topic is of interest. func GossipSubDefaultFeatures ¶ added in v0.5.0 func GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol. ID) bool GossipSubDefaultFeatures is the feature test function for the default gossipsub protocols func ScoreParameterDecay ¶ added in v0.3.0 func ScoreParameterDecay(decay time. Duration) float64 ScoreParameterDecay computes the decay factor for a parameter, assuming the DecayInterval is 1s and that the value decays to zero if it drops below 0.01 func ScoreParameterDecayWithBase ¶ added in v0.3.0 func ScoreParameterDecayWithBase(decay time. Duration, base time. Duration, decayToZero float64) float64 ScoreParameterDecayWithBase computes the decay factor for a parameter using base as the DecayInterval Types ¶ type AcceptStatus ¶ added in v0.3.6 type AcceptStatus int const ( // AcceptNone signals to drop the incoming RPC AcceptNone AcceptStatus = iota // AcceptControl signals to accept the incoming RPC only for control message processing by // the router. Included payload messages will _not_ be pushed to the validation queue. AcceptControl // AcceptAll signals to accept the incoming RPC for full processing AcceptAll ) type BackoffConnectorFactory ¶ added in v0.2.0 type BackoffConnectorFactory func(host host. Host) ( *discimpl. BackoffConnector, error) BackoffConnectorFactory creates a BackoffConnector that is attached to a given host type BasicSeqnoValidator ¶ added in v0.9.2 type BasicSeqnoValidator struct { // contains filtered or unexported fields } BasicSeqnoValidator is a basic validator, usable as a default validator, that ignores replayed messages outside the seen cache window. The validator uses the message seqno as a peer-specific nonce to decide whether the message should be propagated, comparing to the maximal nonce store in the peer metadata store. This is useful to ensure that there can be no infinitely propagating messages in the network regardless of the seen cache span and network diameter. It requires that pubsub is instantiated with a strict message signing policy and that seqnos are not disabled, ie it doesn't support anonymous mode. Warning: See https://github.com/libp2p/rust-libp2p/issues/3453 TL;DR: rust is currently violating the spec by issuing a random seqno, which creates an interoperability hazard. We expect this issue to be addressed in the not so distant future, but keep this in mind if you are in a mixed environment with (older) rust nodes. type Blacklist ¶ type Blacklist interface { Add(peer.ID) bool Contains(peer.ID) bool } Blacklist is an interface for peer blacklisting. func NewMapBlacklist ¶ func NewMapBlacklist() Blacklist NewMapBlacklist creates a new MapBlacklist func NewTimeCachedBlacklist ¶ added in v0.2.6 func NewTimeCachedBlacklist(expiry time. Duration) (Blacklist, error) NewTimeCachedBlacklist creates a new TimeCachedBlacklist with the given expiry duration type CacheEntry ¶ type CacheEntry struct { // contains filtered or unexported fields } type DiscoverOpt ¶ added in v0.2.0 type DiscoverOpt func(*discoverOptions) error func WithDiscoverConnector ¶ added in v0.2.0 func WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt WithDiscoverConnector adds a custom connector that deals with how the discovery subsystem connects to peers func WithDiscoveryOpts ¶ added in v0.2.0 func WithDiscoveryOpts(opts ...discovery. Option) DiscoverOpt WithDiscoveryOpts passes libp2p Discovery options into the PubSub discovery subsystem type EventTracer ¶ added in v0.2.3 type EventTracer interface { Trace(evt *pb.TraceEvent) } EventTracer is a generic event tracer interface. This is a high level tracing interface which delivers tracing events, as defined by the protobuf schema in pb/trace.proto. type EventType ¶ added in v0.1.1 type EventType int const ( PeerJoin EventType = iota PeerLeave ) type ExtendedPeerScoreInspectFn ¶ added in v0.3.3 type ExtendedPeerScoreInspectFn = func(map[peer. ID]*PeerScoreSnapshot) type FloodSubRouter ¶ type FloodSubRouter struct { // contains filtered or unexported fields } func (*FloodSubRouter) AcceptFrom ¶ added in v0.3.0 func (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus func (*FloodSubRouter) AddPeer ¶ func (fs *FloodSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*FloodSubRouter) Attach ¶ func (fs *FloodSubRouter) Attach(p *PubSub) func (*FloodSubRouter) EnoughPeers ¶ added in v0.2.0 func (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool func (*FloodSubRouter) HandleRPC ¶ func (fs *FloodSubRouter) HandleRPC(rpc *RPC) func (*FloodSubRouter) Join ¶ func (fs *FloodSubRouter) Join(topic string) func (*FloodSubRouter) Leave ¶ func (fs *FloodSubRouter) Leave(topic string) func (*FloodSubRouter) Protocols ¶ func (fs *FloodSubRouter) Protocols() []protocol. ID func (*FloodSubRouter) Publish ¶ func (fs *FloodSubRouter) Publish(msg *Message) func (*FloodSubRouter) RemovePeer ¶ func (fs *FloodSubRouter) RemovePeer(p peer. ID) type GossipSubFeature ¶ added in v0.5.0 type GossipSubFeature int GossipSubFeature is a feature discriminant enum type GossipSubFeatureTest ¶ added in v0.5.0 type GossipSubFeatureTest = func(GossipSubFeature, protocol. ID) bool GossipSubFeatureTest is a feature test function; it takes a feature and a protocol ID and should return true if the feature is supported by the protocol type GossipSubParams ¶ added in v0.5.0 type GossipSubParams struct { // D sets the optimal degree for a GossipSub topic mesh. For example, if D == 6, // each peer will want to have about six peers in their mesh for each topic they're subscribed to. // D should be set somewhere between Dlo and Dhi. D int // Dlo sets the lower bound on the number of peers we keep in a GossipSub topic mesh. // If we have fewer than Dlo peers, we will attempt to graft some more into the mesh at // the next heartbeat. Dlo int // Dhi sets the upper bound on the number of peers we keep in a GossipSub topic mesh. // If we have more than Dhi peers, we will select some to prune from the mesh at the next heartbeat. Dhi int // Dscore affects how peers are selected when pruning a mesh due to over subscription. // At least Dscore of the retained peers will be high-scoring, while the remainder are // chosen randomly. Dscore int // Dout sets the quota for the number of outbound connections to maintain in a topic mesh. // When the mesh is pruned due to over subscription, we make sure that we have outbound connections // to at least Dout of the survivor peers. This prevents sybil attackers from overwhelming // our mesh with incoming connections. // // Dout must be set below Dlo, and must not exceed D / 2. Dout int // HistoryLength controls the size of the message cache used for gossip. // The message cache will remember messages for HistoryLength heartbeats. HistoryLength int // HistoryGossip controls how many cached message ids we will advertise in // IHAVE gossip messages. When asked for our seen message IDs, we will return // only those from the most recent HistoryGossip heartbeats. The slack between // HistoryGossip and HistoryLength allows us to avoid advertising messages // that will be expired by the time they're requested. // // HistoryGossip must be less than or equal to HistoryLength to // avoid a runtime panic. HistoryGossip int // Dlazy affects how many peers we will emit gossip to at each heartbeat. // We will send gossip to at least Dlazy peers outside our mesh. The actual // number may be more, depending on GossipFactor and how many peers we're // connected to. Dlazy int // GossipFactor affects how many peers we will emit gossip to at each heartbeat. // We will send gossip to GossipFactor * (total number of non-mesh peers), or // Dlazy, whichever is greater. GossipFactor float64 // GossipRetransmission controls how many times we will allow a peer to request // the same message id through IWANT gossip before we start ignoring them. This is designed // to prevent peers from spamming us with requests and wasting our resources. GossipRetransmission int // HeartbeatInitialDelay is the short delay before the heartbeat timer begins // after the router is initialized. HeartbeatInitialDelay time. Duration // HeartbeatInterval controls the time between heartbeats. HeartbeatInterval time. Duration // SlowHeartbeatWarning is the duration threshold for heartbeat processing before emitting // a warning; this would be indicative of an overloaded peer. SlowHeartbeatWarning float64 // FanoutTTL controls how long we keep track of the fanout state. If it's been // FanoutTTL since we've published to a topic that we're not subscribed to, // we'll delete the fanout map for that topic. FanoutTTL time. Duration // PrunePeers controls the number of peers to include in prune Peer eXchange. // When we prune a peer that's eligible for PX (has a good score, etc), we will try to // send them signed peer records for up to PrunePeers other peers that we // know of. PrunePeers int // PruneBackoff controls the backoff time for pruned peers. This is how long // a peer must wait before attempting to graft into our mesh again after being pruned. // When pruning a peer, we send them our value of PruneBackoff so they know // the minimum time to wait. Peers running older versions may not send a backoff time, // so if we receive a prune message without one, we will wait at least PruneBackoff // before attempting to re-graft. PruneBackoff time. Duration // UnsubscribeBackoff controls the backoff time to use when unsuscribing // from a topic. A peer should not resubscribe to this topic before this // duration. UnsubscribeBackoff time. Duration // Connectors controls the number of active connection attempts for peers obtained through PX. Connectors int // MaxPendingConnections sets the maximum number of pending connections for peers attempted through px. MaxPendingConnections int // ConnectionTimeout controls the timeout for connection attempts. ConnectionTimeout time. Duration // DirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers // that are not currently connected. DirectConnectTicks uint64 // DirectConnectInitialDelay is the initial delay before opening connections to direct peers DirectConnectInitialDelay time. Duration // OpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh // with opportunistic grafting. Every OpportunisticGraftTicks we will attempt to select some // high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls // below a threshold (see https://godoc.org/github.com/libp2p/go-libp2p-pubsub#PeerScoreThresholds). OpportunisticGraftTicks uint64 // OpportunisticGraftPeers is the number of peers to opportunistically graft. OpportunisticGraftPeers int // If a GRAFT comes before GraftFloodThreshold has elapsed since the last PRUNE, // then there is an extra score penalty applied to the peer through P7. GraftFloodThreshold time. Duration // MaxIHaveLength is the maximum number of messages to include in an IHAVE message. // Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a // peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the // default if your system is pushing more than 5000 messages in HistoryGossip heartbeats; // with the defaults this is 1666 messages/s. MaxIHaveLength int // MaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat. MaxIHaveMessages int // Time to wait for a message requested through IWANT following an IHAVE advertisement. // If the message is not received within this window, a broken promise is declared and // the router may apply bahavioural penalties. IWantFollowupTime time. Duration } GossipSubParams defines all the gossipsub specific parameters. func DefaultGossipSubParams ¶ added in v0.5.0 func DefaultGossipSubParams() GossipSubParams DefaultGossipSubParams returns the default gossip sub parameters as a config. type GossipSubRouter ¶ type GossipSubRouter struct { // contains filtered or unexported fields } GossipSubRouter is a router that implements the gossipsub protocol. For each topic we have joined, we maintain an overlay through which messages flow; this is the mesh map. For each topic we publish to without joining, we maintain a list of peers to use for injecting our messages in the overlay with stable routes; this is the fanout map. Fanout peer lists are expired if we don't publish any messages to their topic for GossipSubFanoutTTL. func DefaultGossipSubRouter ¶ added in v0.8.2 func DefaultGossipSubRouter(h host. Host) *GossipSubRouter DefaultGossipSubRouter returns a new GossipSubRouter with default parameters. func (*GossipSubRouter) AcceptFrom ¶ added in v0.3.0 func (gs *GossipSubRouter) AcceptFrom(p peer. ID) AcceptStatus func (*GossipSubRouter) AddPeer ¶ func (gs *GossipSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*GossipSubRouter) Attach ¶ func (gs *GossipSubRouter) Attach(p *PubSub) func (*GossipSubRouter) EnoughPeers ¶ added in v0.2.0 func (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool func (*GossipSubRouter) HandleRPC ¶ func (gs *GossipSubRouter) HandleRPC(rpc *RPC) func (*GossipSubRouter) Join ¶ func (gs *GossipSubRouter) Join(topic string) func (*GossipSubRouter) Leave ¶ func (gs *GossipSubRouter) Leave(topic string) func (*GossipSubRouter) Protocols ¶ func (gs *GossipSubRouter) Protocols() []protocol. ID func (*GossipSubRouter) Publish ¶ func (gs *GossipSubRouter) Publish(msg *Message) func (*GossipSubRouter) RemovePeer ¶ func (gs *GossipSubRouter) RemovePeer(p peer. ID) func (*GossipSubRouter) WithDefaultTagTracer ¶ added in v0.8.2 func (gs *GossipSubRouter) WithDefaultTagTracer() Option WithDefaultTagTracer returns the tag tracer of the GossipSubRouter as a PubSub option. This is useful for cases where the GossipSubRouter is instantiated externally, and is injected into the GossipSub constructor as a dependency. This allows the tag tracer to be also injected into the GossipSub constructor as a PubSub option dependency. type JSONTracer ¶ added in v0.2.3 type JSONTracer struct { // contains filtered or unexported fields } JSONTracer is a tracer that writes events to a file, encoded in ndjson. func NewJSONTracer ¶ added in v0.2.3 func NewJSONTracer(file string) (* JSONTracer, error) NewJsonTracer creates a new JSONTracer writing traces to file. func OpenJSONTracer ¶ added in v0.2.3 func OpenJSONTracer(file string, flags int, perm os. FileMode) (*JSONTracer, error) OpenJSONTracer creates a new JSONTracer, with explicit control of OpenFile flags and permissions. func (*JSONTracer) Close ¶ added in v0.2.3 func (t *JSONTracer) Close() func (*JSONTracer) Trace ¶ added in v0.2.3 func (t *JSONTracer) Trace(evt * pb. TraceEvent) type MapBlacklist ¶ type MapBlacklist map[peer. ID]struct{} MapBlacklist is a blacklist implementation using a perfect map func (MapBlacklist) Add ¶ func (b MapBlacklist) Add(p peer. ID) bool func (MapBlacklist) Contains ¶ func (b MapBlacklist) Contains(p peer. ID) bool type Message ¶ type Message struct { *pb. Message ID string ReceivedFrom peer. ID ValidatorData interface{} Local bool } func (*Message) GetFrom ¶ func (m *Message) GetFrom() peer. ID type MessageCache ¶ type MessageCache struct { // contains filtered or unexported fields } func NewMessageCache ¶ func NewMessageCache(gossip, history int) * MessageCache NewMessageCache creates a sliding window cache that remembers messages for as long as `history` slots. When queried for messages to advertise, the cache only returns messages in the last `gossip` slots. The `gossip` parameter must be smaller or equal to `history`, or this function will panic. The slack between `gossip` and `history` accounts for the reaction time between when a message is advertised via IHAVE gossip, and the peer pulls it via an IWANT command. func (*MessageCache) Get ¶ func (mc *MessageCache) Get(mid string) (*Message, bool) func (*MessageCache) GetForPeer ¶ added in v0.3.0 func (mc *MessageCache) GetForPeer(mid string, p peer. ID) (*Message, int, bool) func (*MessageCache) GetGossipIDs ¶ func (mc *MessageCache) GetGossipIDs(topic string) []string func (*MessageCache) Put ¶ func (mc *MessageCache) Put(msg *Message) func (*MessageCache) SetMsgIdFn ¶ added in v0.2.5 func (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string) func (*MessageCache) Shift ¶ func (mc *MessageCache) Shift() type MessageSignaturePolicy ¶ added in v0.3.3 type MessageSignaturePolicy uint8 MessageSignaturePolicy describes if signatures are produced, expected, and/or verified. type MsgIdFunction ¶ added in v0.2.5 type MsgIdFunction func(pmsg *pb.Message) string MsgIdFunction returns a unique ID for the passed Message, and PubSub can be customized to use any implementation of this function by configuring it with the Option from WithMessageIdFn. type Option ¶ type Option func(*PubSub) error func WithAppSpecificRpcInspector ¶ added in v0.8.2 func WithAppSpecificRpcInspector(inspector func(peer. ID, *RPC) error) Option WithAppSpecificRpcInspector sets a hook that inspect incomings RPCs prior to processing them. The inspector is invoked on an accepted RPC just before it is handled. If inspector's error is nil, the RPC is handled. Otherwise, it is dropped. func WithBlacklist ¶ func WithBlacklist(b Blacklist) Option WithBlacklist provides an implementation of the blacklist; the default is a MapBlacklist func WithDefaultValidator ¶ added in v0.9.2 func WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option / Options WithDefaultValidator adds a validator that applies to all topics by default; it can be used more than once and add multiple validators. Having a defult validator does not inhibit registering a per topic validator. func WithDirectConnectTicks ¶ added in v0.3.2 func WithDirectConnectTicks(t uint64) Option WithDirectConnectTicks is a gossipsub router option that sets the number of heartbeat ticks between attempting to reconnect direct peers that are not currently connected. A \"tick\" is based on the heartbeat interval, which is 1s by default. The default value for direct connect ticks is 300. func WithDirectPeers ¶ added in v0.3.0 func WithDirectPeers(pis []peer. AddrInfo) Option WithDirectPeers is a gossipsub router option that specifies peers with direct peering agreements. These peers are connected outside of the mesh, with all (valid) message unconditionally forwarded to them. The router will maintain open connections to these peers. Note that the peering agreement should be reciprocal with direct peers symmetrically configured at both ends. func WithDiscovery ¶ added in v0.2.0 func WithDiscovery(d discovery. Discovery, opts ...DiscoverOpt) Option WithDiscovery provides a discovery mechanism used to bootstrap and provide peers into PubSub func WithEventTracer ¶ added in v0.2.3 func WithEventTracer(tracer EventTracer) Option WithEventTracer provides a tracer for the pubsub system func WithFloodPublish ¶ added in v0.3.0 func WithFloodPublish(floodPublish bool) Option WithFloodPublish is a gossipsub router option that enables flood publishing. When this is enabled, published messages are forwarded to all peers with score >= to publishThreshold func WithGossipSubParams ¶ added in v0.5.0 func WithGossipSubParams(cfg GossipSubParams) Option WithGossipSubParams is a gossip sub router option that allows a custom config to be set when instantiating the gossipsub router. func WithGossipSubProtocols ¶ added in v0.5.0 func WithGossipSubProtocols(protos []protocol. ID, feature GossipSubFeatureTest) Option WithGossipSubProtocols is a gossipsub router option that configures a custom protocol list and feature test function func WithMaxMessageSize ¶ added in v0.3.0 func WithMaxMessageSize(maxMessageSize int) Option WithMaxMessageSize sets the global maximum message size for pubsub wire messages. The default value is 1MiB (DefaultMaxMessageSize). Observe the following warnings when setting this option. WARNING #1: Make sure to change the default protocol prefixes for floodsub (FloodSubID) and gossipsub (GossipSubID). This avoids accidentally joining the public default network, which uses the default max message size, and therefore will cause messages to be dropped. WARNING #2: Reducing the default max message limit is fine, if you are certain that your application messages will not exceed the new limit. However, be wary of increasing the limit, as pubsub networks are naturally write-amplifying, i.e. for every message we receive, we send D copies of the message to our peers. If those messages are large, the bandwidth requirements will grow linearly. Note that propagation is sent on the uplink, which traditionally is more constrained than the downlink. Instead, consider out-of-band retrieval for large messages, by sending a CID (Content-ID) or another type of locator, such that messages can be fetched on-demand, rather than being pushed proactively. Under this design, you'd use the pubsub layer as a signalling system, rather than a data delivery system. func WithMessageAuthor ¶ func WithMessageAuthor(author peer. ID) Option WithMessageAuthor sets the author for outbound messages to the given peer ID (defaults to the host's ID). If message signing is enabled, the private key must be available in the host's peerstore. func WithMessageIdFn ¶ added in v0.2.5 func WithMessageIdFn(fn MsgIdFunction) Option WithMessageIdFn is an option to customize the way a message ID is computed for a pubsub message. The default ID function is DefaultMsgIdFn (concatenate source and seq nr.), but it can be customized to e.g. the hash of the message. func WithMessageSignaturePolicy ¶ added in v0.3.3 func WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option WithMessageSignaturePolicy sets the mode of operation for producing and verifying message signatures. func WithMessageSigning ¶ func WithMessageSigning(enabled bool) Option WithMessageSigning enables or disables message signing (enabled by default). Deprecated: signature verification without message signing, or message signing without verification, are not recommended. func WithNoAuthor ¶ added in v0.3.3 func WithNoAuthor() Option WithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures.","func WithNoAuthor ¶ added in v0.3.3 func WithNoAuthor() Option WithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures. Not recommended to use with the default message ID function, see WithMessageIdFn. func WithPeerExchange ¶ added in v0.3.0 func WithPeerExchange(doPX bool) Option WithPeerExchange is a gossipsub router option that enables Peer eXchange on PRUNE. This should generally be enabled in bootstrappers and well connected/trusted nodes used for bootstrapping. func WithPeerFilter ¶ added in v0.5.5 func WithPeerFilter(filter PeerFilter) Option WithPeerFilter is an option to set a filter for pubsub peers. The default peer filter is DefaultPeerFilter (which always returns true), but it can be customized to any custom implementation. func WithPeerGater ¶ added in v0.3.6 func WithPeerGater(params *PeerGaterParams) Option WithPeerGater is a gossipsub router option that enables reactive validation queue management. The Gater is activated if the ratio of throttled/validated messages exceeds the specified threshold. Once active, the Gater probabilistically throttles peers _before_ they enter the validation queue, performing Random Early Drop. The throttle decision is randomized, with the probability of allowing messages to enter the validation queue controlled by the statistical observations of the performance of all peers in the IP address of the gated peer. The Gater deactivates if there is no validation throttlinc occurring for the specified quiet interval. func WithPeerOutboundQueueSize ¶ added in v0.2.2 func WithPeerOutboundQueueSize(size int) Option WithPeerOutboundQueueSize is an option to set the buffer size for outbound messages to a peer We start dropping messages to a peer if the outbound queue if full func WithPeerScore ¶ added in v0.3.0 func WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option WithPeerScore is a gossipsub router option that enables peer scoring. func WithPeerScoreInspect ¶ added in v0.3.0 func WithPeerScoreInspect(inspect interface{}, period time. Duration) Option WithPeerScoreInspect is a gossipsub router option that enables peer score debugging. When this option is enabled, the supplied function will be invoked periodically to allow the application to inspect or dump the scores for connected peers. The supplied function can have one of two signatures: PeerScoreInspectFn, which takes a map of peer IDs to score. ExtendedPeerScoreInspectFn, which takes a map of peer IDs to PeerScoreSnapshots and allows inspection of individual score components for debugging peer scoring. This option must be passed _after_ the WithPeerScore option. func WithProtocolMatchFn ¶ added in v0.5.4 func WithProtocolMatchFn(m ProtocolMatchFn) Option WithProtocolMatchFn sets a custom matching function for protocol selection to be used by the protocol handler on the Host's Mux. Should be combined with WithGossipSubProtocols feature function for checking if certain protocol features are supported func WithRawTracer ¶ added in v0.5.0 func WithRawTracer(tracer RawTracer) Option WithRawTracer adds a raw tracer to the pubsub system. Multiple tracers can be added using multiple invocations of the option. func WithSeenMessagesStrategy ¶ added in v0.8.3 func WithSeenMessagesStrategy(strategy timecache. Strategy) Option WithSeenMessagesStrategy configures which type of lookup/cleanup strategy is used by the seen messages cache func WithSeenMessagesTTL ¶ added in v0.7.0 func WithSeenMessagesTTL(ttl time. Duration) Option WithSeenMessagesTTL configures when a previously seen message ID can be forgotten about func WithStrictSignatureVerification ¶ func WithStrictSignatureVerification(required bool) Option WithStrictSignatureVerification is an option to enable or disable strict message signing. When enabled (which is the default), unsigned messages will be discarded. Deprecated: signature verification without message signing, or message signing without verification, are not recommended. func WithSubscriptionFilter ¶ added in v0.3.6 func WithSubscriptionFilter(subFilter SubscriptionFilter) Option WithSubscriptionFilter is a pubsub option that specifies a filter for subscriptions in topics of interest. func WithValidateQueueSize ¶ added in v0.2.6 func WithValidateQueueSize(n int) Option WithValidateQueueSize sets the buffer of validate queue. Defaults to 32. When queue is full, validation is throttled and new messages are dropped. func WithValidateThrottle ¶ func WithValidateThrottle(n int) Option WithValidateThrottle sets the upper bound on the number of active validation goroutines across all topics. The default is 8192. func WithValidateWorkers ¶ added in v0.0.3 func WithValidateWorkers(n int) Option WithValidateWorkers sets the number of synchronous validation worker goroutines. Defaults to NumCPU. The synchronous validation workers perform signature validation, apply inline user validators, and schedule asynchronous user validators. You can adjust this parameter to devote less cpu time to synchronous validation. type PBTracer ¶ added in v0.2.3 type PBTracer struct { // contains filtered or unexported fields } PBTracer is a tracer that writes events to a file, as delimited protobufs. func NewPBTracer ¶ added in v0.2.3 func NewPBTracer(file string) (*PBTracer, error) func OpenPBTracer ¶ added in v0.2.3 func OpenPBTracer(file string, flags int, perm os. FileMode) (*PBTracer, error) OpenPBTracer creates a new PBTracer, with explicit control of OpenFile flags and permissions. func (*PBTracer) Close ¶ added in v0.2.3 func (t *PBTracer) Close() func (*PBTracer) Trace ¶ added in v0.2.3 func (t *PBTracer) Trace(evt * pb. TraceEvent) type PeerEvent ¶ added in v0.1.1 type PeerEvent struct { Type EventType Peer peer. ID } type PeerFilter ¶ added in v0.5.5 type PeerFilter func(pid peer. ID, topic string) bool PeerFilter is used to filter pubsub peers. It should return true for peers that are accepted for a given topic. PubSub can be customized to use any implementation of this function by configuring it with the Option from WithPeerFilter. type PeerGaterParams ¶ added in v0.3.6 type PeerGaterParams struct { // when the ratio of throttled/validated messages exceeds this threshold, the gater turns on Threshold float64 // (linear) decay parameter for gater counters GlobalDecay float64 // global counter decay SourceDecay float64 // per IP counter decay // decay interval DecayInterval time. Duration // counter zeroing threshold DecayToZero float64 // how long to retain stats RetainStats time. Duration // quiet interval before turning off the gater; if there are no validation throttle events // for this interval, the gater turns off Quiet time. Duration // weight of duplicate message deliveries DuplicateWeight float64 // weight of ignored messages IgnoreWeight float64 // weight of rejected messages RejectWeight float64 // priority topic delivery weights TopicDeliveryWeights map[string]float64 } PeerGaterParams groups together parameters that control the operation of the peer gater func DefaultPeerGaterParams ¶ added in v0.3.6 func DefaultPeerGaterParams() *PeerGaterParams DefaultPeerGaterParams creates a new PeerGaterParams struct using default values func NewPeerGaterParams ¶ added in v0.3.6 func NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams NewPeerGaterParams creates a new PeerGaterParams struct, using the specified threshold and decay parameters and default values for all other parameters. func (*PeerGaterParams) WithTopicDeliveryWeights ¶ added in v0.3.6 func (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams WithTopicDeliveryWeights is a fluid setter for the priority topic delivery weights type PeerMetadataStore ¶ added in v0.9.2 type PeerMetadataStore interface { // Get retrieves the metadata associated with a peer; // It should return nil if there is no metadata associated with the peer and not an error. Get(context. Context, peer.ID) ([]byte, error) // Put sets the metadata associated with a peer. Put(context. Context, peer. ID, []byte) error } PeerMetadataStore is an interface for storing and retrieving per peer metadata type PeerScoreInspectFn ¶ added in v0.3.0 type PeerScoreInspectFn = func(map[peer. ID]float64) type PeerScoreParams ¶ added in v0.3.0 type PeerScoreParams struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // Score parameters per topic. Topics map[string]*TopicScoreParams // Aggregate topic score cap; this limits the total contribution of topics towards a positive // score. It must be positive (or 0 for no cap). TopicScoreCap float64 // P5: Application-specific peer scoring AppSpecificScore func(p peer. ID) float64 AppSpecificWeight float64 // P6: IP-colocation factor. // The parameter has an associated counter which counts the number of peers with the same IP. // If the number of peers in the same IP exceeds IPColocationFactorThreshold, then the value // is the square of the difference, ie (PeersInSameIP - IPColocationThreshold)^2. // If the number of peers in the same IP is less than the threshold, then the value is 0. // The weight of the parameter MUST be negative, unless you want to disable for testing. // Note: In order to simulate many IPs in a managable manner when testing, you can set the weight to 0 // thus disabling the IP colocation penalty. IPColocationFactorWeight float64 IPColocationFactorThreshold int IPColocationFactorWhitelist []*net. IPNet // P7: behavioural pattern penalties. // This parameter has an associated counter which tracks misbehaviour as detected by the // router. The router currently applies penalties for the following behaviors: // - attempting to re-graft before the prune backoff time has elapsed. // - not following up in IWANT requests for messages advertised with IHAVE. // // The value of the parameter is the square of the counter over the threshold, which decays with // BehaviourPenaltyDecay. // The weight of the parameter MUST be negative (or zero to disable). BehaviourPenaltyWeight, BehaviourPenaltyThreshold, BehaviourPenaltyDecay float64 // the decay interval for parameter counters. DecayInterval time. Duration // counter value below which it is considered 0. DecayToZero float64 // time to remember counters for a disconnected peer. RetainScore time. Duration // time to remember a message delivery for. Default to global TimeCacheDuration if 0. SeenMsgTTL time. Duration } type PeerScoreSnapshot ¶ added in v0.3.3 type PeerScoreSnapshot struct { Score float64 Topics map[string]*TopicScoreSnapshot AppSpecificScore float64 IPColocationFactor float64 BehaviourPenalty float64 } type PeerScoreThresholds ¶ added in v0.3.0 type PeerScoreThresholds struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // GossipThreshold is the score threshold below which gossip propagation is suppressed; // should be negative. GossipThreshold float64 // PublishThreshold is the score threshold below which we shouldn't publish when using flood // publishing (also applies to fanout and floodsub peers); should be negative and <= GossipThreshold. PublishThreshold float64 // GraylistThreshold is the score threshold below which message processing is suppressed altogether, // implementing an effective gray list according to peer score; should be negative and <= PublishThreshold. GraylistThreshold float64 // AcceptPXThreshold is the score threshold below which PX will be ignored; this should be positive // and limited to scores attainable by bootstrappers and other trusted nodes. AcceptPXThreshold float64 // OpportunisticGraftThreshold is the median mesh score threshold before triggering opportunistic // grafting; this should have a small positive value. OpportunisticGraftThreshold float64 } type ProtocolMatchFn ¶ added in v0.5.4 type ProtocolMatchFn = func(protocol. ID) func(protocol. ID) bool type ProvideKey ¶ added in v0.7.0 type ProvideKey func() (crypto. PrivKey, peer. ID) ProvideKey is a function that provides a private key and its associated peer ID when publishing a new message type PubOpt ¶ added in v0.2.0 type PubOpt func(pub *PublishOptions) error func WithLocalPublication ¶ added in v0.8.0 func WithLocalPublication(local bool) PubOpt WithLocalPublication returns a publishing option to notify in-process subscribers only. It prevents message publication to mesh peers. Useful in edge cases where the msg needs to be only delivered to the in-process subscribers, e.g. not to spam the network with outdated msgs. Should not be used specifically for in-process pubsubing. func WithReadiness ¶ added in v0.2.0 func WithReadiness(ready RouterReady) PubOpt WithReadiness returns a publishing option for only publishing when the router is ready. This option is not useful unless PubSub is also using WithDiscovery func WithSecretKeyAndPeerId ¶ added in v0.7.0 func WithSecretKeyAndPeerId(key crypto. PrivKey, pid peer. ID) PubOpt WithSecretKeyAndPeerId returns a publishing option for providing a custom private key and its corresponding peer ID This option is useful when we want to send messages from \"virtual\", never-connectable peers in the network type PubSub ¶ type PubSub struct { // contains filtered or unexported fields } PubSub is the implementation of the pubsub system. func NewFloodSub ¶ func NewFloodSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) NewFloodSub returns a new PubSub object using the FloodSubRouter. func NewFloodsubWithProtocols ¶ func NewFloodsubWithProtocols(ctx context. Context, h host. Host, ps []protocol. ID, opts ...Option) (*PubSub, error) NewFloodsubWithProtocols returns a new floodsub-enabled PubSub objecting using the protocols specified in ps. func NewGossipSub ¶ func NewGossipSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) NewGossipSub returns a new PubSub object using the default GossipSubRouter as the router. func NewGossipSubWithRouter ¶ added in v0.8.2 func NewGossipSubWithRouter(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) NewGossipSubWithRouter returns a new PubSub object using the given router. func NewPubSub ¶ func NewPubSub(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) NewPubSub returns a new PubSub management object. func NewRandomSub ¶ func NewRandomSub(ctx context. Context, h host. Host, size int, opts ...Option) (*PubSub, error) NewRandomSub returns a new PubSub object using RandomSubRouter as the router. func (*PubSub) BlacklistPeer ¶ func (p *PubSub) BlacklistPeer(pid peer. ID) BlacklistPeer blacklists a peer; all messages from this peer will be unconditionally dropped. func (*PubSub) GetTopics ¶ func (p *PubSub) GetTopics() []string GetTopics returns the topics this node is subscribed to. func (*PubSub) Join ¶ added in v0.2.0 func (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error) Join joins the topic and returns a Topic handle. Only one Topic handle should exist per topic, and Join will error if the Topic handle already exists. func (*PubSub) ListPeers ¶ func (p *PubSub) ListPeers(topic string) []peer. ID ListPeers returns a list of peers we are connected to in the given topic. func (*PubSub) Publish deprecated func (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) error Publish publishes data to the given topic. Deprecated: use pubsub. Join() and topic. Publish() instead func (*PubSub) RegisterTopicValidator ¶ func (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error RegisterTopicValidator registers a validator for topic. By default validators are asynchronous, which means they will run in a separate goroutine. The number of active goroutines is controlled by global and per topic validator throttles; if it exceeds the throttle threshold, messages will be dropped. func (*PubSub) Subscribe deprecated func (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error) Subscribe returns a new Subscription for the given topic. Note that subscription is not an instantaneous operation. It may take some time before the subscription is processed by the pubsub main loop and propagated to our peers. Deprecated: use pubsub. Join() and topic. Subscribe() instead func (*PubSub) UnregisterTopicValidator ¶ func (p *PubSub) UnregisterTopicValidator(topic string) error UnregisterTopicValidator removes a validator from a topic. Returns an error if there was no validator registered with the topic. type PubSubNotif ¶ type PubSubNotif PubSub func (*PubSubNotif) ClosedStream ¶ func (p *PubSubNotif) ClosedStream(n network. Network, s network. Stream) func (*PubSubNotif) Connected ¶ func (p *PubSubNotif) Connected(n network. Network, c network. Conn) func (*PubSubNotif) Disconnected ¶ func (p *PubSubNotif) Disconnected(n network. Network, c network. Conn) func (*PubSubNotif) Initialize ¶ added in v0.4.1 func (p *PubSubNotif) Initialize() func (*PubSubNotif) Listen ¶ func (p *PubSubNotif) Listen(n network. Network, _ ma. Multiaddr) func (*PubSubNotif) ListenClose ¶ func (p *PubSubNotif) ListenClose(n network. Network, _ ma. Multiaddr) func (*PubSubNotif) OpenedStream ¶ func (p *PubSubNotif) OpenedStream(n network. Network, s network. Stream) type PubSubRouter ¶ type PubSubRouter interface { // Protocols returns the list of protocols supported by the router. Protocols() []protocol. ID // Attach is invoked by the PubSub constructor to attach the router to a // freshly initialized PubSub instance. Attach(*PubSub) // AddPeer notifies the router that a new peer has been connected. AddPeer(peer.ID, protocol. ID) // RemovePeer notifies the router that a peer has been disconnected. RemovePeer(peer.ID) // EnoughPeers returns whether the router needs more peers before it's ready to publish new records. // Suggested (if greater than 0) is a suggested number of peers that the router should need. EnoughPeers(topic string, suggested int) bool // AcceptFrom is invoked on any incoming message before pushing it to the validation pipeline // or processing control information. // Allows routers with internal scoring to vet peers before committing any processing resources // to the message and implement an effective graylist and react to validation queue overload. AcceptFrom(peer.ID) AcceptStatus // HandleRPC is invoked to process control messages in the RPC envelope. // It is invoked after subscriptions and payload messages have been processed. HandleRPC(*RPC) // Publish is invoked to forward a new message that has been validated. Publish(*Message) // Join notifies the router that we want to receive and forward messages in a topic. // It is invoked after the subscription announcement. Join(topic string) // Leave notifies the router that we are no longer interested in a topic. // It is invoked after the unsubscription announcement. Leave(topic string) } PubSubRouter is the message router component of PubSub. type PublishOptions ¶ added in v0.2.0 type PublishOptions struct { // contains filtered or unexported fields } type RPC ¶ type RPC struct { pb.RPC // contains filtered or unexported fields } type RandomSubRouter ¶ type RandomSubRouter struct { // contains filtered or unexported fields } RandomSubRouter is a router that implements a random propagation strategy. For each message, it selects the square root of the network size peers, with a min of RandomSubD, and forwards the message to them. func (*RandomSubRouter) AcceptFrom ¶ added in v0.3.0 func (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus func (*RandomSubRouter) AddPeer ¶ func (rs *RandomSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*RandomSubRouter) Attach ¶ func (rs *RandomSubRouter) Attach(p *PubSub) func (*RandomSubRouter) EnoughPeers ¶ added in v0.2.0 func (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool func (*RandomSubRouter) HandleRPC ¶ func (rs *RandomSubRouter) HandleRPC(rpc *RPC) func (*RandomSubRouter) Join ¶ func (rs *RandomSubRouter) Join(topic string) func (*RandomSubRouter) Leave ¶ func (rs *RandomSubRouter) Leave(topic string) func (*RandomSubRouter) Protocols ¶ func (rs *RandomSubRouter) Protocols() []protocol. ID func (*RandomSubRouter) Publish ¶ func (rs *RandomSubRouter) Publish(msg *Message) func (*RandomSubRouter) RemovePeer ¶ func (rs *RandomSubRouter) RemovePeer(p peer. ID) type RawTracer ¶ added in v0.5.0 type RawTracer interface { // AddPeer is invoked when a new peer is added. AddPeer(p peer. ID, proto protocol. ID) // RemovePeer is invoked when a peer is removed. RemovePeer(p peer. ID) // Join is invoked when a new topic is joined Join(topic string) // Leave is invoked when a topic is abandoned Leave(topic string) // Graft is invoked when a new peer is grafted on the mesh (gossipsub) Graft(p peer. ID, topic string) // Prune is invoked when a peer is pruned from the message (gossipsub) Prune(p peer. ID, topic string) // ValidateMessage is invoked when a message first enters the validation pipeline. ValidateMessage(msg *Message) // DeliverMessage is invoked when a message is delivered DeliverMessage(msg *Message) // RejectMessage is invoked when a message is Rejected or Ignored. // The reason argument can be one of the named strings Reject*. RejectMessage(msg *Message, reason string) // DuplicateMessage is invoked when a duplicate message is dropped. DuplicateMessage(msg *Message) // ThrottlePeer is invoked when a peer is throttled by the peer gater. ThrottlePeer(p peer. ID) // RecvRPC is invoked when an incoming RPC is received. RecvRPC(rpc *RPC) // SendRPC is invoked when a RPC is sent. SendRPC(rpc *RPC, p peer. ID) // DropRPC is invoked when an outbound RPC is dropped, typically because of a queue full. DropRPC(rpc *RPC, p peer. ID) // UndeliverableMessage is invoked when the consumer of Subscribe is not reading messages fast enough and // the pressure release mechanism trigger, dropping messages. UndeliverableMessage(msg *Message) } RawTracer is a low level tracing interface that allows an application to trace the internal operation of the pubsub subsystem. Note that the tracers are invoked synchronously, which means that application tracers must take care to not block or modify arguments. Warning: this interface is not fixed, we may be adding new methods as necessitated by the system in the future. type RelayCancelFunc ¶ added in v0.3.0 type RelayCancelFunc func() type RemoteTracer ¶ added in v0.2.3 type RemoteTracer struct { // contains filtered or unexported fields } RemoteTracer is a tracer that sends trace events to a remote peer func NewRemoteTracer ¶ added in v0.2.3 func NewRemoteTracer(ctx context. Context, host host. Host, pi peer. AddrInfo) (*RemoteTracer, error) NewRemoteTracer constructs a RemoteTracer, tracing to the peer identified by pi func (*RemoteTracer) Close ¶ added in v0.2.3 func (t *RemoteTracer) Close() func (*RemoteTracer) Trace ¶ added in v0.2.3 func (t *RemoteTracer) Trace(evt * pb. TraceEvent) type RouterReady ¶ added in v0.2.0 type RouterReady func(rt PubSubRouter, topic string) (bool, error) RouterReady is a function that decides if a router is ready to publish func MinTopicSize ¶ added in v0.2.0 func MinTopicSize(size int) RouterReady MinTopicSize returns a function that checks if a router is ready for publishing based on the topic size. The router ultimately decides the whether it is ready or not, the given size is just a suggestion. Note that the topic size does not include the router in the count. type SubOpt ¶ type SubOpt func(sub *Subscription) error func WithBufferSize ¶ added in v0.5.0 func WithBufferSize(size int) SubOpt WithBufferSize is a Subscribe option to customize the size of the subscribe output buffer. The default length is 32 but it can be configured to avoid dropping messages if the consumer is not reading fast enough. type Subscription ¶ type Subscription struct { // contains filtered or unexported fields } Subscription handles the details of a particular Topic subscription. There may be many subscriptions for a given Topic. func (*Subscription) Cancel ¶ func (sub *Subscription) Cancel() Cancel closes the subscription. If this is the last active subscription then pubsub will send an unsubscribe announcement to the network. func (*Subscription) Next ¶ func (sub *Subscription) Next(ctx context. Context) (*Message, error) Next returns the next message in our subscription func (*Subscription) Topic ¶ func (sub *Subscription) Topic() string Topic returns the topic string associated with the Subscription type SubscriptionFilter ¶ added in v0.3.6 type SubscriptionFilter interface { // CanSubscribe returns true if the topic is of interest and we can subscribe to it CanSubscribe(topic string) bool // FilterIncomingSubscriptions is invoked for all RPCs containing subscription notifications. // It should filter only the subscriptions of interest and my return an error if (for instance) // there are too many subscriptions. FilterIncomingSubscriptions(peer. ID, []*pb.RPC_SubOpts) ([]*pb.RPC_SubOpts, error) } SubscriptionFilter is a function that tells us whether we are interested in allowing and tracking subscriptions for a given topic. The filter is consulted whenever a subscription notification is received by another peer; if the filter returns false, then the notification is ignored. The filter is also consulted when joining topics; if the filter returns false, then the Join operation will result in an error. func NewAllowlistSubscriptionFilter ¶ added in v0.3.6 func NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter NewAllowlistSubscriptionFilter creates a subscription filter that only allows explicitly specified topics for local subscriptions and incoming peer subscriptions. func NewRegexpSubscriptionFilter ¶ added in v0.3.6 func NewRegexpSubscriptionFilter(rx *regexp. Regexp) SubscriptionFilter NewRegexpSubscriptionFilter creates a subscription filter that only allows topics that match a regular expression for local subscriptions and incoming peer subscriptions. Warning: the user should take care to match start/end of string in the supplied regular expression, otherwise the filter might match unwanted topics unexpectedly. func WrapLimitSubscriptionFilter ¶ added in v0.3.6 func WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter WrapLimitSubscriptionFilter wraps a subscription filter with a hard limit in the number of subscriptions allowed in an RPC message. type TimeCachedBlacklist ¶ added in v0.2.6 type TimeCachedBlacklist struct { // contains filtered or unexported fields } TimeCachedBlacklist is a blacklist implementation using a time cache func (*TimeCachedBlacklist) Add ¶ added in v0.2.6 func (b *TimeCachedBlacklist) Add(p peer. ID) bool Add returns a bool saying whether Add of peer was successful func (*TimeCachedBlacklist) Contains ¶ added in v0.2.6 func (b *TimeCachedBlacklist) Contains(p peer. ID) bool type Topic ¶ added in v0.2.0 type Topic struct { // contains filtered or unexported fields } Topic is the handle for a pubsub topic func (*Topic) Close ¶ added in v0.2.0 func (t *Topic) Close() error Close closes down the topic. Will return an error unless there are no active event handlers or subscriptions. Does not error if the topic is already closed. func (*Topic) EventHandler ¶ added in v0.2.0 func (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error) EventHandler creates a handle for topic specific events Multiple event handlers may be created and will operate independently of each other func (*Topic) ListPeers ¶ added in v0.2.0 func (t *Topic) ListPeers() []peer. ID ListPeers returns a list of peers we are connected to in the given topic. func (*Topic) Publish ¶ added in v0.2.0 func (t *Topic) Publish(ctx context. Context, data []byte, opts ...PubOpt) error Publish publishes data to topic. func (*Topic) Relay ¶ added in v0.3.0 func (t *Topic) Relay() (RelayCancelFunc, error) Relay enables message relaying for the topic and returns a reference cancel function. Subsequent calls increase the reference counter. To completely disable the relay, all references must be cancelled. func (*Topic) SetScoreParams ¶ added in v0.3.6 func (t *Topic) SetScoreParams(p *TopicScoreParams) error SetScoreParams sets the topic score parameters if the pubsub router supports peer scoring func (*Topic) String ¶ added in v0.3.5 func (t *Topic) String() string String returns the topic associated with t func (*Topic) Subscribe ¶ added in v0.2.0 func (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error) Subscribe returns a new Subscription for the topic. Note that subscription is not an instantaneous operation. It may take some time before the subscription is processed by the pubsub main loop and propagated to our peers. type TopicEventHandler ¶ added in v0.2.0 type TopicEventHandler struct { // contains filtered or unexported fields } TopicEventHandler is used to manage topic specific events. No Subscription is required to receive events. func (*TopicEventHandler) Cancel ¶ added in v0.2.0 func (t *TopicEventHandler) Cancel() Cancel closes the topic event handler func (*TopicEventHandler) NextPeerEvent ¶ added in v0.2.0 func (t *TopicEventHandler) NextPeerEvent(ctx context. Context) (PeerEvent, error) NextPeerEvent returns the next event regarding subscribed peers Guarantees: Peer Join and Peer Leave events for a given peer will fire in order. Unless a peer both Joins and Leaves before NextPeerEvent emits either event all events will eventually be received from NextPeerEvent. type TopicEventHandlerOpt ¶ added in v0.2.0 type TopicEventHandlerOpt func(t *TopicEventHandler) error type TopicOpt ¶ added in v0.2.0 type TopicOpt func(t *Topic) error func WithTopicMessageIdFn ¶ added in v0.7.0 func WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt WithTopicMessageIdFn sets custom MsgIdFunction for a Topic, enabling topics to have own msg id generation rules. type TopicOptions ¶ added in v0.2.0 type TopicOptions struct{} type TopicScoreParams ¶ added in v0.3.0 type TopicScoreParams struct { // whether it is allowed to just set some params and not all of them.","type TopicOptions ¶ added in v0.2.0 type TopicOptions struct{} type TopicScoreParams ¶ added in v0.3.0 type TopicScoreParams struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // The weight of the topic. TopicWeight float64 // P1: time in the mesh // This is the time the peer has been grafted in the mesh. // The value of the parameter is the time/TimeInMeshQuantum, capped by TimeInMeshCap. // The weight of the parameter MUST be positive (or zero to disable). TimeInMeshWeight float64 TimeInMeshQuantum time. Duration TimeInMeshCap float64 // P2: first message deliveries // This is the number of message deliveries in the topic. // The value of the parameter is a counter, decaying with FirstMessageDeliveriesDecay, and capped // by FirstMessageDeliveriesCap. // The weight of the parameter MUST be positive (or zero to disable). FirstMessageDeliveriesWeight, FirstMessageDeliveriesDecay float64 FirstMessageDeliveriesCap float64 // P3: mesh message deliveries // This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of // message validation; deliveries during validation also count and are retroactively applied // when validation succeeds. // This window accounts for the minimum time before a hostile mesh peer trying to game the score // could replay back a valid message we just sent them. // It effectively tracks first and near-first deliveries, i.e., a message seen from a mesh peer // before we have forwarded it to them. // The parameter has an associated counter, decaying with MeshMessageDeliveriesDecay. // If the counter exceeds the threshold, its value is 0. // If the counter is below the MeshMessageDeliveriesThreshold, the value is the square of // the deficit, ie (MessageDeliveriesThreshold - counter)^2 // The penalty is only activated after MeshMessageDeliveriesActivation time in the mesh. // The weight of the parameter MUST be negative (or zero to disable). MeshMessageDeliveriesWeight, MeshMessageDeliveriesDecay float64 MeshMessageDeliveriesCap, MeshMessageDeliveriesThreshold float64 MeshMessageDeliveriesWindow, MeshMessageDeliveriesActivation time. Duration // P3b: sticky mesh propagation failures // This is a sticky penalty that applies when a peer gets pruned from the mesh with an active // mesh message delivery penalty. // The weight of the parameter MUST be negative (or zero to disable) MeshFailurePenaltyWeight, MeshFailurePenaltyDecay float64 // P4: invalid messages // This is the number of invalid messages in the topic. // The value of the parameter is the square of the counter, decaying with // InvalidMessageDeliveriesDecay. // The weight of the parameter MUST be negative (or zero to disable). InvalidMessageDeliveriesWeight, InvalidMessageDeliveriesDecay float64 } type TopicScoreSnapshot ¶ added in v0.3.3 type TopicScoreSnapshot struct { TimeInMesh time. Duration FirstMessageDeliveries float64 MeshMessageDeliveries float64 InvalidMessageDeliveries float64 } type ValidationError ¶ added in v0.5.0 type ValidationError struct { Reason string } ValidationError is an error that may be signalled from message publication when the message fails validation func ( ValidationError) Error ¶ added in v0.5.0 func (e ValidationError) Error() string type ValidationResult ¶ added in v0.3.0 type ValidationResult int ValidationResult represents the decision of an extended validator type Validator ¶ type Validator func(context. Context, peer. ID, *Message) bool Validator is a function that validates a message with a binary decision: accept or reject. type ValidatorEx ¶ added in v0.3.0 type ValidatorEx func(context. Context, peer. ID, *Message) ValidationResult ValidatorEx is an extended validation function that validates a message with an enumerated decision func NewBasicSeqnoValidator ¶ added in v0.9.2 func NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx NewBasicSeqnoValidator constructs a BasicSeqnoValidator using the givven PeerMetadataStore. type ValidatorOpt ¶ type ValidatorOpt func(addVal *addValReq) error ValidatorOpt is an option for RegisterTopicValidator. func WithValidatorConcurrency ¶ func WithValidatorConcurrency(n int) ValidatorOpt WithValidatorConcurrency is an option that sets the topic validator throttle. This controls the number of active validation goroutines for the topic; the default is 1024. func WithValidatorInline ¶ added in v0.0.3 func WithValidatorInline(inline bool) ValidatorOpt WithValidatorInline is an option that sets the validation disposition to synchronous: it will be executed inline in validation front-end, without spawning a new goroutine. This is suitable for simple or cpu-bound validators that do not block. func WithValidatorTimeout ¶ func WithValidatorTimeout(timeout time. Duration) ValidatorOpt WithValidatorTimeout is an option that sets a timeout for an (asynchronous) topic validator. By default there is no timeout in asynchronous validators. Source Files ¶ View all Source files backoff.go blacklist.go comm.go discovery.go doc.go floodsub.go gossip_tracer.go gossipsub.go gossipsub_feat.go mcache.go midgen.go notify.go peer_gater.go pubsub.go randomsub.go score.go score_params.go sign.go subscription.go subscription_filter.go tag_tracer.go topic.go trace.go tracer.go validation.go validation_builtin.go Directories ¶ Show internal Collapse all Path Synopsis compat pb timecache Click to show internal directories. Click to hide internal directories. Why Go Use Cases Case Studies Get Started Playground Tour Stack Overflow Help Packages Standard Library Sub-repositories About Go Packages About Download Blog Issue Tracker Release Notes Brand Guidelines Code of Conduct Connect Twitter GitHub Slack r/golang Meetup Golang Weekly Copyright Terms of Service Privacy Policy Report an Issue Theme Toggle Shortcuts Modal Jump to Close Keyboard shortcuts ? : This menu / : Search site f or F : Jump to y or Y : Canonical URL Close go.dev uses cookies from Google to deliver and enhance the quality of its services and to analyze traffic. Learn more. Okay"],"chunk_summaries":["The text provides information about the go-libp2p-pubsub package in Go, including its version, license, imports, functions, and types. It mentions different message router options and provides a link to an example and documentation. The package supports tracing for analyzing message flow and system state. The text explains how to initialize a PubSub service in Go using libp2p, enable tracing, capture traces, use a remote tracer, and construct different routing algorithms. It also provides constants related to initializing a PubSub service.","providing information about initializing a PubSub service in Go using libp2p. It covers various constants, variables, functions, and types related to the initialization process. The text also discusses parameters, options, and functions for configuring the PubSub router, including message caching, gossiping, pruning peers, and message signatures.","providing information about initializing and using a PubSub service in Go using libp2p. It covers various options, functions, and types available for customization, such as disabling certain data, enabling peer exchange, setting filters, managing queues, and more. It also mentions the existence of routers and tracers for the PubSub service.","The text provides information about various types and functions related to initializing a PubSub service in Go using libp2p. It includes details about topic options, topic score parameters, topic score snapshots, validation errors, validation results, validators, and validator options."],"e_summary":[0.01821993663907051,0.016698118299245834,-0.012956399470567703,-0.011546274647116661,-0.01967194676399231,0.011720795184373856,0.0095986258238554,0.021947694942355156,0.004869121126830578,-0.029403207823634148,0.024083824828267097,0.003937182016670704,-0.03741718828678131,-0.0013734761159867048,0.02238050475716591,-0.0027347358409315348,0.006397920195013285,-0.009472970850765705,0.020118718966841698,0.02898436039686203,0.0022321168798953295,0.0044467817060649395,-0.010108225978910923,-0.013096015900373459,0.007706823758780956,0.014799335971474648,0.016767926514148712,-0.0033630095422267914,0.00647470960393548,-0.018359553068876266,0.0371379554271698,-0.026987845078110695,-0.029822057113051414,-0.007664938922971487,-0.030883142724633217,-0.008174538612365723,0.02521471679210663,-0.019602138549089432,-0.00448517594486475,-0.004827236291021109,0.018415400758385658,-0.0019406676292419434,-0.0006784482975490391,-0.012879610992968082,-0.023902323096990585,0.010017475113272667,0.016418885439634323,-0.02712746150791645,0.016879620030522346,0.003787094261497259,0.0006596873863600194,-0.011434581130743027,-0.019001789391040802,-0.01299828477203846,-0.004628282971680164,-0.007455514278262854,-0.00553229870274663,0.018108243122696877,-0.007434572093188763,-0.005158825311809778,0.005958128720521927,0.004314146004617214,-0.006453766953200102,-0.0096474913880229,-0.009242604486644268,-0.00684469286352396,-0.017829010263085365,0.02901228331029415,-0.030771449208259583,0.001972081372514367,0.009500894695520401,0.02095641754567623,-0.009479952044785023,-0.03551840782165527,0.009870877489447594,-0.010897058062255383,-0.02609430067241192,-0.013096015900373459,-0.028467778116464615,0.006369997281581163,0.004345559515058994,0.00012554565910249949,0.01001049391925335,0.05403153598308563,-0.008335097692906857,0.0059860520996153355,0.025452064350247383,0.028816819190979004,-0.021263573318719864,-0.0006007867050357163,0.021961655467748642,-0.00006762667908333242,-0.0025253111962229013,0.012956399470567703,0.01170683279633522,0.0027399712707847357,-0.018010511994361877,0.03127406910061836,-0.008090768940746784,0.008865639567375183,-0.013926733285188675,0.025061139836907387,-0.010191995650529861,-0.014757450670003891,-0.007225147448480129,-0.01202096976339817,0.015595149248838425,-0.029319439083337784,0.015944190323352814,0.0031239164527505636,-0.01370334718376398,0.04009782150387764,-0.0010104734683409333,-0.005340326577425003,-0.008209442719817162,0.03448524326086044,0.013465999625623226,0.013598634861409664,0.0070541175082325935,-0.03867373615503311,0.00111518579069525,0.000565446331165731,0.024446828290820122,0.013780136592686176,-0.003825488733127713,-0.030101289972662926,-0.02353932149708271,0.0016849951352924109,-0.005406644195318222,-0.014464256353676319,-0.0007390941609628499,0.029123976826667786,0.0064921616576612,0.016698118299245834,-0.003507861401885748,0.013780136592686176,-0.02898436039686203,0.022827276960015297,-0.01608380675315857,-0.02268766053020954,0.006694605108350515,0.024432865902781487,-0.03509955853223801,0.018582940101623535,-0.021193765103816986,0.01942063868045807,0.0252426415681839,0.021710345521569252,0.026066377758979797,0.007096002344042063,0.028928512707352638,0.009424105286598206,-0.013284497894346714,0.013102997094392776,-0.0206492617726326,0.023902323096990585,-0.02143111452460289,0.02212919481098652,0.04311353713274002,0.012488684616982937,0.022966893389821053,0.030017521232366562,-0.0011596885742619634,-0.02454455941915512,0.015218185260891914,0.03448524326086044,0.02617807127535343,-0.007755689788609743,-0.006373487412929535,0.0034816833212971687,-0.001907508703880012,-0.00023974748910404742,-0.04333692416548729,0.0012548022205010056,-0.008097750134766102,0.01869463361799717,0.014924990944564342,0.014799335971474648,-0.004202452953904867,0.0006465983460657299,0.006561969872564077,-0.008733004331588745,-0.011399677023291588,0.03769642114639282,-0.026959922164678574,-0.0032670232467353344,-0.012328125536441803,0.01636303961277008,0.014310678467154503,0.0203560683876276,0.0017024471890181303,0.027057653293013573,0.0073926872573792934,0.0018621333874762058,-0.6116313934326172,-0.0037626612465828657,0.027895351871848106,-0.03146953135728836,-0.006628287490457296,0.0039022776763886213,-0.002207683864980936,0.019127443432807922,-0.009731261059641838,0.03540671244263649,0.01274697482585907,-0.011092521250247955,0.02143111452460289,-0.009815031662583351,-0.0016544540412724018,-0.03222345933318138,0.011469485238194466,-0.0030855219811201096,0.008104730397462845,-0.0005484306020662189,0.007937191054224968,0.015692880377173424,-0.007567207328975201,-0.008586406707763672,0.0172146987169981,-0.00014954223297536373,0.03141368553042412,-0.03585348650813103,0.0028062891215085983,0.009061102755367756,-0.031134452670812607,-0.01646077074110508,0.025089062750339508,0.01054103672504425,0.0369424931704998,-0.006366506684571505,-0.023553282022476196,0.006296698469668627,-0.008837716653943062,0.04674356430768967,-0.02313443273305893,-0.027211232110857964,0.019434599205851555,0.011783622205257416,0.009493913501501083,-0.010855172760784626,0.036272335797548294,-0.0012137899175286293,-0.01195814274251461,0.001241713180206716,-0.004659696482121944,-0.011511370539665222,0.013605616055428982,-0.008390944451093674,0.014338601380586624,0.0006841202266514301,0.020635301247239113,-0.005322874523699284,0.0014991308562457561,-0.005717290565371513,-0.0032321191392838955,0.0022303715813905,-0.016921505331993103,-0.011350811459124088,-0.02291104756295681,0.03250269219279289,-0.027462540194392204,0.011755699291825294,0.016041921451687813,0.002336829202249646,0.033843010663986206,0.02492152340710163,-0.025326410308480263,0.006848182994872332,-0.000040794158849166706,0.030129214748740196,0.012565474025905132,0.011951161548495293,0.0082932123914361,0.00449215667322278,-0.01686565764248371,0.01548345573246479,-0.04258299618959427,-0.020984340459108353,0.013026207685470581,-0.013598634861409664,-0.02203146368265152,-0.006296698469668627,0.02331593446433544,0.006914501078426838,0.007462495472282171,-0.0022984344977885485,-0.018555017188191414,-0.014966875314712524,-0.008146615698933601,0.017354315146803856,0.007657958194613457,0.0039720856584608555,-0.005382211413234472,-0.004317636601626873,-0.01400352269411087,-0.0026090811006724834,0.008963371627032757,0.013019227422773838,0.072153739631176,0.015623072162270546,-0.026429379358887672,-0.003499135375022888,0.011427599936723709,-0.023357819765806198,0.013933714479207993,0.002446776954457164,-0.01598607562482357,-0.010764422826468945,-0.003530549118295312,-0.03339623659849167,0.0440070815384388,0.015455532819032669,0.021724307909607887,-0.007804555352777243,0.004931948613375425,-0.000961607787758112,-0.01979760266840458,-0.003129152115434408,0.009375239722430706,0.024614367634058,-0.0010567214339971542,-0.001576792448759079,-0.013151862658560276,0.0018918018322438002,-0.017284506931900978,-0.003338576527312398,0.02212919481098652,-0.012872629798948765,0.02152884565293789,-0.005591636057943106,0.048446882516145706,0.010848192498087883,-0.005155334714800119,-0.029291516169905663,-0.022296736016869545,0.013186766766011715,0.016321154311299324,-0.02158469147980213,0.0185689777135849,-0.007350801955908537,-0.023846477270126343,-0.024153633043169975,0.015664957463741302,0.011113463900983334,0.010464247316122055,-0.011713813990354538,-0.009200719185173512,0.005626540165394545,-0.007706823758780956,-0.011972104199230671,0.004890063777565956,-0.006471219006925821,0.017270546406507492,-0.0005161442677490413,0.006760923191905022,0.009431086480617523,-0.02772781252861023,0.006212928798049688,-0.015623072162270546,-0.020007027313113213,-0.015441571362316608,-0.005413624923676252,0.01264924369752407,-0.02140318974852562,0.004726014100015163,0.012865648604929447,-0.0014057623920962214,0.006872616242617369,-0.0004389189707580954,0.019909294322133064,-0.015888342633843422,-0.007650977466255426,-0.015022722072899342,-0.008118691854178905,-0.0024816810619086027,0.000880455772858113,-0.011511370539665222,0.009207700379192829,0.02810477651655674,0.012928476557135582,0.012446800246834755,0.006848182994872332,-0.02102622576057911,-0.019211214035749435,-0.00616755336523056,0.03618856519460678,-0.01879236474633217,0.014282755553722382,-0.021347343921661377,-0.011162329465150833,-0.0027452069334685802,0.01026180386543274,-0.013242613524198532,0.004279241897165775,0.02867720276117325,-0.008781869895756245,0.031357839703559875,-0.05439453944563866,-0.002965102670714259,-0.021500922739505768,0.0007386578945443034,-0.013033188879489899,-0.0028010534588247538,0.008516598492860794,0.03493201732635498,0.0027836014050990343,-0.0396510511636734,0.002476445399224758,0.006502632517367601,0.04970343038439751,-0.018555017188191414,0.011483446694910526,-0.008342078886926174,-0.010136148892343044,-0.0032740039750933647,0.002457248279824853,0.01872255653142929,-0.001773127936758101,-0.03119029849767685,0.0048167649656534195,0.03671910613775253,-0.006195476744323969,0.004205943085253239,-0.011225156486034393,-0.004802803508937359,0.013026207685470581,0.0049947756342589855,0.01410125382244587,0.003095993073657155,0.015078568831086159,-0.005225142929702997,-0.014506141655147076,0.019127443432807922,-0.01718677580356598,-0.008265289478003979,0.009479952044785023,0.011727775447070599,-0.018680671229958534,0.020607376471161842,0.0030052424408495426,0.006984309293329716,-0.015064607374370098,-0.037780191749334335,0.0032443355303257704,-0.022827276960015297,0.02092849463224411,-0.007650977466255426,0.0025392728857696056,0.00917279627174139,-0.007040155585855246,0.029598671942949295,0.0033246148377656937,0.019057635217905045,0.00966145284473896,0.01263528224080801,0.0039965189062058926,0.04308561235666275,0.0029197274707257748,0.006352545227855444,-0.006931953132152557,-0.00681327935308218,-0.032279305160045624,-0.036802876740694046,-0.00853056088089943,0.044677238911390305,0.0033856970258057117,-0.006586402654647827,-0.015846459195017815,0.0008315900340676308,0.013919753022491932,0.01484122034162283,0.008949409238994122,-0.008816774003207684,-0.01957421563565731,-0.018457284197211266,0.0036509681958705187,0.010596882551908493,0.03808734565973282,-0.0076160733588039875,-0.02895643562078476,0.008712061680853367,0.0038289790973067284,-0.02032814361155033,-0.018513131886720657,-0.02467021346092224,-0.010429343208670616,-0.004087269306182861,0.011623063124716282,0.00723910890519619,-0.031329914927482605,0.027043692767620087,-0.009891820140182972,-0.014436333440244198,-0.02945905551314354,-0.005811531562358141,0.016572464257478714,-0.029040206223726273,-0.012356049381196499,0.03286569565534592,0.02775573544204235,-0.011546274647116661,0.0013289733324199915,0.002518330467864871,0.008370001800358295,-0.0037661518435925245,0.003006987739354372,-0.02652711048722267,-0.04437008500099182,0.012928476557135582,-0.0074904183857142925,-0.00796511396765709,0.002530546858906746,0.005755685269832611,0.004607340320944786,-0.02328801155090332,-0.02895643562078476,-0.001407507574185729,0.006726019084453583,0.018429361283779144,0.00550786592066288,0.015441571362316608,-0.005005246959626675,-0.0024432865902781487,-0.017228661105036736,-0.01304715033620596,-0.013144881464540958,0.024823792278766632,-0.0030017520766705275,0.0028586452826857567,0.01668415777385235,-0.007755689788609743,-0.0041431160643696785,0.022212965413928032,0.0082443468272686,-0.029375284910202026,-0.025577720254659653,0.013417134061455727,-0.015888342633843422,0.026192031800746918,0.008802812546491623,-0.01947648450732231,0.028216470032930374,0.0073926872573792934,0.02341366559267044,0.023595167323946953,0.008502637036144733,0.016153614968061447,-0.026205994188785553,-0.0184712465852499,0.007253070827573538,0.004418858326971531,0.011155348271131516,-0.023399705067276955,0.04289015009999275,0.01831766776740551,0.014897067099809647,-0.008090768940746784,0.029542824253439903,0.013822020962834358,-0.014394448138773441,-0.008006999269127846,0.007678900845348835,0.013347325846552849,-0.04283430427312851,-0.035685945302248,0.0006959003512747586,0.004921477288007736,0.012607358396053314,0.00793020986020565,-0.00014703349734190851,-0.00019579015497583896,-0.009047141298651695,0.03593725338578224,-0.009452028200030327,0.03546255826950073,0.01509253028780222,0.002834212500602007,-0.04409085214138031,-0.02719726972281933,-0.012600378133356571,-0.0004834216961171478,-0.015232146717607975,-0.013158843852579594,-0.028300238773226738,-0.016544541344046593,0.011790602467954159,-0.015008760616183281,0.0027696399483829737,0.011427599936723709,0.008300193585455418,-0.033787161111831665,-0.010680653154850006,0.008342078886926174,0.02825835533440113,0.01854105480015278,-0.000751746934838593,-0.006911010481417179,0.009075064212083817,0.006907520350068808,-0.02039795182645321,0.015274031087756157,-0.013577692210674286,0.013249593786895275,0.027685927227139473,-0.01060386374592781,0.01299828477203846,0.005148353986442089,0.01125308033078909,-0.024446828290820122,0.011141386814415455,-0.023218203336000443,-0.02027229778468609,0.017633548006415367,0.02684822864830494,-0.012879610992968082,0.013354306109249592,0.00827925093472004,-0.02306462451815605,-0.005336835980415344,-0.010883096605539322,-0.0158604197204113,-0.031050682067871094,0.007671919651329517,0.035797636955976486,-0.02275746874511242,-0.007769651245325804,-0.010973847471177578,-0.019155366346240044,0.005609088111668825,-0.034317705780267715,0.016795849427580833,0.012544531375169754,0.005448529031127691,0.04853065311908722,0.0037172860465943813,-0.006610835436731577,-0.0016160595696419477,-0.01570684276521206,0.012425857596099377,-0.012495665811002254,0.007790593896061182,0.007197224069386721,-0.04277845844626427,0.03272607922554016,-0.023846477270126343,-0.025661488994956017,-0.0197277944535017,0.013256574980914593,-0.008760927245020866,0.021193765103816986,0.005204200278967619,-0.0218080785125494,-0.02662484347820282,0.0014118705876171589,-0.016949428245425224,-0.005382211413234472,-0.02813269942998886,-0.020844724029302597,0.001311521278694272,-0.014150119386613369,-0.014324639923870564,0.016195500269532204,0.03275400027632713,-0.024279287084937096,-0.033563777804374695,0.012628301046788692,0.005465981084853411,0.013144881464540958,0.0008145743049681187,0.0004908388364128768,-0.002619552193209529,-0.02112395688891411,-0.024321172386407852,-0.02376270666718483,0.009431086480617523,-0.02351139858365059,0.018150128424167633,-0.0005466853617690504,0.0065933833830058575,-0.00550088519230485,0.01165796723216772,0.02499133162200451,-0.01759166270494461,-0.0037905846256762743,0.011469485238194466,-0.00015652304864488542,-0.032335150986909866,-0.01342411432415247,0.016097767278552055,0.0191972516477108,0.012523588724434376,-0.006614325568079948,-0.0047504473477602005,0.01821993663907051,0.009940685704350471,-0.001231241854839027,-0.006980818696320057,-0.044230468571186066,-0.018876133486628532,0.0082932123914361,-0.01258641667664051,0.028621356934309006,-0.02945905551314354,-0.021961655467748642,-0.0014694624114781618,-0.011350811459124088,0.021445075049996376,0.009068083949387074,0.023678937926888466,-0.033563777804374695,0.021822039037942886,0.027308963239192963,0.0036579491570591927,0.0028551549185067415,-0.018931981176137924,-0.029654517769813538,-0.010931962169706821,0.004387444816529751,0.005116940010339022,0.02090057171881199,-0.010080302134156227,-0.0013333363458514214,-0.001246076193638146,0.00989880133420229,-0.02536829560995102,-0.023204240947961807,0.03563009947538376,-0.011623063124716282,-0.041745297610759735,-0.02857947163283825,-0.0205515306442976,0.0009310666937381029,0.02115188166499138,-0.005947657395154238,-0.010534055531024933,0.00653055589646101,-0.005825493484735489,-0.02183600142598152,0.01746600866317749,-0.021612614393234253,0.020565493032336235,0.003373480634763837,0.010841211304068565,0.003383951960131526,-0.03219553455710411,0.02898436039686203,0.004544512834399939,-0.005413624923676252,0.0186667088419199,0.015148377045989037,0.018331630155444145,0.0008678030571900308,-0.001657071872614324,-0.0064467862248420715,0.009249584749341011,-0.010736498981714249,-0.025075100362300873,0.006907520350068808,0.031776685267686844,0.010408400557935238,-0.0042094336822628975,-0.004272261168807745,-0.013661462813615799,0.015581187792122364,-0.0069633666425943375,0.008418867364525795,0.0036509681958705187,-0.004907515831291676,-0.011406658217310905,0.032558538019657135,-0.006279246415942907,0.03197215124964714,-0.020007027313113213,0.015260069631040096,-0.017075082287192345,0.011783622205257416,-0.0004083779058419168,-0.017130929976701736,0.004181510303169489,0.0021326402202248573,-0.03705418482422829,-0.006561969872564077,0.006544517818838358,0.009982571005821228,-0.01299828477203846,-0.008816774003207684,-0.009668434038758278,0.03398262709379196,-0.026568995788693428,-0.016390962526202202,-0.006572440732270479,-0.006439805496484041,0.01620946079492569,-0.02511698566377163,0.007336840499192476,-0.014296717010438442,0.004387444816529751,-0.015078568831086159,0.018610863015055656,-0.0009572447743266821,-0.01683773472905159,-0.025815067812800407,0.008076807484030724,-0.036076869815588,-0.010617825202643871,0.00619198614731431,-0.0028097794856876135,-0.0190995205193758,-0.039036739617586136,-0.03071560338139534,-0.0224363524466753,0.008586406707763672,0.016977351158857346,-0.03814319521188736,-0.0026719083543866873,0.05118336156010628,-0.03434562683105469,0.006202457472681999,0.0011256569996476173,-0.013277517631649971,-0.0315253771841526,0.012467741966247559,-0.01239793375134468,-0.016502656042575836,0.020034950226545334,-0.015846459195017815,-0.0031396232079714537,-0.01869463361799717,0.004970342852175236,0.020411914214491844,-0.001719026593491435,0.016377000138163567,0.011308926157653332,-0.004802803508937359,-0.0024677193723618984,-0.02265973761677742,0.020286260172724724,0.02848174050450325,0.01233510673046112,-0.02052360773086548,0.01869463361799717,-0.01979760266840458,0.02870512753725052,-0.013165824115276337,0.012300202623009682,0.0032408451661467552,-0.029794134199619293,-0.02212919481098652,-0.017884857952594757,-0.024614367634058,-0.04582209512591362,-0.007609092630445957,0.008223404176533222,-0.023748746141791344,0.007096002344042063,-0.00933335442095995,0.038757506757974625,0.03638402745127678,0.020509645342826843,0.016656232997775078,0.02092849463224411,-0.03247476741671562,-0.025577720254659653,0.0015811554621905088,-0.02067718468606472,-0.006240852177143097,-0.052579525858163834,-0.010143130086362362,-0.0030593439005315304,0.04227583855390549,0.015497418120503426,-0.002218155190348625,-0.04685525596141815,-0.007734747137874365,-0.04705071821808815,0.0017862169770523906,0.007350801955908537,-0.005141373258084059,-0.024000054225325584,0.015204222872853279,0.004666677210479975,0.000661432568449527,0.011490427888929844,0.03596517816185951,-0.008991294540464878,-0.012642262503504753,0.004872611723840237,-0.010736498981714249,0.008516598492860794,-0.017549779266119003,-0.03962312638759613,-0.004020951688289642,0.043448615819215775,-0.007734747137874365,-0.004938929341733456,0.024027979001402855,-0.010883096605539322,-0.023944208398461342,-0.02857947163283825,-0.007769651245325804,0.0101780341938138,-0.0041431160643696785,0.011294964700937271,-0.022673700004816055,-0.017256584018468857,0.028160622343420982,0.001465099398046732,-0.01862482540309429,-0.008020960725843906,0.02848174050450325,0.035797636955976486,0.01435256376862526,-0.001431067823432386,0.0006470346124842763,0.0026666726917028427,-0.000544067588634789,0.01274697482585907,-0.007972095161676407,-0.0053438167087733746,0.021319421008229256,-0.01944856159389019,0.006045388989150524,-0.0018219937337562442,0.03320077434182167,-0.030799372121691704,-0.008781869895756245,0.02193373255431652,0.004307165276259184,-0.0028778426349163055,-0.007399667985737324,-0.022715583443641663,0.013340344652533531,-0.017396200448274612,-0.01125308033078909,-0.005689367186278105,-0.014659719541668892,0.01633511669933796,-0.011609101668000221,-0.04350446164608002,-0.00849565677344799,0.0043665021657943726,0.021249612793326378,-0.008363020606338978,-0.0025759220588952303,-0.012600378133356571,0.007406648714095354,0.02218504250049591,-0.027113500982522964,0.007860401645302773,-0.01766147091984749,-0.009200719185173512,0.013291479088366032,-0.004240847192704678,-0.008223404176533222,0.16854488849639893,-0.005354288034141064,0.025256602093577385,0.017410162836313248,-0.019364790990948677,0.0035514915362000465,-0.006045388989150524,-0.002380459103733301,0.003546255873516202,0.016195500269532204,-0.011930218897759914,-0.009808050468564034,-0.008949409238994122,-0.0040628365240991116,0.016349077224731445,0.007713804952800274,-0.030799372121691704,-0.030324677005410194,-0.02634561061859131,0.006464238278567791,0.006739980541169643,-0.01342411432415247,-0.018136167898774147,-0.010115206241607666,0.020090796053409576,0.005127411335706711,-0.0192949827760458,-0.014924990944564342,0.04040497913956642,0.02514490857720375,-0.011937200091779232,-0.005242594983428717,0.02996167354285717,0.009787107817828655,-0.005626540165394545,0.024879638105630875,0.03993028402328491,-0.018233899027109146,0.0073787253350019455,-0.0033822066616266966,0.022478235885500908,0.0001506329863332212,0.0200209878385067,-0.01633511669933796,-0.00024083824246190488,-0.0021588183008134365,-0.014897067099809647,0.015329877845942974,0.010959885083138943,0.0010322885354980826,-0.03247476741671562,0.005061093717813492,0.01411521527916193,0.013123939745128155,-0.02926359325647354,-0.005486923735588789,0.001961610047146678,0.007399667985737324,0.011308926157653332,-0.007385706063359976,-0.012851687148213387,0.012125682085752487,-0.0252426415681839,-0.002949395915493369,-0.010240861214697361,0.003595121670514345,-0.011357791721820831,-0.01294941920787096,0.005033170338720083,-0.02901228331029415,-0.008146615698933601,-0.0028935493901371956,-0.0226318147033453,0.008349059149622917,-0.00991276279091835,-0.0203560683876276,0.004732995294034481,0.037752266973257065,0.0044014062732458115,0.02165449969470501,0.0032094314228743315,0.029794134199619293,-0.015944190323352814,0.007720785681158304,-0.015567226335406303,-0.01535780169069767,0.03367546945810318,-0.025787144899368286,0.00582200288772583,-0.00413962546736002,0.010373496450483799,0.012188510037958622,0.006551498547196388,0.0025165851693600416,0.0067504518665373325,0.015650995075702667,-0.021347343921661377,-0.0018516621785238385,0.0035375298466533422,0.00413962546736002,-0.01879236474633217,0.09259358048439026,0.031804610043764114,-0.008830735459923744,-0.011727775447070599,-0.037780191749334335,0.016851697117090225,0.01661434955894947,-0.007005251478403807,-0.013717308640480042,-0.014233889058232307,-0.015413647517561913,0.015022722072899342,-0.012712070718407631,0.016544541344046593,0.011371754109859467,0.014534064568579197,-0.002876097336411476,0.002249568933621049,0.004286222625523806,-0.014673680998384953,-0.0184712465852499,-0.022548044100403786,0.01139269582927227,-0.04180114343762398,-0.0027085577603429556,-0.03325662016868591,0.009354297071695328,-0.004876101855188608,-0.04113098606467247,0.047190334647893906,-0.006872616242617369,-0.013612596318125725,0.00006048224895494059,0.012544531375169754,-0.002315886551514268,0.012865648604929447,-0.014394448138773441,-0.027685927227139473,0.041493985801935196,0.007057607639580965,-0.015413647517561913,0.013151862658560276,0.006495651789009571,0.015260069631040096,-0.0022356072440743446,0.00343805318698287,0.004778370261192322,0.01438048668205738,0.008774889633059502,-0.01646077074110508,-0.016349077224731445,-0.007692862302064896,0.01718677580356598,-0.0067504518665373325,-0.022645775228738785,-0.010883096605539322,-0.04554286226630211,0.013130920007824898,-0.009905781596899033,-0.03884127736091614,0.00786738283932209,0.01279584039002657,-0.011839468963444233,-0.0212775357067585,-0.009668434038758278,-0.17759202420711517,-0.014073330909013748,0.015525341033935547,0.019113481044769287,0.030380522832274437,-0.027085576206445694,0.038003578782081604,0.0030593439005315304,-0.002380459103733301,-0.00655498867854476,0.008733004331588745,-0.00859338790178299,-0.0045584747567772865,-0.03099483624100685,-0.00046902376925572753,-0.0006457257550209761,0.02158469147980213,-0.0038080366794019938,0.025200756266713142,0.016279269009828568,0.04880988597869873,-0.010031436569988728,0.03121822141110897,0.0013560240622609854,-0.005584654863923788,-0.0002672344562597573,-0.02165449969470501,-0.00440489687025547,-0.016446808353066444,-0.05051320418715477,-0.011867391876876354,0.01060386374592781,0.021347343921661377,-0.009068083949387074,-0.00036736560286954045,0.0036335161421447992,0.009849934838712215,0.009165815077722073,0.021989578381180763,0.04085175320506096,0.009207700379192829,0.03582556173205376,-0.005842945538461208,0.006006994750350714,0.006108216475695372,0.012977342121303082,0.009068083949387074,0.01195814274251461,-0.009165815077722073,-0.008998275734484196,0.022101271897554398,0.012446800246834755,0.0024659743066877127,-0.0017722554039210081,0.009075064212083817,-0.00653753662481904,0.00755324587225914,0.0005183257744647563,0.01026180386543274,0.012111720629036427,0.0054694716818630695,0.0102268997579813,0.002143111312761903,0.0022582949604839087,0.0010139639489352703,-0.023469513282179832,-0.019937219098210335,-0.021235650405287743,-0.007427591364830732,0.010031436569988728,0.025424141436815262,-0.003549746237695217,0.007525322493165731,-0.022869162261486053,0.04601755738258362,0.013766174204647541,-0.020844724029302597,0.01611172966659069,0.0012975597055628896,0.003595121670514345,0.003069814993068576,0.017103005200624466,0.000013593508811027277,0.0023979111574590206,0.013221670873463154,0.009102988056838512,-0.03068767860531807,0.007350801955908537,0.015455532819032669,-0.011727775447070599,-0.004527060780674219,-0.018233899027109146,0.016027959063649178,-0.003738228464499116,-0.006984309293329716,0.02511698566377163,0.01995117962360382,-0.019588178023695946,0.02785346657037735,-0.022101271897554398,-0.016767926514148712,0.002760913921520114,-0.017577702179551125,-0.0070087420754134655,0.025186793878674507,-0.008502637036144733,0.02511698566377163,-0.004729504697024822,0.007902286946773529,-0.003588140942156315,-0.017284506931900978,0.01601399853825569,0.024837752804160118,0.011979085393249989,-0.010366516187787056,0.03646779805421829,-0.0220035407692194,-0.018038434907794,-0.0009136146400123835,0.012230394408106804,0.04869819059967995,0.001241713180206716,0.017605625092983246,-0.007951152510941029,0.008453771471977234,-0.022478235885500908,-0.09856916218996048,-0.026415418833494186,0.026303725317120552,0.009151853621006012,-0.01746600866317749,0.002389185130596161,-0.007518341764807701,0.005242594983428717,-0.011294964700937271,0.018959904089570045,-0.01736827753484249,-0.02095641754567623,-0.01128100324422121,0.014157100580632687,-0.0030471275094896555,-0.033563777804374695,-0.008055864833295345,-0.03560217469930649,-0.00756022660061717,0.016027959063649178,-0.0016212951159104705,-0.03917635604739189,-0.025452064350247383,-0.00545900035649538,-0.021766193211078644,-0.023497436195611954,-0.0056021069176495075,0.025787144899368286,0.006390939466655254,0.009605607017874718,0.003188489004969597,-0.0019162347307428718,0.0115811787545681,-0.01879236474633217,0.012495665811002254,0.01862482540309429,-0.013123939745128155,-0.035574253648519516,0.020746992900967598,0.00681327935308218,-0.007846440188586712,0.0010968612041324377,0.03898089379072189,-0.01655850186944008,0.005347307305783033,-0.015246108174324036,-0.02120772749185562,0.055064696818590164,-0.0004991285386495292,-0.01761958748102188,-0.008460752665996552,0.012293221428990364,-0.006069821771234274,-0.012928476557135582,0.021486960351467133,-0.009738242253661156,-0.0012835980160161853,0.020760955289006233,0.0013638774398714304,-0.0056474823504686356,-0.0026963413693010807,0.009040160104632378,-0.0030087328050285578,0.03320077434182167,0.0002766149409580976,-0.020439837127923965,-0.029291516169905663,0.008376982994377613,0.00647470960393548,-0.03691456839442253,-0.030548062175512314,0.004132644739001989,-0.019657986238598824,0.0369424931704998,-0.020509645342826843,-0.010003513656556606,0.013005265034735203,-0.011141386814415455,0.02436305768787861,-0.00927052740007639,-0.008090768940746784,-0.01699131354689598,0.005228633061051369,-0.031553301960229874,0.01573476567864418,0.022603891789913177,0.027588196098804474,0.005382211413234472,0.002411872847005725,-0.010945923626422882,0.013096015900373459,0.036076869815588,-0.005068074446171522,0.00579058937728405,0.007071569561958313,-0.0010392693802714348,-0.0009581173653714359,-0.002249568933621049,-0.02193373255431652,0.01819201372563839,-0.026233917102217674,0.012425857596099377,-0.07019911706447601,0.02499133162200451,0.0198255255818367,-0.01854105480015278,-0.012244355864822865,0.006066331639885902,0.01935083046555519,-0.0369424931704998,-0.0172146987169981,0.005214671604335308,-0.036523643881082535,0.02293897047638893,-0.006317641120404005,-0.002041889587417245,0.0027434618677943945,-0.021891847252845764,0.02652711048722267,-0.023902323096990585,-0.004778370261192322,0.014869144186377525,0.009745223447680473,0.024000054225325584,0.030045444145798683,0.01809428259730339,-0.03286569565534592,-0.02504717744886875,-0.01474348921328783,0.011434581130743027,0.009382219985127449,-0.0014319404726848006,0.01337524875998497,-0.023232165724039078,-0.008328116498887539,0.016698118299245834,0.017787126824259758,0.00582898361608386,0.003558472264558077,0.025940721854567528,0.01882028765976429,0.044956471771001816,-0.008027941919863224,-0.015678919851779938,0.03417808935046196,-0.0465201772749424,0.02587091363966465,-0.0055357892997562885,-0.016251346096396446,0.01190927717834711,0.03512747958302498,-0.005654463078826666,0.02659691870212555,0.006094255018979311,-0.014575949870049953,-0.032837770879268646,-0.006436314899474382,-0.02649918757379055,0.0239860936999321,-0.003122171154245734,-0.02386043779551983,-0.028649279847741127,0.02577318251132965,0.019713832065463066,0.020188527181744576,-0.02584299072623253,0.043979156762361526,-0.0022949441336095333,-0.0102757653221488,-0.012467741966247559,0.013305440545082092,-0.05601409077644348,-0.011169309727847576,-0.009542779065668583,0.020858686417341232,0.0004286658950150013,0.021193765103816986,-0.025954684242606163,-0.001415360951796174,0.017172813415527344,-0.005958128720521927,0.022240888327360153,0.029123976826667786,0.007420610170811415,-0.00007733438542345539,0.03068767860531807,0.017759203910827637,-0.004876101855188608,0.010380477644503117,-0.010750461369752884,-0.0032635328825563192,-0.012251337058842182,-0.03392677754163742,0.008739985525608063,0.010268784128129482,0.031609147787094116,0.008572445251047611,-0.008760927245020866,-0.0028813329990953207,0.01819201372563839,0.017452046275138855,-0.005965109448879957,0.009493913501501083,0.016781888902187347,-0.0019860428292304277,-0.03311700373888016,0.006219909526407719,-0.0011352556757628918,-0.03942766413092613,-0.02281331643462181,-0.003773132571950555,-0.00047164157149381936,-0.023106509819626808,-0.02386043779551983,-0.016027959063649178,0.036021023988723755,0.006855164188891649,0.04585001617670059,-0.006083783693611622,0.03292154148221016,-0.0185689777135849,0.01979760266840458,-0.0028010534588247538,0.03370339423418045,0.00483072642236948,0.006952895317226648,-0.008774889633059502,-0.017647510394454002,0.008893563412129879,-0.018764439970254898,-0.002425834536552429,-0.0012137899175286293,0.009605607017874718,-0.014897067099809647,-0.024949446320533752,-0.018764439970254898,-0.015776650980114937,-0.01869463361799717,-0.009808050468564034,0.015692880377173424,-0.030575986951589584,0.07047834992408752,0.013884848915040493,-0.017103005200624466,-0.017424123361706734,0.0018935471307486296,0.02945905551314354,-0.008663196116685867,-0.0021849963814020157,0.00008387889829464257,-0.021919770166277885,-0.0017513128696009517,0.018652748316526413,0.008935447782278061,-0.03253061696887016,-0.01718677580356598,0.011434581130743027,-0.03239100053906441,0.03239100053906441,-0.0016937211621552706,-0.012083797715604305,0.02158469147980213,0.0157626885920763,0.02293897047638893,-0.004977323580533266,-0.02178015373647213,-0.01509253028780222,0.03345208242535591,-0.006565460003912449,-0.005609088111668825,-0.035881407558918,0.026555035263299942,0.014289735816419125,-0.04936835169792175,-0.03247476741671562,-0.009389201179146767,0.006621306762099266,-0.002450267318636179,-0.02795119769871235,0.048446882516145706,0.014771412126719952,0.024907561019062996,-0.02344159036874771,-0.019685909152030945,-0.02867720276117325,0.005350797437131405,0.005375230684876442,-0.02451663464307785,-0.004481685813516378,-0.04113098606467247],"e_chunks":[[0.016529517248272896,0.008066755719482899,0.0053057256154716015,-0.0018370203906670213,-0.01707218959927559,0.01604551076889038,0.0009863442974165082,0.013024144805967808,0.0035603728611022234,-0.03417371213436127,0.012620806694030762,-0.004744719248265028,-0.0152095016092062,0.006743074860423803,0.013464149087667465,0.009760774672031403,0.010853453539311886,-0.017952198162674904,0.013566817156970501,-0.0003487955254968256,0.003017700044438243,0.020680230110883713,-0.00905676744878292,0.005082056391984224,0.001690352102741599,0.0035640394780784845,0.02986166439950466,-0.002504361094906926,-0.004983055405318737,0.006827408913522959,0.048576537519693375,-0.023173589259386063,-0.0461418442428112,-0.0020790230482816696,-0.01767352968454361,-0.024684272706508636,0.014153489843010902,-0.0017022688407450914,-0.0011220123851671815,-0.003956377040594816,0.019609550014138222,-0.009460104629397392,0.003890376538038254,-0.015011499635875225,-0.0024291935842484236,0.01630951464176178,0.004719052463769913,-0.04130179062485695,0.0011687629157677293,-0.014835497364401817,-0.02113490179181099,0.01557617262005806,-0.004370715003460646,0.02918699011206627,0.004180046264082193,-0.016500182449817657,0.019961554557085037,0.000616923498455435,0.0038060422521084547,-0.012752807699143887,0.010354781523346901,-0.011132122948765755,-0.011938799172639847,0.005008722189813852,-0.017350858077406883,-0.022689584642648697,-0.026884298771619797,0.02446427196264267,-0.04282714053988457,-0.021545572206377983,0.009826775640249252,0.026884298771619797,-0.007318747695535421,-0.004323048051446676,0.0232029240578413,-0.03385104238986969,-0.013647484593093395,0.007802753243595362,-0.007032744586467743,-0.006750408094376326,0.0032945366110652685,0.004224046599119902,-0.0026400291826575994,0.041859131306409836,-0.0028948653489351273,0.024141600355505943,0.016998855397105217,0.025241613388061523,-0.029142988845705986,0.0025886953808367252,0.013581483624875546,-0.019594883546233177,-0.0028160312213003635,0.006732074543833733,0.02016689069569111,0.015018832869827747,-0.02566695027053356,0.028776319697499275,-0.009511439129710197,0.02183890901505947,-0.013772152364253998,0.005353392567485571,-0.003536539152264595,-0.012862809002399445,0.005434060003608465,0.006020733620971441,0.008888098411262035,-0.025314947590231895,0.00850676093250513,0.0020936899818480015,-0.007758752442896366,0.05502994358539581,0.0014116823440417647,0.007817420177161694,-0.0119974659755826,0.017658863216638565,0.03091767616569996,-0.00827209185808897,0.0068384092301130295,-0.03402704373002052,0.007846754044294357,0.002887532114982605,0.015796175226569176,0.02326159179210663,-0.008770763874053955,0.000739299866836518,-0.02216157875955105,-0.0029241989832371473,0.019081544131040573,-0.019961554557085037,0.026502961292862892,0.004378048703074455,0.009606773033738136,0.01743886061012745,0.010347448289394379,0.035171058028936386,-0.018846875056624413,-0.0011366793187335134,-0.014652162790298462,-0.010046778246760368,-0.009379437193274498,0.033264368772506714,-0.027148300781846046,0.015605506487190723,-0.018758874386548996,-0.0018846875755116343,0.0116674629971385,0.02808697707951069,0.02147223800420761,-0.005888732150197029,0.01654418371617794,0.00138326536398381,-0.016250846907496452,0.021721573546528816,-0.003485205350443721,0.016060177236795425,-0.019961554557085037,0.018582873046398163,0.017952198162674904,0.005551395006477833,0.003901376621797681,0.04986722022294998,-0.015077500604093075,-0.0004562758840620518,-0.0009084267076104879,0.026473626494407654,0.020445559173822403,-0.009540772065520287,-0.0017416860209777951,-0.006754074711352587,0.0009872609516605735,0.0049023875035345554,-0.037899088114500046,0.03432038053870201,0.014021488837897778,0.03238435834646225,0.030448338016867638,0.02299758791923523,-0.014637495391070843,-0.003974710591137409,0.012767475098371506,-0.012444804422557354,0.00605740025639534,0.04552583768963814,-0.021941576153039932,0.0016518516931682825,-0.007619417738169432,0.0003742333210539073,0.013119478709995747,0.009291436523199081,0.010926787741482258,0.029040321707725525,0.023613594472408295,0.010127445682883263,-0.563675582408905,-0.0038427093531936407,-0.008778097108006477,-0.029406992718577385,0.019330881536006927,-0.02210291102528572,0.02289492078125477,0.03830975666642189,0.0035127056762576103,0.028908319771289825,0.005052722524851561,-0.003098367713391781,0.024009600281715393,-0.0037877087015658617,-0.011476794257760048,-0.009357437491416931,0.018978876993060112,-0.019213546067476273,-0.00885143131017685,0.0020936899818480015,-0.016852186992764473,0.00921810232102871,-0.003875709604471922,-0.0191402118653059,0.046347178518772125,-0.007307747844606638,0.006112400908023119,-0.047344524413347244,0.005690729711204767,-0.0076340846717357635,-0.037195079028606415,-0.014402826316654682,0.008528761565685272,0.004660385195165873,0.06406471133232117,-0.009922109544277191,-0.0003173993609379977,-0.004466049373149872,0.020093556493520737,0.054501935839653015,-0.005074722692370415,-0.022557582706212997,0.007219746708869934,0.00016568932915106416,0.026077622547745705,-0.002722530160099268,0.0343497134745121,-0.0030323669780045748,-0.021178901195526123,0.014916165731847286,0.017790863290429115,-0.010112779214978218,0.023877598345279694,-0.015194835141301155,-0.0025740284472703934,-0.010252113454043865,0.03564039617776871,-0.010508783161640167,0.004499049857258797,-0.02060689590871334,-0.010714118368923664,-0.005822731181979179,-0.0256962850689888,-0.003441204782575369,-0.03191502019762993,0.02915765717625618,-0.040392447263002396,0.007194079924374819,0.025256279855966568,0.01529750321060419,0.02706030011177063,0.008660762570798397,-0.0059547326527535915,-0.018788207322359085,0.013046144507825375,0.05045389384031296,0.0020386893302202225,-0.007641417905688286,0.01014944538474083,0.01283347513526678,-0.0037400415167212486,0.0018397703533992171,0.004770386032760143,-0.027236301451921463,0.02370159514248371,-0.008675429038703442,-0.020914899185299873,-0.011205457150936127,0.04077378660440445,-0.010567450895905495,-0.004711718764156103,-0.006193068809807301,-0.03390970826148987,-0.013126811943948269,0.01190213207155466,0.023686928674578667,0.008932098746299744,0.023158922791481018,-0.006471738219261169,0.004616384394466877,-0.014542161487042904,0.0021706908009946346,-0.0008410509908571839,0.01456416118890047,0.039219100028276443,0.00908610038459301,-0.009621440432965755,-0.015752173960208893,0.02283625304698944,-0.005045389290899038,0.004114045761525631,-0.0014025155687704682,-0.01557617262005806,-0.014190156944096088,-0.013376148417592049,-0.03678440675139427,0.026033621281385422,-0.012950810603797436,0.041859131306409836,-0.01733619160950184,0.0005500061088241637,-0.008836764842271805,-0.022044245153665543,-0.005804397631436586,0.03393904119729996,0.0018278536153957248,0.0064900717698037624,0.018714874982833862,0.003653873922303319,-0.005170057527720928,0.011293458752334118,-0.007062078453600407,0.014241491444408894,-0.011513461358845234,0.04150712490081787,0.014476160518825054,0.04446982592344284,-0.0049940552562475204,0.008448093198239803,-0.03209102153778076,-0.002269691787660122,0.013471482321619987,0.03012566640973091,-0.023290924727916718,-0.011542794294655323,-0.014116822741925716,-0.0422111339867115,-0.03440838307142258,0.02207357808947563,0.007758752442896366,-0.007993421517312527,-0.0007988838478922844,0.014131490141153336,0.009064100682735443,-0.01391148753464222,-0.028174979612231255,-0.002203691052272916,-0.004121378995478153,-0.0036667073145508766,0.019697552546858788,0.02905498817563057,0.021589573472738266,-0.02769097313284874,0.000532589212525636,-0.04617117717862129,-0.0060097333043813705,-0.03261902928352356,0.0052323914133012295,-0.005665062926709652,-0.016353514045476913,0.00009373020293423906,0.011755463667213917,-0.015165501274168491,-0.017820198088884354,0.003749208291992545,0.0396004393696785,-0.02047489397227764,-0.0015116001013666391,-0.009078767150640488,0.007069411687552929,0.017101522535085678,-0.016822852194309235,-0.01372815202921629,0.00048308869008906186,0.023290924727916718,0.027470970526337624,0.019345548003911972,0.01075078547000885,-0.0015161834890022874,0.002614362398162484,-0.0037950421683490276,0.009474772028625011,-0.022850919514894485,0.028380313888192177,-0.013207479380071163,0.0230709221214056,-0.003699707565829158,-0.0031588682904839516,0.003190035466104746,0.019052211195230484,0.024185601621866226,-0.025549616664648056,0.0059913997538387775,-0.03282436355948448,0.01045011542737484,-0.015121500939130783,0.012980143539607525,-0.016793519258499146,0.0008584678289480507,0.022117579355835915,0.03379237279295921,0.015590839087963104,-0.026708295568823814,0.012635473161935806,0.018201535567641258,0.044851165264844894,-0.020680230110883713,0.022014910355210304,0.0023778597824275494,0.003813375486060977,-0.011726129800081253,0.00605740025639534,0.0177028626203537,-0.006343403831124306,-0.009768107905983925,0.024742940440773964,0.020181557163596153,0.006853076163679361,-0.0008969682967290282,-0.03352837264537811,-0.017732197418808937,0.03311770036816597,0.014916165731847286,0.005151723977178335,0.016896186396479607,0.011154123581945896,0.027940310537815094,-0.020181557163596153,0.007113412022590637,-0.03141634911298752,-0.007238080259412527,-0.0016949354903772473,-0.010530783794820309,-0.011799464002251625,0.02047489397227764,-0.017468193545937538,0.009416104294359684,0.01529750321060419,-0.032501693814992905,-0.010794786736369133,-0.0166468508541584,0.01518016867339611,0.0030782008543610573,-0.010354781523346901,0.023584261536598206,0.004763052798807621,0.01701352186501026,0.015620172955095768,0.016954854130744934,0.007036411203444004,0.0059547326527535915,-0.020650895312428474,0.03135767951607704,0.0013484315713867545,0.011652795597910881,-0.010479449294507504,-0.030243001878261566,-0.03267769515514374,-0.014776830561459064,-0.008440759964287281,0.017922865226864815,0.005019722506403923,-0.023173589259386063,0.002836198080331087,0.014424826949834824,0.014600828289985657,0.004062711726874113,0.04018711298704147,0.016925521194934845,-0.007076744921505451,-0.02629762515425682,-0.018890876322984695,-0.007370081730186939,0.03687240928411484,-0.02456693910062313,-0.023877598345279694,-0.00004182337943348102,-0.003430204698815942,-0.017086856067180634,-0.009577439166605473,-0.03558172658085823,0.008983433246612549,-0.038427092134952545,0.02376026287674904,-0.01409482304006815,0.015062833204865456,0.027382969856262207,-0.01493083219975233,-0.03241369128227234,-0.03364570438861847,0.013016810640692711,0.010992788709700108,-0.024874942377209663,-0.012774808332324028,0.012870142236351967,0.010780119337141514,-0.016397515311837196,-0.00046498433221131563,0.0013850986724719405,0.014087489806115627,0.010670118033885956,-0.01000277791172266,0.007025411352515221,-0.0338217094540596,0.018964210525155067,-0.03341103717684746,-0.0017820197390392423,-0.00857276190072298,0.005346059333533049,0.002161524025723338,-0.0075974175706505775,-0.015048166736960411,0.006127067841589451,0.013068145141005516,0.03185635432600975,0.02779364213347435,0.0035933731123805046,-0.008719430305063725,-0.005254391580820084,-0.011102790012955666,-0.047784529626369476,-0.00033596204593777657,0.005859398283064365,0.015869509428739548,-0.004469715990126133,0.017556194216012955,-0.030683007091283798,-0.01683752052485943,0.02816031128168106,0.009973444044589996,0.00040471283136866987,-0.028336314484477043,0.011645462363958359,-0.0006219652132131159,0.027309635654091835,-0.016734851524233818,-0.016632184386253357,0.018025532364845276,0.02050422690808773,0.023745596408843994,0.014967499300837517,0.005811730865389109,-0.0005027972511015832,-0.024522937834262848,-0.005980399437248707,0.013970155268907547,0.013830820098519325,0.006622073240578175,-0.04787253215909004,0.041859131306409836,0.019550884142518044,0.008748763240873814,0.011660128831863403,0.018920209258794785,0.025916287675499916,-0.012334803119301796,0.005019722506403923,0.012217468582093716,0.008800097741186619,-0.013339481316506863,-0.03165101632475853,-0.00006651636067545041,-0.0018938543507829309,0.008675429038703442,0.015854842960834503,0.003223035717383027,-0.007846754044294357,-0.00558439502492547,0.04740319028496742,-0.012034133076667786,0.007883421145379543,0.01581084169447422,-0.00302870012819767,-0.04643518105149269,-0.009100767783820629,-0.03138701617717743,-0.015825508162379265,-0.02013755589723587,-0.0019470215775072575,-0.028336314484477043,-0.029978998005390167,-0.0053973933681845665,-0.035728394985198975,-0.004418382421135902,-0.0005050889449194074,-0.00636540399864316,-0.007351748179644346,-0.014835497364401817,0.009181435219943523,0.012686807662248611,0.011733463034033775,0.00933543685823679,-0.00993677694350481,0.01116879004985094,0.009768107905983925,-0.02918699011206627,0.0015391004271805286,-0.014556827954947948,-0.0033183700870722532,0.009606773033738136,0.0005591728840954602,0.006090400740504265,0.004205713048577309,0.0076047508046031,-0.019154878333210945,0.021076234057545662,-0.01980021968483925,-0.02136957086622715,0.0018186868401244283,0.032472360879182816,0.0007007994572632015,0.0007897170726209879,0.015546838752925396,-0.0067834085784852505,0.0008832181338220835,-0.0010798453586176038,-0.030008332803845406,-0.01814286783337593,-0.020782897248864174,0.028306979686021805,0.011806797236204147,-0.009665440768003464,-0.00500138895586133,-0.021662907674908638,0.005932732485234737,-0.031269680708646774,0.02506561204791069,0.008616762235760689,0.01780552975833416,0.02296825498342514,0.009694773703813553,0.005738397128880024,-0.00028714901418425143,-0.034203045070171356,-0.008433426730334759,-0.009621440432965755,0.021457571536302567,0.0169108547270298,-0.02356959506869316,0.02672296203672886,-0.028512315824627876,-0.021178901195526123,-0.0314750149846077,0.01148412749171257,-0.004829053301364183,0.01432949211448431,-0.004766719415783882,-0.027778973802924156,-0.01463016215711832,-0.02029889076948166,0.006662406958639622,0.009166767820715904,-0.03012566640973091,0.010978121310472488,-0.011916798539459705,0.012151467613875866,0.006658740341663361,-0.008778097108006477,0.005742063745856285,-0.0354057252407074,-0.04297380894422531,0.003061700612306595,0.0061197346076369286,-0.002154190558940172,-0.026620294898748398,0.006270069628953934,0.0030965344049036503,-0.016514848917722702,-0.0147474966943264,-0.017849531024694443,0.016001511365175247,-0.014072822406888008,0.017101522535085678,0.014498161152005196,0.018582873046398163,0.002777530811727047,0.013926154002547264,0.03112301230430603,-0.003488871967419982,-0.01111745648086071,0.002781197428703308,-0.019917553290724754,-0.019462881609797478,-0.008448093198239803,0.013984821736812592,0.02590162120759487,-0.006189401727169752,-0.013222146779298782,-0.012312803417444229,0.026400292292237282,0.004370715003460646,0.02252824977040291,-0.02373092994093895,-0.061894018203020096,-0.008440759964287281,0.012004800140857697,-0.04253380373120308,0.010838787071406841,-0.03311770036816597,-0.012459471821784973,0.004191046580672264,-0.023026922717690468,0.015011499635875225,0.02053356170654297,0.025740284472703934,-0.02486027590930462,0.01696952059864998,0.030008332803845406,0.011638129130005836,-0.011982799507677555,-0.01670551858842373,-0.03217902407050133,0.00475938618183136,0.013889486901462078,0.01628017984330654,0.04174179583787918,0.006262735929340124,-0.007619417738169432,-0.01451282761991024,-0.009291436523199081,-0.046669851988554,-0.003435704857110977,0.035141721367836,-0.010486782528460026,-0.02459627203643322,-0.04144845902919769,-0.02596028707921505,0.0023668594658374786,-0.0056980629451572895,-0.006105067674070597,-0.0058630649000406265,0.017482860013842583,-0.016749519854784012,-0.031504347920417786,0.018714874982833862,-0.01880287565290928,0.036931075155735016,0.00885143131017685,0.016602851450443268,0.0030140334274619818,-0.026004288345575333,0.013992154970765114,0.001208180096000433,0.011887464672327042,0.013735485263168812,0.009834108874201775,0.0049573881551623344,0.019726885482668877,-0.016690852120518684,-0.004337714519351721,-0.0003400871064513922,-0.02596028707921505,-0.011528127826750278,0.031035009771585464,0.022322913631796837,0.01714552380144596,-0.02596028707921505,0.014102156274020672,-0.0032358691096305847,0.009826775640249252,-0.013808819465339184,-0.012811475433409214,0.019257547333836555,-0.007832086645066738,0.003536539152264595,0.022044245153665543,0.013346814550459385,0.022513583302497864,-0.0020276892464607954,0.003380704205483198,-0.015854842960834503,0.0018810208421200514,0.01777619682252407,-0.00025025277864187956,0.0009308853186666965,0.016382848843932152,-0.0200642216950655,0.004770386032760143,0.015312169678509235,0.005016055423766375,-0.025036277249455452,0.00005290943954605609,-0.01439549308270216,0.039131101220846176,-0.008587428368628025,0.00040150445420295,-0.014542161487042904,-0.012422804720699787,0.014241491444408894,-0.0216335728764534,-0.005327725782990456,-0.035200390964746475,0.002431026892736554,-0.022806920111179352,0.020284224301576614,-0.008191424421966076,-0.01764419488608837,-0.025652283802628517,0.009423437528312206,-0.023510927334427834,-0.0002727113605942577,-0.025916287675499916,0.026634961366653442,-0.027749640867114067,-0.021384237334132195,-0.026444293558597565,-0.01683752052485943,0.002423693425953388,0.019550884142518044,-0.04317914694547653,0.008184090256690979,0.05412060022354126,-0.01774686388671398,-0.006325070280581713,-0.008895431645214558,-0.006523072253912687,-0.03508305549621582,0.004488049540668726,-0.026708295568823814,-0.023217590525746346,0.007311414461582899,-0.003307370003312826,0.01178479753434658,-0.04297380894422531,-0.007175746373832226,0.01438082568347454,-0.0011293458519503474,0.020753562450408936,-0.004579717293381691,0.009027433581650257,0.00043037976138293743,0.00030937843257561326,0.03238435834646225,0.029084322974085808,0.022146912291646004,-0.019462881609797478,0.02126690186560154,0.017570860683918,0.03341103717684746,-0.011139457114040852,0.003094700863584876,-0.035728394985198975,-0.02239624783396721,-0.02103223279118538,0.023481594398617744,-0.02016689069569111,-0.006578072905540466,-0.013889486901462078,-0.005254391580820084,-0.028864320367574692,-0.008008088916540146,-0.019228212535381317,0.02436160296201706,0.021677574142813683,0.02073889598250389,0.019976221024990082,0.006354403682053089,-0.003908710088580847,-0.016016177833080292,0.009438104927539825,-0.008616762235760689,0.012928809970617294,-0.02992033213376999,-0.0024365270510315895,0.00993677694350481,0.03872042894363403,0.012752807699143887,-0.005914398934692144,-0.027118967846035957,-0.00016752269584685564,-0.04555517062544823,-0.004623718094080687,-0.015986843034625053,0.011872798204421997,-0.016720185056328773,0.01190213207155466,-0.008631428703665733,0.018890876322984695,-0.004524716641753912,0.021384237334132195,-0.05106990039348602,0.003584206337109208,0.01463016215711832,0.0008456343784928322,0.015722841024398804,-0.006061067339032888,-0.030683007091283798,-0.015238835476338863,0.04056844860315323,-0.013464149087667465,-0.0031442015897482634,0.015854842960834503,-0.019565550610423088,-0.006702741142362356,-0.03162168338894844,-0.01581084169447422,-0.024684272706508636,-0.014982165768742561,0.0026216956321150064,-0.03214969113469124,-0.03153368458151817,0.022058911621570587,0.007392081897705793,0.007472749333828688,-0.00795675441622734,0.028468316420912743,0.03129901364445686,0.00890276487916708,0.0011650962987914681,-0.008528761565685272,0.007846754044294357,0.01707218959927559,0.024552272632718086,-0.01030344795435667,0.025109611451625824,0.05429660156369209,-0.009526105597615242,0.017321525141596794,-0.006805408746004105,0.018245534971356392,-0.04402982071042061,-0.012195468880236149,-0.013904154300689697,-0.01123479101806879,-0.011095455847680569,-0.02299758791923523,-0.01254747249186039,0.00940143782645464,-0.032443027943372726,-0.005335059016942978,-0.01633884757757187,-0.020020222291350365,0.01396282110363245,0.000044974458432989195,-0.045320503413677216,0.0031588682904839516,0.005551395006477833,0.02915765717625618,-0.0035237057600170374,-0.020856231451034546,-0.008367425762116909,0.00010639180254656821,-0.005008722189813852,-0.018318869173526764,0.008191424421966076,-0.012679473496973515,-0.010670118033885956,0.03194435313344002,-0.00987077597528696,-0.03344037011265755,0.19172479212284088,0.01206346694380045,0.02472827397286892,0.02839498221874237,-0.024786941707134247,0.022616250440478325,-0.0015867676120251417,-0.017849531024694443,0.0015253502642735839,0.016690852120518684,-0.003197368700057268,-0.005188390612602234,-0.009020100347697735,-0.009174101985991001,0.028732318431138992,0.014366159215569496,-0.02895232103765011,-0.0506005622446537,-0.025270946323871613,0.013603484258055687,0.02559361606836319,-0.020284224301576614,-0.028966987505555153,-0.028277646750211716,0.014344158582389355,0.0017462694086134434,-0.017761530354619026,0.010530783794820309,0.04024577885866165,0.02779364213347435,-0.017424192279577255,-0.026473626494407654,0.016998855397105217,0.01012011244893074,-0.0028673650231212378,0.014652162790298462,0.04596584290266037,-0.02789630927145481,-0.0042020464316010475,0.00043312981142662466,0.010068777948617935,-0.018861541524529457,0.011198123916983604,-0.012136801145970821,0.000054742795327911153,-0.007780753076076508,-0.009012766182422638,0.03927776962518692,0.024156266823410988,-0.0013493483420461416,-0.020445559173822403,0.024625606834888458,-0.0015134334098547697,-0.002806864446029067,-0.016632184386253357,-0.0038170423358678818,-0.014241491444408894,-0.007575417403131723,0.014175490476191044,-0.0028783653397113085,0.009225435554981232,0.004814386833459139,0.002058856189250946,0.02692829817533493,-0.02795497700572014,0.027309635654091835,-0.006629406940191984,0.004708052147179842,0.017629528418183327,-0.02210291102528572,-0.010501449927687645,-0.009159434586763382,-0.014036155305802822,-0.01864154078066349,-0.00397837720811367,-0.01950688287615776,-0.006266403011977673,0.032736361026763916,0.013618150725960732,0.03012566640973091,-0.00802275538444519,0.015605506487190723,-0.030213668942451477,-0.004579717293381691,0.0036740407813340425,-0.01714552380144596,0.03015500120818615,-0.01730685867369175,0.003102034330368042,-0.004213046748191118,-0.01354481652379036,0.010105445049703121,0.012078133411705494,-0.010127445682883263,0.03857376053929329,-0.009995443746447563,-0.013530150055885315,-0.010186112485826015,-0.01911087892949581,-0.0022678584791719913,-0.02769097313284874,0.06512071937322617,0.04713919013738632,0.006922743283212185,-0.0216335728764534,-0.028042977675795555,0.005635729059576988,0.026033621281385422,-0.00196352181956172,-0.017218858003616333,-0.015121500939130783,-0.019932221621274948,0.00012157426681369543,-0.0004748385981656611,0.015634840354323387,0.021985577419400215,0.024038933217525482,0.011491460725665092,-0.025608284398913383,-0.006112400908023119,-0.023114923387765884,-0.014182823710143566,-0.017292192205786705,0.011374126188457012,-0.03414437919855118,-0.008242757990956306,-0.0076707517728209496,-0.0006980493781156838,-0.002420026808977127,-0.04109645634889603,0.0396004393696785,0.0024401936680078506,0.0044770496897399426,-0.039864443242549896,0.007252747192978859,-0.004814386833459139,0.039923109114170074,-0.028878986835479736,-0.017688196152448654,0.029406992718577385,0.01469616312533617,0.01118345744907856,0.021354902535676956,0.004972055088728666,0.003646540455520153,-0.009115434251725674,-0.010090778581798077,0.005434060003608465,0.012459471821784973,0.006908076349645853,-0.008081423118710518,-0.016456183046102524,-0.016060177236795425,0.01730685867369175,-0.019726885482668877,-0.01321481354534626,-0.007626750972121954,-0.046317845582962036,0.014923498965799809,-0.023657595738768578,-0.047285858541727066,0.01283347513526678,0.02766164019703865,0.019946888089179993,-0.029597660526633263,-0.02722163498401642,-0.18761807680130005,0.014153489843010902,0.010134778916835785,-0.005503727588802576,0.02722163498401642,-0.009122767485678196,0.028834985569119453,0.0018636039458215237,0.010552783496677876,-0.014270824380218983,0.020592227578163147,-0.02296825498342514,0.011953465640544891,-0.013258813880383968,-0.006193068809807301,-0.022014910355210304,0.012202802114188671,0.014615495689213276,0.05186190828680992,0.01532683614641428,0.04493916407227516,-0.02506561204791069,0.024669606238603592,-0.004594384226948023,-0.006977743934839964,-0.005720063578337431,-0.01130079198628664,0.004678718745708466,-0.0056797293946146965,-0.04546717181801796,-0.017614861950278282,-0.012877476401627064,0.0006980493781156838,-0.024082934483885765,-0.0023961933329701424,0.0166468508541584,0.0008364676032215357,-0.003705207724124193,0.008800097741186619,0.03235502541065216,0.012122134678065777,0.04863520711660385,-0.005577061790972948,-0.0026711963582783937,0.01518016867339611,0.005280058365315199,0.025740284472703934,-0.012694140896201134,-0.004510050173848867,-0.006431404501199722,0.04268047213554382,0.00046131759881973267,0.0016738518606871367,0.010457449592649937,0.013772152364253998,0.014549494720995426,0.014388159848749638,0.010677451267838478,0.0031588682904839516,0.011872798204421997,0.0018846875755116343,-0.02553495019674301,-0.0006677990895695984,-0.010325447656214237,-0.015532172285020351,-0.018846875056624413,-0.011286125518381596,-0.01409482304006815,-0.02483094111084938,-0.00783941987901926,0.001077095279470086,-0.005632062442600727,0.011960798874497414,-0.023481594398617744,0.05972332879900932,0.038397759199142456,-0.00341553776524961,0.00987077597528696,0.00993677694350481,-0.0012980144238099456,-0.019946888089179993,0.017922865226864815,-0.0020020222291350365,0.018817542120814323,0.0011696796864271164,0.0003673582396004349,-0.021428236737847328,-0.013002144172787666,-0.002106523374095559,-0.0040920451283454895,-0.012356803752481937,-0.010802119970321655,0.018861541524529457,-0.009834108874201775,0.006394737400114536,0.00222569121979177,0.0036080400459468365,-0.014652162790298462,0.022278914228081703,-0.01654418371617794,-0.007234413642436266,-0.020152224227786064,-0.005606395658105612,-0.007241746876388788,0.04813653230667114,-0.0007127162534743547,0.021193567663431168,-0.011146790347993374,0.012327469885349274,-0.000706299499142915,-0.037899088114500046,0.01630951464176178,0.04229913651943207,0.02024022489786148,-0.01903754472732544,0.044557828456163406,0.00035704561742022634,-0.012532806023955345,0.008426093496382236,-0.0018443537410348654,0.05629128962755203,-0.016617517918348312,0.009188768453896046,-0.0006086734356358647,0.006328736897557974,-0.02073889598250389,-0.08131290227174759,-0.026605628430843353,0.011359458789229393,0.008932098746299744,-0.03654973953962326,-0.006834742613136768,-0.022953588515520096,0.018758874386548996,0.0075607504695653915,0.029450993984937668,-0.014710829593241215,-0.00785408727824688,-0.029670994728803635,0.017556194216012955,-0.011616128496825695,-0.02483094111084938,-0.015062833204865456,-0.02612162195146084,-0.022176245227456093,0.02899632230401039,0.012012133374810219,-0.027045633643865585,-0.014432160183787346,-0.007553417235612869,-0.04048044979572296,-0.019125545397400856,0.006449738051742315,0.007296747528016567,0.001847103820182383,0.011432792991399765,0.005038056056946516,-0.016632184386253357,-0.005764063913375139,-0.015590839087963104,0.009988110512495041,-0.0002486485755071044,-0.0002392526512267068,-0.008565428666770458,0.028878986835479736,-0.010802119970321655,0.010061444714665413,0.0068017421290278435,0.03810442239046097,-0.008110756985843182,-0.014490826986730099,-0.007040077820420265,-0.021149568259716034,0.04816586896777153,0.007186746224761009,0.0034870386589318514,-0.009511439129710197,-0.007934754714369774,-0.020548228174448013,-0.012980143539607525,0.017761530354619026,-0.013192812912166119,0.002423693425953388,-0.00341553776524961,-0.005819064565002918,-0.023408260196447372,0.0016637684311717749,-0.012334803119301796,0.019448215141892433,0.050776563584804535,0.02356959506869316,-0.01088278740644455,-0.029142988845705986,0.0032817029859870672,0.010618784464895725,-0.027485638856887817,-0.040627118200063705,0.025109611451625824,-0.00559172872453928,0.02210291102528572,-0.008132756687700748,0.001672018552199006,0.026752296835184097,-0.0053790598176419735,0.024816274642944336,0.008242757990956306,-0.006391070783138275,-0.018685540184378624,0.004968388471752405,-0.024610940366983414,-0.00235035945661366,0.03737108036875725,0.024390937760472298,0.009467437863349915,-0.0032927030697464943,-0.0396004393696785,0.027441637590527534,0.016368180513381958,0.0005628395592793822,0.004884053952991962,0.017952198162674904,0.013823486864566803,0.005503727588802576,-0.011044122278690338,-0.011836131103336811,0.010978121310472488,-0.03508305549621582,-0.009526105597615242,-0.07362747937440872,0.022850919514894485,0.026400292292237282,-0.005492727737873793,-0.030067000538110733,0.005412059836089611,-0.015312169678509235,-0.024742940440773964,-0.017218858003616333,0.0096361069008708,-0.04270980507135391,0.014424826949834824,-0.02000555582344532,-0.01850953884422779,-0.004070044960826635,-0.027236301451921463,0.002788530895486474,-0.007278413977473974,0.008169423788785934,0.03065367229282856,-0.005382726434618235,0.010523449629545212,-0.012078133411705494,0.02776430733501911,-0.02509494498372078,-0.014050822705030441,-0.028966987505555153,-0.0013704318553209305,0.00004666457971325144,-0.005236058030277491,0.02915765717625618,-0.0057897306978702545,-0.002638195874169469,0.0065634059719741344,0.01427815854549408,-0.002280691871419549,0.009342770092189312,0.006336070131510496,0.030536338686943054,0.011528127826750278,-0.009372103959321976,-0.009724107570946217,0.023026922717690468,-0.0385444276034832,0.00993677694350481,-0.018758874386548996,-0.03191502019762993,0.018098866567015648,0.0346137173473835,-0.003529205685481429,0.010457449592649937,-0.0031955353915691376,-0.01557617262005806,-0.02553495019674301,-0.012041467241942883,-0.009885442443192005,-0.0032633694354444742,0.0015418503899127245,0.0015262669185176492,-0.009027433581650257,0.02876165136694908,0.019550884142518044,0.02160423994064331,-0.028013644739985466,0.012078133411705494,0.0028526983223855495,-0.04470449686050415,0.004051711410284042,0.013816152699291706,-0.04083245247602463,-0.008000755682587624,-0.012745474465191364,0.007084078621119261,0.023950932547450066,-0.003289036452770233,-0.023012254387140274,-0.027001632377505302,0.02742697112262249,-0.017028188332915306,0.00020464809495024383,0.0006994244176894426,-0.017526861280202866,-0.0019030211260542274,0.01980021968483925,-0.007091411855071783,-0.009746108204126358,-0.0011925965081900358,-0.019198879599571228,-0.011777464300394058,-0.012393470853567123,-0.040392447263002396,0.015620172955095768,0.00713907927274704,0.016602851450443268,0.014043488539755344,0.005331392399966717,-0.00032931615714915097,0.010589450597763062,0.009540772065520287,-0.009225435554981232,0.009166767820715904,0.008734096772968769,0.0017462694086134434,-0.009364770725369453,-0.004088378511369228,0.027749640867114067,-0.035963065922260284,-0.008976099081337452,0.006303069647401571,0.00010049069533124566,-0.01654418371617794,-0.01100012194365263,-0.012474138289690018,0.03153368458151817,-0.005738397128880024,0.02992033213376999,0.005089389625936747,0.0061380681581795216,-0.03364570438861847,0.03229635953903198,-0.033499039709568024,0.008103422820568085,0.029978998005390167,-0.012026799842715263,0.0035090388264507055,0.00457605067640543,-0.012129467912018299,-0.018612205982208252,0.011564794927835464,-0.026356292888522148,0.0056980629451572895,0.008250091224908829,-0.016734851524233818,-0.011088122613728046,-0.008008088916540146,0.004205713048577309,-0.008910099044442177,0.007087745238095522,-0.022220246493816376,0.09773974865674973,0.0393364354968071,-0.0256962850689888,-0.010098111815750599,-0.00003251338057452813,0.02659096196293831,-0.020386893302202225,-0.0032542026601731777,0.003719874657690525,-0.05764063820242882,-0.02659096196293831,0.008213424123823643,-0.003226702334359288,-0.02939232625067234,-0.009804775007069111,-0.008030088618397713,-0.043325815349817276,0.05065922811627388,-0.008374759927392006,0.0009625106467865407,0.032237689942121506,0.006270069628953934,0.01124945841729641,0.015238835476338863,-0.0128481425344944,-0.015238835476338863,0.03657907247543335,0.016984188929200172,-0.016852186992764473,-0.026752296835184097,0.029450993984937668,0.01351548358798027,-0.0348777212202549,-0.03455505147576332,-0.0053057256154716015,0.02097356505692005,-0.000260107044596225,-0.03613906726241112,0.014182823710143566,0.004414715804159641,0.017482860013842583,-0.04625917971134186,-0.022513583302497864,-0.019990887492895126,-0.0052140578627586365,0.006578072905540466,-0.03681373968720436,0.004906054586172104,-0.05388592928647995],[-0.00876461062580347,0.012256027199327946,-0.009384986013174057,0.019866449758410454,-0.01416043657809496,0.009500404819846153,-0.007051363587379456,0.008793464861810207,-0.00394227122887969,-0.03635690361261368,0.0375976525247097,0.007978320121765137,-0.016966555267572403,0.016663579270243645,0.01330922357738018,0.005017108283936977,0.009493190795183182,-0.007083824835717678,0.044638197869062424,0.010459822602570057,0.018957527354359627,0.016634725034236908,-0.016548162326216698,-0.006207364145666361,0.0037438953295350075,0.03188442438840866,0.03306746855378151,0.008490490727126598,-0.012659993022680283,0.014535547234117985,0.0562954880297184,-0.00007174221536843106,-0.029835743829607964,0.0073759788647294044,-0.023213593289256096,-0.012631137855350971,-0.00818751659244299,0.0079494658857584,0.02112162858247757,-0.020097287371754646,0.01783219538629055,0.000361810700269416,0.0012010762002319098,-0.005287620704621077,-0.002892682095989585,0.01216946355998516,-0.008793464861810207,-0.050524551421403885,-0.0141820777207613,0.0018539134180173278,-0.0005897175869904459,-0.003547322703525424,-0.020962927490472794,0.030095435678958893,0.004248852375894785,-0.002348050009459257,0.018337151035666466,0.017933186143636703,0.002961212070658803,0.01607205905020237,0.01638946123421192,-0.01946248486638069,-0.007704200688749552,-0.00147970428224653,-0.02410808950662613,-0.01493229903280735,-0.015033290721476078,0.02472846396267414,-0.057997915893793106,-0.017543647438287735,0.0056410906836390495,0.015004435554146767,0.0052299113012850285,0.0050459629856050014,0.01703869178891182,-0.026185626164078712,-0.010329976677894592,-0.000334534008288756,-0.026243334636092186,-0.013006248511373997,0.015783512964844704,0.016461597755551338,-0.020573390647768974,0.058863554149866104,0.013669907115399837,0.018986381590366364,0.012782624922692776,0.010265054181218147,-0.028537282720208168,-0.006117193028330803,0.028046753257513046,-0.0019981868099421263,0.0027285711839795113,0.005442714784294367,0.014326350763440132,-0.0012263241223990917,-0.008807891979813576,0.013374146074056625,-0.012659993022680283,0.0390980988740921,-0.012905257754027843,-0.01179435197263956,0.00009884983592201024,-0.01209732610732317,-0.0004129826556891203,0.0020414688624441624,-0.013006248511373997,-0.021972842514514923,0.008439995348453522,0.01361219771206379,-0.0008430978050455451,0.02960490621626377,-0.008173089474439621,-0.004454441834241152,-0.018683407455682755,0.019116228446364403,0.02367526851594448,0.02661844715476036,-0.003520271508023143,-0.040165722370147705,0.019534621387720108,0.0029972803313285112,0.0380304753780365,0.005987347103655338,0.009240712970495224,0.008771823719143867,-0.018943101167678833,-0.006809705402702093,0.004295741207897663,-0.0033489468041807413,0.021713150665163994,0.01519199088215828,-0.011080198921263218,0.025897080078721046,0.019924160093069077,0.03589522838592529,-0.04351286217570305,0.007311055436730385,-0.028782548382878304,-0.005410253535956144,-0.019794313237071037,0.047148555517196655,-0.0352315679192543,0.01946248486638069,-0.021280329674482346,-0.00961582362651825,0.016346178948879242,0.033788833767175674,0.032086409628391266,-0.022867336869239807,0.005089244805276394,0.02249222621321678,-0.018640125170350075,0.02283848263323307,-0.006928731221705675,0.04019457474350929,-0.028292017057538033,0.006283107679337263,0.020313696935772896,0.028998957946896553,-0.007877328433096409,0.04316660761833191,-0.019751030951738358,-0.01572580263018608,0.020962927490472794,0.023603131994605064,0.013136095367372036,-0.013460710644721985,-0.007354337722063065,-0.016274042427539825,-0.007430081255733967,0.0015274948673322797,-0.04986089468002319,0.03719368949532509,0.011159549467265606,0.0388961136341095,0.031682442873716354,-0.0023913320619612932,-0.011866488493978977,-0.006027022376656532,0.006236218847334385,0.0034120664931833744,-0.0059548853896558285,0.04106021672487259,-0.02503143809735775,-0.006030628923326731,-0.004144254140555859,-0.01651930622756481,0.01576908491551876,0.019967442378401756,0.014167649671435356,0.012277668341994286,0.016793426126241684,-0.010445395484566689,-0.5498548746109009,-0.016634725034236908,-0.009558114223182201,-0.01757250353693962,0.03145160526037216,-0.017457084730267525,0.030557110905647278,0.04492674395442009,-0.0016131572192534804,0.04256065934896469,-0.004869227763265371,0.009305635467171669,0.017716776579618454,-0.011938625946640968,0.00196572532877326,-0.017024263739585876,-0.0012191104469820857,-0.010842147283256054,0.018279442563652992,-0.014369633048772812,-0.017500365152955055,0.00635524420067668,-0.007711414247751236,-0.028205454349517822,0.01381418015807867,-0.019390348345041275,-0.00023489516752306372,-0.03044169209897518,-0.004400339443236589,-0.027166685089468956,-0.02292504720389843,-0.012068471871316433,-0.006106372456997633,-0.006373278331011534,0.057767078280448914,-0.021799713373184204,0.001597828115336597,-0.004371484741568565,0.02419465221464634,0.036068353801965714,0.0009377772221341729,-0.021943988278508186,0.0018376826774328947,-0.008569841273128986,0.0317978635430336,-0.002569870324805379,0.008663618937134743,0.0036915962118655443,-0.004476082976907492,-0.015740230679512024,-0.001913426211103797,0.003989160060882568,0.03130733221769333,0.006806098856031895,0.0030640067998319864,-0.012724915519356728,0.040252283215522766,-0.010813293047249317,0.001474293996579945,-0.01040932722389698,-0.018149595707654953,0.018870962783694267,-0.0380304753780365,-0.01100084837526083,-0.003619459457695484,0.04157960042357445,-0.019419202581048012,0.010640164837241173,0.027527369558811188,0.0031595879700034857,0.01800532266497612,0.020097287371754646,-0.0016131572192534804,-0.0423298217356205,-0.003619459457695484,0.04258951544761658,0.015494965016841888,-0.014297496527433395,0.013294795528054237,0.015581529587507248,-0.016923272982239723,-0.0028277591336518526,0.000017188825950142927,-0.016403887420892715,0.005164988338947296,-0.01989530399441719,-0.025218993425369263,-0.017514793202280998,0.0395309180021286,-0.01323708612471819,0.011325463652610779,0.006225398276001215,-0.01247243769466877,-0.02687813900411129,-0.0009215464815497398,0.008230798877775669,0.01106577180325985,-0.00011491152690723538,0.0034679723903536797,0.006225398276001215,-0.015004435554146767,-0.006531978957355022,0.004342630039900541,0.0014084692811593413,0.04954349249601364,-0.0002614955883473158,-0.011051343753933907,-0.013540060259401798,0.021006209775805473,0.0001768476504366845,0.023646414279937744,-0.00447968952357769,-0.014196504838764668,-0.02051568031311035,-0.027729351073503494,-0.03500073030591011,0.0403965562582016,-0.0015455289976671338,0.0476967915892601,0.011606796644628048,0.0030531862284988165,0.0031289297621697187,-0.00792782474309206,-0.02037140727043152,0.03277892246842384,0.014239787124097347,0.0018971954705193639,0.03188442438840866,0.009103653021156788,-0.0046239630319178104,0.003877348266541958,0.003626673249527812,0.031249623745679855,-8.883241207513493e-6,0.02275191806256771,0.017053117975592613,0.04175272956490517,-0.001615862362086773,0.00145445647649467,-0.006834953557699919,-0.009457122534513474,0.01556710246950388,0.02393496036529541,-0.028796974569559097,-0.017327237874269485,-0.020313696935772896,-0.032259538769721985,-0.029835743829607964,0.002337229438126087,0.0076392777264118195,-0.004753809422254562,0.0050856382586061954,-0.004158681258559227,0.004360664170235395,-0.03162473440170288,-0.031769007444381714,-0.015379547141492367,-0.01416043657809496,0.010755583643913269,0.02236238121986389,0.02977803349494934,0.03508729487657547,-0.010827720165252686,-0.023530995473265648,-0.027902480214834213,-0.011996335349977016,-0.00563027011230588,-0.004840373061597347,0.0050748176872730255,-0.01440570130944252,-0.035462405532598495,0.015552674420177937,-0.0005360659561119974,-0.03433707356452942,-0.0008494097855873406,0.02586822398006916,-0.012876402586698532,-0.007274987176060677,-0.015177563764154911,0.014434555545449257,0.04163730889558792,-0.00290891295298934,-0.03583751618862152,0.015927786007523537,0.017760058864951134,0.0269647017121315,0.02064552716910839,-0.0038052115123718977,-0.010596882551908493,-0.0013733026571571827,-0.026329899206757545,0.02621448040008545,-0.003312878543511033,0.007610423024743795,0.003210083581507206,0.019534621387720108,-0.011210044845938683,-0.035202715545892715,-0.004288527648895979,0.02855171076953411,0.017630212008953094,-0.00952925905585289,0.031422752887010574,-0.03338487073779106,0.0023660841397941113,-0.014751957729458809,0.004843980073928833,-0.021006209775805473,-0.01152744609862566,0.045330710709095,0.00981780607253313,0.005042355973273516,-0.004028835333883762,0.033096324652433395,0.01638946123421192,0.03370227292180061,-0.013713188469409943,0.028926821425557137,-0.0004918822087347507,-0.00819473061710596,-0.010950352996587753,-0.012638351880013943,0.02301160991191864,0.008064884692430496,-0.025796087458729744,0.019736604765057564,0.019534621387720108,-0.005017108283936977,-0.006185723003000021,-0.016879990696907043,0.0006645594257861376,0.010084711946547031,0.0219151321798563,-0.006571654230356216,-0.010250627063214779,0.011686147190630436,0.004302954766899347,-0.002308374736458063,0.023487713187932968,-0.02876812033355236,-0.0012939522275701165,-0.008295721374452114,-0.006019808351993561,0.0017285759095102549,0.017269529402256012,-0.032172974199056625,0.011484164744615555,0.015119854360818863,-0.009911583736538887,-0.003615852678194642,-0.00819473061710596,0.02687813900411129,-0.0013029692927375436,-0.012234386056661606,0.01897195540368557,-0.004735775291919708,0.012176676653325558,0.004133433569222689,0.016057631000876427,0.013511206023395061,0.006795278284698725,-0.011462523601949215,0.015206418931484222,-0.02081865444779396,0.03586637228727341,0.011419241316616535,-0.027080120518803596,-0.028912393376231194,-0.010236199013888836,-0.0090243024751544,0.012746556662023067,-0.009680746123194695,-0.018769972026348114,0.004674458876252174,0.002896288875490427,0.010553601197898388,0.004162288270890713,0.01826501451432705,0.0031000750605016947,-0.017110828310251236,-0.0020468791481107473,-0.010127994231879711,0.021641014143824577,0.03878069669008255,-0.01972217671573162,-0.02827759087085724,0.0018701442750170827,-0.0009102750918827951,-0.008966593071818352,-0.0049666124396026134,-0.027368668466806412,-0.008937738835811615,-0.035202715545892715,0.001978349406272173,-0.015653666108846664,0.0214823130518198,0.008230798877775669,-0.02389167807996273,-0.02133803814649582,-0.016504880040884018,-0.0024201865307986736,0.021814141422510147,-0.026935847476124763,-0.017182964831590652,0.004959398880600929,0.02156887575984001,-0.02722439542412758,0.005201057065278292,-0.005009894724935293,0.0013345291372388601,0.0027429985348135233,-0.0010162258986383677,0.0006875530234538019,-0.04062739387154579,0.022867336869239807,-0.006503124255686998,0.001891785184852779,-0.002257879124954343,-0.01238587312400341,0.003201066516339779,-0.012320950627326965,-0.025796087458729744,0.0018178451573476195,0.002376904711127281,0.04224325716495514,0.047667939215898514,0.003619459457695484,0.0062470389530062675,-0.014658180065453053,-0.0061027659103274345,-0.019476911053061485,-0.0012975591234862804,0.0008530166232958436,0.0009296618518419564,-0.005579774733632803,0.0019026057561859488,-0.02608463540673256,0.012919684872031212,0.0155238201841712,0.0005405744886957109,0.007855688221752644,-0.025319986045360565,0.004627570044249296,0.0030405623838305473,0.012292095459997654,-0.016014350578188896,-0.01708197221159935,0.023992670699954033,0.012219958938658237,0.029460633173584938,-0.0003550478722900152,-0.015610383823513985,0.009478763677179813,-0.010221771895885468,-0.015437256544828415,0.006687073037028313,0.012782624922692776,-0.0038052115123718977,-0.04137761890888214,0.033529143780469894,0.018322724848985672,-0.0030856477096676826,0.001682588830590248,-0.0020504859276115894,0.03350028768181801,0.0065896883606910706,0.008930524811148643,0.013460710644721985,-0.0024418276734650135,-0.025796087458729744,-0.040021445602178574,-0.004580681212246418,0.0024292038287967443,-0.007321876008063555,0.028609419241547585,-0.008093738928437233,-0.0024616653099656105,-0.0155238201841712,0.04515758156776428,-0.021280329674482346,0.012638351880013943,0.0031704085413366556,-0.005154167767614126,-0.027989042922854424,-0.025017011910676956,-0.0408293791115284,-0.00983944721519947,-0.005453535355627537,0.00524794589728117,-0.02060224488377571,-0.02898452989757061,-0.004598715342581272,-0.026820428669452667,0.007523858919739723,-0.012760983780026436,0.016057631000876427,-0.014788025990128517,-0.007332696579396725,0.002544622402638197,0.024930447340011597,-0.0008503114804625511,0.009911583736538887,-0.003594211535528302,0.02221810631453991,-0.008129807189106941,-0.0103660449385643,-0.000500448455568403,-0.008937738835811615,0.002553639467805624,0.02090521901845932,0.012825907208025455,0.018914245069026947,-0.011945839039981365,0.0192316472530365,-0.019866449758410454,0.034798748791217804,0.007271380629390478,-0.02419465221464634,-0.004912510048598051,0.002324605593457818,0.003917023539543152,0.0031163059175014496,0.016923272982239723,-0.0008575251558795571,0.025449831038713455,0.0023913320619612932,-0.039242371916770935,-0.012155035510659218,-0.020659953355789185,0.014614897780120373,0.005399432964622974,-0.0006054975092411041,-0.0034427244681864977,-0.014766384847462177,-0.010048643685877323,-0.015321837738156319,0.020674381405115128,-0.00023647314810659736,0.012616710737347603,0.027902480214834213,0.010041430592536926,0.0008313755970448256,-0.010647378861904144,-0.03733796253800392,0.008548200130462646,-0.012313736602663994,0.031163059175014496,0.01238587312400341,-0.013049530796706676,0.017543647438287735,-0.019000809639692307,-0.019217219203710556,-0.026026925072073936,0.03003772720694542,-0.01628846861422062,0.020356979221105576,0.0048115188255906105,-0.03702056035399437,-0.023833969607949257,0.014131581410765648,0.014218145981431007,-0.006730355322360992,-0.0030297418124973774,0.013063957914710045,-0.003938664216548204,0.020270416513085365,-0.0004192946362309158,-0.0185824166983366,0.017933186143636703,-0.03526042401790619,-0.05115935578942299,0.004486903548240662,0.006737568881362677,0.011938625946640968,-0.04432079568505287,0.010784437879920006,0.008266867138445377,-0.006329996511340141,-0.0033327159471809864,-0.004569860640913248,-0.003504040651023388,-0.01409551315009594,0.01656258851289749,-0.0033940321300178766,0.005868321284651756,0.000997290015220642,0.03811703622341156,0.040252283215522766,-0.004566253628581762,0.0007790764793753624,0.021756431087851524,-0.01673571765422821,-0.011974694207310677,-0.017933186143636703,0.00322811771184206,0.0042704930528998375,-0.00013345290790311992,-0.019866449758410454,0.004245245363563299,0.007790764793753624,0.03517385944724083,0.017601357772946358,-0.026156771928071976,-0.06353801488876343,0.0028043147176504135,0.01950576715171337,-0.014766384847462177,0.015408401377499104,-0.023026037961244583,-0.014225359074771404,0.00043710338650271297,-0.023083748295903206,0.00878625176846981,0.019751030951738358,0.03635690361261368,-0.03127847611904144,0.020674381405115128,0.017399374395608902,0.016764571890234947,0.015091000124812126,-0.0143407778814435,-0.018120741471648216,0.00841114018112421,0.005399432964622974,0.004901689477264881,0.039992593228816986,0.01556710246950388,-0.003336322959512472,-0.013532847166061401,-0.02068880945444107,-0.05265979841351509,-0.010625737719237804,0.004706920590251684,-0.014059444889426231,-0.008317362517118454,-0.020674381405115128,-0.02731095813214779,0.00004739607174997218,0.01853913441300392,-0.028003470972180367,-0.03174015134572983,0.01576908491551876,-0.009558114223182201,-0.04625405743718147,0.017312809824943542,-0.006452628877013922,0.04561925679445267,-0.007826833054423332,-0.00013784875045530498,-0.012760983780026436,-0.008836747147142887,0.0055725607089698315,0.01442734245210886,0.005345330107957125,0.012155035510659218,0.024035951122641563,0.00464560417458415,0.012241600081324577,0.00661132950335741,0.014174863696098328,-0.012609496712684631,-0.021265901625156403,-0.022203680127859116,0.02358870394527912,0.02451205439865589,0.014701461419463158,-0.01273934356868267,0.006301141809672117,-0.019664468243718147,-0.001918836496770382,-0.017889903858304024,-0.025002583861351013,0.02133803814649582,-0.012054044753313065,0.003247955348342657,0.0156825203448534,0.03531813248991966,0.024843882769346237,0.004836766514927149,-0.0015374136855825782,-0.01901523768901825,-0.005395825952291489,0.01871226355433464,0.014860162511467934,-0.0002939570986200124,0.03878069669008255,-0.02542097680270672,0.01440570130944252,-0.021799713373184204,0.003783570369705558,-0.009219071827828884,0.002582494169473648,-0.020039578899741173,0.04088708758354187,-0.024627473205327988,0.011072984896600246,-0.001449046190828085,-0.027426376938819885,0.011916984803974628,-0.0037727500312030315,-0.0038160320837050676,-0.036558885127305984,-0.0248150285333395,-0.019072946161031723,0.04449392482638359,0.004111792426556349,-0.021713150665163994,-0.01699540950357914,0.006503124255686998,-0.018192877992987633,0.003837672993540764,-0.028998957946896553,0.037886202335357666,-0.02634432725608349,-0.006402133032679558,-0.032172974199056625,-0.018164023756980896,0.02397824265062809,0.010568028315901756,-0.036299191415309906,0.01748593896627426,0.049774330109357834,-0.02389167807996273,0.00508203124627471,-0.007920610718429089,-0.02340114861726761,-0.03624148294329643,-0.007210064213722944,-0.017644640058279037,-0.021814141422510147,0.00047655313392169774,0.004620356485247612,0.00774026894941926,-0.040425412356853485,-0.004295741207897663,0.005835860036313534,0.008201943710446358,0.02560853213071823,-0.00959418248385191,0.0008408435387536883,-0.0003597818431444466,-0.009976507164537907,0.0352315679192543,0.041262198239564896,0.026200054213404655,-0.024973729625344276,0.03122076764702797,0.010344404727220535,0.03805932775139809,-0.01998186856508255,-0.0027213573921471834,-0.019707748666405678,-0.010914284735918045,-0.029633760452270508,0.006852987688034773,0.0013146915007382631,-0.02595478855073452,-0.006243432406336069,0.0037150406278669834,-0.0345967672765255,0.002647417364642024,-0.019130656495690346,0.020804228261113167,0.00045040357508696616,0.03681857883930206,0.021179338917136192,-0.0016014350112527609,-0.0044580488465726376,-0.009558114223182201,0.00454461295157671,0.00632278248667717,0.008252440020442009,-0.009687960147857666,-0.01637503318488598,0.0030441691633313894,0.0491972379386425,0.022420089691877365,0.0009183905203826725,-0.017803341150283813,0.00023669858637731522,-0.011779924854636192,-0.018077459186315536,-0.0180486049503088,0.011657292023301125,-0.017356092110276222,-0.00576372304931283,-0.009197430685162544,0.01673571765422821,0.005067604128271341,0.013958453200757504,-0.037395671010017395,0.002281323540955782,0.002512160921469331,0.005237125325948,0.02739752270281315,0.004710527136921883,-0.02275191806256771,0.0010423754574730992,0.03404852747917175,-0.025017011910676956,-0.02279520034790039,0.01840928941965103,-0.01752922125160694,-0.02850842848420143,-0.025680668652057648,0.013121667318046093,0.0018971954705193639,-0.0317978635430336,0.002943177707493305,-0.02954719588160515,-0.01901523768901825,0.009471550583839417,0.010438182391226292,-0.01302067656069994,0.013684334233403206,0.024916019290685654,0.03182671591639519,0.016663579270243645,-0.0004625766596291214,-0.0010667216265574098,0.01264556497335434,0.000973845599219203,0.031509313732385635,-0.0014174863463267684,0.00841114018112421,0.03289433941245079,-0.00847606360912323,0.018813254311680794,0.0027375882491469383,0.012984608300030231,-0.03390425443649292,-0.012623924762010574,0.0011100036790594459,-0.010755583643913269,0.016144195571541786,-0.010171276517212391,-0.022160397842526436,0.009118080139160156,-0.01236423198133707,0.008569841273128986,-0.025680668652057648,-0.022650927305221558,0.009745669551193714,0.02384839579463005,-0.06301862746477127,0.007523858919739723,-0.008418354205787182,0.020962927490472794,0.00029170283232815564,-0.014304709620773792,-0.016923272982239723,0.005958492401987314,0.0027844770811498165,-0.02125147543847561,0.008916097693145275,-0.016057631000876427,0.010315549559891224,0.0076392777264118195,0.010077498853206635,-0.012256027199327946,0.19586560130119324,-0.02133803814649582,0.018438143655657768,0.025262275710701942,-0.020674381405115128,0.024050379171967506,0.010373258963227272,-0.0030495794489979744,0.01866898126900196,0.03174015134572983,0.012840334326028824,-0.01150580495595932,-0.03277892246842384,0.004256065934896469,0.010647378861904144,0.017356092110276222,-0.03205755352973938,-0.04954349249601364,-0.014917871914803982,0.010885429568588734,0.017269529402256012,-0.003240741789340973,-0.03702056035399437,-0.027613932266831398,0.038232456892728806,-0.00981780607253313,-0.018466997891664505,-0.0016898025060072541,0.013049530796706676,0.022723063826560974,-0.012292095459997654,-0.03139389678835869,0.005558133590966463,-0.002203776501119137,0.004256065934896469,-0.0005008992739021778,0.031769007444381714,-0.02498815581202507,-0.0001446115638827905,0.0164327435195446,0.02692142128944397,-0.010568028315901756,0.008533773012459278,-0.008916097693145275,0.004259672947227955,-0.012869189493358135,0.005110885947942734,0.04535956308245659,0.006236218847334385,-0.0017944006249308586,-0.025276703760027885,0.013597769662737846,0.0012479651486501098,0.009709601290524006,-0.008750182576477528,-0.01293411199003458,-0.02445434406399727,-0.010481463745236397,0.0103660449385643,-0.021799713373184204,-0.015163136646151543,-0.013374146074056625,-0.014016162604093552,0.007935037836432457,-0.025060294196009636,0.03399081900715828,-0.04527299851179123,-0.02037140727043152,0.019029663875699043,-0.03904038667678833,-0.00715956836938858,-0.00872132834047079,-0.021352466195821762,-0.010106353089213371,-0.022030550986528397,-0.013576128520071507,-0.011173976585268974,0.03315403312444687,0.013763684779405594,0.039328936487436295,-0.011072984896600246,0.012082898989319801,-0.019419202581048012,-0.0031307332683354616,0.004858407657593489,-0.013604983687400818,0.032692357897758484,0.0015987298684194684,-0.0006041449378244579,-0.0068746283650398254,-0.008230798877775669,-0.007790764793753624,0.009579755365848541,0.009543687105178833,0.014831307344138622,-0.01641831547021866,-0.017687922343611717,-0.020876364782452583,-0.03693399578332901,-0.008937738835811615,-0.02928750403225422,0.05938294157385826,0.04123334214091301,-0.00651033828034997,-0.019202793017029762,-0.024786174297332764,0.009031516499817371,0.0075599271804094315,0.02028484269976616,-0.040915943682193756,-0.03332715854048729,-0.016086487099528313,0.0033471432980149984,0.003365177661180496,0.015321837738156319,0.026416463777422905,-0.009096438996493816,0.03087451308965683,-0.007098252419382334,-0.014066658914089203,-0.0003311525797471404,-0.02954719588160515,-0.021020637825131416,0.002988263266161084,-0.02937406860291958,-0.009623037651181221,-0.004111792426556349,-0.013922384940087795,0.00906758476048708,-0.03171129897236824,0.03944435343146324,0.015321837738156319,-0.0017799733905121684,-0.022189252078533173,-0.0009413840598426759,-0.014023376628756523,0.04120448976755142,-0.040685106068849564,-0.025622960180044174,0.013936812989413738,0.01179435197263956,0.006052270065993071,0.037309106439352036,-0.012284881435334682,0.007502217777073383,-0.00955090019851923,-0.005648304242640734,0.018236160278320312,0.007487790659070015,0.024670755490660667,-0.020659953355789185,-0.00379799772053957,-0.007531072478741407,0.007870115339756012,-0.01879882626235485,-0.01918836496770382,-0.016836708411574364,-0.069193534553051,-0.013136095367372036,-0.008137021213769913,-0.039761755615472794,0.020457971841096878,-0.021987268701195717,0.009204644709825516,-0.03583751618862152,0.0004181675030849874,-0.18247702717781067,0.010438182391226292,0.0053886123932898045,-0.01234259083867073,0.02239123545587063,-0.011931411921977997,0.023819541558623314,0.011109053157269955,-0.0031181094236671925,0.005936851259320974,0.03165359050035477,-0.01071230135858059,0.013395787216722965,-0.019621185958385468,0.001302067656069994,-0.015292982570827007,0.0044183735735714436,0.005825039464980364,0.043022334575653076,0.011448095552623272,0.03961748257279396,-0.026113489642739296,0.0293307863175869,-0.015105427242815495,-0.0037475021090358496,0.004292134195566177,-0.0015626614913344383,-0.00576372304931283,-0.006845773663371801,-0.037049416452646255,-0.02977803349494934,-0.019072946161031723,0.01998186856508255,-0.014831307344138622,0.001906212535686791,0.009954866021871567,-0.0024021524004638195,-0.014196504838764668,0.007094645407050848,0.017601357772946358,0.009493190795183182,0.04781221225857735,-0.003826852422207594,0.007848474197089672,0.007451722398400307,0.012227172031998634,0.00466724531725049,-0.0053777918219566345,0.001106396783143282,-0.00007534904580097646,0.02969147078692913,0.0041550747118890285,-0.011015275493264198,0.007567140739411116,0.016879990696907043,0.004165894817560911,0.016750143840909004,-0.0016861956100910902,0.006254252977669239,0.0030658103059977293,-0.00018778086814563721,-0.017601357772946358,0.01871226355433464,-0.011916984803974628,-0.0016861956100910902,-0.014860162511467934,-0.025723950937390327,-0.008584268391132355,-0.02595478855073452,-0.018120741471648216,-0.016461597755551338,-0.006528372410684824,0.003572570625692606,-0.025594104081392288,0.05147675797343254,0.033615708351135254,-0.01493229903280735,0.015624811872839928,-0.013078385964035988,0.01150580495595932,-0.017904331907629967,0.026243334636092186,-0.006106372456997633,0.02679157443344593,0.0073651582933962345,-0.008923310786485672,-0.024540908634662628,-0.00027502121520228684,0.009370558895170689,-0.008634764701128006,-0.029099948704242706,-0.0017249691300094128,0.021842995658516884,-0.01126054022461176,-0.008584268391132355,0.009478763677179813,0.015913357958197594,-0.0057601165026426315,0.010784437879920006,-0.019390348345041275,-0.00908922590315342,-0.01133267767727375,-0.012898043729364872,-0.014398487284779549,0.00926956720650196,0.003224510932341218,0.018654553219676018,-0.001421994878910482,0.004804304800927639,-0.024483200162649155,-0.023732976987957954,0.00957254134118557,0.03586637228727341,0.025536395609378815,-0.013302009552717209,0.02002515085041523,0.007303841877728701,-0.00046347835450433195,0.03047054633498192,-0.013475137762725353,0.0620952807366848,-0.009305635467171669,0.012782624922692776,0.018452569842338562,0.0005743885412812233,-0.015163136646151543,-0.09447023272514343,-0.03413509204983711,0.004836766514927149,0.020674381405115128,-0.03240381181240082,-0.008447208441793919,-0.018524708226323128,-0.002201972994953394,0.001293050590902567,0.033182885497808456,-0.012898043729364872,-0.021511167287826538,-0.03820360079407692,0.02433892711997032,-0.00715956836938858,-0.029980016872286797,-0.031076494604349136,-0.015826795250177383,-0.020804228261113167,0.03399081900715828,-0.0015175760490819812,-0.04504216089844704,-0.015653666108846664,-0.004436407703906298,-0.02819102630019188,-0.025594104081392288,-0.0020432723686099052,0.02120819315314293,-0.0024598618037998676,0.014564401470124722,-0.011072984896600246,-0.01352563314139843,-0.008836747147142887,-0.0007709611090831459,-0.002910716226324439,-0.007199243642389774,0.01297739427536726,-0.027830343693494797,0.028869111090898514,-0.011181190609931946,0.024800600484013557,0.020876364782452583,0.024209080263972282,0.002187545644119382,-0.02143903076648712,-0.003525681793689728,-0.013201017864048481,0.04905296489596367,-0.007040543016046286,0.0036717585753649473,-0.01778891310095787,-0.01611534133553505,-0.017327237874269485,0.00025292934151366353,0.006308355368673801,-0.03165359050035477,0.0020450756419450045,0.023862823843955994,-0.017630212008953094,-0.0072172777727246284,-0.011361531913280487,0.007361551281064749,-0.004450835287570953,0.023083748295903206,0.0037871773820370436,-0.02354542165994644,-0.020587816834449768,0.010337190702557564,0.004577074199914932,-0.030845656991004944,-0.04308004304766655,0.025060294196009636,0.004010801203548908,0.012941326014697552,-0.0024346138816326857,0.01725510135293007,0.016360605135560036,-0.006308355368673801,0.03514500707387924,-0.005655518267303705,-0.017760058864951134,-0.01431913673877716,0.01291247084736824,-0.04325317218899727,-0.001784481923095882,0.02182856947183609,0.015999922528862953,0.011152335442602634,-0.000649230380076915,-0.03670315816998482,0.039415497332811356,0.028292017057538033,-0.01018570363521576,0.013366932049393654,0.0007849375833757222,0.009154148399829865,0.011484164744615555,0.00045378500362858176,0.0033182885963469744,-0.0132659412920475,-0.031682442873716354,-0.004775450099259615,-0.07127106934785843,0.039069242775440216,0.023949388414621353,-0.010445395484566689,-0.030182000249624252,0.0026672547683119774,-0.016043204814195633,-0.02432449907064438,-0.007603209465742111,0.01563923805952072,-0.028623847290873528,0.003242545062676072,-0.023386722430586815,-0.04192585498094559,-0.010596882551908493,-0.03981946408748627,0.004375091288238764,-0.017947614192962646,0.021799713373184204,0.03237495571374893,0.001981956185773015,0.010394900105893612,-0.011217258870601654,0.013907957822084427,0.010575241409242153,-0.01940477453172207,-0.020616671070456505,0.016490451991558075,0.013172163628041744,0.02591150626540184,0.031682442873716354,0.00761763658374548,-0.000361810700269416,0.016504880040884018,-0.010063070803880692,0.008086524903774261,-0.008966593071818352,0.00390980951488018,0.020847508683800697,-0.007509431801736355,-0.0007790764793753624,-0.011678933165967464,-0.0036519209388643503,-0.0155238201841712,0.025637386366724968,0.009485977701842785,-0.04149303585290909,0.019000809639692307,0.01462211087346077,0.0008534674416296184,0.023386722430586815,0.0003124421346001327,-0.019246075302362442,-0.011650078929960728,-0.0429646261036396,-0.012890830636024475,-0.003244348568841815,-0.001956708263605833,0.0008638371364213526,-0.010373258963227272,0.03837672993540764,0.04241638630628586,0.02907109446823597,-0.03860756754875183,-0.006517551839351654,-0.011181190609931946,-0.04746595397591591,-0.007797978352755308,0.004259672947227955,-0.04065624997019768,-0.010625737719237804,0.010250627063214779,0.008403927087783813,0.0213813204318285,0.008872815407812595,-0.013893530704081059,-0.0100991390645504,0.030759094282984734,-0.007531072478741407,0.02120819315314293,0.019347066059708595,-0.01985202357172966,-0.009716815315186977,0.014463410712778568,0.0012091916287317872,0.000368122651707381,-0.016447169706225395,-0.005933244246989489,-0.01729838363826275,-0.02322802133858204,-0.0399637371301651,0.011823207139968872,0.018899818882346153,-0.000899454636964947,0.011996335349977016,0.0004431899287737906,0.006550013553351164,0.024569762870669365,0.0221315436065197,0.0015410204650834203,0.0018349775345996022,0.011036916635930538,-0.005493210628628731,0.014701461419463158,0.019029663875699043,0.03012428991496563,-0.043195463716983795,-0.006694286596029997,0.010798865929245949,0.007495004218071699,-0.020472398027777672,0.0031938529573380947,-0.01840928941965103,0.03399081900715828,-0.024353353306651115,0.020443543791770935,-0.012234386056661606,0.02234795317053795,-0.03078794851899147,0.025579677894711494,-0.016100913286209106,-0.01387910358607769,0.033442579209804535,-0.017197391018271446,0.0023660841397941113,0.00019758695270866156,-0.022376807406544685,-0.03396196290850639,0.029172085225582123,-0.024209080263972282,0.030816802754998207,0.0052984412759542465,-0.00028696886147372425,-0.015091000124812126,-0.011217258870601654,0.010777224786579609,0.008151448331773281,0.025536395609378815,-0.025897080078721046,0.0930275022983551,0.031682442873716354,-0.008540986105799675,-0.0006271385354921222,-0.009060370735824108,0.03312517702579498,-0.013446282595396042,-0.015538247302174568,0.014723102562129498,-0.039069242775440216,-0.015163136646151543,-0.004234424792230129,-0.009175789542496204,-0.03577980771660805,-0.010070284828543663,-0.0024544515181332827,-0.030557110905647278,0.047667939215898514,-0.012703274376690388,-0.008064884692430496,0.03938664495944977,0.00595127884298563,0.02221810631453991,0.014535547234117985,-0.008728542365133762,-0.02630104497075081,0.03145160526037216,0.01910180039703846,-0.015595956705510616,-0.008706901222467422,0.017803341150283813,0.02485831081867218,-0.03277892246842384,-0.023430002853274345,-0.009868302382528782,0.017327237874269485,-0.018279442563652992,-0.005056783556938171,-0.014961154200136662,0.008591482415795326,0.002943177707493305,-0.029042240232229233,-0.01888539083302021,-0.03249037638306618,0.007466149516403675,-0.001485114567913115,-0.02318473905324936,0.0069431583397090435,-0.03543355315923691],[-0.0263771191239357,0.00044942510430701077,-0.003767126938328147,0.014923895709216595,-0.004045503679662943,0.016312165185809135,0.0006141465273685753,0.011814750730991364,-0.02401995286345482,-0.00627251947298646,0.03375229984521866,0.01966715045273304,-0.019088704138994217,0.005741072352975607,0.007259491831064224,-0.0046239495277404785,0.0037635115440934896,-0.011879825964570045,0.030223781242966652,-0.003051300533115864,0.004595027305185795,0.0224581491202116,-0.03386798873543739,0.0027638853061944246,-0.014439447782933712,0.008069315925240517,0.02678203023970127,-0.009804653003811836,-0.0019052551360800862,0.0007117592031136155,0.05041153356432915,0.014048997312784195,-0.03999951109290123,0.016572466120123863,-0.020216673612594604,-0.023441506549715996,-0.001957676839083433,-0.0041720387525856495,0.04014412313699722,-0.011315841227769852,0.011865365318953991,-0.0031471054535359144,-0.008503150194883347,0.0026156585663557053,-0.0011098925024271011,0.02400549128651619,-0.0023354741279035807,-0.05940636247396469,-0.01091815996915102,-0.015430036000907421,0.004938479047268629,-0.011778597719967365,-0.01900193654000759,0.00819946639239788,-0.0019811762031167746,-0.012349813245236874,0.031901273876428604,0.0166158489882946,-0.02571190521121025,0.009992646984755993,0.01706414483487606,-0.01942131109535694,-0.0006042044842615724,0.007584867533296347,-0.017555823549628258,-0.002868728479370475,-0.030744383111596107,0.021561559289693832,-0.03158313035964966,-0.00294645712710917,0.00773670943453908,0.013347631320357323,-0.00971788540482521,-0.02056374028325081,0.01774381846189499,-0.04500306770205498,-0.007548714987933636,0.013658545911312103,-0.037512194365262985,-0.015299885533750057,0.02310890145599842,-0.004504644777625799,-0.020910806953907013,0.04665163531899452,0.021489253267645836,0.01167737040668726,0.02764969877898693,0.015892792493104935,-0.0032194112427532673,-0.013376554474234581,0.048936497420072556,0.0009869728237390518,-0.010737395845353603,0.019103165715932846,0.015545724891126156,0.008980367332696915,-0.018756097182631493,0.0034363283775746822,-0.0067750439047813416,0.04127209261059761,-0.012776416726410389,-0.0031597591005265713,-0.01093262154608965,-0.011619525961577892,0.0035140567924827337,0.018900709226727486,-0.01524204108864069,-0.02572636678814888,0.016051864251494408,0.014634673483669758,-0.007371565792709589,0.031062528491020203,-0.025827595964074135,-0.017613667994737625,-0.020809579640626907,0.003248333465307951,0.014634673483669758,0.029341652989387512,-0.005618152674287558,-0.03592146933078766,0.017613667994737625,-0.013904385268688202,0.03441751375794411,0.013448859564960003,0.022790756076574326,0.001371096819639206,-0.02141694724559784,0.013159637339413166,0.006247212179005146,-0.020231133326888084,0.027056792750954628,0.011829212307929993,0.005694073624908924,0.032132651656866074,0.013615163043141365,0.03979705646634102,-0.021792937070131302,-0.006214674562215805,-0.020824041217565536,-0.018336724489927292,-0.019970834255218506,0.04951494187116623,-0.04040442407131195,0.021214492619037628,-0.03739650547504425,-0.004685409367084503,0.029124734923243523,0.03109144978225231,0.04277605190873146,-0.006695507559925318,0.012516116723418236,0.02828598953783512,-0.02310890145599842,0.013665776699781418,-0.003031416330486536,0.03508272394537926,-0.027562931180000305,0.011706292629241943,0.029905635863542557,0.01904532127082348,0.01230642944574356,0.040925025939941406,0.0012210624990984797,-0.009811882860958576,0.017555823549628258,0.01988406665623188,0.0033116010017693043,0.00432749604806304,-0.006402669474482536,-0.02766416035592556,0.014735900796949863,0.021720631048083305,-0.04882080852985382,0.038177408277988434,0.011185691691935062,0.03395475447177887,0.000526023970451206,0.009855266660451889,0.005375928711146116,0.006008603610098362,0.007816245779395103,0.011460453271865845,-0.00995649490505457,0.030339470133185387,-0.028849974274635315,0.007498100865632296,-0.010534940287470818,-0.01230642944574356,0.017136450856924057,0.012537808157503605,-0.004598642233759165,0.027317091822624207,0.035805780440568924,-0.0042768819257617,-0.5284678936004639,-0.026015590876340866,-0.011973823420703411,-0.027360476553440094,0.04714331403374672,-0.04326773062348366,0.017613667994737625,0.0531013049185276,0.0030079169664531946,0.032740019261837006,-0.006514743436127901,0.011062772013247013,0.006753352005034685,-0.018090885132551193,0.007541484199464321,-0.0053831590339541435,0.003091068472713232,-0.02507561631500721,0.021026497706770897,-0.009826344437897205,-0.014714209362864494,0.00025894478312693536,0.0011252574622631073,-0.028372755274176598,0.018192114308476448,-0.015849409624934196,0.01522757951170206,-0.03433074429631233,0.015458958223462105,-0.05321699380874634,-0.027129096910357475,0.0077150180004537106,-0.011185691691935062,-0.014020075090229511,0.05798916891217232,-0.00863330066204071,-0.0064207459799945354,0.00048806346603669226,0.020708352327346802,0.030599771067500114,0.020144367590546608,-0.030223781242966652,-0.005361467599868774,0.010831393301486969,0.0367312952876091,0.005574769340455532,0.021489253267645836,-0.001735336729325354,0.003347753779962659,-0.010072183795273304,-0.01882840320467949,0.013152406550943851,0.019334543496370316,0.007592098321765661,-0.008770680986344814,-0.0017787201795727015,0.02893674001097679,0.00002588600546005182,-0.01992744952440262,-0.004515490960329771,-0.020375745370984077,0.012848722748458385,-0.026102356612682343,-0.02358611859381199,0.000979742151685059,0.03068653866648674,-0.013289786875247955,0.007852398790419102,0.04066472500562668,-0.0005187933566048741,0.011366455815732479,0.02292090654373169,0.009558813646435738,-0.034880269318819046,0.0028452291153371334,0.05145273357629776,0.03783034160733223,0.004146731924265623,0.006905193906277418,0.019508076831698418,-0.013246404007077217,-0.0021619403269141912,0.004819174762815237,-0.013477781787514687,0.009211746044456959,-0.02548052743077278,-0.03519841283559799,-0.014236992225050926,0.029471801593899727,-0.013094562105834484,0.014381603337824345,0.020404668524861336,-0.023499350994825363,-0.013875463046133518,-0.00734987435862422,-0.010744626633822918,0.012205202132463455,0.0026970026083290577,0.009544352069497108,-0.011843672953546047,-0.008495919406414032,0.003123606089502573,0.0030603385530412197,-0.004114194307476282,0.046391334384679794,0.006735275965183973,-0.01751244068145752,-0.043325573205947876,0.011612295173108578,-0.017252139747142792,0.04775068163871765,0.0018031233921647072,-0.017657050862908363,-0.016731537878513336,-0.022226771339774132,-0.032335106283426285,0.05671658739447594,0.007982549257576466,0.02378857508301735,-0.01349947415292263,0.0024638166651129723,-0.01122184470295906,-0.006630432326346636,-0.018958553671836853,0.027331553399562836,0.03378122299909592,-0.002131210407242179,0.01839456893503666,0.0070281135849654675,0.0023643963504582644,0.012892105616629124,-0.015155274420976639,0.035111647099256516,-0.002984417602419853,0.019797300919890404,0.015415574423968792,0.023716269060969353,0.00971065554767847,0.008235619403421879,-0.021937549114227295,0.00691604008898139,0.01791735179722309,0.015010662376880646,-0.016066325828433037,-0.012639036402106285,-0.028372755274176598,-0.023036595433950424,-0.028141377493739128,0.0012373313074931502,0.004110578913241625,0.00025419972371309996,0.010867546312510967,0.004150346852838993,0.022183388471603394,-0.03979705646634102,-0.031004684045910835,0.004175654146820307,-0.010824162513017654,-0.009211746044456959,0.040520112961530685,0.029037967324256897,0.04694085940718651,-0.008134391158819199,-0.005929067265242338,-0.034475356340408325,-0.014490061439573765,-0.012602883391082287,0.004490183666348457,0.020838502794504166,-0.01167737040668726,-0.02010098472237587,0.005889298859983683,-0.017121989279985428,-0.02899458445608616,-0.00021239799389149994,0.012660727836191654,-0.009218976832926273,-0.004967401269823313,0.002610235707834363,0.01751244068145752,0.020838502794504166,0.0069702691398561,-0.02682541310787201,0.0011993707157671452,0.017671512439846992,0.020057599991559982,0.013203020207583904,0.0157771036028862,-0.029876714572310448,0.014772053807973862,-0.015372191555798054,0.030426237732172012,-0.01178582850843668,0.014461139217019081,0.015415574423968792,0.016977377235889435,0.0031254137866199017,-0.010650629177689552,-0.00121654337272048,0.024251330643892288,0.024468248710036278,-0.006464129313826561,0.02036128379404545,-0.029934559017419815,0.015054046176373959,-0.017873968929052353,-0.010216794908046722,-0.021127725020051003,-0.0014497291995212436,0.03201696276664734,0.011973823420703411,-0.011286919005215168,-0.01514081284403801,0.028647517785429955,0.0012879451969638467,0.018929632380604744,-0.03349199891090393,0.012704110704362392,0.004529952071607113,-0.03690482676029205,-0.01641339249908924,-0.03178558498620987,0.010968774557113647,0.013810387812554836,-0.024323636665940285,0.02031790092587471,0.02205323800444603,0.00399489002302289,-0.009457585401833057,-0.02529253251850605,-0.0031398748978972435,0.028011227026581764,0.024352559819817543,-0.0015021509025245905,-0.017613667994737625,0.021257875487208366,-0.00048128480557352304,-0.003418251872062683,0.032537564635276794,-0.034706734120845795,0.0007474601734429598,0.0031217983923852444,-0.015458958223462105,0.00386835471726954,0.014244222082197666,-0.027736466377973557,-0.003951506223529577,0.007201647385954857,0.0007474601734429598,-0.01112061645835638,0.005169857293367386,0.02574082836508751,0.014837129041552544,-0.0019630996976047754,0.027736466377973557,0.005307238083332777,0.015111890621483326,-0.0035465944092720747,0.002939226571470499,0.015111890621483326,-0.01079524029046297,-0.009660040959715843,0.016109708696603775,-0.008691145107150078,0.024150103330612183,-0.004294958431273699,-0.006511128041893244,-0.031178217381238937,-0.022096620872616768,0.007100419607013464,0.01058555394411087,-0.024294713512063026,-0.0022179773077368736,-0.011641217395663261,0.008054854348301888,-0.00471071619540453,0.012725803069770336,0.020910806953907013,-0.0014678057050332427,-0.009103287011384964,-0.020795118063688278,-0.0112290745601058,0.02075173519551754,0.05278315767645836,-0.021474791690707207,-0.02786661498248577,-0.014302067458629608,0.012357044033706188,-0.018712714314460754,0.004974632058292627,-0.007975318469107151,-0.019291160628199577,-0.02743278257548809,0.005820608697831631,0.005159011576324701,0.01687614992260933,0.03415721282362938,-0.026261430233716965,-0.001597955939359963,-0.023224590346217155,-0.014461139217019081,0.019377926364541054,-0.017020761966705322,-0.01859702542424202,-0.015097429975867271,0.020274518057703972,-0.024034414440393448,-0.01211120467633009,0.008828525431454182,-0.0025397376157343388,0.019320081919431686,-0.010527709499001503,0.0029482648242264986,-0.0410696379840374,0.0106000155210495,-0.010093875229358673,-0.00740410340949893,0.017454596236348152,-0.003620707895606756,-0.0070787277072668076,-0.022125544026494026,-0.0209541916847229,0.009739577770233154,0.0005251201218925416,0.03936322033405304,0.04604426771402359,0.0015645145904272795,0.006764198187738657,-0.012248585000634193,0.010997696779668331,-0.02552391216158867,0.010672320611774921,-0.0001746634516166523,0.008250080049037933,-0.012436579912900925,0.008033162914216518,-0.006330363918095827,0.009081595577299595,0.005119243171066046,-0.007440256420522928,-0.03109144978225231,-0.037541117519140244,0.014721440151333809,-0.011648448184132576,0.02764969877898693,-0.0052638547495007515,-0.023470429703593254,0.0019088704138994217,0.035776861011981964,0.02439594268798828,-0.002839806256815791,-0.011373686604201794,0.0017082220874726772,-0.030397314578294754,-0.02163386531174183,0.012024437077343464,0.013976691290736198,-0.00294645712710917,-0.032971397042274475,0.0427471287548542,0.02422240935266018,0.022877521812915802,0.007686095777899027,-0.018249958753585815,0.021547097712755203,0.011323072016239166,0.01687614992260933,-0.002834383398294449,-0.016745999455451965,-0.027982305735349655,-0.03415721282362938,-0.0172810610383749,-0.00648220581933856,-0.002275821752846241,0.015198657289147377,-0.01965268887579441,-0.010072183795273304,-0.008372999727725983,0.041792694479227066,-0.006214674562215805,0.014222530648112297,0.01618201471865177,-0.00545546505600214,-0.02504669316112995,-0.017526900395751,-0.02699894830584526,-0.032942477613687515,-0.007129341829568148,-0.009623887948691845,-0.02856075018644333,-0.035516560077667236,-0.0005648882361128926,-0.023600580170750618,0.0026608495973050594,-0.001939600333571434,0.04187946021556854,-0.005647074896842241,0.0028705361764878035,0.0218652430921793,0.02010098472237587,0.005885683931410313,0.0012743879342451692,-0.011279689148068428,0.031901273876428604,-0.01078801043331623,-0.01663031056523323,-0.006106215994805098,-0.01684722676873207,-0.013137944974005222,-0.005292776972055435,-0.00599775742739439,0.015256502665579319,-0.011424300260841846,0.015936175361275673,-0.017902890220284462,0.00863330066204071,0.016095248982310295,-0.0016178400255739689,-0.011727984063327312,-0.01362239383161068,-0.00014822668163105845,0.01690507121384144,0.02532145567238331,-0.00799700990319252,0.021474791690707207,-0.011380916461348534,-0.033839065581560135,-0.00745471753180027,-0.01524204108864069,0.012516116723418236,0.01524204108864069,0.00409973319619894,-0.01360793225467205,-0.026102356612682343,-0.009327434934675694,-0.0024547784123569727,0.016717078164219856,-0.00724864611402154,0.01881394162774086,0.021474791690707207,-0.0080982381477952,0.007924704812467098,-0.021677248179912567,-0.03956567868590355,0.009602196514606476,-0.0036514378152787685,0.040982868522405624,-0.0047432538121938705,-0.030599771067500114,0.0285462886095047,-0.01580602489411831,-0.028633056208491325,-0.03282678499817848,0.0384087860584259,-0.006124292500317097,0.014468370005488396,0.013969460502266884,-0.035140570253133774,-0.021200031042099,-0.01490943506360054,0.006380978040397167,0.003505018772557378,-0.022848600521683693,0.018423492088913918,0.0018510258523747325,0.013304248452186584,0.006818427238613367,-0.025682983919978142,0.021677248179912567,-0.034880269318819046,-0.05662982165813446,-0.010650629177689552,0.004269651602953672,0.00019386965141166002,-0.02007206156849861,0.013181328773498535,0.02856075018644333,-0.010968774557113647,-0.020202212035655975,-0.02443932555615902,0.0024692395236343145,-0.014020075090229511,0.01468528714030981,-0.003537556156516075,0.0021547097712755203,-0.004714331589639187,0.03091791644692421,0.03071545995771885,-0.009725116193294525,-0.007931934669613838,0.012573961168527603,-0.00017918256344273686,-0.0007569502922706306,-0.008560994639992714,0.019956372678279877,-0.0015129967359825969,-0.025147922337055206,-0.019146548584103584,0.005628998391330242,0.005187933798879385,0.009667271748185158,0.015401113778352737,-0.022342460229992867,-0.05469202995300293,0.010650629177689552,0.0014316528104245663,-0.013694698922336102,0.009811882860958576,-0.008539303205907345,0.004435954615473747,-0.021778475493192673,-0.01232089102268219,0.014764823019504547,0.010462634265422821,0.025451606139540672,-0.025654060766100883,0.0224581491202116,0.01991298981010914,0.004414262715727091,0.0038213562220335007,-0.0014524407451972365,-0.021214492619037628,0.00917559303343296,0.013550087809562683,0.0010610860772430897,0.04187946021556854,0.003400175366550684,0.0008387460839003325,-0.03068653866648674,-0.000927320565097034,-0.042457904666662216,0.005918221548199654,0.01968161016702652,-0.009761269204318523,-0.013636854477226734,-0.026246968656778336,-0.023051057010889053,0.0013240980915725231,0.006279749795794487,-0.032508641481399536,-0.005289161577820778,0.014258683659136295,0.012226893566548824,-0.04523444548249245,0.021720631048083305,-0.02375965192914009,0.051568422466516495,-0.009132209233939648,0.004262420814484358,-0.007555945310741663,0.00415396224707365,0.011706292629241943,-0.0014244222547858953,-0.0012436580145731568,0.029500724747776985,0.007375181186944246,-0.011424300260841846,0.013550087809562683,0.010296331718564034,-0.0004772176034748554,-0.00865499209612608,-0.04260251671075821,-0.03346307575702667,0.0028849972877651453,0.03632638230919838,0.021286796778440475,-0.014208070002496243,0.003170604817569256,0.0005526866880245507,0.024569476023316383,-0.018929632380604744,-0.01600848138332367,0.021026497706770897,-0.0026265045162290335,0.00940697081387043,0.0320458859205246,0.0380617193877697,0.02639157883822918,-0.0027241171337664127,0.00038728737854398787,-0.005802532192319632,-0.01135199423879385,0.014114072546362877,-0.00928405113518238,-0.005159011576324701,0.033636610954999924,-0.015863869339227676,0.006919655483216047,-0.0008708317182026803,0.017526900395751,0.014851590618491173,0.0021004804875701666,-0.015386652201414108,0.03765680640935898,0.0018202959327027202,0.012566730380058289,0.009059904143214226,-0.0075125619769096375,0.007852398790419102,-0.008372999727725983,-0.0060845245607197285,-0.02529253251850605,-0.016109708696603775,-0.025842055678367615,0.024714088067412376,-0.010014339350163937,-0.02422240935266018,-0.017194295302033424,0.011706292629241943,0.004428723827004433,-0.00007320952136069536,-0.02790999971330166,0.025379300117492676,-0.02442486397922039,-0.015936175361275673,-0.03109144978225231,-0.0008382941596210003,0.022819677367806435,-0.0015889176866039634,-0.029876714572310448,0.010759088210761547,0.024959927424788475,-0.03583470359444618,-0.0064207459799945354,-0.01244381070137024,-0.03595039248466492,-0.01813426986336708,0.007064266595989466,-0.02548052743077278,-0.009768499992787838,0.012212431989610195,-0.008510380983352661,0.013542857021093369,-0.021012036129832268,-0.006044756155461073,0.003542979247868061,-0.003839432494714856,0.022197850048542023,-0.020260056480765343,-0.004851712379604578,0.004110578913241625,-0.022400304675102234,0.03300032019615173,0.033173855394124985,0.0008663126500323415,-0.02640604041516781,0.029934559017419815,0.006460513919591904,0.02485869824886322,0.0019377927528694272,0.011084463447332382,-0.014880512841045856,-0.006612355820834637,-0.03184342756867409,0.006286980584263802,-0.002131210407242179,-0.017772739753127098,-0.022183388471603394,0.008466997183859348,-0.03262433037161827,-0.0022432843688875437,-0.0012581191258504987,0.018221035599708557,0.017873968929052353,0.027519548311829567,0.026651879772543907,-0.003591785440221429,-0.0209541916847229,-0.014981740154325962,0.0028596902266144753,0.014381603337824345,0.013239173218607903,-0.024338098242878914,-0.011279689148068428,0.027794310823082924,0.04514767602086067,0.022631682455539703,-0.006211059633642435,-0.014490061439573765,-0.003864739555865526,-0.019406849518418312,-0.0005879356758669019,-0.031264983117580414,0.009891419671475887,-0.015372191555798054,-0.01557464711368084,-0.007335413247346878,0.018047502264380455,0.010780779644846916,0.0006751544424332678,-0.01070847362279892,-0.011793059296905994,0.0026644649915397167,0.01920439302921295,0.039045076817274094,0.0040201968513429165,-0.04300742968916893,0.005979681387543678,0.020476972684264183,-0.024902082979679108,-0.013824849389493465,0.010238486342132092,-0.012190740555524826,-0.028473984450101852,-0.034041523933410645,-0.007367950398474932,-0.002839806256815791,-0.012277507223188877,0.011858134530484676,-0.038582321256399155,-0.024063335731625557,0.01275472529232502,0.004479337949305773,-0.026478346437215805,0.004707100801169872,0.021561559289693832,0.016066325828433037,0.037917107343673706,-0.010093875229358673,-0.0008333231671713293,0.009255128912627697,0.002552391029894352,0.03326062113046646,-0.011004927568137646,0.008879140019416809,0.046969782561063766,-0.019392387941479683,0.01016618125140667,0.0007809015223756433,0.021069880574941635,-0.043354496359825134,-0.014099610969424248,0.00507585983723402,-0.013311479240655899,0.013434398919343948,0.0023698192089796066,-0.02185078151524067,0.021792937070131302,0.010238486342132092,0.02011544443666935,-0.01726660132408142,-0.0027855769731104374,-0.00022098429326433688,0.025654060766100883,-0.05084536597132683,-0.0010872968705371022,0.00886467844247818,0.02052035741508007,-0.0021745937410742044,-0.008958675898611546,-0.0038358173333108425,-0.0019829836674034595,0.02355719543993473,-0.008647761307656765,0.0006019449210725725,-0.033607687801122665,-0.0027855769731104374,-0.015936175361275673,0.00786686036735773,-0.0229498278349638,0.19609305262565613,-0.014518983662128448,-0.010209564119577408,0.005397620145231485,-0.01167737040668726,0.017873968929052353,0.006341209635138512,0.019623765721917152,0.005206010304391384,0.009009289555251598,0.009038211777806282,-0.007772862445563078,-0.03392583504319191,0.004830020479857922,0.007118496112525463,0.00064080924494192,-0.027519548311829567,-0.0362396165728569,-0.011583372950553894,0.009334665723145008,0.00994203332811594,0.004486568737775087,-0.044395700097084045,-0.021764015778899193,0.04514767602086067,-0.015285424888134003,-0.0032646022737026215,0.008163313381373882,0.005954374093562365,0.023889802396297455,-0.005209625698626041,-0.026319274678826332,0.02050589583814144,-0.001498535624705255,-0.00047857334720902145,0.003933430183678865,0.018495798110961914,-0.01362239383161068,0.0018383723217993975,0.020419128239154816,0.022877521812915802,-0.018322262912988663,0.038148485124111176,-0.01166290882974863,0.0007036247989162803,-0.006456898991018534,0.0021655557211488485,0.05917498469352722,-0.03563224896788597,0.011192921549081802,-0.03739650547504425,0.020824041217565536,-0.00874175876379013,0.0028831895906478167,-0.01945023238658905,-0.0035014033783227205,-0.008821295574307442,0.001633204985409975,0.001775104901753366,0.006764198187738657,-0.005925451871007681,0.001074643456377089,-0.01395499985665083,0.0042371139861643314,-0.0172810610383749,0.05229147896170616,-0.027346014976501465,-0.0035863625817000866,0.03181450814008713,-0.027374936267733574,-0.003353176638484001,-0.01406345795840025,-0.027924461290240288,-0.002669887850061059,-0.00896590668708086,-0.027779849246144295,0.010079414583742619,0.025899900123476982,0.007367950398474932,0.017526900395751,-0.002964533632621169,0.003806894877925515,-0.01112061645835638,-0.004989093169569969,0.01093262154608965,-0.01707860641181469,0.025654060766100883,-0.011735214851796627,0.001627782010473311,-0.016572466120123863,0.010122797451913357,0.003505018772557378,0.003260986879467964,0.007801784668117762,0.003642399562522769,-0.019609306007623672,-0.01145322248339653,-0.0367312952876091,-0.04404862970113754,-0.002131210407242179,-0.036210693418979645,0.04543690010905266,0.021879704669117928,-0.0276352372020483,-0.02640604041516781,-0.01534326933324337,-0.006113446783274412,0.011308611370623112,0.011445991694927216,-0.04020196944475174,-0.030599771067500114,-0.004070810973644257,0.0028596902266144753,0.011612295173108578,0.035516560077667236,0.01470697857439518,-0.023846419528126717,0.018033040687441826,-0.006966653745621443,0.0011577949626371264,-0.001154179684817791,-0.009370818734169006,-0.01275472529232502,0.019999755546450615,-0.03305816650390625,0.0013132522581145167,-0.007830707356333733,-0.02358611859381199,0.004855327773839235,-0.030079171061515808,0.046131033450365067,0.00599414249882102,-0.006919655483216047,-0.02597220614552498,0.00896590668708086,-0.0075993286445736885,0.04196622595191002,-0.030108092352747917,-0.004555258899927139,0.005860376637428999,0.014511753804981709,-0.019103165715932846,0.02335474081337452,-0.004584181122481823,0.014967279508709908,-0.01395499985665083,0.0025740829296410084,-0.0040201968513429165,0.013058409094810486,0.0044721076264977455,-0.017454596236348152,-0.007946396246552467,-0.014417756348848343,0.021474791690707207,-0.013579010032117367,-0.019536999985575676,-0.017570285126566887,-0.06461237370967865,-0.009594965726137161,0.004746869206428528,-0.043759409338235855,0.0065075126476585865,-0.0016747807385399938,-0.007751171011477709,-0.023933185264468193,-0.026290351524949074,-0.18174760043621063,0.002004675567150116,0.0036152848042547703,-0.0007248645997606218,0.038177408277988434,-0.018033040687441826,0.05211794748902321,-0.0035881702788174152,-0.018033040687441826,0.0139405382797122,0.0207806583493948,-0.008163313381373882,0.01468528714030981,-0.015401113778352737,-0.001700087683275342,-0.013933307491242886,0.0050252461805939674,0.014453909359872341,0.03259540721774101,0.014367141760885715,0.034475356340408325,-0.019189931452274323,0.04144562408328056,-0.008618839085102081,-0.002669887850061059,0.018495798110961914,0.0007045286474749446,-0.020636046305298805,-0.01642785407602787,-0.05798916891217232,-0.017121989279985428,-0.007960856892168522,0.021720631048083305,-0.006767813116312027,0.00799700990319252,0.019551461562514305,-0.010643398389220238,-0.021359102800488472,0.027042331174016,0.025133460760116577,0.010296331718564034,0.02634819597005844,-0.01114230789244175,0.006160445511341095,0.01621093787252903,-0.004945709835737944,0.0012608305551111698,0.00422626780346036,-0.011699061840772629,-0.005798916798084974,0.03415721282362938,-0.008054854348301888,-0.016095248982310295,0.019088704138994217,0.0038249713834375143,-0.016080787405371666,0.023036595433950424,0.007910243235528469,0.005769994575530291,-0.00981911364942789,0.004768560640513897,0.0063556707464158535,0.0037779726553708315,-0.024338098242878914,-0.0057519180700182915,-0.009182823821902275,-0.015632491558790207,-0.005672382190823555,-0.025437144562602043,-0.019594844430685043,-0.021489253267645836,0.015545724891126156,0.025234688073396683,-0.019710533320903778,0.045089833438396454,0.025639601051807404,-0.007527023088186979,0.011301380582153797,0.009667271748185158,0.017367828637361526,-0.021214492619037628,0.02225569449365139,-0.014670826494693756,0.029963480308651924,0.0064713601022958755,-0.00211313390173018,-0.01308733131736517,0.006944962311536074,0.006720814388245344,-0.006905193906277418,-0.02895120158791542,-0.019536999985575676,0.0016729730414226651,-0.014547906816005707,-0.014923895709216595,0.02247261069715023,0.004407032392919064,-0.020158829167485237,0.013340401463210583,-0.00453356746584177,-0.011879825964570045,-0.001725394744426012,0.007765632122755051,-0.029992403462529182,0.017859507352113724,0.0036912057548761368,0.011930440552532673,0.0022848600056022406,0.011308611370623112,-0.014352681115269661,-0.03985489904880524,0.011648448184132576,0.03898723050951958,0.02851736731827259,-0.0016169361770153046,0.001682915142737329,0.018756097182631493,0.0020607123151421547,0.030513005331158638,0.006174906622618437,0.05662982165813446,0.013217481784522533,0.028893357142806053,0.030657615512609482,-0.008423613384366035,-0.017367828637361526,-0.09127870947122574,-0.02727370895445347,-0.0077150180004537106,0.026203583925962448,-0.042400062084198,-0.021055418998003006,-0.03354984521865845,-0.0051951645873487,-0.008177774026989937,0.04193730279803276,-0.013976691290736198,-0.013810387812554836,-0.03696267306804657,0.027360476553440094,-0.0016521852230653167,-0.03768572956323624,-0.03302924335002899,-0.0267964918166399,-0.014894973486661911,0.03892938792705536,-0.0030151475220918655,-0.03444643318653107,-0.006803966127336025,-0.01814872957766056,-0.03302924335002899,-0.023007672280073166,0.006189367733895779,0.03193019703030586,0.011821981519460678,0.00798978004604578,-0.02030343934893608,-0.0037888186052441597,0.01797519624233246,-0.016355548053979874,0.0035610555205494165,-0.00039858516538515687,0.015213118866086006,-0.012942720204591751,0.02981887012720108,-0.014894973486661911,0.014468370005488396,0.00267711840569973,0.03169881924986839,-0.018090885132551193,-0.019840683788061142,-0.022212309762835503,-0.029789946973323822,0.06027403101325035,0.01016618125140667,0.009985417127609253,-0.03132282942533493,-0.006829272955656052,-0.005253009032458067,-0.026319274678826332,0.009696193970739841,-0.01817765273153782,-0.004855327773839235,0.023716269060969353,-0.00609898567199707,-0.009688963182270527,-0.009052673354744911,0.0058676074258983135,0.00919005461037159,0.02960195206105709,-0.014302067458629608,-0.025986667722463608,-0.014302067458629608,0.026868797838687897,0.004450415726751089,-0.02921150252223015,-0.03647099435329437,0.02682541310787201,0.0026861566584557295,0.01968161016702652,0.005791686475276947,0.003148913150653243,0.029703181236982346,0.0026463884860277176,0.0332316979765892,0.007331797853112221,-0.026290351524949074,-0.016745999455451965,-0.0008306116797029972,-0.04436677694320679,-0.011973823420703411,0.039247531443834305,0.016529083251953125,-0.003627938451245427,0.017121989279985428,-0.03716512769460678,0.01900193654000759,0.03441751375794411,-0.01861148700118065,0.027823232114315033,-0.01112061645835638,0.005889298859983683,0.015198657289147377,0.005885683931410313,0.0011885248823091388,-0.031872350722551346,-0.01574818044900894,-0.005921836476773024,-0.08057747036218643,0.026651879772543907,0.012971642427146435,-0.00864053051918745,-0.02510453760623932,0.0046239495277404785,-0.013441628776490688,-0.030165936797857285,-0.008466997183859348,0.004999938886612654,-0.031236061826348305,0.016529083251953125,-0.011836443096399307,-0.02874874509871006,0.014670826494693756,-0.01114230789244175,0.03378122299909592,-0.02227015420794487,0.027288170531392097,0.0462467260658741,0.005321699194610119,0.017555823549628258,0.023195667192339897,0.00399850495159626,-0.0027403859421610832,-0.0405779592692852,-0.01813426986336708,-0.0022920905612409115,0.01639893278479576,0.01942131109535694,0.04014412313699722,0.004038273356854916,-0.00399850495159626,0.008734527975320816,0.023875340819358826,0.009240668267011642,-0.005795301869511604,0.013824849389493465,0.00211313390173018,-0.008597147651016712,-0.0036405918654054403,-0.01774381846189499,0.015545724891126156,-0.008662222884595394,0.0005441003595478833,0.0059001450426876545,-0.03592146933078766,0.015849409624934196,0.013882693834602833,-0.008669452741742134,0.016268782317638397,0.0012978872982785106,0.009999877773225307,-0.014511753804981709,-0.029327191412448883,-0.00896590668708086,-0.007519792765378952,-0.005184318404644728,0.012335351668298244,-0.016471238806843758,0.02896566316485405,0.038379862904548645,-0.006644893437623978,-0.029963480308651924,-0.010744626633822918,-0.013022256083786488,-0.04847373813390732,-0.012957180850207806,0.009211746044456959,-0.03759896382689476,-0.02030343934893608,0.00561092235147953,0.001141526154242456,0.012046129442751408,-0.009652810171246529,0.003163374261930585,-0.0014596713008359075,0.015863869339227676,-0.01796073466539383,0.027765387669205666,0.006239981856197119,-0.021243413910269737,0.002234246116131544,0.037309739738702774,-0.013962230645120144,-0.0026463884860277176,-0.008669452741742134,-0.013289786875247955,-0.008156082592904568,-0.028387216851115227,-0.05512586236000061,0.008770680986344814,-0.01286318339407444,0.0132753262296319,0.010997696779668331,0.00453356746584177,0.003096491564065218,0.03245079889893532,0.034880269318819046,0.007252261508256197,0.017121989279985428,0.009811882860958576,0.011380916461348534,0.025466065853834152,-0.006673815660178661,0.03268217667937279,-0.05581999942660332,-0.001071931910701096,-0.016341088339686394,0.008611608296632767,-0.007169109769165516,-0.021286796778440475,-0.017989657819271088,0.028604134917259216,-0.014316528104245663,0.017801662907004356,0.006767813116312027,0.008213927038013935,-0.027722004801034927,0.029515186324715614,-0.008604378439486027,-0.02076619677245617,0.020896347239613533,-0.00995649490505457,0.008777911774814129,-0.0056000761687755585,-0.02769308164715767,-0.04344126209616661,0.023846419528126717,-0.02527807280421257,0.03774357587099075,0.003340523224323988,-0.002787384670227766,-0.015198657289147377,-0.010874777100980282,0.013217481784522533,-0.009291281923651695,0.017237678170204163,-0.018264418467879295,0.10047599673271179,0.023065516725182533,0.004725177306681871,-0.0026337350718677044,-0.003044069977477193,0.02467070333659649,-0.005618152674287558,-0.012284738011658192,0.00367493717931211,-0.039449989795684814,-0.01490943506360054,0.015155274420976639,0.00013534723257180303,-0.021662786602973938,-0.01112061645835638,0.0015527649084106088,-0.012783647514879704,0.03268217667937279,-0.004041888285428286,-0.006113446783274412,0.04173484817147255,-0.009305743500590324,0.02617466263473034,-0.007067881990224123,-0.023600580170750618,-0.015907254070043564,0.0315542072057724,0.007946396246552467,-0.0224581491202116,-0.01991298981010914,0.012704110704362392,0.011062772013247013,-0.03699159622192383,-0.026651879772543907,-0.02033236250281334,0.0007872282876633108,-0.004121424630284309,-0.00874175876379013,-0.0024873160291463137,0.03476458042860031,-0.011026619002223015,-0.03702051565051079,-0.020607123151421547,-0.024931004270911217,0.0023427046835422516,-0.018249958753585815,-0.03265325352549553,0.016153093427419662,-0.03800387308001518],[-0.013613251969218254,-0.015606150031089783,-0.014653662219643593,-0.01019894890487194,-0.023958737030625343,0.018976492807269096,-0.0006759001407772303,-0.02431042492389679,-0.01567941904067993,-0.028603948652744293,0.04144055396318436,0.025512024760246277,-0.024735381826758385,-0.010426080785691738,0.001572521054185927,-0.028735831379890442,0.012675417587161064,-0.004044410772621632,0.03232597932219505,0.00010858592577278614,0.009004674851894379,-0.0050005619414150715,-0.03162260353565216,0.006850586738437414,-0.008682294748723507,0.030948534607887268,0.027841957286000252,-0.021174540743231773,0.005539084319025278,-0.004410752095282078,0.03856843709945679,-0.002851968863978982,-0.03297073766589165,-0.002157751703634858,-0.03660484775900841,-0.0016293040243908763,0.006125230807811022,-0.010118353180587292,0.012045309878885746,-0.01869807206094265,0.0022896346636116505,0.008726255968213081,0.00255889561958611,-0.011034207418560982,0.00564532307907939,0.018903223797678947,-0.005517103709280491,-0.047096870839595795,0.006645435467362404,-0.0014278162270784378,0.012265115045011044,0.004110352136194706,-0.033967189490795135,0.03065546043217182,0.011056187562644482,0.005011552479118109,0.018185194581747055,0.01689567230641842,0.0024270126596093178,0.019108375534415245,0.007169303949922323,-0.010367466136813164,0.006945835892111063,-0.0012647941475734115,-0.00793495774269104,-0.0040151034481823444,-0.01210392452776432,0.02419319562613964,-0.020353935658931732,-0.006696723401546478,-0.0053229425102472305,0.015107925049960613,-0.001765766297467053,-0.00929042138159275,0.03229667246341705,-0.04469366744160652,-0.01871272549033165,-0.0027603835333138704,-0.0035223739687353373,-0.015225154347717762,0.009173192083835602,-0.014470490626990795,-0.013862363994121552,0.031153684481978416,-0.013459388166666031,0.003421630011871457,0.01978244259953499,0.01787746697664261,-0.009839934296905994,-0.009700723923742771,0.018888570368289948,-0.005495123099535704,0.007132669910788536,0.009869241155683994,0.0053156157955527306,0.002152256667613983,-0.018991146236658096,0.019811751320958138,-0.010865690186619759,0.02801780216395855,-0.011913427151739597,0.012785320170223713,-0.007154650520533323,-0.01762835495173931,-0.000010145943633688148,-0.012023329734802246,-0.001422321074642241,-0.0093929972499609,0.0034069763496518135,0.00010228942846879363,-0.009773992002010345,0.017349936068058014,-0.007348811253905296,-0.01783350668847561,-0.017071515321731567,0.018361037597060204,0.019797097891569138,0.0017318796599283814,0.012961164116859436,-0.04466436058282852,0.021013351157307625,-0.007392772473394871,0.02439834736287594,0.012961164116859436,-0.0021742370445281267,-0.013063739985227585,-0.000712076376657933,0.011488471180200577,0.007854362949728966,-0.013789095915853977,0.014221378602087498,0.02510172314941883,-0.008096148259937763,0.02530687488615513,-0.0011493966449052095,0.03373273089528084,-0.01866876520216465,-0.014060188084840775,-0.01491010095924139,0.00037183667882345617,-0.026655010879039764,0.05023275315761566,-0.04378513991832733,0.015591496601700783,-0.03513948246836662,-0.008286645635962486,0.031036455184221268,0.02614213339984417,0.04138194024562836,-0.010125679895281792,-0.002020373707637191,0.0018106431234627962,0.0019196297507733107,0.032120827585458755,-0.0075246552005410194,0.008176743052899837,-0.024032006040215492,0.010689846239984035,0.03171052411198616,0.0030516250990331173,0.023914776742458344,0.035901471972465515,-0.0012190014822408557,0.0019013126147910953,-0.007759113796055317,0.02328466810286045,0.024999147281050682,-0.017320629209280014,-0.0038465862162411213,-0.017144784331321716,0.005480469670146704,0.020998697727918625,-0.052635952830314636,0.04076648876070976,-0.0005920995026826859,0.02977624163031578,0.02051512710750103,0.007986245676875114,-0.014800198376178741,0.019943634048104286,-0.006209489423781633,-0.001511158887296915,0.007345147896558046,0.04302315041422844,-0.01207461766898632,-0.017496472224593163,0.023665664717555046,-0.013664539903402328,0.02618609368801117,0.0035535129718482494,0.022200297564268112,-0.0022584956604987383,0.006304738111793995,0.03443610668182373,-0.5514466166496277,-0.03663415461778641,0.006106913555413485,-0.010426080785691738,0.021306423470377922,-0.03639969602227211,0.008110801689326763,0.05404270440340042,0.0008966209134086967,0.03798229247331619,-0.002560727298259735,-0.0033337080385535955,-0.003982132766395807,-0.007136333268135786,-0.00605562562122941,-0.011532431468367577,0.014851486310362816,-0.006802962627261877,-0.005363240372389555,0.005224030464887619,-0.02974693290889263,-0.01532773021608591,-0.005700274370610714,-0.004081044811755419,0.010887670330703259,-0.0053156157955527306,-0.00024750950979068875,-0.030421001836657524,0.022903673350811005,-0.025512024760246277,-0.031095070764422417,-0.005059176590293646,-0.008535757660865784,0.009466265328228474,0.051668811589479446,-0.01786281354725361,-0.02236148715019226,0.003857576521113515,0.02990812435746193,0.038714975118637085,-0.016382794827222824,-0.0048100645653903484,0.010638558305799961,-0.009092597290873528,0.033000048249959946,-0.018214501440525055,-0.002150424988940358,0.010667866095900536,0.014096822589635849,-0.006931181997060776,-0.010807075537741184,-0.00928309466689825,0.027387693524360657,0.0007111605373211205,-0.017393896356225014,-0.0029289007652550936,0.047946780920028687,-0.009121904149651527,-0.004571942612528801,-0.013312852010130882,-0.024530230090022087,0.004850361961871386,-0.01545961294323206,-0.020940082147717476,-0.022200297564268112,0.022845059633255005,-0.0059200795367360115,0.012756012380123138,0.020075516775250435,-0.0070410845801234245,0.012887896038591862,0.028647908940911293,0.004319166764616966,-0.048064012080430984,-0.011517778038978577,0.053749632090330124,0.02810572274029255,0.01978244259953499,0.013737807981669903,0.029190095141530037,0.005084820557385683,-0.0017978211399167776,-0.011781544424593449,-0.025746483355760574,0.019943634048104286,-0.04284730553627014,-0.04396098479628563,0.015107925049960613,0.04129401966929436,-0.01208927109837532,0.023592395707964897,0.023914776742458344,-0.021057311445474625,-0.027299772948026657,-0.006004338152706623,-0.020881468430161476,0.011503124609589577,0.008132782764732838,0.03182775527238846,-0.020998697727918625,-0.026684317737817764,-0.012770666740834713,0.023006249219179153,0.009246460162103176,0.03519809618592262,0.006125230807811022,-0.002051512710750103,-0.007308513857424259,0.007352474611252546,-0.006429294124245644,0.008389221504330635,-0.014192071743309498,-0.028516026213765144,-0.014639007858932018,-0.02165811136364937,-0.028340181335806847,0.04780024662613869,-0.00039473301148973405,-0.0019654224161058664,-0.003068110439926386,0.004352137446403503,0.003681732574477792,0.019298871979117393,0.003342866664752364,0.00929774809628725,0.018331730738282204,-0.003212815383449197,0.027431655675172806,0.012902549467980862,-0.021277116611599922,0.008674968034029007,-0.011781544424593449,0.04316968843340874,-0.022156337276101112,0.016294872388243675,0.0036487618926912546,0.03229667246341705,-0.019885018467903137,0.011312627233564854,-0.01978244259953499,-0.00789832416921854,-0.00245815166272223,0.01768697053194046,-0.026523128151893616,-0.02510172314941883,-0.01872737891972065,-0.034025803208351135,-0.026728279888629913,-0.00104224169626832,-0.005997010972350836,-0.006744347978383303,0.014719603583216667,0.004359464626759291,0.009568841196596622,-0.03062615357339382,-0.029204748570919037,-0.003883220488205552,-0.03361549973487854,0.0019892347045242786,0.0020954736974090338,0.0067150406539440155,0.012909876182675362,-0.03467056527733803,-0.003458264283835888,-0.010631231591105461,-0.01534238364547491,-0.02507241629064083,-0.004612240009009838,-0.007956938818097115,-0.013180969282984734,-0.0013087551342323422,-0.01767231710255146,-0.021145233884453773,-0.009935182519257069,0.0026816201861947775,0.014008901081979275,-0.005359577015042305,-0.03522740304470062,-0.016353486105799675,0.005476806312799454,0.02048581838607788,-0.007978918962180614,-0.027592845261096954,-0.0017923259874805808,0.022786444053053856,0.02433973178267479,0.026537781581282616,0.048210546374320984,-0.004212928004562855,0.015371691435575485,0.002883107867091894,0.010477367788553238,-0.01956263929605484,0.025629254058003426,0.01211125124245882,0.0116643151268363,-0.011810851283371449,-0.013217602856457233,-0.008220704272389412,-0.001958095468580723,0.025512024760246277,-0.01569407247006893,0.007136333268135786,-0.01588456891477108,0.015488920733332634,-0.027563538402318954,-0.01021360233426094,-0.0116936219856143,-0.016558637842535973,0.025013800710439682,0.0233579371124506,-0.007088708691298962,-0.022991595789790154,0.014316627755761147,-0.004586596041917801,0.03229667246341705,-0.02609817124903202,0.019386794418096542,-0.01767231710255146,-0.00719494791701436,-0.00772247975692153,-0.0279738400131464,0.021159887313842773,0.02416388876736164,-0.005495123099535704,0.023607049137353897,0.014038207940757275,0.012880568392574787,-0.013063739985227585,-0.03513948246836662,0.0005879781674593687,0.011591046117246151,0.029278015717864037,-0.000058786368754226714,0.0012831112835556269,0.002155920024961233,0.02603955753147602,-0.008506450802087784,0.01219917368143797,-0.01126133929938078,0.009839934296905994,-0.005224030464887619,-0.01781885325908661,-0.013796422630548477,0.026684317737817764,-0.03985796123743057,0.010462714359164238,0.015195847488939762,-0.008565065450966358,-0.04076648876070976,-0.020353935658931732,-0.020119477063417435,0.016265565529465675,-0.01114411000162363,0.03417234122753143,-0.0038685668259859085,0.019049759954214096,0.02050047367811203,0.010785095393657684,0.014595047570765018,0.0015404662117362022,0.011415202170610428,0.015371691435575485,-0.007978918962180614,0.01667586714029312,-0.01582595519721508,-0.03663415461778641,-0.025893021374940872,0.0075100017711520195,0.00034687964944168925,0.0029746934305876493,-0.017511125653982162,-0.01663190685212612,0.006000674329698086,-0.011092822067439556,0.008000899106264114,-0.00043869399814866483,0.029102172702550888,-0.00019931269343942404,0.008674968034029007,-0.012660764157772064,-0.0185515359044075,0.009752011857926846,0.03247251361608505,-0.02143830806016922,-0.029380591586232185,0.0007899239426478744,-0.002311615040525794,-0.02710927464067936,0.021687420085072517,-0.00604097219184041,-0.0037238618824630976,-0.028178991749882698,-0.00925378780812025,-0.018361037597060204,0.017950735986232758,0.017305973917245865,-0.02904355712234974,-0.009143885225057602,-0.011034207418560982,0.00510313780978322,0.020060863345861435,-0.014301974326372147,-0.008711601607501507,0.03279489651322365,0.003813615534454584,-0.03426026180386543,-0.024515576660633087,0.01966521330177784,0.009883894585072994,0.016382794827222824,-0.011649660766124725,-0.008513777516782284,-0.0468037948012352,0.009173192083835602,-0.026757586747407913,0.0001737832644721493,-0.025497371330857277,0.002351912669837475,-0.007825055159628391,-0.006106913555413485,-0.020236706361174583,0.00789832416921854,-0.0005788196576759219,0.02148226834833622,0.0648864135146141,0.0003274177433922887,0.009524879977107048,0.0027329078875482082,-0.0013774442486464977,-0.010550636798143387,0.011884119361639023,0.0042056008242070675,0.0014800198841840029,-0.003097417764365673,0.017100824043154716,-0.006737021263688803,0.005971367005258799,0.003941834904253483,0.007172967307269573,-0.008418528363108635,-0.014587719924747944,0.0233139768242836,-0.002018542028963566,0.005180069245398045,-0.024119926616549492,0.009224480018019676,0.03373273089528084,0.03569632023572922,0.019137682393193245,-0.009605475701391697,0.012770666740834713,0.0019928980618715286,-0.033087968826293945,-0.04513327777385712,0.025980941951274872,0.004429069347679615,0.0062534501776099205,-0.034084416925907135,0.04176293686032295,0.030127929523587227,0.0053156157955527306,0.007854362949728966,-0.007326831109821796,-0.006319391541182995,-0.008286645635962486,0.019049759954214096,0.021013351157307625,-0.013877017423510551,-0.022815750911831856,-0.023856161162257195,-0.008264665491878986,0.012946510687470436,0.004359464626759291,0.003386827651411295,0.008074168115854263,-0.012770666740834713,-0.02322605438530445,0.02255198545753956,-0.019855711609125137,-0.007066728547215462,0.00010251839557895437,0.003643266623839736,-0.042407698929309845,-0.03458264097571373,-0.03326381370425224,-0.021833956241607666,-0.0012336551444604993,-0.006290084216743708,-0.03147606551647186,-0.03071407601237297,-0.010440734215080738,-0.05111197382211685,0.009876567870378494,-0.0016989089781418443,0.025365488603711128,-0.009466265328228474,-0.012851261533796787,0.014573066495358944,0.022156337276101112,-0.021277116611599922,0.0077004991471767426,0.010294197127223015,0.023152785375714302,0.011100148782134056,-0.011510451324284077,-0.014470490626990795,-0.003934508189558983,-0.001263878308236599,0.012499573640525341,-0.008301299065351486,0.04595388472080231,0.015063964761793613,0.008118128404021263,-0.017291320487856865,0.02324070781469345,-0.021877916529774666,-0.027534229680895805,0.012440958991646767,0.018888570368289948,0.0008673135889694095,0.018185194581747055,0.027680767700076103,-0.032150134444236755,0.031182993203401566,-0.013312852010130882,-0.028662562370300293,-0.024750035256147385,-0.020339282229542732,0.030098620802164078,0.024046659469604492,-0.006546523422002792,0.0062461234629154205,-0.023870814591646194,0.011070841923356056,-0.011920753866434097,0.002489290898665786,0.00604829890653491,0.01773093082010746,0.032091520726680756,0.00563066964969039,-0.006341372150927782,-0.008154762908816338,-0.04003380239009857,-0.009026655927300453,-0.0018958174623548985,0.023782894015312195,-0.02054443396627903,0.0031560324132442474,0.02521895244717598,-0.014148110523819923,-0.005198386497795582,-0.02716788835823536,0.043550681322813034,-0.004575605969876051,0.0037586642429232597,-0.00127395277377218,-0.036868613213300705,-0.007238909136503935,-0.014221378602087498,-0.016309525817632675,0.0006864324677735567,-0.03900804743170738,0.014030881226062775,0.007971592247486115,0.0018655942985787988,0.008499124087393284,-0.013239583931863308,0.0117082754150033,-0.03660484775900841,-0.04454713314771652,0.004264215473085642,0.01207461766898632,0.032208748161792755,-0.01969452202320099,0.024544883519411087,-0.0018637626199051738,-0.029204748570919037,0.0033813323825597763,-0.017203399911522865,-0.0018811638001352549,-0.02806176245212555,0.026508474722504616,0.014294646680355072,0.011613027192652225,0.016265565529465675,0.033146582543849945,0.036018699407577515,0.008902099914848804,0.017056861892342567,0.03956488519906998,-0.01259482279419899,-0.020353935658931732,-0.0010019441833719611,0.01076311431825161,0.012953837402164936,-0.008799524046480656,-0.005293635185807943,0.005355913192033768,0.025731829926371574,0.014133457094430923,0.021130580455064774,-0.03346896544098854,-0.051756732165813446,0.0001479103957535699,0.02442765422165394,-0.02347516641020775,0.01679309643805027,-0.03384995833039284,0.005084820557385683,-0.03238459303975105,0.0005806513363495469,0.012660764157772064,0.0279298797249794,0.02707996778190136,-0.01948937028646469,0.024090619757771492,-0.002699937205761671,0.009649435989558697,0.004436396062374115,-0.023856161162257195,-0.011737583205103874,0.002881276188418269,0.004773430526256561,-0.010960939340293407,0.04856223613023758,-0.0014507125597447157,0.0046928352676332,-0.03258974477648735,-0.00833060685545206,-0.04460574686527252,-0.0003294784401077777,-0.0028940981719642878,-0.010147660970687866,-0.005300962366163731,-0.013686520047485828,-0.03179844468832016,-0.0014278162270784378,-0.00024888329789973795,0.01582595519721508,-0.03282420337200165,0.008997348137199879,0.0070410845801234245,-0.023167438805103302,0.028384143486618996,-0.01764300838112831,0.029307324439287186,-0.007641884498298168,0.009063289500772953,-0.006147210951894522,0.007619904354214668,-0.0007207769667729735,0.01966521330177784,0.012147885747253895,0.02905821055173874,0.024955186992883682,0.020192746073007584,0.003386827651411295,-0.007249899208545685,0.016529330983757973,-0.02788591757416725,-0.022859713062644005,-0.033205196261405945,0.02319674752652645,0.03080199658870697,0.029541783034801483,-0.012250461615622044,0.009356362745165825,-0.024559536948800087,0.017335282638669014,-0.009041309356689453,-0.019386794418096542,0.03625315800309181,-0.015606150031089783,-0.008022880181670189,0.024530230090022087,0.028633255511522293,0.019093722105026245,-0.010982919484376907,0.009180518798530102,0.004099362064152956,-0.010821728967130184,0.014690295793116093,0.013935632072389126,0.009949835948646069,0.036956533789634705,-0.0374547578394413,0.005311952438205481,0.00677365530282259,0.01219184696674347,-0.0116936219856143,0.02977624163031578,-0.012301749549806118,0.04481089860200882,-0.029190095141530037,0.0021485930774360895,0.016250910237431526,-0.01260947622358799,0.019137682393193245,-0.00846981629729271,-0.007139996625483036,-0.026376591995358467,-0.007433069869875908,-0.036868613213300705,0.03537394106388092,0.008235357701778412,-0.012536208145320415,-0.03188636898994446,0.013224929571151733,-0.006447611376643181,-0.014682969078421593,-0.032120827585458755,0.01567941904067993,-0.045338429510593414,-0.024588843807578087,-0.014441183768212795,-0.004092034883797169,0.02157019078731537,0.008411201648414135,-0.04551427438855171,-0.0008888361626304686,0.039799343794584274,-0.02703600563108921,0.012235807254910469,-0.0042056008242070675,-0.011334607377648354,-0.044283367693424225,0.0010733806993812323,-0.03894943371415138,-0.020222052931785583,0.005953050218522549,-0.01586991548538208,-0.0021046320907771587,-0.02719719707965851,-0.008894773200154305,0.021716726943850517,-0.0022218613885343075,0.02231752686202526,-0.0008714349241927266,-0.009092597290873528,0.004275206010788679,-0.029585743322968483,0.024662112817168236,0.024061312898993492,0.01353265717625618,-0.020324628800153732,0.020016901195049286,0.0050005619414150715,0.029409898445010185,-0.004637883976101875,0.006286420859396458,-0.02039789780974388,-0.04390237107872963,-0.021804649382829666,0.023182092234492302,-0.01356196403503418,-0.00417263014242053,0.0010587270371615887,0.005751562304794788,-0.03338104113936424,-0.003146873787045479,-0.022918326780200005,0.006073942873626947,-0.009620129130780697,0.020309975370764732,0.011810851283371449,0.014866139739751816,0.01947471685707569,-0.02225891314446926,-0.01354731060564518,-0.008293972350656986,0.0029362274799495935,-0.021965838968753815,-0.035960085690021515,0.012059963308274746,0.023724278435111046,0.028486719354987144,-0.008491797372698784,-0.00022426970826927572,0.009048636071383953,-0.009898548945784569,0.0020423540845513344,-0.010836383327841759,-0.008924080058932304,0.0025424102786928415,0.018097272142767906,-0.001443385728634894,0.02623005397617817,-0.008169416338205338,0.03552047535777092,-0.042407698929309845,-0.005333933047950268,-0.009583494625985622,0.0035773252602666616,0.019079066812992096,-0.00770782632753253,-0.03376203775405884,0.004223918076604605,0.03452402725815773,-0.0018994809361174703,0.015005350112915039,0.018009349703788757,0.00489432318136096,-0.030596846714615822,-0.03469987213611603,0.007161977235227823,-0.021892569959163666,-0.013737807981669903,-0.001333483261987567,-0.03156398609280586,-0.002384883351624012,0.014976042322814465,-0.009092597290873528,0.003749505616724491,0.01956263929605484,0.004121342208236456,0.02044185809791088,0.024779342114925385,-0.009121904149651527,-0.007803075015544891,0.007458713836967945,0.009129231795668602,0.03481709957122803,-0.0017236369894817472,0.01532773021608591,0.03065546043217182,0.0029289007652550936,0.01677844300866127,-0.019328180700540543,0.022801097482442856,-0.03933042660355568,-0.01592853106558323,0.0009135642321780324,-0.006520879454910755,-0.0023390906862914562,0.013356813229620457,-0.001549624721519649,0.014111476019024849,0.016397448256611824,0.003317222697660327,-0.018082618713378906,-0.024837957695126534,0.007861689664423466,0.011224704794585705,-0.04012172669172287,0.0002859753731172532,-0.0026834518648684025,0.02253733202815056,-0.005414527840912342,-0.013071066699922085,-0.015254462137818336,0.012279768474400043,0.009129231795668602,-0.02143830806016922,-0.004440059419721365,-0.009649435989558697,-0.0022823079489171505,0.011341934092342854,-0.0015990808606147766,-0.02242010273039341,0.19249050319194794,-0.004506001248955727,-0.0025424102786928415,0.03921319916844368,0.021907225251197815,-0.007004450540989637,0.010704499669373035,0.011473816819489002,-0.010704499669373035,0.02050047367811203,0.020954735577106476,0.021877916529774666,-0.007301187142729759,-0.008403874933719635,0.017906775698065758,0.019269565120339394,-0.021086620166897774,-0.028135031461715698,0.010250236839056015,0.0005687452503480017,0.014617027714848518,-0.00927576795220375,-0.0140015734359622,-0.02608351781964302,0.0464228019118309,-0.008821504190564156,-0.007751787081360817,-0.005938396323472261,0.01438989583402872,0.008374568074941635,0.001497421064414084,-0.03645830973982811,0.017027555033564568,-0.005905425641685724,0.010902324691414833,0.017276667058467865,0.006641772110015154,-0.013774442486464977,-0.006429294124245644,0.013239583931863308,-0.0015047478955239058,-0.01491010095924139,0.03150537237524986,-0.017437858507037163,-0.026611050590872765,-0.004110352136194706,-0.0016989089781418443,0.05331002175807953,-0.010909651406109333,0.009920529089868069,-0.02527756616473198,0.04577803984284401,0.007216928526759148,-0.007319503929466009,-0.025599947199225426,0.011818177998065948,0.0005682873306795955,-0.007429406512528658,0.0029582080896943808,-0.015181194059550762,-0.017305973917245865,0.009671417064964771,-0.01020627561956644,-0.00656484067440033,-0.021115927025675774,0.012448285706341267,-0.025570640340447426,0.02606886439025402,0.020353935658931732,-0.01778954640030861,-0.01781885325908661,0.004780757240951061,-0.010990246199071407,0.021203849464654922,-0.01764300838112831,-0.012660764157772064,0.005799186881631613,0.04557288810610771,0.012492246925830841,-0.0031322201248258352,-0.008228030987083912,0.011063514277338982,0.016324179247021675,-0.008543085306882858,-0.014646334573626518,-0.02697739191353321,0.037161685526371,-0.0012565514771267772,-0.007022767327725887,-0.001237318618223071,-0.017423203215003014,-0.008250012062489986,0.0024636469315737486,0.01582595519721508,0.019899671897292137,-0.013386120088398457,-0.020075516775250435,-0.01531307678669691,-0.031065763905644417,-0.004952937830239534,-0.0469503328204155,0.060959234833717346,0.03933042660355568,0.0030864274594932795,-0.015576842240989208,0.001373780774883926,-0.012125905603170395,0.012338383123278618,-0.01020627561956644,-0.02162880450487137,-0.035051558166742325,-0.0032860836945474148,0.016177643090486526,0.02051512710750103,0.023050209507346153,0.011334607377648354,-0.005502449814230204,0.00490897661074996,-0.016250910237431526,-0.012023329734802246,0.020163439214229584,-0.03956488519906998,0.008660314604640007,0.0008453330956399441,-0.0187566876411438,-0.024647459387779236,-0.017042208462953568,-0.0023903786204755306,0.0022218613885343075,-0.03077268972992897,0.03631177544593811,0.009693397209048271,0.007422079797834158,-0.03560839965939522,0.02624470926821232,-0.03241389989852905,0.04604180529713631,-0.018170541152358055,-0.014983369037508965,-0.0001213506402564235,0.003919854760169983,-0.0033263813238590956,0.04035618528723717,0.0030131591483950615,0.0009753843769431114,-0.006608801428228617,0.004132332745939493,-0.0022200297098606825,0.015576842240989208,0.0023317639715969563,-0.038832202553749084,-0.014697622507810593,0.004106688778847456,-0.009341709315776825,0.007107025943696499,-0.011825504712760448,-0.009898548945784569,-0.03437748923897743,-0.004117678850889206,-0.0016503686783835292,-0.024603499099612236,0.018932530656456947,-0.009935182519257069,0.016587944701313972,-0.023973390460014343,-0.02980554848909378,-0.1865118145942688,0.01677844300866127,0.005491459742188454,-0.030245158821344376,0.030157236382365227,-0.005077493842691183,0.021760687232017517,-0.0024911225773394108,-0.005758889019489288,-0.0013115027686581016,0.016426755115389824,-0.008784870617091656,0.014866139739751816,-0.033058661967515945,0.013759788125753403,-0.005410864483565092,0.0004297644190955907,-0.0014671979006379843,0.03900804743170738,0.013195622712373734,0.034875717014074326,-0.023108825087547302,0.032179441303014755,-0.0023171103093773127,-0.013906325213611126,0.0010514002060517669,-0.011100148782134056,-0.002742066513746977,0.006066616158932447,-0.03537394106388092,-0.017393896356225014,-0.006623455323278904,0.003744010580703616,0.00835991371423006,-0.002483795629814267,-0.012008676305413246,-0.001403088099323213,-0.02810572274029255,0.012294421903789043,0.01664656028151512,0.023123478516936302,0.022039107978343964,-0.013173641636967659,0.017100824043154716,0.015562188811600208,0.007308513857424259,-0.0008155678515322506,-0.001784999156370759,-0.007304850500077009,-0.016206949949264526,0.025643907487392426,-0.019093722105026245,0.010924304835498333,-0.0041982741095125675,0.022610601037740707,-0.007641884498298168,0.0031047447118908167,-0.00014035460480954498,0.00884348526597023,0.008096148259937763,-0.0186101496219635,-0.008389221504330635,0.009033982641994953,-0.02329932153224945,-0.005275318399071693,0.0007748123607598245,-0.02602490410208702,0.0021779004018753767,-0.018419653177261353,-0.037220299243927,-0.015547535382211208,0.0036487618926912546,-0.0024709736462682486,-0.0015587832313030958,0.06359688937664032,0.016500024124979973,-0.03563770651817322,0.02047116495668888,-0.006671079434454441,0.009517553262412548,-0.016045760363340378,0.027710074558854103,-0.009019329212605953,0.008118128404021263,0.013254237361252308,0.0015890065114945173,-0.02253733202815056,-0.004139659460633993,0.023680318146944046,-0.029395245015621185,-0.037044458091259,-0.008565065450966358,0.0038429228588938713,-0.020866815000772476,-0.01781885325908661,0.018287770450115204,0.0069128647446632385,-0.003471086034551263,0.015151886269450188,-0.01260214950889349,-0.012536208145320415,-0.004132332745939493,-0.02058839425444603,-0.00023857993073761463,-0.003908864222466946,0.014873466454446316,0.016294872388243675,0.009605475701391697,0.02064700983464718,0.008367241360247135,-0.020925428718328476,0.01570872589945793,0.01663190685212612,0.024779342114925385,-0.016529330983757973,0.024676766246557236,0.02057374082505703,-0.00789832416921854,0.029219402000308037,0.005539084319025278,0.07180294394493103,-0.021115927025675774,0.00491263996809721,0.006817616056650877,-0.003813615534454584,-0.005399874411523342,-0.09132161736488342,-0.007301187142729759,0.0005069251055829227,0.04416613653302193,-0.043492067605257034,-0.01663190685212612,-0.03291212394833565,0.011862139217555523,-0.0093856705352664,0.037103071808815,-0.012734032236039639,-0.03862705081701279,-0.028618602082133293,0.02902890369296074,-0.03956488519906998,-0.023929430171847343,-0.009429631754755974,-0.03900804743170738,-0.023607049137353897,0.051668811589479446,0.0041982741095125675,-0.03900804743170738,-0.031212300062179565,-0.0059164161793887615,-0.025614600628614426,0.015664763748645782,-0.017525779083371162,0.022932980209589005,-0.00925378780812025,-0.0025149346329271793,-0.005542747676372528,-0.012909876182675362,0.011803524568676949,-0.002520429901778698,0.010894997976720333,0.003667078912258148,-0.0046928352676332,-0.013906325213611126,0.017467165365815163,-0.015034656971693039,0.006235132925212383,0.010382119566202164,0.025805098935961723,-0.0027530568186193705,-0.019035106524825096,0.007971592247486115,-0.029102172702550888,0.030948534607887268,0.026288669556379318,0.011012227274477482,-0.0013087551342323422,-0.006235132925212383,-0.012294421903789043,-0.01869807206094265,0.03335173428058624,-0.026611050590872765,0.027548884972929955,0.033058661967515945,0.0008224367629736662,0.015254462137818336,0.0043411473743617535,0.03352757915854454,0.005949386861175299,0.02709462121129036,0.00656850403174758,-0.01689567230641842,-0.037103071808815,0.015606150031089783,0.014140783809125423,-0.013620578683912754,-0.030391694977879524,0.006268104072660208,-0.009488246403634548,0.01691032573580742,-0.01023558247834444,0.013356813229620457,-0.006594147998839617,-0.03194498270750046,0.02146761491894722,-0.008162089623510838,-0.01956263929605484,-0.00929042138159275,-0.021921878680586815,-0.019298871979117393,-0.005037196446210146,0.054453007876873016,0.0017456174828112125,-0.007832381874322891,0.02904355712234974,-0.04047341272234917,0.01975313574075699,0.015239808708429337,-0.007004450540989637,0.01491742767393589,0.015518227592110634,0.019284218549728394,-0.008748236112296581,-0.008044860325753689,-0.010557963512837887,-0.0009927855571731925,-0.019240258261561394,-0.012023329734802246,-0.05972832441329956,0.018214501440525055,0.009502899833023548,-0.011063514277338982,-0.03845120966434479,0.010374792851507664,0.008147436194121838,-0.01312235463410616,-0.010396772995591164,-0.0030314764007925987,-0.007161977235227823,0.01976778917014599,0.0023537443485111,-0.03417234122753143,-0.01764300838112831,-0.009246460162103176,0.03091922588646412,-0.010140334255993366,0.015063964761793613,0.04454713314771652,-0.011092822067439556,0.003813615534454584,-0.002381219994276762,0.023563088849186897,0.0050042252987623215,-0.023988043889403343,-0.000901200226508081,0.002013046760112047,0.0016274723457172513,0.005088483914732933,0.035872165113687515,0.0051324451342225075,-0.004092034883797169,0.013635232113301754,0.0001988547737710178,0.013430081307888031,0.0012070953380316496,0.011063514277338982,0.01534238364547491,-0.009224480018019676,-0.003720198292285204,-0.02520429901778698,0.017218053340911865,-0.02140899933874607,0.010579943656921387,0.006363352760672569,-0.04879669472575188,0.010499348863959312,0.018155887722969055,-0.00846248958259821,0.02970297262072563,-0.01866876520216465,0.0034967300016433,-0.010111026465892792,-0.020969390869140625,0.002531419973820448,0.0019599273800849915,0.02242010273039341,0.011122128926217556,0.007176630664616823,0.03607731685042381,0.02898494340479374,0.010499348863959312,-0.04111817479133606,-0.003416134975850582,0.009891221299767494,-0.03569632023572922,0.0005458489176817238,0.013847710564732552,-0.06072477623820305,-0.02137969247996807,0.006627118680626154,0.010924304835498333,0.026772240176796913,-0.023094171658158302,0.0012675417819991708,-0.006341372150927782,0.01954798400402069,-0.0037550008855760098,0.021189194172620773,0.017921429127454758,0.005912752356380224,0.013386120088398457,0.007627231068909168,-0.001860099146142602,0.0010953611927106977,-0.016294872388243675,-0.001873836969025433,-0.008667641319334507,-0.006890884600579739,-0.02155553735792637,0.005612352397292852,0.016543984413146973,0.0031596957705914974,0.022903673350811005,-0.01778954640030861,-0.018903223797678947,0.0027109275106340647,0.03648761659860611,0.009634782560169697,-0.006890884600579739,0.011569065973162651,-0.0010724648600444198,-0.002853800542652607,-0.012037983164191246,0.004945610649883747,-0.029219402000308037,-0.017437858507037163,-0.0027988494839519262,0.015269115567207336,0.004641547333449125,0.0033282130025327206,-0.02801780216395855,0.0373668372631073,0.0019910663831979036,0.021203849464654922,0.013158988207578659,0.018976492807269096,-0.04410752281546593,0.031124377623200417,-0.012360364198684692,-0.0279152262955904,0.046364184468984604,-0.006879894062876701,0.0187859944999218,-0.0015624467050656676,-0.010799748823046684,-0.026405898854136467,0.0075173284858465195,-0.0185808427631855,0.020148785784840584,-0.007004450540989637,0.002694442169740796,-0.018038658425211906,-0.005077493842691183,-0.004974917974323034,-0.0093929972499609,0.022112375125288963,-0.02249337173998356,0.09255252778530121,0.035989392548799515,-0.02157019078731537,-0.012821953743696213,-0.012682744301855564,0.032238055020570755,-0.017100824043154716,0.0031853397376835346,-0.011034207418560982,-0.05143435299396515,-0.01948937028646469,0.006458601448684931,-0.02165811136364937,-0.006674742791801691,-0.034143030643463135,-0.01570872589945793,-0.00031757232500240207,0.03543255478143692,-0.018126579001545906,-0.010067065246403217,0.040678564459085464,0.0005989684141241014,-0.00328058865852654,0.01582595519721508,-0.000025472185370745137,-0.008594372309744358,0.027431655675172806,0.011876792646944523,-0.01588456891477108,-0.008799524046480656,0.019064413383603096,-0.0013591271126642823,-0.034055110067129135,-0.009480918757617474,-0.01789212040603161,0.01491742767393589,0.003245786065235734,-0.014345934614539146,0.005762552376836538,0.0279298797249794,0.010133007541298866,-0.0374840684235096,-0.030977841466665268,-0.029321977868676186,-0.024706073105335236,0.010543310083448887,-0.009158538654446602,-0.015591496601700783,-0.02809106931090355]],"metadata":{"location":"https://pkg.go.dev/github.com/libp2p/go-libp2p-pubsub","source_type":"webpage"}},{"raw_content":"Skip to Main Content\nWhy Go\nCase Studies\nCommon problems companies solve with Go\nUse Cases\nStories about how and why companies use Go\nSecurity Policy\nHow Go can help keep you secure by default\nLearn\nDocs\nEffective Go\nTips for writing clear, performant, and idiomatic Go code\nGo User Manual\nA complete introduction to building software with Go\nStandard library\nReference documentation for Go's standard library\nRelease Notes\nLearn what's new in each Go release\nPackages\nCommunity\nRecorded Talks\nVideos from prior events\nMeetups\nMeet other local Go developers\nConferences\nLearn and network with Go developers from around the world\nGo blog\nThe Go project's official blog.\nGo project\nGet help and stay informed from Go\nGet connected\nWhy Go\nWhy Go\nCase Studies\nUse Cases\nSecurity Policy\nLearn\nDocs\nDocs\nEffective Go\nGo User Manual\nStandard library\nRelease Notes\nPackages\nCommunity\nCommunity\nRecorded Talks\nMeetups\nConferences\nGo blog\nGo project\nGet connected\nDiscover Packages\ngithub.com/libp2p/go-libp2p-pubsub\npubsub\npackage\nmodule\nVersion:\nv0.10.0\nOpens a new window with list of versions in this module.\nLatest\nLatest\nThis package is not in the latest version of its module.\nGo to latest\nPublished: Nov\n1, 2023\nLicense: Apache-2.0, MIT, Apache-2.0, + 1 more\nOpens a new window with license information.\nImports: 37\nOpens a new window with list of imports.\nImported by: 631\nOpens a new window with list of known importers.\nMain\nVersions\nLicenses\nImports\nImported By\nDetails\nValid go.mod file\nThe Go module system was introduced in Go 1.11 and is the official dependency management\nsolution for Go.\nRedistributable license\nRedistributable licenses place minimal restrictions on how software can be used,\nmodified, and redistributed.\nTagged version\nModules with tagged versions give importers more predictable builds.\nStable version\nWhen a project reaches major version v1 it is considered stable.\nLearn more about best practices\nRepository\ngithub.com/libp2p/go-libp2p-pubsub\nLinks\nOpen Source Insights\nJump to ...\nREADME\nRepo Lead Maintainer\nTable of Contents\nInstall\nUsage\nExample\nDocumentation\nIn this repo, you will find\nTracing\nContribute\nLicense\nDocumentation\nOverview\nIndex\nConstants\nVariables\nFunctions\nDefaultMsgIdFn(pmsg)\nDefaultPeerFilter(pid, topic)\nFilterSubscriptions(subs, filter)\nGossipSubDefaultFeatures(feat, proto)\nScoreParameterDecay(decay)\nScoreParameterDecayWithBase(decay, base, decayToZero)\nTypes\ntype AcceptStatus\ntype BackoffConnectorFactory\ntype BasicSeqnoValidator\ntype Blacklist\nNewMapBlacklist()\nNewTimeCachedBlacklist(expiry)\ntype CacheEntry\ntype DiscoverOpt\nWithDiscoverConnector(connFactory)\nWithDiscoveryOpts(opts)\ntype EventTracer\ntype EventType\ntype ExtendedPeerScoreInspectFn\ntype FloodSubRouter\n(fs) AcceptFrom()\n(fs) AddPeer(p, proto)\n(fs) Attach(p)\n(fs) EnoughPeers(topic, suggested)\n(fs) HandleRPC(rpc)\n(fs) Join(topic)\n(fs) Leave(topic)\n(fs) Protocols()\n(fs) Publish(msg)\n(fs) RemovePeer(p)\ntype GossipSubFeature\ntype GossipSubFeatureTest\ntype GossipSubParams\nDefaultGossipSubParams()\ntype GossipSubRouter\nDefaultGossipSubRouter(h)\n(gs) AcceptFrom(p)\n(gs) AddPeer(p, proto)\n(gs) Attach(p)\n(gs) EnoughPeers(topic, suggested)\n(gs) HandleRPC(rpc)\n(gs) Join(topic)\n(gs) Leave(topic)\n(gs) Protocols()\n(gs) Publish(msg)\n(gs) RemovePeer(p)\n(gs) WithDefaultTagTracer()\ntype JSONTracer\nNewJSONTracer(file)\nOpenJSONTracer(file, flags, perm)\n(t) Close()\n(t) Trace(evt)\ntype MapBlacklist\n(b) Add(p)\n(b) Contains(p)\ntype Message\n(m) GetFrom()\ntype MessageCache\nNewMessageCache(gossip, history)\n(mc) Get(mid)\n(mc) GetForPeer(mid, p)\n(mc) GetGossipIDs(topic)\n(mc) Put(msg)\n(mc) SetMsgIdFn(msgID)\n(mc) Shift()\ntype MessageSignaturePolicy\ntype MsgIdFunction\ntype Option\nWithAppSpecificRpcInspector(inspector)\nWithBlacklist(b)\nWithDefaultValidator(val, opts)\nWithDirectConnectTicks(t)\nWithDirectPeers(pis)\nWithDiscovery(d, opts)\nWithEventTracer(tracer)\nWithFloodPublish(floodPublish)\nWithGossipSubParams(cfg)\nWithGossipSubProtocols(protos, feature)\nWithMaxMessageSize(maxMessageSize)\nWithMessageAuthor(author)\nWithMessageIdFn(fn)\nWithMessageSignaturePolicy(policy)\nWithMessageSigning(enabled)\nWithNoAuthor()\nWithPeerExchange(doPX)\nWithPeerFilter(filter)\nWithPeerGater(params)\nWithPeerOutboundQueueSize(size)\nWithPeerScore(params, thresholds)\nWithPeerScoreInspect(inspect, period)\nWithProtocolMatchFn(m)\nWithRawTracer(tracer)\nWithSeenMessagesStrategy(strategy)\nWithSeenMessagesTTL(ttl)\nWithStrictSignatureVerification(required)\nWithSubscriptionFilter(subFilter)\nWithValidateQueueSize(n)\nWithValidateThrottle(n)\nWithValidateWorkers(n)\ntype PBTracer\nNewPBTracer(file)\nOpenPBTracer(file, flags, perm)\n(t) Close()\n(t) Trace(evt)\ntype PeerEvent\ntype PeerFilter\ntype PeerGaterParams\nDefaultPeerGaterParams()\nNewPeerGaterParams(threshold, globalDecay, sourceDecay)\n(p) WithTopicDeliveryWeights(w)\ntype PeerMetadataStore\ntype PeerScoreInspectFn\ntype PeerScoreParams\ntype PeerScoreSnapshot\ntype PeerScoreThresholds\ntype ProtocolMatchFn\ntype ProvideKey\ntype PubOpt\nWithLocalPublication(local)\nWithReadiness(ready)\nWithSecretKeyAndPeerId(key, pid)\ntype PubSub\nNewFloodSub(ctx, h, opts)\nNewFloodsubWithProtocols(ctx, h, ps, opts)\nNewGossipSub(ctx, h, opts)\nNewGossipSubWithRouter(ctx, h, rt, opts)\nNewPubSub(ctx, h, rt, opts)\nNewRandomSub(ctx, h, size, opts)\n(p) BlacklistPeer(pid)\n(p) GetTopics()\n(p) Join(topic, opts)\n(p) ListPeers(topic)\n(p) Publish(topic, data, opts)\n(p) RegisterTopicValidator(topic, val, opts)\n(p) Subscribe(topic, opts)\n(p) UnregisterTopicValidator(topic)\ntype PubSubNotif\n(p) ClosedStream(n, s)\n(p) Connected(n, c)\n(p) Disconnected(n, c)\n(p) Initialize()\n(p) Listen(n, _)\n(p) ListenClose(n, _)\n(p) OpenedStream(n, s)\ntype PubSubRouter\ntype PublishOptions\ntype RPC\ntype RandomSubRouter\n(rs) AcceptFrom()\n(rs) AddPeer(p, proto)\n(rs) Attach(p)\n(rs) EnoughPeers(topic, suggested)\n(rs) HandleRPC(rpc)\n(rs) Join(topic)\n(rs) Leave(topic)\n(rs) Protocols()\n(rs) Publish(msg)\n(rs) RemovePeer(p)\ntype RawTracer\ntype RelayCancelFunc\ntype RemoteTracer\nNewRemoteTracer(ctx, host, pi)\n(t) Close()\n(t) Trace(evt)\ntype RouterReady\nMinTopicSize(size)\ntype SubOpt\nWithBufferSize(size)\ntype Subscription\n(sub) Cancel()\n(sub) Next(ctx)\n(sub) Topic()\ntype SubscriptionFilter\nNewAllowlistSubscriptionFilter(topics)\nNewRegexpSubscriptionFilter(rx)\nWrapLimitSubscriptionFilter(filter, limit)\ntype TimeCachedBlacklist\n(b) Add(p)\n(b) Contains(p)\ntype Topic\n(t) Close()\n(t) EventHandler(opts)\n(t) ListPeers()\n(t) Publish(ctx, data, opts)\n(t) Relay()\n(t) SetScoreParams(p)\n(t) String()\n(t) Subscribe(opts)\ntype TopicEventHandler\n(t) Cancel()\n(t) NextPeerEvent(ctx)\ntype TopicEventHandlerOpt\ntype TopicOpt\nWithTopicMessageIdFn(msgId)\ntype TopicOptions\ntype TopicScoreParams\ntype TopicScoreSnapshot\ntype ValidationError\n(e) Error()\ntype ValidationResult\ntype Validator\ntype ValidatorEx\nNewBasicSeqnoValidator(meta)\ntype ValidatorOpt\nWithValidatorConcurrency(n)\nWithValidatorInline(inline)\nWithValidatorTimeout(timeout)\nSource Files\nDirectories\nREADMEDocumentationSource FilesDirectoriesRepo Lead MaintainerTable of ContentsInstallUsageDocumentationContributeLicenseExampleIn this repo, you will findTracingOverviewIndexConstantsVariablesFunctionsTypesDefaultMsgIdFn(pmsg)DefaultPeerFilter(pid, topic)FilterSubscriptions(subs, filter)GossipSubDefaultFeatures(feat, proto)ScoreParameterDecay(decay)ScoreParameterDecayWithBase(decay, base, decayToZero)type AcceptStatustype BackoffConnectorFactorytype BasicSeqnoValidatortype Blacklisttype CacheEntrytype DiscoverOpttype EventTracertype EventTypetype ExtendedPeerScoreInspectFntype FloodSubRoutertype GossipSubFeaturetype GossipSubFeatureTesttype GossipSubParamstype GossipSubRoutertype JSONTracertype MapBlacklisttype Messagetype MessageCachetype MessageSignaturePolicytype MsgIdFunctiontype Optiontype PBTracertype PeerEventtype PeerFiltertype PeerGaterParamstype PeerMetadataStoretype PeerScoreInspectFntype PeerScoreParamstype PeerScoreSnapshottype PeerScoreThresholdstype ProtocolMatchFntype ProvideKeytype PubOpttype PubSubtype PubSubNotiftype PubSubRoutertype PublishOptionstype RPCtype RandomSubRoutertype RawTracertype RelayCancelFunctype RemoteTracertype RouterReadytype SubOpttype Subscriptiontype SubscriptionFiltertype TimeCachedBlacklisttype Topictype TopicEventHandlertype TopicEventHandlerOpttype TopicOpttype TopicOptionstype TopicScoreParamstype TopicScoreSnapshottype ValidationErrortype ValidationResulttype Validatortype ValidatorExtype ValidatorOptNewMapBlacklist()NewTimeCachedBlacklist(expiry)WithDiscoverConnector(connFactory)WithDiscoveryOpts(opts)(fs) AcceptFrom()(fs) AddPeer(p, proto)(fs) Attach(p)(fs) EnoughPeers(topic, suggested)(fs) HandleRPC(rpc)(fs) Join(topic)(fs) Leave(topic)(fs) Protocols()(fs) Publish(msg)(fs) RemovePeer(p)DefaultGossipSubParams()DefaultGossipSubRouter(h)(gs) AcceptFrom(p)(gs) AddPeer(p, proto)(gs) Attach(p)(gs) EnoughPeers(topic, suggested)(gs) HandleRPC(rpc)(gs) Join(topic)(gs) Leave(topic)(gs) Protocols()(gs) Publish(msg)(gs) RemovePeer(p)(gs) WithDefaultTagTracer()NewJSONTracer(file)OpenJSONTracer(file, flags, perm)(t) Close()(t) Trace(evt)(b) Add(p)(b) Contains(p)(m) GetFrom()NewMessageCache(gossip, history)(mc) Get(mid)(mc) GetForPeer(mid, p)(mc) GetGossipIDs(topic)(mc) Put(msg)(mc) SetMsgIdFn(msgID)(mc) Shift()WithAppSpecificRpcInspector(inspector)WithBlacklist(b)WithDefaultValidator(val, opts)WithDirectConnectTicks(t)WithDirectPeers(pis)WithDiscovery(d, opts)WithEventTracer(tracer)WithFloodPublish(floodPublish)WithGossipSubParams(cfg)WithGossipSubProtocols(protos, feature)WithMaxMessageSize(maxMessageSize)WithMessageAuthor(author)WithMessageIdFn(fn)WithMessageSignaturePolicy(policy)WithMessageSigning(enabled)WithNoAuthor()WithPeerExchange(doPX)WithPeerFilter(filter)WithPeerGater(params)WithPeerOutboundQueueSize(size)WithPeerScore(params, thresholds)WithPeerScoreInspect(inspect, period)WithProtocolMatchFn(m)WithRawTracer(tracer)WithSeenMessagesStrategy(strategy)WithSeenMessagesTTL(ttl)WithStrictSignatureVerification(required)WithSubscriptionFilter(subFilter)WithValidateQueueSize(n)WithValidateThrottle(n)WithValidateWorkers(n)NewPBTracer(file)OpenPBTracer(file, flags, perm)(t) Close()(t) Trace(evt)DefaultPeerGaterParams()NewPeerGaterParams(threshold, globalDecay, sourceDecay)(p) WithTopicDeliveryWeights(w)WithLocalPublication(local)WithReadiness(ready)WithSecretKeyAndPeerId(key, pid)NewFloodSub(ctx, h, opts)NewFloodsubWithProtocols(ctx, h, ps, opts)NewGossipSub(ctx, h, opts)NewGossipSubWithRouter(ctx, h, rt, opts)NewPubSub(ctx, h, rt, opts)NewRandomSub(ctx, h, size, opts)(p) BlacklistPeer(pid)(p) GetTopics()(p) Join(topic, opts)(p) ListPeers(topic)(p) Publish(topic, data, opts)(p) RegisterTopicValidator(topic, val, opts)(p) Subscribe(topic, opts)(p) UnregisterTopicValidator(topic)(p) ClosedStream(n, s)(p) Connected(n, c)(p) Disconnected(n, c)(p) Initialize()(p) Listen(n, _)(p) ListenClose(n, _)(p) OpenedStream(n, s)(rs) AcceptFrom()(rs) AddPeer(p, proto)(rs) Attach(p)(rs) EnoughPeers(topic, suggested)(rs) HandleRPC(rpc)(rs) Join(topic)(rs) Leave(topic)(rs) Protocols()(rs) Publish(msg)(rs) RemovePeer(p)NewRemoteTracer(ctx, host, pi)(t) Close()(t) Trace(evt)MinTopicSize(size)WithBufferSize(size)(sub) Cancel()(sub) Next(ctx)(sub) Topic()NewAllowlistSubscriptionFilter(topics)NewRegexpSubscriptionFilter(rx)WrapLimitSubscriptionFilter(filter, limit)(b) Add(p)(b) Contains(p)(t) Close()(t) EventHandler(opts)(t) ListPeers()(t) Publish(ctx, data, opts)(t) Relay()(t) SetScoreParams(p)(t) String()(t) Subscribe(opts)(t) Cancel()(t) NextPeerEvent(ctx)WithTopicMessageIdFn(msgId)(e) Error()NewBasicSeqnoValidator(meta)WithValidatorConcurrency(n)WithValidatorInline(inline)WithValidatorTimeout(timeout)\nREADME\n¶\ngo-libp2p-pubsub\nThis repo contains the canonical pubsub implementation for libp2p. We currently provide three message router options:\nFloodsub, which is the baseline flooding protocol.\nRandomsub, which is a simple probabilistic router that propagates to random subsets of peers.\nGossipsub, which is a more advanced router with mesh formation and gossip propagation. See spec and\nimplementation for more details.\nRepo Lead Maintainer\n@vyzo\nThis repo follows the Repo Lead Maintainer Protocol\nTable of Contents\nInstall\nUsage\nExample\nDocumentation\nTracing\nContribute\nLicense\nInstall\ngo get github.com/libp2p/go-libp2p-pubsub\nUsage\nTo be used for messaging in p2p instrastructure (as part of libp2p) such as IPFS, Ethereum, other blockchains, etc.\nExample\nhttps://github.com/libp2p/go-libp2p/tree/master/examples/pubsub\nDocumentation\nSee the libp2p specs for high level documentation and godoc for API documentation.\nIn this repo, you will find\n.\n├── LICENSE\n├── README.md\n# Regular Golang repo set up\n├── codecov.yml\n├── pb\n├── go.mod\n├── go.sum\n├── doc.go\n# PubSub base\n├── pubsub.go\n├── blacklist.go\n├── notify.go\n├── comm.go\n├── discovery.go\n├── sign.go\n├── subscription.go\n├── topic.go\n├── trace.go\n├── tracer.go\n├── validation.go\n# Floodsub router\n├── floodsub.go\n# Randomsub router\n├── randomsub.go\n# Gossipsub router\n├── gossipsub.go\n├── score.go\n├── score_params.go\n└── mcache.go\nTracing\nThe pubsub system supports tracing, which collects all events pertaining to the internals of the system. This allows you to recreate the complete message flow and state of the system for analysis purposes.\nTo enable tracing, instantiate the pubsub system using the WithEventTracer option; the option accepts a tracer with three available implementations in-package (trace to json, pb, or a remote peer).\nIf you want to trace using a remote peer, you can do so using the traced daemon from go-libp2p-pubsub-tracer. The package also includes a utility program, tracestat, for analyzing the traces collected by the daemon.\nFor instance, to capture the trace as a json file, you can use the following option:\ntracer, err := pubsub.NewJSONTracer(\"/path/to/trace.json\")\nif err != nil {\npanic(err)\n}\npubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nTo capture the trace as a protobuf, you can use the following option:\ntracer, err := pubsub.NewPBTracer(\"/path/to/trace.pb\")\nif err != nil {\npanic(err)\n}\npubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nFinally, to use the remote tracer, you can use the following incantations:\n// assuming that your tracer runs in x.x.x.x and has a peer ID of QmTracer\npi, err := peer.AddrInfoFromP2pAddr(ma.StringCast(\"/ip4/x.x.x.x/tcp/4001/p2p/QmTracer\"))\nif err != nil {\npanic(err)\n}\ntracer, err := pubsub.NewRemoteTracer(ctx, host, pi)\nif err != nil {\npanic(err)\n}\nps, err := pubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nContribute\nContributions welcome. Please check out the issues.\nCheck out our contributing document for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS Code of Conduct.\nSmall note: If editing the README, please conform to the standard-readme specification.\nLicense\nThe go-libp2p-pubsub project is dual-licensed under Apache 2.0 and MIT terms:\nApache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)\nMIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\nExpand ▾\nCollapse ▴\nDocumentation\n¶\nOverview ¶\nThe pubsub package provides facilities for the Publish/Subscribe pattern of message\npropagation, also known as overlay multicast.\nThe implementation provides topic-based pubsub, with pluggable routing algorithms.\nThe main interface to the library is the PubSub object.\nYou can construct this object with the following constructors:\n- NewFloodSub creates an instance that uses the floodsub routing algorithm.\n- NewGossipSub creates an instance that uses the gossipsub routing algorithm.\n- NewRandomSub creates an instance that uses the randomsub routing algorithm.\nIn addition, there is a generic constructor that creates a pubsub instance with\na custom PubSubRouter interface. This procedure is currently reserved for internal\nuse within the package.\nOnce you have constructed a PubSub instance, you need to establish some connections\nto your peers; the implementation relies on ambient peer discovery, leaving bootstrap\nand active peer discovery up to the client.\nTo publish a message to some topic, use Publish; you don't need to be subscribed\nto the topic in order to publish.\nTo subscribe to a topic, use Subscribe; this will give you a subscription interface\nfrom which new messages can be pumped.\nIndex ¶\nConstants\nVariables\nfunc DefaultMsgIdFn(pmsg *pb.Message) string\nfunc DefaultPeerFilter(pid peer.ID, topic string) bool\nfunc FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts\nfunc GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol.ID) bool\nfunc ScoreParameterDecay(decay time.Duration) float64\nfunc ScoreParameterDecayWithBase(decay time.Duration, base time.Duration, decayToZero float64) float64\ntype AcceptStatus\ntype BackoffConnectorFactory\ntype BasicSeqnoValidator\ntype Blacklist\nfunc NewMapBlacklist() Blacklist\nfunc NewTimeCachedBlacklist(expiry time.Duration) (Blacklist, error)\ntype CacheEntry\ntype DiscoverOpt\nfunc WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt\nfunc WithDiscoveryOpts(opts ...discovery.Option) DiscoverOpt\ntype EventTracer\ntype EventType\ntype ExtendedPeerScoreInspectFn\ntype FloodSubRouter\nfunc (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (fs *FloodSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (fs *FloodSubRouter) Attach(p *PubSub)\nfunc (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (fs *FloodSubRouter) HandleRPC(rpc *RPC)\nfunc (fs *FloodSubRouter) Join(topic string)\nfunc (fs *FloodSubRouter) Leave(topic string)\nfunc (fs *FloodSubRouter) Protocols() []protocol.ID\nfunc (fs *FloodSubRouter) Publish(msg *Message)\nfunc (fs *FloodSubRouter) RemovePeer(p peer.ID)\ntype GossipSubFeature\ntype GossipSubFeatureTest\ntype GossipSubParams\nfunc DefaultGossipSubParams() GossipSubParams\ntype GossipSubRouter\nfunc DefaultGossipSubRouter(h host.Host) *GossipSubRouter\nfunc (gs *GossipSubRouter) AcceptFrom(p peer.ID) AcceptStatus\nfunc (gs *GossipSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (gs *GossipSubRouter) Attach(p *PubSub)\nfunc (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (gs *GossipSubRouter) HandleRPC(rpc *RPC)\nfunc (gs *GossipSubRouter) Join(topic string)\nfunc (gs *GossipSubRouter) Leave(topic string)\nfunc (gs *GossipSubRouter) Protocols() []protocol.ID\nfunc (gs *GossipSubRouter) Publish(msg *Message)\nfunc (gs *GossipSubRouter) RemovePeer(p peer.ID)\nfunc (gs *GossipSubRouter) WithDefaultTagTracer() Option\ntype JSONTracer\nfunc NewJSONTracer(file string) (*JSONTracer, error)\nfunc OpenJSONTracer(file string, flags int, perm os.FileMode) (*JSONTracer, error)\nfunc (t *JSONTracer) Close()\nfunc (t *JSONTracer) Trace(evt *pb.TraceEvent)\ntype MapBlacklist\nfunc (b MapBlacklist) Add(p peer.ID) bool\nfunc (b MapBlacklist) Contains(p peer.ID) bool\ntype Message\nfunc (m *Message) GetFrom() peer.ID\ntype MessageCache\nfunc NewMessageCache(gossip, history int) *MessageCache\nfunc (mc *MessageCache) Get(mid string) (*Message, bool)\nfunc (mc *MessageCache) GetForPeer(mid string, p peer.ID) (*Message, int, bool)\nfunc (mc *MessageCache) GetGossipIDs(topic string) []string\nfunc (mc *MessageCache) Put(msg *Message)\nfunc (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string)\nfunc (mc *MessageCache) Shift()\ntype MessageSignaturePolicy\ntype MsgIdFunction\ntype Option\nfunc WithAppSpecificRpcInspector(inspector func(peer.ID, *RPC) error) Option\nfunc WithBlacklist(b Blacklist) Option\nfunc WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option\nfunc WithDirectConnectTicks(t uint64) Option\nfunc WithDirectPeers(pis []peer.AddrInfo) Option\nfunc WithDiscovery(d discovery.Discovery, opts ...DiscoverOpt) Option\nfunc WithEventTracer(tracer EventTracer) Option\nfunc WithFloodPublish(floodPublish bool) Option\nfunc WithGossipSubParams(cfg GossipSubParams) Option\nfunc WithGossipSubProtocols(protos []protocol.ID, feature GossipSubFeatureTest) Option\nfunc WithMaxMessageSize(maxMessageSize int) Option\nfunc WithMessageAuthor(author peer.ID) Option\nfunc WithMessageIdFn(fn MsgIdFunction) Option\nfunc WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option\nfunc WithMessageSigning(enabled bool) Option\nfunc WithNoAuthor() Option\nfunc WithPeerExchange(doPX bool) Option\nfunc WithPeerFilter(filter PeerFilter) Option\nfunc WithPeerGater(params *PeerGaterParams) Option\nfunc WithPeerOutboundQueueSize(size int) Option\nfunc WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option\nfunc WithPeerScoreInspect(inspect interface{}, period time.Duration) Option\nfunc WithProtocolMatchFn(m ProtocolMatchFn) Option\nfunc WithRawTracer(tracer RawTracer) Option\nfunc WithSeenMessagesStrategy(strategy timecache.Strategy) Option\nfunc WithSeenMessagesTTL(ttl time.Duration) Option\nfunc WithStrictSignatureVerification(required bool) Option\nfunc WithSubscriptionFilter(subFilter SubscriptionFilter) Option\nfunc WithValidateQueueSize(n int) Option\nfunc WithValidateThrottle(n int) Option\nfunc WithValidateWorkers(n int) Option\ntype PBTracer\nfunc NewPBTracer(file string) (*PBTracer, error)\nfunc OpenPBTracer(file string, flags int, perm os.FileMode) (*PBTracer, error)\nfunc (t *PBTracer) Close()\nfunc (t *PBTracer) Trace(evt *pb.TraceEvent)\ntype PeerEvent\ntype PeerFilter\ntype PeerGaterParams\nfunc DefaultPeerGaterParams() *PeerGaterParams\nfunc NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams\nfunc (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams\ntype PeerMetadataStore\ntype PeerScoreInspectFn\ntype PeerScoreParams\ntype PeerScoreSnapshot\ntype PeerScoreThresholds\ntype ProtocolMatchFn\ntype ProvideKey\ntype PubOpt\nfunc WithLocalPublication(local bool) PubOpt\nfunc WithReadiness(ready RouterReady) PubOpt\nfunc WithSecretKeyAndPeerId(key crypto.PrivKey, pid peer.ID) PubOpt\ntype PubSub\nfunc NewFloodSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nfunc NewFloodsubWithProtocols(ctx context.Context, h host.Host, ps []protocol.ID, opts ...Option) (*PubSub, error)\nfunc NewGossipSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nfunc NewGossipSubWithRouter(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nfunc NewPubSub(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nfunc NewRandomSub(ctx context.Context, h host.Host, size int, opts ...Option) (*PubSub, error)\nfunc (p *PubSub) BlacklistPeer(pid peer.ID)\nfunc (p *PubSub) GetTopics() []string\nfunc (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error)\nfunc (p *PubSub) ListPeers(topic string) []peer.ID\nfunc (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) errordeprecated\nfunc (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error\nfunc (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)deprecated\nfunc (p *PubSub) UnregisterTopicValidator(topic string) error\ntype PubSubNotif\nfunc (p *PubSubNotif) ClosedStream(n network.Network, s network.Stream)\nfunc (p *PubSubNotif) Connected(n network.Network, c network.Conn)\nfunc (p *PubSubNotif) Disconnected(n network.Network, c network.Conn)\nfunc (p *PubSubNotif) Initialize()\nfunc (p *PubSubNotif) Listen(n network.Network, _ ma.Multiaddr)\nfunc (p *PubSubNotif) ListenClose(n network.Network, _ ma.Multiaddr)\nfunc (p *PubSubNotif) OpenedStream(n network.Network, s network.Stream)\ntype PubSubRouter\ntype PublishOptions\ntype RPC\ntype RandomSubRouter\nfunc (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (rs *RandomSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (rs *RandomSubRouter) Attach(p *PubSub)\nfunc (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (rs *RandomSubRouter) HandleRPC(rpc *RPC)\nfunc (rs *RandomSubRouter) Join(topic string)\nfunc (rs *RandomSubRouter) Leave(topic string)\nfunc (rs *RandomSubRouter) Protocols() []protocol.ID\nfunc (rs *RandomSubRouter) Publish(msg *Message)\nfunc (rs *RandomSubRouter) RemovePeer(p peer.ID)\ntype RawTracer\ntype RelayCancelFunc\ntype RemoteTracer\nfunc NewRemoteTracer(ctx context.Context, host host.Host, pi peer.AddrInfo) (*RemoteTracer, error)\nfunc (t *RemoteTracer) Close()\nfunc (t *RemoteTracer) Trace(evt *pb.TraceEvent)\ntype RouterReady\nfunc MinTopicSize(size int) RouterReady\ntype SubOpt\nfunc WithBufferSize(size int) SubOpt\ntype Subscription\nfunc (sub *Subscription) Cancel()\nfunc (sub *Subscription) Next(ctx context.Context) (*Message, error)\nfunc (sub *Subscription) Topic() string\ntype SubscriptionFilter\nfunc NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter\nfunc NewRegexpSubscriptionFilter(rx *regexp.Regexp) SubscriptionFilter\nfunc WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter\ntype TimeCachedBlacklist\nfunc (b *TimeCachedBlacklist) Add(p peer.ID) bool\nfunc (b *TimeCachedBlacklist) Contains(p peer.ID) bool\ntype Topic\nfunc (t *Topic) Close() error\nfunc (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error)\nfunc (t *Topic) ListPeers() []peer.ID\nfunc (t *Topic) Publish(ctx context.Context, data []byte, opts ...PubOpt) error\nfunc (t *Topic) Relay() (RelayCancelFunc, error)\nfunc (t *Topic) SetScoreParams(p *TopicScoreParams) error\nfunc (t *Topic) String() string\nfunc (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error)\ntype TopicEventHandler\nfunc (t *TopicEventHandler) Cancel()\nfunc (t *TopicEventHandler) NextPeerEvent(ctx context.Context) (PeerEvent, error)\ntype TopicEventHandlerOpt\ntype TopicOpt\nfunc WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt\ntype TopicOptions\ntype TopicScoreParams\ntype TopicScoreSnapshot\ntype ValidationError\nfunc (e ValidationError) Error() string\ntype ValidationResult\ntype Validator\ntype ValidatorEx\nfunc NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx\ntype ValidatorOpt\nfunc WithValidatorConcurrency(n int) ValidatorOpt\nfunc WithValidatorInline(inline bool) ValidatorOpt\nfunc WithValidatorTimeout(timeout time.Duration) ValidatorOpt\nConstants ¶\nView Source\nconst (\nMinBackoffDelay\n= 100 * time.Millisecond\nMaxBackoffDelay\n= 10 * time.Second\nTimeToLive\n= 10 * time.Minute\nBackoffCleanupInterval = 1 * time.Minute\nBackoffMultiplier\n= 2\nMaxBackoffJitterCoff\n= 100\nMaxBackoffAttempts\n= 4\n)\nView Source\nconst (\nFloodSubID\n= protocol.ID(\"/floodsub/1.0.0\")\nFloodSubTopicSearchSize = 5\n)\nView Source\nconst (\n// GossipSubID_v10 is the protocol ID for version 1.0.0 of the GossipSub protocol.\n// It is advertised along with GossipSubID_v11 for backwards compatibility.\nGossipSubID_v10 = protocol.ID(\"/meshsub/1.0.0\")\n// GossipSubID_v11 is the protocol ID for version 1.1.0 of the GossipSub protocol.\n// See the spec for details about how v1.1.0 compares to v1.0.0:\n// https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\nGossipSubID_v11 = protocol.ID(\"/meshsub/1.1.0\")\n)\nView Source\nconst (\n// Protocol supports basic GossipSub Mesh -- gossipsub-v1.0 compatible\nGossipSubFeatureMesh = iota\n// Protocol supports Peer eXchange on prune -- gossipsub-v1.1 compatible\nGossipSubFeaturePX\n)\nView Source\nconst (\nDefaultDecayInterval = time.Second\nDefaultDecayToZero\n= 0.01\n)\nView Source\nconst (\n// StrictSign produces signatures and expects and verifies incoming signatures\nStrictSign = msgSigning | msgVerification\n// StrictNoSign does not produce signatures and drops and penalises incoming messages that carry one\nStrictNoSign = msgVerification\n// LaxSign produces signatures and validates incoming signatures iff one is present\n// Deprecated: it is recommend to either strictly enable, or strictly disable, signatures.\nLaxSign = msgSigning\n// LaxNoSign does not produce signatures and validates incoming signatures iff one is present\n// Deprecated: it is recommend to either strictly enable, or strictly disable, signatures.\nLaxNoSign = 0\n)\nView Source\nconst (\nRejectBlacklstedPeer\n= \"blacklisted peer\"\nRejectBlacklistedSource\n= \"blacklisted source\"\nRejectMissingSignature\n= \"missing signature\"\nRejectUnexpectedSignature = \"unexpected signature\"\nRejectUnexpectedAuthInfo\n= \"unexpected auth info\"\nRejectInvalidSignature\n= \"invalid signature\"\nRejectValidationQueueFull = \"validation queue full\"\nRejectValidationThrottled = \"validation throttled\"\nRejectValidationFailed\n= \"validation failed\"\nRejectValidationIgnored\n= \"validation ignored\"\nRejectSelfOrigin\n= \"self originated message\"\n)\nrejection reasons\nView Source\nconst (\n// ValidationAccept is a validation decision that indicates a valid message that should be accepted and\n// delivered to the application and forwarded to the network.\nValidationAccept = ValidationResult(0)\n// ValidationReject is a validation decision that indicates an invalid message that should not be\n// delivered to the application or forwarded to the application. Furthermore the peer that forwarded\n// the message should be penalized by peer scoring routers.\nValidationReject = ValidationResult(1)\n// ValidationIgnore is a validation decision that indicates a message that should be ignored: it will\n// be neither delivered to the application nor forwarded to the network. However, in contrast to\n// ValidationReject, the peer that forwarded the message must not be penalized by peer scoring routers.\nValidationIgnore = ValidationResult(2)\n)\nView Source\nconst DefaultMaxMessageSize = 1 << 20\nDefaultMaximumMessageSize is 1mb.\nView Source\nconst (\nRandomSubID = protocol.ID(\"/randomsub/1.0.0\")\n)\nView Source\nconst RemoteTracerProtoID = protocol.ID(\"/libp2p/pubsub/tracer/1.0.0\")\nView Source\nconst SignPrefix = \"libp2p-pubsub:\"\nVariables ¶\nView Source\nvar (\n// DiscoveryPollInitialDelay is how long the discovery system waits after it first starts before polling\nDiscoveryPollInitialDelay = 0 * time.Millisecond\n// DiscoveryPollInterval is approximately how long the discovery system waits in between checks for whether the\n// more peers are needed for any topic\nDiscoveryPollInterval = 1 * time.Second\n)\nView Source\nvar (\nGossipSubD\n= 6\nGossipSubDlo\n= 5\nGossipSubDhi\n= 12\nGossipSubDscore\n= 4\nGossipSubDout\n= 2\nGossipSubHistoryLength\n= 5\nGossipSubHistoryGossip\n= 3\nGossipSubDlazy\n= 6\nGossipSubGossipFactor\n= 0.25\nGossipSubGossipRetransmission\n= 3\nGossipSubHeartbeatInitialDelay\n= 100 * time.Millisecond\nGossipSubHeartbeatInterval\n= 1 * time.Second\nGossipSubFanoutTTL\n= 60 * time.Second\nGossipSubPrunePeers\n= 16\nGossipSubPruneBackoff\n= time.Minute\nGossipSubUnsubscribeBackoff\n= 10 * time.Second\nGossipSubConnectors\n= 8\nGossipSubMaxPendingConnections\n= 128\nGossipSubConnectionTimeout\n= 30 * time.Second\nGossipSubDirectConnectTicks\nuint64 = 300\nGossipSubDirectConnectInitialDelay\n= time.Second\nGossipSubOpportunisticGraftTicks\nuint64 = 60\nGossipSubOpportunisticGraftPeers\n= 2\nGossipSubGraftFloodThreshold\n= 10 * time.Second\nGossipSubMaxIHaveLength\n= 5000\nGossipSubMaxIHaveMessages\n= 10\nGossipSubIWantFollowupTime\n= 3 * time.Second\n)\nDefines the default gossipsub parameters.\nView Source\nvar (\nDefaultPeerGaterRetainStats\n= 6 * time.Hour\nDefaultPeerGaterQuiet\n= time.Minute\nDefaultPeerGaterDuplicateWeight = 0.125\nDefaultPeerGaterIgnoreWeight\n= 1.0\nDefaultPeerGaterRejectWeight\n= 16.0\nDefaultPeerGaterThreshold\n= 0.33\nDefaultPeerGaterGlobalDecay\n= ScoreParameterDecay(2 * time.Minute)\nDefaultPeerGaterSourceDecay\n= ScoreParameterDecay(time.Hour)\n)\nView Source\nvar (\n// TimeCacheDuration specifies how long a message ID will be remembered as seen.\n// Use WithSeenMessagesTTL to configure this per pubsub instance, instead of overriding the global default.\nTimeCacheDuration = 120 * time.Second\n// TimeCacheStrategy specifies which type of lookup/cleanup strategy is used by the seen messages cache.\n// Use WithSeenMessagesStrategy to configure this per pubsub instance, instead of overriding the global default.\nTimeCacheStrategy = timecache.Strategy_FirstSeen\n// ErrSubscriptionCancelled may be returned when a subscription Next() is called after the\n// subscription has been cancelled.\nErrSubscriptionCancelled = errors.New(\"subscription cancelled\")\n)\nView Source\nvar (\n// GossipSubConnTagBumpMessageDelivery is the amount to add to the connection manager\n// tag that tracks message deliveries. Each time a peer is the first to deliver a\n// message within a topic, we \"bump\" a tag by this amount, up to a maximum\n// of GossipSubConnTagMessageDeliveryCap.\n// Note that the delivery tags decay over time, decreasing by GossipSubConnTagDecayAmount\n// at every GossipSubConnTagDecayInterval.\nGossipSubConnTagBumpMessageDelivery = 1\n// GossipSubConnTagDecayInterval is the decay interval for decaying connection manager tags.\nGossipSubConnTagDecayInterval = 10 * time.Minute\n// GossipSubConnTagDecayAmount is subtracted from decaying tag values at each decay interval.\nGossipSubConnTagDecayAmount = 1\n// GossipSubConnTagMessageDeliveryCap is the maximum value for the connection manager tags that\n// track message deliveries.\nGossipSubConnTagMessageDeliveryCap = 15\n)\nView Source\nvar ErrEmptyPeerID = errors.New(\"empty peer ID\")\nErrEmptyPeerID is returned if an empty peer ID was provided\nView Source\nvar ErrNilSignKey = errors.New(\"nil sign key\")\nErrNilSignKey is returned if a nil private key was provided\nView Source\nvar ErrTooManySubscriptions = errors.New(\"too many subscriptions\")\nErrTooManySubscriptions may be returned by a SubscriptionFilter to signal that there are too many\nsubscriptions to process.\nView Source\nvar ErrTopicClosed = errors.New(\"this Topic is closed, try opening a new one\")\nErrTopicClosed is returned if a Topic is utilized after it has been closed\nView Source\nvar GossipSubDefaultProtocols = []protocol.ID{GossipSubID_v11, GossipSubID_v10, FloodSubID}\nGossipSubDefaultProtocols is the default gossipsub router protocol list\nView Source\nvar MinTraceBatchSize = 16\nView Source\nvar (\nRandomSubD = 6\n)\nView Source\nvar TraceBufferSize = 1 << 16 // 64K ought to be enough for everyone; famous last words.\nFunctions ¶\nfunc DefaultMsgIdFn ¶\nadded in\nv0.2.5\nfunc DefaultMsgIdFn(pmsg *pb.Message) string\nDefaultMsgIdFn returns a unique ID of the passed Message\nfunc DefaultPeerFilter ¶\nadded in\nv0.5.5\nfunc DefaultPeerFilter(pid peer.ID, topic string) bool\nDefaultPeerFilter accepts all peers on all topics\nfunc FilterSubscriptions ¶\nadded in\nv0.3.6\nfunc FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts\nFilterSubscriptions filters (and deduplicates) a list of subscriptions.\nfilter should return true if a topic is of interest.\nfunc GossipSubDefaultFeatures ¶\nadded in\nv0.5.0\nfunc GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol.ID) bool\nGossipSubDefaultFeatures is the feature test function for the default gossipsub protocols\nfunc ScoreParameterDecay ¶\nadded in\nv0.3.0\nfunc ScoreParameterDecay(decay time.Duration) float64\nScoreParameterDecay computes the decay factor for a parameter, assuming the DecayInterval is 1s\nand that the value decays to zero if it drops below 0.01\nfunc ScoreParameterDecayWithBase ¶\nadded in\nv0.3.0\nfunc ScoreParameterDecayWithBase(decay time.Duration, base time.Duration, decayToZero float64) float64\nScoreParameterDecayWithBase computes the decay factor for a parameter using base as the DecayInterval\nTypes ¶\ntype AcceptStatus ¶\nadded in\nv0.3.6\ntype AcceptStatus int\nconst (\n// AcceptNone signals to drop the incoming RPC\nAcceptNone AcceptStatus = iota\n// AcceptControl signals to accept the incoming RPC only for control message processing by\n// the router. Included payload messages will _not_ be pushed to the validation queue.\nAcceptControl\n// AcceptAll signals to accept the incoming RPC for full processing\nAcceptAll\n)\ntype BackoffConnectorFactory ¶\nadded in\nv0.2.0\ntype BackoffConnectorFactory func(host host.Host) (*discimpl.BackoffConnector, error)\nBackoffConnectorFactory creates a BackoffConnector that is attached to a given host\ntype BasicSeqnoValidator ¶\nadded in\nv0.9.2\ntype BasicSeqnoValidator struct {\n// contains filtered or unexported fields\n}\nBasicSeqnoValidator is a basic validator, usable as a default validator, that ignores replayed\nmessages outside the seen cache window. The validator uses the message seqno as a peer-specific\nnonce to decide whether the message should be propagated, comparing to the maximal nonce store\nin the peer metadata store. This is useful to ensure that there can be no infinitely propagating\nmessages in the network regardless of the seen cache span and network diameter.\nIt requires that pubsub is instantiated with a strict message signing policy and that seqnos\nare not disabled, ie it doesn't support anonymous mode.\nWarning: See https://github.com/libp2p/rust-libp2p/issues/3453\nTL;DR: rust is currently violating the spec by issuing a random seqno, which creates an\ninteroperability hazard. We expect this issue to be addressed in the not so distant future,\nbut keep this in mind if you are in a mixed environment with (older) rust nodes.\ntype Blacklist ¶\ntype Blacklist interface {\nAdd(peer.ID) bool\nContains(peer.ID) bool\n}\nBlacklist is an interface for peer blacklisting.\nfunc NewMapBlacklist ¶\nfunc NewMapBlacklist() Blacklist\nNewMapBlacklist creates a new MapBlacklist\nfunc NewTimeCachedBlacklist ¶\nadded in\nv0.2.6\nfunc NewTimeCachedBlacklist(expiry time.Duration) (Blacklist, error)\nNewTimeCachedBlacklist creates a new TimeCachedBlacklist with the given expiry duration\ntype CacheEntry ¶\ntype CacheEntry struct {\n// contains filtered or unexported fields\n}\ntype DiscoverOpt ¶\nadded in\nv0.2.0\ntype DiscoverOpt func(*discoverOptions) error\nfunc WithDiscoverConnector ¶\nadded in\nv0.2.0\nfunc WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt\nWithDiscoverConnector adds a custom connector that deals with how the discovery subsystem connects to peers\nfunc WithDiscoveryOpts ¶\nadded in\nv0.2.0\nfunc WithDiscoveryOpts(opts ...discovery.Option) DiscoverOpt\nWithDiscoveryOpts passes libp2p Discovery options into the PubSub discovery subsystem\ntype EventTracer ¶\nadded in\nv0.2.3\ntype EventTracer interface {\nTrace(evt *pb.TraceEvent)\n}\nEventTracer is a generic event tracer interface.\nThis is a high level tracing interface which delivers tracing events, as defined by the protobuf\nschema in pb/trace.proto.\ntype EventType ¶\nadded in\nv0.1.1\ntype EventType int\nconst (\nPeerJoin EventType = iota\nPeerLeave\n)\ntype ExtendedPeerScoreInspectFn ¶\nadded in\nv0.3.3\ntype ExtendedPeerScoreInspectFn = func(map[peer.ID]*PeerScoreSnapshot)\ntype FloodSubRouter ¶\ntype FloodSubRouter struct {\n// contains filtered or unexported fields\n}\nfunc (*FloodSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (*FloodSubRouter) AddPeer ¶\nfunc (fs *FloodSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*FloodSubRouter) Attach ¶\nfunc (fs *FloodSubRouter) Attach(p *PubSub)\nfunc (*FloodSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*FloodSubRouter) HandleRPC ¶\nfunc (fs *FloodSubRouter) HandleRPC(rpc *RPC)\nfunc (*FloodSubRouter) Join ¶\nfunc (fs *FloodSubRouter) Join(topic string)\nfunc (*FloodSubRouter) Leave ¶\nfunc (fs *FloodSubRouter) Leave(topic string)\nfunc (*FloodSubRouter) Protocols ¶\nfunc (fs *FloodSubRouter) Protocols() []protocol.ID\nfunc (*FloodSubRouter) Publish ¶\nfunc (fs *FloodSubRouter) Publish(msg *Message)\nfunc (*FloodSubRouter) RemovePeer ¶\nfunc (fs *FloodSubRouter) RemovePeer(p peer.ID)\ntype GossipSubFeature ¶\nadded in\nv0.5.0\ntype GossipSubFeature int\nGossipSubFeature is a feature discriminant enum\ntype GossipSubFeatureTest ¶\nadded in\nv0.5.0\ntype GossipSubFeatureTest = func(GossipSubFeature, protocol.ID) bool\nGossipSubFeatureTest is a feature test function; it takes a feature and a protocol ID and\nshould return true if the feature is supported by the protocol\ntype GossipSubParams ¶\nadded in\nv0.5.0\ntype GossipSubParams struct {\n// D sets the optimal degree for a GossipSub topic mesh. For example, if D == 6,\n// each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n// D should be set somewhere between Dlo and Dhi.\nD int\n// Dlo sets the lower bound on the number of peers we keep in a GossipSub topic mesh.\n// If we have fewer than Dlo peers, we will attempt to graft some more into the mesh at\n// the next heartbeat.\nDlo int\n// Dhi sets the upper bound on the number of peers we keep in a GossipSub topic mesh.\n// If we have more than Dhi peers, we will select some to prune from the mesh at the next heartbeat.\nDhi int\n// Dscore affects how peers are selected when pruning a mesh due to over subscription.\n// At least Dscore of the retained peers will be high-scoring, while the remainder are\n// chosen randomly.\nDscore int\n// Dout sets the quota for the number of outbound connections to maintain in a topic mesh.\n// When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n// to at least Dout of the survivor peers. This prevents sybil attackers from overwhelming\n// our mesh with incoming connections.\n//\n// Dout must be set below Dlo, and must not exceed D / 2.\nDout int\n// HistoryLength controls the size of the message cache used for gossip.\n// The message cache will remember messages for HistoryLength heartbeats.\nHistoryLength int\n// HistoryGossip controls how many cached message ids we will advertise in\n// IHAVE gossip messages. When asked for our seen message IDs, we will return\n// only those from the most recent HistoryGossip heartbeats. The slack between\n// HistoryGossip and HistoryLength allows us to avoid advertising messages\n// that will be expired by the time they're requested.\n//\n// HistoryGossip must be less than or equal to HistoryLength to\n// avoid a runtime panic.\nHistoryGossip int\n// Dlazy affects how many peers we will emit gossip to at each heartbeat.\n// We will send gossip to at least Dlazy peers outside our mesh. The actual\n// number may be more, depending on GossipFactor and how many peers we're\n// connected to.\nDlazy int\n// GossipFactor affects how many peers we will emit gossip to at each heartbeat.\n// We will send gossip to GossipFactor * (total number of non-mesh peers), or\n// Dlazy, whichever is greater.\nGossipFactor float64\n// GossipRetransmission controls how many times we will allow a peer to request\n// the same message id through IWANT gossip before we start ignoring them. This is designed\n// to prevent peers from spamming us with requests and wasting our resources.\nGossipRetransmission int\n// HeartbeatInitialDelay is the short delay before the heartbeat timer begins\n// after the router is initialized.\nHeartbeatInitialDelay time.Duration\n// HeartbeatInterval controls the time between heartbeats.\nHeartbeatInterval time.Duration\n// SlowHeartbeatWarning is the duration threshold for heartbeat processing before emitting\n// a warning; this would be indicative of an overloaded peer.\nSlowHeartbeatWarning float64\n// FanoutTTL controls how long we keep track of the fanout state. If it's been\n// FanoutTTL since we've published to a topic that we're not subscribed to,\n// we'll delete the fanout map for that topic.\nFanoutTTL time.Duration\n// PrunePeers controls the number of peers to include in prune Peer eXchange.\n// When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n// send them signed peer records for up to PrunePeers other peers that we\n// know of.\nPrunePeers int\n// PruneBackoff controls the backoff time for pruned peers. This is how long\n// a peer must wait before attempting to graft into our mesh again after being pruned.\n// When pruning a peer, we send them our value of PruneBackoff so they know\n// the minimum time to wait. Peers running older versions may not send a backoff time,\n// so if we receive a prune message without one, we will wait at least PruneBackoff\n// before attempting to re-graft.\nPruneBackoff time.Duration\n// UnsubscribeBackoff controls the backoff time to use when unsuscribing\n// from a topic. A peer should not resubscribe to this topic before this\n// duration.\nUnsubscribeBackoff time.Duration\n// Connectors controls the number of active connection attempts for peers obtained through PX.\nConnectors int\n// MaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\nMaxPendingConnections int\n// ConnectionTimeout controls the timeout for connection attempts.\nConnectionTimeout time.Duration\n// DirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n// that are not currently connected.\nDirectConnectTicks uint64\n// DirectConnectInitialDelay is the initial delay before opening connections to direct peers\nDirectConnectInitialDelay time.Duration\n// OpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n// with opportunistic grafting. Every OpportunisticGraftTicks we will attempt to select some\n// high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n// below a threshold (see https://godoc.org/github.com/libp2p/go-libp2p-pubsub#PeerScoreThresholds).\nOpportunisticGraftTicks uint64\n// OpportunisticGraftPeers is the number of peers to opportunistically graft.\nOpportunisticGraftPeers int\n// If a GRAFT comes before GraftFloodThreshold has elapsed since the last PRUNE,\n// then there is an extra score penalty applied to the peer through P7.\nGraftFloodThreshold time.Duration\n// MaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n// Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n// peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n// default if your system is pushing more than 5000 messages in HistoryGossip heartbeats;\n// with the defaults this is 1666 messages/s.\nMaxIHaveLength int\n// MaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\nMaxIHaveMessages int\n// Time to wait for a message requested through IWANT following an IHAVE advertisement.\n// If the message is not received within this window, a broken promise is declared and\n// the router may apply bahavioural penalties.\nIWantFollowupTime time.Duration\n}\nGossipSubParams defines all the gossipsub specific parameters.\nfunc DefaultGossipSubParams ¶\nadded in\nv0.5.0\nfunc DefaultGossipSubParams() GossipSubParams\nDefaultGossipSubParams returns the default gossip sub parameters\nas a config.\ntype GossipSubRouter ¶\ntype GossipSubRouter struct {\n// contains filtered or unexported fields\n}\nGossipSubRouter is a router that implements the gossipsub protocol.\nFor each topic we have joined, we maintain an overlay through which\nmessages flow; this is the mesh map.\nFor each topic we publish to without joining, we maintain a list of peers\nto use for injecting our messages in the overlay with stable routes; this\nis the fanout map. Fanout peer lists are expired if we don't publish any\nmessages to their topic for GossipSubFanoutTTL.\nfunc DefaultGossipSubRouter ¶\nadded in\nv0.8.2\nfunc DefaultGossipSubRouter(h host.Host) *GossipSubRouter\nDefaultGossipSubRouter returns a new GossipSubRouter with default parameters.\nfunc (*GossipSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (gs *GossipSubRouter) AcceptFrom(p peer.ID) AcceptStatus\nfunc (*GossipSubRouter) AddPeer ¶\nfunc (gs *GossipSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*GossipSubRouter) Attach ¶\nfunc (gs *GossipSubRouter) Attach(p *PubSub)\nfunc (*GossipSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*GossipSubRouter) HandleRPC ¶\nfunc (gs *GossipSubRouter) HandleRPC(rpc *RPC)\nfunc (*GossipSubRouter) Join ¶\nfunc (gs *GossipSubRouter) Join(topic string)\nfunc (*GossipSubRouter) Leave ¶\nfunc (gs *GossipSubRouter) Leave(topic string)\nfunc (*GossipSubRouter) Protocols ¶\nfunc (gs *GossipSubRouter) Protocols() []protocol.ID\nfunc (*GossipSubRouter) Publish ¶\nfunc (gs *GossipSubRouter) Publish(msg *Message)\nfunc (*GossipSubRouter) RemovePeer ¶\nfunc (gs *GossipSubRouter) RemovePeer(p peer.ID)\nfunc (*GossipSubRouter) WithDefaultTagTracer ¶\nadded in\nv0.8.2\nfunc (gs *GossipSubRouter) WithDefaultTagTracer() Option\nWithDefaultTagTracer returns the tag tracer of the GossipSubRouter as a PubSub option.\nThis is useful for cases where the GossipSubRouter is instantiated externally, and is\ninjected into the GossipSub constructor as a dependency. This allows the tag tracer to be\nalso injected into the GossipSub constructor as a PubSub option dependency.\ntype JSONTracer ¶\nadded in\nv0.2.3\ntype JSONTracer struct {\n// contains filtered or unexported fields\n}\nJSONTracer is a tracer that writes events to a file, encoded in ndjson.\nfunc NewJSONTracer ¶\nadded in\nv0.2.3\nfunc NewJSONTracer(file string) (*JSONTracer, error)\nNewJsonTracer creates a new JSONTracer writing traces to file.\nfunc OpenJSONTracer ¶\nadded in\nv0.2.3\nfunc OpenJSONTracer(file string, flags int, perm os.FileMode) (*JSONTracer, error)\nOpenJSONTracer creates a new JSONTracer, with explicit control of OpenFile flags and permissions.\nfunc (*JSONTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *JSONTracer) Close()\nfunc (*JSONTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *JSONTracer) Trace(evt *pb.TraceEvent)\ntype MapBlacklist ¶\ntype MapBlacklist map[peer.ID]struct{}\nMapBlacklist is a blacklist implementation using a perfect map\nfunc (MapBlacklist) Add ¶\nfunc (b MapBlacklist) Add(p peer.ID) bool\nfunc (MapBlacklist) Contains ¶\nfunc (b MapBlacklist) Contains(p peer.ID) bool\ntype Message ¶\ntype Message struct {\n*pb.Message\nID\nstring\nReceivedFrom\npeer.ID\nValidatorData interface{}\nLocal\nbool\n}\nfunc (*Message) GetFrom ¶\nfunc (m *Message) GetFrom() peer.ID\ntype MessageCache ¶\ntype MessageCache struct {\n// contains filtered or unexported fields\n}\nfunc NewMessageCache ¶\nfunc NewMessageCache(gossip, history int) *MessageCache\nNewMessageCache creates a sliding window cache that remembers messages for as\nlong as `history` slots.\nWhen queried for messages to advertise, the cache only returns messages in\nthe last `gossip` slots.\nThe `gossip` parameter must be smaller or equal to `history`, or this\nfunction will panic.\nThe slack between `gossip` and `history` accounts for the reaction time\nbetween when a message is advertised via IHAVE gossip, and the peer pulls it\nvia an IWANT command.\nfunc (*MessageCache) Get ¶\nfunc (mc *MessageCache) Get(mid string) (*Message, bool)\nfunc (*MessageCache) GetForPeer ¶\nadded in\nv0.3.0\nfunc (mc *MessageCache) GetForPeer(mid string, p peer.ID) (*Message, int, bool)\nfunc (*MessageCache) GetGossipIDs ¶\nfunc (mc *MessageCache) GetGossipIDs(topic string) []string\nfunc (*MessageCache) Put ¶\nfunc (mc *MessageCache) Put(msg *Message)\nfunc (*MessageCache) SetMsgIdFn ¶\nadded in\nv0.2.5\nfunc (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string)\nfunc (*MessageCache) Shift ¶\nfunc (mc *MessageCache) Shift()\ntype MessageSignaturePolicy ¶\nadded in\nv0.3.3\ntype MessageSignaturePolicy uint8\nMessageSignaturePolicy describes if signatures are produced, expected, and/or verified.\ntype MsgIdFunction ¶\nadded in\nv0.2.5\ntype MsgIdFunction func(pmsg *pb.Message) string\nMsgIdFunction returns a unique ID for the passed Message, and PubSub can be customized to use any\nimplementation of this function by configuring it with the Option from WithMessageIdFn.\ntype Option ¶\ntype Option func(*PubSub) error\nfunc WithAppSpecificRpcInspector ¶\nadded in\nv0.8.2\nfunc WithAppSpecificRpcInspector(inspector func(peer.ID, *RPC) error) Option\nWithAppSpecificRpcInspector sets a hook that inspect incomings RPCs prior to\nprocessing them.\nThe inspector is invoked on an accepted RPC just before it\nis handled.\nIf inspector's error is nil, the RPC is handled. Otherwise, it\nis dropped.\nfunc WithBlacklist ¶\nfunc WithBlacklist(b Blacklist) Option\nWithBlacklist provides an implementation of the blacklist; the default is a\nMapBlacklist\nfunc WithDefaultValidator ¶\nadded in\nv0.9.2\nfunc WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option\n/ Options\nWithDefaultValidator adds a validator that applies to all topics by default; it can be used\nmore than once and add multiple validators. Having a defult validator does not inhibit registering\na per topic validator.\nfunc WithDirectConnectTicks ¶\nadded in\nv0.3.2\nfunc WithDirectConnectTicks(t uint64) Option\nWithDirectConnectTicks is a gossipsub router option that sets the number of\nheartbeat ticks between attempting to reconnect direct peers that are not\ncurrently connected. A \"tick\" is based on the heartbeat interval, which is\n1s by default. The default value for direct connect ticks is 300.\nfunc WithDirectPeers ¶\nadded in\nv0.3.0\nfunc WithDirectPeers(pis []peer.AddrInfo) Option\nWithDirectPeers is a gossipsub router option that specifies peers with direct\npeering agreements. These peers are connected outside of the mesh, with all (valid)\nmessage unconditionally forwarded to them. The router will maintain open connections\nto these peers. Note that the peering agreement should be reciprocal with direct peers\nsymmetrically configured at both ends.\nfunc WithDiscovery ¶\nadded in\nv0.2.0\nfunc WithDiscovery(d discovery.Discovery, opts ...DiscoverOpt) Option\nWithDiscovery provides a discovery mechanism used to bootstrap and provide peers into PubSub\nfunc WithEventTracer ¶\nadded in\nv0.2.3\nfunc WithEventTracer(tracer EventTracer) Option\nWithEventTracer provides a tracer for the pubsub system\nfunc WithFloodPublish ¶\nadded in\nv0.3.0\nfunc WithFloodPublish(floodPublish bool) Option\nWithFloodPublish is a gossipsub router option that enables flood publishing.\nWhen this is enabled, published messages are forwarded to all peers with score >=\nto publishThreshold\nfunc WithGossipSubParams ¶\nadded in\nv0.5.0\nfunc WithGossipSubParams(cfg GossipSubParams) Option\nWithGossipSubParams is a gossip sub router option that allows a custom\nconfig to be set when instantiating the gossipsub router.\nfunc WithGossipSubProtocols ¶\nadded in\nv0.5.0\nfunc WithGossipSubProtocols(protos []protocol.ID, feature GossipSubFeatureTest) Option\nWithGossipSubProtocols is a gossipsub router option that configures a custom protocol list\nand feature test function\nfunc WithMaxMessageSize ¶\nadded in\nv0.3.0\nfunc WithMaxMessageSize(maxMessageSize int) Option\nWithMaxMessageSize sets the global maximum message size for pubsub wire\nmessages. The default value is 1MiB (DefaultMaxMessageSize).\nObserve the following warnings when setting this option.\nWARNING #1: Make sure to change the default protocol prefixes for floodsub\n(FloodSubID) and gossipsub (GossipSubID). This avoids accidentally joining\nthe public default network, which uses the default max message size, and\ntherefore will cause messages to be dropped.\nWARNING #2: Reducing the default max message limit is fine, if you are\ncertain that your application messages will not exceed the new limit.\nHowever, be wary of increasing the limit, as pubsub networks are naturally\nwrite-amplifying, i.e. for every message we receive, we send D copies of the\nmessage to our peers. If those messages are large, the bandwidth requirements\nwill grow linearly. Note that propagation is sent on the uplink, which\ntraditionally is more constrained than the downlink. Instead, consider\nout-of-band retrieval for large messages, by sending a CID (Content-ID) or\nanother type of locator, such that messages can be fetched on-demand, rather\nthan being pushed proactively. Under this design, you'd use the pubsub layer\nas a signalling system, rather than a data delivery system.\nfunc WithMessageAuthor ¶\nfunc WithMessageAuthor(author peer.ID) Option\nWithMessageAuthor sets the author for outbound messages to the given peer ID\n(defaults to the host's ID). If message signing is enabled, the private key\nmust be available in the host's peerstore.\nfunc WithMessageIdFn ¶\nadded in\nv0.2.5\nfunc WithMessageIdFn(fn MsgIdFunction) Option\nWithMessageIdFn is an option to customize the way a message ID is computed for a pubsub message.\nThe default ID function is DefaultMsgIdFn (concatenate source and seq nr.),\nbut it can be customized to e.g. the hash of the message.\nfunc WithMessageSignaturePolicy ¶\nadded in\nv0.3.3\nfunc WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option\nWithMessageSignaturePolicy sets the mode of operation for producing and verifying message signatures.\nfunc WithMessageSigning ¶\nfunc WithMessageSigning(enabled bool) Option\nWithMessageSigning enables or disables message signing (enabled by default).\nDeprecated: signature verification without message signing,\nor message signing without verification, are not recommended.\nfunc WithNoAuthor ¶\nadded in\nv0.3.3\nfunc WithNoAuthor() Option\nWithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures.\nNot recommended to use with the default message ID function, see WithMessageIdFn.\nfunc WithPeerExchange ¶\nadded in\nv0.3.0\nfunc WithPeerExchange(doPX bool) Option\nWithPeerExchange is a gossipsub router option that enables Peer eXchange on PRUNE.\nThis should generally be enabled in bootstrappers and well connected/trusted nodes\nused for bootstrapping.\nfunc WithPeerFilter ¶\nadded in\nv0.5.5\nfunc WithPeerFilter(filter PeerFilter) Option\nWithPeerFilter is an option to set a filter for pubsub peers.\nThe default peer filter is DefaultPeerFilter (which always returns true), but it can be customized\nto any custom implementation.\nfunc WithPeerGater ¶\nadded in\nv0.3.6\nfunc WithPeerGater(params *PeerGaterParams) Option\nWithPeerGater is a gossipsub router option that enables reactive validation queue\nmanagement.\nThe Gater is activated if the ratio of throttled/validated messages exceeds the specified\nthreshold.\nOnce active, the Gater probabilistically throttles peers _before_ they enter the validation\nqueue, performing Random Early Drop.\nThe throttle decision is randomized, with the probability of allowing messages to enter the\nvalidation queue controlled by the statistical observations of the performance of all peers\nin the IP address of the gated peer.\nThe Gater deactivates if there is no validation throttlinc occurring for the specified quiet\ninterval.\nfunc WithPeerOutboundQueueSize ¶\nadded in\nv0.2.2\nfunc WithPeerOutboundQueueSize(size int) Option\nWithPeerOutboundQueueSize is an option to set the buffer size for outbound messages to a peer\nWe start dropping messages to a peer if the outbound queue if full\nfunc WithPeerScore ¶\nadded in\nv0.3.0\nfunc WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option\nWithPeerScore is a gossipsub router option that enables peer scoring.\nfunc WithPeerScoreInspect ¶\nadded in\nv0.3.0\nfunc WithPeerScoreInspect(inspect interface{}, period time.Duration) Option\nWithPeerScoreInspect is a gossipsub router option that enables peer score debugging.\nWhen this option is enabled, the supplied function will be invoked periodically to allow\nthe application to inspect or dump the scores for connected peers.\nThe supplied function can have one of two signatures:\nPeerScoreInspectFn, which takes a map of peer IDs to score.\nExtendedPeerScoreInspectFn, which takes a map of peer IDs to\nPeerScoreSnapshots and allows inspection of individual score\ncomponents for debugging peer scoring.\nThis option must be passed _after_ the WithPeerScore option.\nfunc WithProtocolMatchFn ¶\nadded in\nv0.5.4\nfunc WithProtocolMatchFn(m ProtocolMatchFn) Option\nWithProtocolMatchFn sets a custom matching function for protocol selection to\nbe used by the protocol handler on the Host's Mux. Should be combined with\nWithGossipSubProtocols feature function for checking if certain protocol features\nare supported\nfunc WithRawTracer ¶\nadded in\nv0.5.0\nfunc WithRawTracer(tracer RawTracer) Option\nWithRawTracer adds a raw tracer to the pubsub system.\nMultiple tracers can be added using multiple invocations of the option.\nfunc WithSeenMessagesStrategy ¶\nadded in\nv0.8.3\nfunc WithSeenMessagesStrategy(strategy timecache.Strategy) Option\nWithSeenMessagesStrategy configures which type of lookup/cleanup strategy is used by the seen messages cache\nfunc WithSeenMessagesTTL ¶\nadded in\nv0.7.0\nfunc WithSeenMessagesTTL(ttl time.Duration) Option\nWithSeenMessagesTTL configures when a previously seen message ID can be forgotten about\nfunc WithStrictSignatureVerification ¶\nfunc WithStrictSignatureVerification(required bool) Option\nWithStrictSignatureVerification is an option to enable or disable strict message signing.\nWhen enabled (which is the default), unsigned messages will be discarded.\nDeprecated: signature verification without message signing,\nor message signing without verification, are not recommended.\nfunc WithSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc WithSubscriptionFilter(subFilter SubscriptionFilter) Option\nWithSubscriptionFilter is a pubsub option that specifies a filter for subscriptions\nin topics of interest.\nfunc WithValidateQueueSize ¶\nadded in\nv0.2.6\nfunc WithValidateQueueSize(n int) Option\nWithValidateQueueSize sets the buffer of validate queue. Defaults to 32.\nWhen queue is full, validation is throttled and new messages are dropped.\nfunc WithValidateThrottle ¶\nfunc WithValidateThrottle(n int) Option\nWithValidateThrottle sets the upper bound on the number of active validation\ngoroutines across all topics. The default is 8192.\nfunc WithValidateWorkers ¶\nadded in\nv0.0.3\nfunc WithValidateWorkers(n int) Option\nWithValidateWorkers sets the number of synchronous validation worker goroutines.\nDefaults to NumCPU.\nThe synchronous validation workers perform signature validation, apply inline\nuser validators, and schedule asynchronous user validators.\nYou can adjust this parameter to devote less cpu time to synchronous validation.\ntype PBTracer ¶\nadded in\nv0.2.3\ntype PBTracer struct {\n// contains filtered or unexported fields\n}\nPBTracer is a tracer that writes events to a file, as delimited protobufs.\nfunc NewPBTracer ¶\nadded in\nv0.2.3\nfunc NewPBTracer(file string) (*PBTracer, error)\nfunc OpenPBTracer ¶\nadded in\nv0.2.3\nfunc OpenPBTracer(file string, flags int, perm os.FileMode) (*PBTracer, error)\nOpenPBTracer creates a new PBTracer, with explicit control of OpenFile flags and permissions.\nfunc (*PBTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *PBTracer) Close()\nfunc (*PBTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *PBTracer) Trace(evt *pb.TraceEvent)\ntype PeerEvent ¶\nadded in\nv0.1.1\ntype PeerEvent struct {\nType EventType\nPeer peer.ID\n}\ntype PeerFilter ¶\nadded in\nv0.5.5\ntype PeerFilter func(pid peer.ID, topic string) bool\nPeerFilter is used to filter pubsub peers. It should return true for peers that are accepted for\na given topic. PubSub can be customized to use any implementation of this function by configuring\nit with the Option from WithPeerFilter.\ntype PeerGaterParams ¶\nadded in\nv0.3.6\ntype PeerGaterParams struct {\n// when the ratio of throttled/validated messages exceeds this threshold, the gater turns on\nThreshold float64\n// (linear) decay parameter for gater counters\nGlobalDecay float64 // global counter decay\nSourceDecay float64 // per IP counter decay\n// decay interval\nDecayInterval time.Duration\n// counter zeroing threshold\nDecayToZero float64\n// how long to retain stats\nRetainStats time.Duration\n// quiet interval before turning off the gater; if there are no validation throttle events\n// for this interval, the gater turns off\nQuiet time.Duration\n// weight of duplicate message deliveries\nDuplicateWeight float64\n// weight of ignored messages\nIgnoreWeight float64\n// weight of rejected messages\nRejectWeight float64\n// priority topic delivery weights\nTopicDeliveryWeights map[string]float64\n}\nPeerGaterParams groups together parameters that control the operation of the peer gater\nfunc DefaultPeerGaterParams ¶\nadded in\nv0.3.6\nfunc DefaultPeerGaterParams() *PeerGaterParams\nDefaultPeerGaterParams creates a new PeerGaterParams struct using default values\nfunc NewPeerGaterParams ¶\nadded in\nv0.3.6\nfunc NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams\nNewPeerGaterParams creates a new PeerGaterParams struct, using the specified threshold and decay\nparameters and default values for all other parameters.\nfunc (*PeerGaterParams) WithTopicDeliveryWeights ¶\nadded in\nv0.3.6\nfunc (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams\nWithTopicDeliveryWeights is a fluid setter for the priority topic delivery weights\ntype PeerMetadataStore ¶\nadded in\nv0.9.2\ntype PeerMetadataStore interface {\n// Get retrieves the metadata associated with a peer;\n// It should return nil if there is no metadata associated with the peer and not an error.\nGet(context.Context, peer.ID) ([]byte, error)\n// Put sets the metadata associated with a peer.\nPut(context.Context, peer.ID, []byte) error\n}\nPeerMetadataStore is an interface for storing and retrieving per peer metadata\ntype PeerScoreInspectFn ¶\nadded in\nv0.3.0\ntype PeerScoreInspectFn = func(map[peer.ID]float64)\ntype PeerScoreParams ¶\nadded in\nv0.3.0\ntype PeerScoreParams struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// Score parameters per topic.\nTopics map[string]*TopicScoreParams\n// Aggregate topic score cap; this limits the total contribution of topics towards a positive\n// score. It must be positive (or 0 for no cap).\nTopicScoreCap float64\n// P5: Application-specific peer scoring\nAppSpecificScore\nfunc(p peer.ID) float64\nAppSpecificWeight float64\n// P6: IP-colocation factor.\n// The parameter has an associated counter which counts the number of peers with the same IP.\n// If the number of peers in the same IP exceeds IPColocationFactorThreshold, then the value\n// is the square of the difference, ie (PeersInSameIP - IPColocationThreshold)^2.\n// If the number of peers in the same IP is less than the threshold, then the value is 0.\n// The weight of the parameter MUST be negative, unless you want to disable for testing.\n// Note: In order to simulate many IPs in a managable manner when testing, you can set the weight to 0\n//\nthus disabling the IP colocation penalty.\nIPColocationFactorWeight\nfloat64\nIPColocationFactorThreshold int\nIPColocationFactorWhitelist []*net.IPNet\n// P7: behavioural pattern penalties.\n// This parameter has an associated counter which tracks misbehaviour as detected by the\n// router. The router currently applies penalties for the following behaviors:\n// - attempting to re-graft before the prune backoff time has elapsed.\n// - not following up in IWANT requests for messages advertised with IHAVE.\n//\n// The value of the parameter is the square of the counter over the threshold, which decays with\n// BehaviourPenaltyDecay.\n// The weight of the parameter MUST be negative (or zero to disable).\nBehaviourPenaltyWeight, BehaviourPenaltyThreshold, BehaviourPenaltyDecay float64\n// the decay interval for parameter counters.\nDecayInterval time.Duration\n// counter value below which it is considered 0.\nDecayToZero float64\n// time to remember counters for a disconnected peer.\nRetainScore time.Duration\n// time to remember a message delivery for. Default to global TimeCacheDuration if 0.\nSeenMsgTTL time.Duration\n}\ntype PeerScoreSnapshot ¶\nadded in\nv0.3.3\ntype PeerScoreSnapshot struct {\nScore\nfloat64\nTopics\nmap[string]*TopicScoreSnapshot\nAppSpecificScore\nfloat64\nIPColocationFactor float64\nBehaviourPenalty\nfloat64\n}\ntype PeerScoreThresholds ¶\nadded in\nv0.3.0\ntype PeerScoreThresholds struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// GossipThreshold is the score threshold below which gossip propagation is suppressed;\n// should be negative.\nGossipThreshold float64\n// PublishThreshold is the score threshold below which we shouldn't publish when using flood\n// publishing (also applies to fanout and floodsub peers); should be negative and <= GossipThreshold.\nPublishThreshold float64\n// GraylistThreshold is the score threshold below which message processing is suppressed altogether,\n// implementing an effective gray list according to peer score; should be negative and <= PublishThreshold.\nGraylistThreshold float64\n// AcceptPXThreshold is the score threshold below which PX will be ignored; this should be positive\n// and limited to scores attainable by bootstrappers and other trusted nodes.\nAcceptPXThreshold float64\n// OpportunisticGraftThreshold is the median mesh score threshold before triggering opportunistic\n// grafting; this should have a small positive value.\nOpportunisticGraftThreshold float64\n}\ntype ProtocolMatchFn ¶\nadded in\nv0.5.4\ntype ProtocolMatchFn = func(protocol.ID) func(protocol.ID) bool\ntype ProvideKey ¶\nadded in\nv0.7.0\ntype ProvideKey func() (crypto.PrivKey, peer.ID)\nProvideKey is a function that provides a private key and its associated peer ID when publishing a new message\ntype PubOpt ¶\nadded in\nv0.2.0\ntype PubOpt func(pub *PublishOptions) error\nfunc WithLocalPublication ¶\nadded in\nv0.8.0\nfunc WithLocalPublication(local bool) PubOpt\nWithLocalPublication returns a publishing option to notify in-process subscribers only.\nIt prevents message publication to mesh peers.\nUseful in edge cases where the msg needs to be only delivered to the in-process subscribers,\ne.g. not to spam the network with outdated msgs.\nShould not be used specifically for in-process pubsubing.\nfunc WithReadiness ¶\nadded in\nv0.2.0\nfunc WithReadiness(ready RouterReady) PubOpt\nWithReadiness returns a publishing option for only publishing when the router is ready.\nThis option is not useful unless PubSub is also using WithDiscovery\nfunc WithSecretKeyAndPeerId ¶\nadded in\nv0.7.0\nfunc WithSecretKeyAndPeerId(key crypto.PrivKey, pid peer.ID) PubOpt\nWithSecretKeyAndPeerId returns a publishing option for providing a custom private key and its corresponding peer ID\nThis option is useful when we want to send messages from \"virtual\", never-connectable peers in the network\ntype PubSub ¶\ntype PubSub struct {\n// contains filtered or unexported fields\n}\nPubSub is the implementation of the pubsub system.\nfunc NewFloodSub ¶\nfunc NewFloodSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nNewFloodSub returns a new PubSub object using the FloodSubRouter.\nfunc NewFloodsubWithProtocols ¶\nfunc NewFloodsubWithProtocols(ctx context.Context, h host.Host, ps []protocol.ID, opts ...Option) (*PubSub, error)\nNewFloodsubWithProtocols returns a new floodsub-enabled PubSub objecting using the protocols specified in ps.\nfunc NewGossipSub ¶\nfunc NewGossipSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nNewGossipSub returns a new PubSub object using the default GossipSubRouter as the router.\nfunc NewGossipSubWithRouter ¶\nadded in\nv0.8.2\nfunc NewGossipSubWithRouter(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nNewGossipSubWithRouter returns a new PubSub object using the given router.\nfunc NewPubSub ¶\nfunc NewPubSub(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nNewPubSub returns a new PubSub management object.\nfunc NewRandomSub ¶\nfunc NewRandomSub(ctx context.Context, h host.Host, size int, opts ...Option) (*PubSub, error)\nNewRandomSub returns a new PubSub object using RandomSubRouter as the router.\nfunc (*PubSub) BlacklistPeer ¶\nfunc (p *PubSub) BlacklistPeer(pid peer.ID)\nBlacklistPeer blacklists a peer; all messages from this peer will be unconditionally dropped.\nfunc (*PubSub) GetTopics ¶\nfunc (p *PubSub) GetTopics() []string\nGetTopics returns the topics this node is subscribed to.\nfunc (*PubSub) Join ¶\nadded in\nv0.2.0\nfunc (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error)\nJoin joins the topic and returns a Topic handle. Only one Topic handle should exist per topic, and Join will error if\nthe Topic handle already exists.\nfunc (*PubSub) ListPeers ¶\nfunc (p *PubSub) ListPeers(topic string) []peer.ID\nListPeers returns a list of peers we are connected to in the given topic.\nfunc (*PubSub) Publish\ndeprecated\nfunc (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) error\nPublish publishes data to the given topic.\nDeprecated: use pubsub.Join() and topic.Publish() instead\nfunc (*PubSub) RegisterTopicValidator ¶\nfunc (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error\nRegisterTopicValidator registers a validator for topic.\nBy default validators are asynchronous, which means they will run in a separate goroutine.\nThe number of active goroutines is controlled by global and per topic validator\nthrottles; if it exceeds the throttle threshold, messages will be dropped.\nfunc (*PubSub) Subscribe\ndeprecated\nfunc (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)\nSubscribe returns a new Subscription for the given topic.\nNote that subscription is not an instantaneous operation. It may take some time\nbefore the subscription is processed by the pubsub main loop and propagated to our peers.\nDeprecated: use pubsub.Join() and topic.Subscribe() instead\nfunc (*PubSub) UnregisterTopicValidator ¶\nfunc (p *PubSub) UnregisterTopicValidator(topic string) error\nUnregisterTopicValidator removes a validator from a topic.\nReturns an error if there was no validator registered with the topic.\ntype PubSubNotif ¶\ntype PubSubNotif PubSub\nfunc (*PubSubNotif) ClosedStream ¶\nfunc (p *PubSubNotif) ClosedStream(n network.Network, s network.Stream)\nfunc (*PubSubNotif) Connected ¶\nfunc (p *PubSubNotif) Connected(n network.Network, c network.Conn)\nfunc (*PubSubNotif) Disconnected ¶\nfunc (p *PubSubNotif) Disconnected(n network.Network, c network.Conn)\nfunc (*PubSubNotif) Initialize ¶\nadded in\nv0.4.1\nfunc (p *PubSubNotif) Initialize()\nfunc (*PubSubNotif) Listen ¶\nfunc (p *PubSubNotif) Listen(n network.Network, _ ma.Multiaddr)\nfunc (*PubSubNotif) ListenClose ¶\nfunc (p *PubSubNotif) ListenClose(n network.Network, _ ma.Multiaddr)\nfunc (*PubSubNotif) OpenedStream ¶\nfunc (p *PubSubNotif) OpenedStream(n network.Network, s network.Stream)\ntype PubSubRouter ¶\ntype PubSubRouter interface {\n// Protocols returns the list of protocols supported by the router.\nProtocols() []protocol.ID\n// Attach is invoked by the PubSub constructor to attach the router to a\n// freshly initialized PubSub instance.\nAttach(*PubSub)\n// AddPeer notifies the router that a new peer has been connected.\nAddPeer(peer.ID, protocol.ID)\n// RemovePeer notifies the router that a peer has been disconnected.\nRemovePeer(peer.ID)\n// EnoughPeers returns whether the router needs more peers before it's ready to publish new records.\n// Suggested (if greater than 0) is a suggested number of peers that the router should need.\nEnoughPeers(topic string, suggested int) bool\n// AcceptFrom is invoked on any incoming message before pushing it to the validation pipeline\n// or processing control information.\n// Allows routers with internal scoring to vet peers before committing any processing resources\n// to the message and implement an effective graylist and react to validation queue overload.\nAcceptFrom(peer.ID) AcceptStatus\n// HandleRPC is invoked to process control messages in the RPC envelope.\n// It is invoked after subscriptions and payload messages have been processed.\nHandleRPC(*RPC)\n// Publish is invoked to forward a new message that has been validated.\nPublish(*Message)\n// Join notifies the router that we want to receive and forward messages in a topic.\n// It is invoked after the subscription announcement.\nJoin(topic string)\n// Leave notifies the router that we are no longer interested in a topic.\n// It is invoked after the unsubscription announcement.\nLeave(topic string)\n}\nPubSubRouter is the message router component of PubSub.\ntype PublishOptions ¶\nadded in\nv0.2.0\ntype PublishOptions struct {\n// contains filtered or unexported fields\n}\ntype RPC ¶\ntype RPC struct {\npb.RPC\n// contains filtered or unexported fields\n}\ntype RandomSubRouter ¶\ntype RandomSubRouter struct {\n// contains filtered or unexported fields\n}\nRandomSubRouter is a router that implements a random propagation strategy.\nFor each message, it selects the square root of the network size peers, with a min of RandomSubD,\nand forwards the message to them.\nfunc (*RandomSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (*RandomSubRouter) AddPeer ¶\nfunc (rs *RandomSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*RandomSubRouter) Attach ¶\nfunc (rs *RandomSubRouter) Attach(p *PubSub)\nfunc (*RandomSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*RandomSubRouter) HandleRPC ¶\nfunc (rs *RandomSubRouter) HandleRPC(rpc *RPC)\nfunc (*RandomSubRouter) Join ¶\nfunc (rs *RandomSubRouter) Join(topic string)\nfunc (*RandomSubRouter) Leave ¶\nfunc (rs *RandomSubRouter) Leave(topic string)\nfunc (*RandomSubRouter) Protocols ¶\nfunc (rs *RandomSubRouter) Protocols() []protocol.ID\nfunc (*RandomSubRouter) Publish ¶\nfunc (rs *RandomSubRouter) Publish(msg *Message)\nfunc (*RandomSubRouter) RemovePeer ¶\nfunc (rs *RandomSubRouter) RemovePeer(p peer.ID)\ntype RawTracer ¶\nadded in\nv0.5.0\ntype RawTracer interface {\n// AddPeer is invoked when a new peer is added.\nAddPeer(p peer.ID, proto protocol.ID)\n// RemovePeer is invoked when a peer is removed.\nRemovePeer(p peer.ID)\n// Join is invoked when a new topic is joined\nJoin(topic string)\n// Leave is invoked when a topic is abandoned\nLeave(topic string)\n// Graft is invoked when a new peer is grafted on the mesh (gossipsub)\nGraft(p peer.ID, topic string)\n// Prune is invoked when a peer is pruned from the message (gossipsub)\nPrune(p peer.ID, topic string)\n// ValidateMessage is invoked when a message first enters the validation pipeline.\nValidateMessage(msg *Message)\n// DeliverMessage is invoked when a message is delivered\nDeliverMessage(msg *Message)\n// RejectMessage is invoked when a message is Rejected or Ignored.\n// The reason argument can be one of the named strings Reject*.\nRejectMessage(msg *Message, reason string)\n// DuplicateMessage is invoked when a duplicate message is dropped.\nDuplicateMessage(msg *Message)\n// ThrottlePeer is invoked when a peer is throttled by the peer gater.\nThrottlePeer(p peer.ID)\n// RecvRPC is invoked when an incoming RPC is received.\nRecvRPC(rpc *RPC)\n// SendRPC is invoked when a RPC is sent.\nSendRPC(rpc *RPC, p peer.ID)\n// DropRPC is invoked when an outbound RPC is dropped, typically because of a queue full.\nDropRPC(rpc *RPC, p peer.ID)\n// UndeliverableMessage is invoked when the consumer of Subscribe is not reading messages fast enough and\n// the pressure release mechanism trigger, dropping messages.\nUndeliverableMessage(msg *Message)\n}\nRawTracer is a low level tracing interface that allows an application to trace the internal\noperation of the pubsub subsystem.\nNote that the tracers are invoked synchronously, which means that application tracers must\ntake care to not block or modify arguments.\nWarning: this interface is not fixed, we may be adding new methods as necessitated by the system\nin the future.\ntype RelayCancelFunc ¶\nadded in\nv0.3.0\ntype RelayCancelFunc func()\ntype RemoteTracer ¶\nadded in\nv0.2.3\ntype RemoteTracer struct {\n// contains filtered or unexported fields\n}\nRemoteTracer is a tracer that sends trace events to a remote peer\nfunc NewRemoteTracer ¶\nadded in\nv0.2.3\nfunc NewRemoteTracer(ctx context.Context, host host.Host, pi peer.AddrInfo) (*RemoteTracer, error)\nNewRemoteTracer constructs a RemoteTracer, tracing to the peer identified by pi\nfunc (*RemoteTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *RemoteTracer) Close()\nfunc (*RemoteTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *RemoteTracer) Trace(evt *pb.TraceEvent)\ntype RouterReady ¶\nadded in\nv0.2.0\ntype RouterReady func(rt PubSubRouter, topic string) (bool, error)\nRouterReady is a function that decides if a router is ready to publish\nfunc MinTopicSize ¶\nadded in\nv0.2.0\nfunc MinTopicSize(size int) RouterReady\nMinTopicSize returns a function that checks if a router is ready for publishing based on the topic size.\nThe router ultimately decides the whether it is ready or not, the given size is just a suggestion. Note\nthat the topic size does not include the router in the count.\ntype SubOpt ¶\ntype SubOpt func(sub *Subscription) error\nfunc WithBufferSize ¶\nadded in\nv0.5.0\nfunc WithBufferSize(size int) SubOpt\nWithBufferSize is a Subscribe option to customize the size of the subscribe output buffer.\nThe default length is 32 but it can be configured to avoid dropping messages if the consumer is not reading fast\nenough.\ntype Subscription ¶\ntype Subscription struct {\n// contains filtered or unexported fields\n}\nSubscription handles the details of a particular Topic subscription.\nThere may be many subscriptions for a given Topic.\nfunc (*Subscription) Cancel ¶\nfunc (sub *Subscription) Cancel()\nCancel closes the subscription. If this is the last active subscription then pubsub will send an unsubscribe\nannouncement to the network.\nfunc (*Subscription) Next ¶\nfunc (sub *Subscription) Next(ctx context.Context) (*Message, error)\nNext returns the next message in our subscription\nfunc (*Subscription) Topic ¶\nfunc (sub *Subscription) Topic() string\nTopic returns the topic string associated with the Subscription\ntype SubscriptionFilter ¶\nadded in\nv0.3.6\ntype SubscriptionFilter interface {\n// CanSubscribe returns true if the topic is of interest and we can subscribe to it\nCanSubscribe(topic string) bool\n// FilterIncomingSubscriptions is invoked for all RPCs containing subscription notifications.\n// It should filter only the subscriptions of interest and my return an error if (for instance)\n// there are too many subscriptions.\nFilterIncomingSubscriptions(peer.ID, []*pb.RPC_SubOpts) ([]*pb.RPC_SubOpts, error)\n}\nSubscriptionFilter is a function that tells us whether we are interested in allowing and tracking\nsubscriptions for a given topic.\nThe filter is consulted whenever a subscription notification is received by another peer; if the\nfilter returns false, then the notification is ignored.\nThe filter is also consulted when joining topics; if the filter returns false, then the Join\noperation will result in an error.\nfunc NewAllowlistSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter\nNewAllowlistSubscriptionFilter creates a subscription filter that only allows explicitly\nspecified topics for local subscriptions and incoming peer subscriptions.\nfunc NewRegexpSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc NewRegexpSubscriptionFilter(rx *regexp.Regexp) SubscriptionFilter\nNewRegexpSubscriptionFilter creates a subscription filter that only allows topics that\nmatch a regular expression for local subscriptions and incoming peer subscriptions.\nWarning: the user should take care to match start/end of string in the supplied regular\nexpression, otherwise the filter might match unwanted topics unexpectedly.\nfunc WrapLimitSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter\nWrapLimitSubscriptionFilter wraps a subscription filter with a hard limit in the number of\nsubscriptions allowed in an RPC message.\ntype TimeCachedBlacklist ¶\nadded in\nv0.2.6\ntype TimeCachedBlacklist struct {\n// contains filtered or unexported fields\n}\nTimeCachedBlacklist is a blacklist implementation using a time cache\nfunc (*TimeCachedBlacklist) Add ¶\nadded in\nv0.2.6\nfunc (b *TimeCachedBlacklist) Add(p peer.ID) bool\nAdd returns a bool saying whether Add of peer was successful\nfunc (*TimeCachedBlacklist) Contains ¶\nadded in\nv0.2.6\nfunc (b *TimeCachedBlacklist) Contains(p peer.ID) bool\ntype Topic ¶\nadded in\nv0.2.0\ntype Topic struct {\n// contains filtered or unexported fields\n}\nTopic is the handle for a pubsub topic\nfunc (*Topic) Close ¶\nadded in\nv0.2.0\nfunc (t *Topic) Close() error\nClose closes down the topic. Will return an error unless there are no active event handlers or subscriptions.\nDoes not error if the topic is already closed.\nfunc (*Topic) EventHandler ¶\nadded in\nv0.2.0\nfunc (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error)\nEventHandler creates a handle for topic specific events\nMultiple event handlers may be created and will operate independently of each other\nfunc (*Topic) ListPeers ¶\nadded in\nv0.2.0\nfunc (t *Topic) ListPeers() []peer.ID\nListPeers returns a list of peers we are connected to in the given topic.\nfunc (*Topic) Publish ¶\nadded in\nv0.2.0\nfunc (t *Topic) Publish(ctx context.Context, data []byte, opts ...PubOpt) error\nPublish publishes data to topic.\nfunc (*Topic) Relay ¶\nadded in\nv0.3.0\nfunc (t *Topic) Relay() (RelayCancelFunc, error)\nRelay enables message relaying for the topic and returns a reference\ncancel function. Subsequent calls increase the reference counter.\nTo completely disable the relay, all references must be cancelled.\nfunc (*Topic) SetScoreParams ¶\nadded in\nv0.3.6\nfunc (t *Topic) SetScoreParams(p *TopicScoreParams) error\nSetScoreParams sets the topic score parameters if the pubsub router supports peer\nscoring\nfunc (*Topic) String ¶\nadded in\nv0.3.5\nfunc (t *Topic) String() string\nString returns the topic associated with t\nfunc (*Topic) Subscribe ¶\nadded in\nv0.2.0\nfunc (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error)\nSubscribe returns a new Subscription for the topic.\nNote that subscription is not an instantaneous operation. It may take some time\nbefore the subscription is processed by the pubsub main loop and propagated to our peers.\ntype TopicEventHandler ¶\nadded in\nv0.2.0\ntype TopicEventHandler struct {\n// contains filtered or unexported fields\n}\nTopicEventHandler is used to manage topic specific events. No Subscription is required to receive events.\nfunc (*TopicEventHandler) Cancel ¶\nadded in\nv0.2.0\nfunc (t *TopicEventHandler) Cancel()\nCancel closes the topic event handler\nfunc (*TopicEventHandler) NextPeerEvent ¶\nadded in\nv0.2.0\nfunc (t *TopicEventHandler) NextPeerEvent(ctx context.Context) (PeerEvent, error)\nNextPeerEvent returns the next event regarding subscribed peers\nGuarantees: Peer Join and Peer Leave events for a given peer will fire in order.\nUnless a peer both Joins and Leaves before NextPeerEvent emits either event\nall events will eventually be received from NextPeerEvent.\ntype TopicEventHandlerOpt ¶\nadded in\nv0.2.0\ntype TopicEventHandlerOpt func(t *TopicEventHandler) error\ntype TopicOpt ¶\nadded in\nv0.2.0\ntype TopicOpt func(t *Topic) error\nfunc WithTopicMessageIdFn ¶\nadded in\nv0.7.0\nfunc WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt\nWithTopicMessageIdFn sets custom MsgIdFunction for a Topic, enabling topics to have own msg id generation rules.\ntype TopicOptions ¶\nadded in\nv0.2.0\ntype TopicOptions struct{}\ntype TopicScoreParams ¶\nadded in\nv0.3.0\ntype TopicScoreParams struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// The weight of the topic.\nTopicWeight float64\n// P1: time in the mesh\n// This is the time the peer has been grafted in the mesh.\n// The value of the parameter is the time/TimeInMeshQuantum, capped by TimeInMeshCap.\n// The weight of the parameter MUST be positive (or zero to disable).\nTimeInMeshWeight\nfloat64\nTimeInMeshQuantum time.Duration\nTimeInMeshCap\nfloat64\n// P2: first message deliveries\n// This is the number of message deliveries in the topic.\n// The value of the parameter is a counter, decaying with FirstMessageDeliveriesDecay, and capped\n// by FirstMessageDeliveriesCap.\n// The weight of the parameter MUST be positive (or zero to disable).\nFirstMessageDeliveriesWeight, FirstMessageDeliveriesDecay float64\nFirstMessageDeliveriesCap\nfloat64\n// P3: mesh message deliveries\n// This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of\n// message validation; deliveries during validation also count and are retroactively applied\n// when validation succeeds.\n// This window accounts for the minimum time before a hostile mesh peer trying to game the score\n// could replay back a valid message we just sent them.\n// It effectively tracks first and near-first deliveries, i.e., a message seen from a mesh peer\n// before we have forwarded it to them.\n// The parameter has an associated counter, decaying with MeshMessageDeliveriesDecay.\n// If the counter exceeds the threshold, its value is 0.\n// If the counter is below the MeshMessageDeliveriesThreshold, the value is the square of\n// the deficit, ie (MessageDeliveriesThreshold - counter)^2\n// The penalty is only activated after MeshMessageDeliveriesActivation time in the mesh.\n// The weight of the parameter MUST be negative (or zero to disable).\nMeshMessageDeliveriesWeight, MeshMessageDeliveriesDecay\nfloat64\nMeshMessageDeliveriesCap, MeshMessageDeliveriesThreshold\nfloat64\nMeshMessageDeliveriesWindow, MeshMessageDeliveriesActivation time.Duration\n// P3b: sticky mesh propagation failures\n// This is a sticky penalty that applies when a peer gets pruned from the mesh with an active\n// mesh message delivery penalty.\n// The weight of the parameter MUST be negative (or zero to disable)\nMeshFailurePenaltyWeight, MeshFailurePenaltyDecay float64\n// P4: invalid messages\n// This is the number of invalid messages in the topic.\n// The value of the parameter is the square of the counter, decaying with\n// InvalidMessageDeliveriesDecay.\n// The weight of the parameter MUST be negative (or zero to disable).\nInvalidMessageDeliveriesWeight, InvalidMessageDeliveriesDecay float64\n}\ntype TopicScoreSnapshot ¶\nadded in\nv0.3.3\ntype TopicScoreSnapshot struct {\nTimeInMesh\ntime.Duration\nFirstMessageDeliveries\nfloat64\nMeshMessageDeliveries\nfloat64\nInvalidMessageDeliveries float64\n}\ntype ValidationError ¶\nadded in\nv0.5.0\ntype ValidationError struct {\nReason string\n}\nValidationError is an error that may be signalled from message publication when the message\nfails validation\nfunc (ValidationError) Error ¶\nadded in\nv0.5.0\nfunc (e ValidationError) Error() string\ntype ValidationResult ¶\nadded in\nv0.3.0\ntype ValidationResult int\nValidationResult represents the decision of an extended validator\ntype Validator ¶\ntype Validator func(context.Context, peer.ID, *Message) bool\nValidator is a function that validates a message with a binary decision: accept or reject.\ntype ValidatorEx ¶\nadded in\nv0.3.0\ntype ValidatorEx func(context.Context, peer.ID, *Message) ValidationResult\nValidatorEx is an extended validation function that validates a message with an enumerated decision\nfunc NewBasicSeqnoValidator ¶\nadded in\nv0.9.2\nfunc NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx\nNewBasicSeqnoValidator constructs a BasicSeqnoValidator using the givven PeerMetadataStore.\ntype ValidatorOpt ¶\ntype ValidatorOpt func(addVal *addValReq) error\nValidatorOpt is an option for RegisterTopicValidator.\nfunc WithValidatorConcurrency ¶\nfunc WithValidatorConcurrency(n int) ValidatorOpt\nWithValidatorConcurrency is an option that sets the topic validator throttle.\nThis controls the number of active validation goroutines for the topic; the default is 1024.\nfunc WithValidatorInline ¶\nadded in\nv0.0.3\nfunc WithValidatorInline(inline bool) ValidatorOpt\nWithValidatorInline is an option that sets the validation disposition to synchronous:\nit will be executed inline in validation front-end, without spawning a new goroutine.\nThis is suitable for simple or cpu-bound validators that do not block.\nfunc WithValidatorTimeout ¶\nfunc WithValidatorTimeout(timeout time.Duration) ValidatorOpt\nWithValidatorTimeout is an option that sets a timeout for an (asynchronous) topic validator.\nBy default there is no timeout in asynchronous validators.\nSource Files\n¶\nView all Source files\nbackoff.go\nblacklist.go\ncomm.go\ndiscovery.go\ndoc.go\nfloodsub.go\ngossip_tracer.go\ngossipsub.go\ngossipsub_feat.go\nmcache.go\nmidgen.go\nnotify.go\npeer_gater.go\npubsub.go\nrandomsub.go\nscore.go\nscore_params.go\nsign.go\nsubscription.go\nsubscription_filter.go\ntag_tracer.go\ntopic.go\ntrace.go\ntracer.go\nvalidation.go\nvalidation_builtin.go\nDirectories\n¶\nShow internal\nCollapse all\nPath\nSynopsis\ncompat\npb\ntimecache\nClick to show internal directories.\nClick to hide internal directories.\nWhy Go\nUse Cases\nCase Studies\nGet Started\nPlayground\nTour\nStack Overflow\nHelp\nPackages\nStandard Library\nSub-repositories\nAbout Go Packages\nAbout\nDownload\nBlog\nIssue Tracker\nRelease Notes\nBrand Guidelines\nCode of Conduct\nConnect\nTwitter\nGitHub\nSlack\nr/golang\nMeetup\nGolang Weekly\nCopyright\nTerms of Service\nPrivacy Policy\nReport an Issue\nTheme Toggle\nShortcuts Modal\nJump to\nClose\nKeyboard shortcuts\n? : This menu\n/ : Search site\nf or F : Jump to\ny or Y\n: Canonical URL\nClose\ngo.dev uses cookies from Google to deliver and enhance the quality of its services and to\nanalyze traffic. Learn more.\nOkay","summary":"providing information about implementing topic subscription and message handling in Go using libp2p PubSub. It covers various functions, types, and options related to this implementation, including validation, message publishing, message signatures, and customizing message ID generation. It also mentions the availability of tracing options and features supported by GossipSub.","chunks":["Skip to Main Content Why Go Case Studies Common problems companies solve with Go Use Cases Stories about how and why companies use Go Security Policy How Go can help keep you secure by default Learn Docs Effective Go Tips for writing clear, performant, and idiomatic Go code Go User Manual A complete introduction to building software with Go Standard library Reference documentation for Go's standard library Release Notes Learn what's new in each Go release Packages Community Recorded Talks Videos from prior events Meetups Meet other local Go developers Conferences Learn and network with Go developers from around the world Go blog The Go project's official blog. Go project Get help and stay informed from Go Get connected Why Go Why Go Case Studies Use Cases Security Policy Learn Docs Docs Effective Go Go User Manual Standard library Release Notes Packages Community Community Recorded Talks Meetups Conferences Go blog Go project Get connected Discover Packages github.com/libp2p/go-libp2p-pubsub pubsub package module Version: v0.10.0 Opens a new window with list of versions in this module. Latest Latest This package is not in the latest version of its module. Go to latest Published: Nov 1, 2023 License: Apache-2.0, MIT, Apache-2.0, + 1 more Opens a new window with license information. Imports: 37 Opens a new window with list of imports. Imported by: 631 Opens a new window with list of known importers. Main Versions Licenses Imports Imported By Details Valid go.mod file The Go module system was introduced in Go 1.11 and is the official dependency management solution for Go. Redistributable license Redistributable licenses place minimal restrictions on how software can be used, modified, and redistributed. Tagged version Modules with tagged versions give importers more predictable builds. Stable version When a project reaches major version v1 it is considered stable. Learn more about best practices Repository github.com/libp2p/go-libp2p-pubsub Links Open Source Insights Jump to ... README Repo Lead Maintainer Table of Contents Install Usage Example Documentation In this repo, you will find Tracing Contribute License Documentation Overview Index Constants Variables Functions DefaultMsgIdFn(pmsg) DefaultPeerFilter(pid, topic) FilterSubscriptions(subs, filter) GossipSubDefaultFeatures(feat, proto) ScoreParameterDecay(decay) ScoreParameterDecayWithBase(decay, base, decayToZero) Types type AcceptStatus type BackoffConnectorFactory type BasicSeqnoValidator type Blacklist NewMapBlacklist() NewTimeCachedBlacklist(expiry) type CacheEntry type DiscoverOpt WithDiscoverConnector(connFactory) WithDiscoveryOpts(opts) type EventTracer type EventType type ExtendedPeerScoreInspectFn type FloodSubRouter (fs) AcceptFrom() (fs) AddPeer(p, proto) (fs) Attach(p) (fs) EnoughPeers(topic, suggested) (fs) HandleRPC(rpc) (fs) Join(topic) (fs) Leave(topic) (fs) Protocols() (fs) Publish(msg) (fs) RemovePeer(p) type GossipSubFeature type GossipSubFeatureTest type GossipSubParams DefaultGossipSubParams() type GossipSubRouter DefaultGossipSubRouter(h) (gs) AcceptFrom(p) (gs) AddPeer(p, proto) (gs) Attach(p) (gs) EnoughPeers(topic, suggested) (gs) HandleRPC(rpc) (gs) Join(topic) (gs) Leave(topic) (gs) Protocols() (gs) Publish(msg) (gs) RemovePeer(p) (gs) WithDefaultTagTracer() type JSONTracer NewJSONTracer(file) OpenJSONTracer(file, flags, perm) (t) Close() (t) Trace(evt) type MapBlacklist (b) Add(p) (b) Contains(p) type Message (m) GetFrom() type MessageCache NewMessageCache(gossip, history) (mc) Get(mid) (mc) GetForPeer(mid, p) (mc) GetGossipIDs(topic) (mc) Put(msg) (mc) SetMsgIdFn(msgID) (mc) Shift() type MessageSignaturePolicy type MsgIdFunction type Option WithAppSpecificRpcInspector(inspector) WithBlacklist(b) WithDefaultValidator(val, opts) WithDirectConnectTicks(t) WithDirectPeers(pis) WithDiscovery(d, opts) WithEventTracer(tracer) WithFloodPublish(floodPublish) WithGossipSubParams(cfg) WithGossipSubProtocols(protos, feature) WithMaxMessageSize(maxMessageSize) WithMessageAuthor(author) WithMessageIdFn(fn) WithMessageSignaturePolicy(policy) WithMessageSigning(enabled) WithNoAuthor() WithPeerExchange(doPX) WithPeerFilter(filter) WithPeerGater(params) WithPeerOutboundQueueSize(size) WithPeerScore(params, thresholds) WithPeerScoreInspect(inspect, period) WithProtocolMatchFn(m) WithRawTracer(tracer) WithSeenMessagesStrategy(strategy) WithSeenMessagesTTL(ttl) WithStrictSignatureVerification(required) WithSubscriptionFilter(subFilter) WithValidateQueueSize(n) WithValidateThrottle(n) WithValidateWorkers(n) type PBTracer NewPBTracer(file) OpenPBTracer(file, flags, perm) (t) Close() (t) Trace(evt) type PeerEvent type PeerFilter type PeerGaterParams DefaultPeerGaterParams() NewPeerGaterParams(threshold, globalDecay, sourceDecay) (p) WithTopicDeliveryWeights(w) type PeerMetadataStore type PeerScoreInspectFn type PeerScoreParams type PeerScoreSnapshot type PeerScoreThresholds type ProtocolMatchFn type ProvideKey type PubOpt WithLocalPublication(local) WithReadiness(ready) WithSecretKeyAndPeerId(key, pid) type PubSub NewFloodSub(ctx, h, opts) NewFloodsubWithProtocols(ctx, h, ps, opts) NewGossipSub(ctx, h, opts) NewGossipSubWithRouter(ctx, h, rt, opts) NewPubSub(ctx, h, rt, opts) NewRandomSub(ctx, h, size, opts) (p) BlacklistPeer(pid) (p) GetTopics() (p) Join(topic, opts) (p) ListPeers(topic) (p) Publish(topic, data, opts) (p) RegisterTopicValidator(topic, val, opts) (p) Subscribe(topic, opts) (p) UnregisterTopicValidator(topic) type PubSubNotif (p) ClosedStream(n, s) (p) Connected(n, c) (p) Disconnected(n, c) (p) Initialize() (p) Listen(n, _) (p) ListenClose(n, _) (p) OpenedStream(n, s) type PubSubRouter type PublishOptions type RPC type RandomSubRouter (rs) AcceptFrom() (rs) AddPeer(p, proto) (rs) Attach(p) (rs) EnoughPeers(topic, suggested) (rs) HandleRPC(rpc) (rs) Join(topic) (rs) Leave(topic) (rs) Protocols() (rs) Publish(msg) (rs) RemovePeer(p) type RawTracer type RelayCancelFunc type RemoteTracer NewRemoteTracer(ctx, host, pi) (t) Close() (t) Trace(evt) type RouterReady MinTopicSize(size) type SubOpt WithBufferSize(size) type Subscription (sub) Cancel() (sub) Next(ctx) (sub) Topic() type SubscriptionFilter NewAllowlistSubscriptionFilter(topics) NewRegexpSubscriptionFilter(rx) WrapLimitSubscriptionFilter(filter, limit) type TimeCachedBlacklist (b) Add(p) (b) Contains(p) type Topic (t) Close() (t) EventHandler(opts) (t) ListPeers() (t) Publish(ctx, data, opts) (t) Relay() (t) SetScoreParams(p) (t) String() (t) Subscribe(opts) type TopicEventHandler (t) Cancel() (t) NextPeerEvent(ctx) type TopicEventHandlerOpt type TopicOpt WithTopicMessageIdFn(msgId) type TopicOptions type TopicScoreParams type TopicScoreSnapshot type ValidationError (e) Error() type ValidationResult type Validator type ValidatorEx NewBasicSeqnoValidator(meta) type ValidatorOpt WithValidatorConcurrency(n) WithValidatorInline(inline) WithValidatorTimeout(timeout) Source Files Directories READMEDocumentationSource FilesDirectoriesRepo Lead MaintainerTable of ContentsInstallUsageDocumentationContributeLicenseExampleIn this repo, you will findTracingOverviewIndexConstantsVariablesFunctionsTypesDefaultMsgIdFn(pmsg)DefaultPeerFilter(pid, topic)FilterSubscriptions(subs, filter)GossipSubDefaultFeatures(feat, proto)ScoreParameterDecay(decay)ScoreParameterDecayWithBase(decay, base, decayToZero)type AcceptStatustype BackoffConnectorFactorytype BasicSeqnoValidatortype Blacklisttype CacheEntrytype DiscoverOpttype EventTracertype EventTypetype ExtendedPeerScoreInspectFntype FloodSubRoutertype GossipSubFeaturetype GossipSubFeatureTesttype GossipSubParamstype GossipSubRoutertype JSONTracertype MapBlacklisttype Messagetype MessageCachetype MessageSignaturePolicytype MsgIdFunctiontype Optiontype PBTracertype PeerEventtype PeerFiltertype PeerGaterParamstype PeerMetadataStoretype PeerScoreInspectFntype PeerScoreParamstype PeerScoreSnapshottype PeerScoreThresholdstype ProtocolMatchFntype ProvideKeytype PubOpttype PubSubtype PubSubNotiftype PubSubRoutertype PublishOptionstype RPCtype RandomSubRoutertype RawTracertype RelayCancelFunctype RemoteTracertype RouterReadytype SubOpttype Subscriptiontype SubscriptionFiltertype TimeCachedBlacklisttype Topictype TopicEventHandlertype TopicEventHandlerOpttype TopicOpttype TopicOptionstype TopicScoreParamstype TopicScoreSnapshottype ValidationErrortype ValidationResulttype Validatortype ValidatorExtype ValidatorOptNewMapBlacklist()NewTimeCachedBlacklist(expiry)WithDiscoverConnector(connFactory)WithDiscoveryOpts(opts)(fs) AcceptFrom()(fs) AddPeer(p, proto)(fs) Attach(p)(fs) EnoughPeers(topic, suggested)(fs) HandleRPC(rpc)(fs) Join(topic)(fs) Leave(topic)(fs) Protocols()(fs) Publish(msg)(fs) RemovePeer(p)DefaultGossipSubParams()DefaultGossipSubRouter(h)(gs) AcceptFrom(p)(gs) AddPeer(p, proto)(gs) Attach(p)(gs) EnoughPeers(topic, suggested)(gs) HandleRPC(rpc)(gs) Join(topic)(gs) Leave(topic)(gs) Protocols()(gs) Publish(msg)(gs) RemovePeer(p)(gs) WithDefaultTagTracer()NewJSONTracer(file)OpenJSONTracer(file, flags, perm)(t) Close()(t) Trace(evt)(b) Add(p)(b) Contains(p)(m) GetFrom()NewMessageCache(gossip, history)(mc) Get(mid)(mc) GetForPeer(mid, p)(mc) GetGossipIDs(topic)(mc) Put(msg)(mc) SetMsgIdFn(msgID)(mc) Shift()WithAppSpecificRpcInspector(inspector)WithBlacklist(b)WithDefaultValidator(val, opts)WithDirectConnectTicks(t)WithDirectPeers(pis)WithDiscovery(d, opts)WithEventTracer(tracer)WithFloodPublish(floodPublish)WithGossipSubParams(cfg)WithGossipSubProtocols(protos, feature)WithMaxMessageSize(maxMessageSize)WithMessageAuthor(author)WithMessageIdFn(fn)WithMessageSignaturePolicy(policy)WithMessageSigning(enabled)WithNoAuthor()WithPeerExchange(doPX)WithPeerFilter(filter)WithPeerGater(params)WithPeerOutboundQueueSize(size)WithPeerScore(params, thresholds)WithPeerScoreInspect(inspect, period)WithProtocolMatchFn(m)WithRawTracer(tracer)WithSeenMessagesStrategy(strategy)WithSeenMessagesTTL(ttl)WithStrictSignatureVerification(required)WithSubscriptionFilter(subFilter)WithValidateQueueSize(n)WithValidateThrottle(n)WithValidateWorkers(n)NewPBTracer(file)OpenPBTracer(file, flags, perm)(t) Close()(t) Trace(evt)DefaultPeerGaterParams()NewPeerGaterParams(threshold, globalDecay, sourceDecay)(p) WithTopicDeliveryWeights(w)WithLocalPublication(local)WithReadiness(ready)WithSecretKeyAndPeerId(key, pid)NewFloodSub(ctx, h, opts)NewFloodsubWithProtocols(ctx, h, ps, opts)NewGossipSub(ctx, h, opts)NewGossipSubWithRouter(ctx, h, rt, opts)NewPubSub(ctx, h, rt, opts)NewRandomSub(ctx, h, size, opts)(p) BlacklistPeer(pid)(p) GetTopics()(p) Join(topic, opts)(p) ListPeers(topic)(p) Publish(topic, data, opts)(p) RegisterTopicValidator(topic, val, opts)(p) Subscribe(topic, opts)(p) UnregisterTopicValidator(topic)(p) ClosedStream(n, s)(p) Connected(n, c)(p) Disconnected(n, c)(p) Initialize()(p) Listen(n, _)(p) ListenClose(n, _)(p) OpenedStream(n, s)(rs) AcceptFrom()(rs) AddPeer(p, proto)(rs) Attach(p)(rs) EnoughPeers(topic, suggested)(rs) HandleRPC(rpc)(rs) Join(topic)(rs) Leave(topic)(rs) Protocols()(rs) Publish(msg)(rs) RemovePeer(p)NewRemoteTracer(ctx, host, pi)(t) Close()(t) Trace(evt)MinTopicSize(size)WithBufferSize(size)(sub) Cancel()(sub) Next(ctx)(sub) Topic()NewAllowlistSubscriptionFilter(topics)NewRegexpSubscriptionFilter(rx)WrapLimitSubscriptionFilter(filter, limit)(b) Add(p)(b) Contains(p)(t) Close()(t) EventHandler(opts)(t) ListPeers()(t) Publish(ctx, data, opts)(t) Relay()(t) SetScoreParams(p)(t) String()(t) Subscribe(opts)(t) Cancel()(t) NextPeerEvent(ctx)WithTopicMessageIdFn(msgId)(e) Error()NewBasicSeqnoValidator(meta)WithValidatorConcurrency(n)WithValidatorInline(inline)WithValidatorTimeout(timeout) README ¶ go-libp2p-pubsub This repo contains the canonical pubsub implementation for libp2p. We currently provide three message router options: Floodsub, which is the baseline flooding protocol. Randomsub, which is a simple probabilistic router that propagates to random subsets of peers. Gossipsub, which is a more advanced router with mesh formation and gossip propagation. See spec and implementation for more details. Repo Lead Maintainer @vyzo This repo follows the Repo Lead Maintainer Protocol Table of Contents Install Usage Example Documentation Tracing Contribute License Install go get github.com/libp2p/go-libp2p-pubsub Usage To be used for messaging in p2p instrastructure (as part of libp2p) such as IPFS, Ethereum, other blockchains, etc. Example https://github.com/libp2p/go-libp2p/tree/master/examples/pubsub Documentation See the libp2p specs for high level documentation and godoc for API documentation. In this repo, you will find . ├── LICENSE ├── README.md # Regular Golang repo set up ├── codecov.yml ├── pb ├── go.mod ├── go.sum ├── doc.go # PubSub base ├── pubsub.go ├── blacklist.go ├── notify.go ├── comm.go ├── discovery.go ├── sign.go ├── subscription.go ├── topic.go ├── trace.go ├── tracer.go ├── validation.go # Floodsub router ├── floodsub.go # Randomsub router ├── randomsub.go # Gossipsub router ├── gossipsub.go ├── score.go ├── score_params.go └── mcache.go Tracing The pubsub system supports tracing, which collects all events pertaining to the internals of the system. This allows you to recreate the complete message flow and state of the system for analysis purposes. To enable tracing, instantiate the pubsub system using the WithEventTracer option; the option accepts a tracer with three available implementations in-package (trace to json, pb, or a remote peer). If you want to trace using a remote peer, you can do so using the traced daemon from go-libp2p-pubsub-tracer. The package also includes a utility program, tracestat, for analyzing the traces collected by the daemon. For instance, to capture the trace as a json file, you can use the following option: tracer, err := pubsub. NewJSONTracer(\"/path/to/trace.json\") if err ! = nil { panic(err) } pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) To capture the trace as a protobuf, you can use the following option: tracer, err := pubsub. NewPBTracer(\"/path/to/trace.pb\") if err ! = nil { panic(err) } pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) Finally, to use the remote tracer, you can use the following incantations: // assuming that your tracer runs in x.x.x.x and has a peer ID of QmTracer pi, err := peer. AddrInfoFromP2pAddr(ma. StringCast(\"/ip4/x.x.x.x/tcp/4001/p2p/QmTracer\")) if err ! = nil { panic(err) } tracer, err := pubsub. NewRemoteTracer(ctx, host, pi) if err ! = nil { panic(err) } ps, err := pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) Contribute Contributions welcome. Please check out the issues. Check out our contributing document for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS Code of Conduct. Small note: If editing the README, please conform to the standard-readme specification. License The go-libp2p-pubsub project is dual-licensed under Apache 2.0 and MIT terms: Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) Expand ▾ Collapse ▴ Documentation ¶ Overview ¶ The pubsub package provides facilities for the Publish/Subscribe pattern of message propagation, also known as overlay multicast. The implementation provides topic-based pubsub, with pluggable routing algorithms. The main interface to the library is the PubSub object. You can construct this object with the following constructors: - NewFloodSub creates an instance that uses the floodsub routing algorithm. - NewGossipSub creates an instance that uses the gossipsub routing algorithm. - NewRandomSub creates an instance that uses the randomsub routing algorithm. In addition, there is a generic constructor that creates a pubsub instance with a custom PubSubRouter interface. This procedure is currently reserved for internal use within the package. Once you have constructed a PubSub instance, you need to establish some connections to your peers; the implementation relies on ambient peer discovery, leaving bootstrap and active peer discovery up to the client. To publish a message to some topic, use Publish; you don't need to be subscribed to the topic in order to publish. To subscribe to a topic, use Subscribe; this will give you a subscription interface from which new messages can be pumped. Index ¶ Constants Variables func DefaultMsgIdFn(pmsg *pb.Message) string func DefaultPeerFilter(pid peer. ID, topic string) bool func FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts func GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol. ID) bool func ScoreParameterDecay(decay time. Duration) float64 func ScoreParameterDecayWithBase(decay time. Duration, base time. Duration, decayToZero float64) float64 type AcceptStatus type BackoffConnectorFactory type BasicSeqnoValidator type Blacklist func NewMapBlacklist() Blacklist func NewTimeCachedBlacklist(expiry time. Duration) (Blacklist, error) type CacheEntry type DiscoverOpt func WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt func WithDiscoveryOpts(opts ...discovery. Option) DiscoverOpt type EventTracer type EventType type ExtendedPeerScoreInspectFn type FloodSubRouter func (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus func (fs *FloodSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (fs *FloodSubRouter) Attach(p *PubSub) func (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool func (fs *FloodSubRouter) HandleRPC(rpc *RPC) func (fs *FloodSubRouter) Join(topic string) func (fs *FloodSubRouter) Leave(topic string) func (fs *FloodSubRouter) Protocols() []protocol. ID func (fs *FloodSubRouter) Publish(msg *Message) func (fs *FloodSubRouter) RemovePeer(p peer. ID) type GossipSubFeature type GossipSubFeatureTest type GossipSubParams func DefaultGossipSubParams() GossipSubParams type GossipSubRouter func DefaultGossipSubRouter(h host. Host) *GossipSubRouter func (gs *GossipSubRouter) AcceptFrom(p peer. ID) AcceptStatus func (gs *GossipSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (gs *GossipSubRouter) Attach(p *PubSub) func (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool func (gs *GossipSubRouter) HandleRPC(rpc *RPC) func (gs *GossipSubRouter) Join(topic string) func (gs *GossipSubRouter) Leave(topic string) func (gs *GossipSubRouter) Protocols() []protocol. ID func (gs *GossipSubRouter) Publish(msg *Message) func (gs *GossipSubRouter) RemovePeer(p peer. ID) func (gs *GossipSubRouter) WithDefaultTagTracer() Option type JSONTracer func NewJSONTracer(file string) (*JSONTracer, error) func OpenJSONTracer(file string, flags int, perm os. FileMode) (*JSONTracer, error) func (t *JSONTracer) Close() func (t *JSONTracer) Trace(evt * pb. TraceEvent) type MapBlacklist func (b MapBlacklist) Add(p peer. ID) bool func (b MapBlacklist) Contains(p peer. ID) bool type Message func (m *Message) GetFrom() peer. ID type MessageCache func NewMessageCache(gossip, history int) * MessageCache func (mc *MessageCache) Get(mid string) (*Message, bool) func (mc *MessageCache) GetForPeer(mid string, p peer. ID) (*Message, int, bool) func (mc *MessageCache) GetGossipIDs(topic string) []string func (mc *MessageCache) Put(msg *Message) func (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string) func (mc *MessageCache) Shift() type MessageSignaturePolicy type MsgIdFunction type Option func WithAppSpecificRpcInspector(inspector func(peer. ID, *RPC) error) Option func WithBlacklist(b Blacklist) Option func WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option func WithDirectConnectTicks(t uint64) Option func WithDirectPeers(pis []peer. AddrInfo) Option func WithDiscovery(d discovery. Discovery, opts ...DiscoverOpt) Option func WithEventTracer(tracer EventTracer) Option func WithFloodPublish(floodPublish bool) Option func WithGossipSubParams(cfg GossipSubParams) Option func WithGossipSubProtocols(protos []protocol. ID, feature GossipSubFeatureTest) Option func WithMaxMessageSize(maxMessageSize int) Option func WithMessageAuthor(author peer. ID) Option func WithMessageIdFn(fn MsgIdFunction) Option func WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option func WithMessageSigning(enabled bool) Option func WithNoAuthor() Option func WithPeerExchange(doPX bool) Option func WithPeerFilter(filter PeerFilter) Option func WithPeerGater(params *PeerGaterParams) Option func WithPeerOutboundQueueSize(size int) Option func WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option func WithPeerScoreInspect(inspect interface{}, period time. Duration) Option func WithProtocolMatchFn(m ProtocolMatchFn) Option func WithRawTracer(tracer RawTracer) Option func WithSeenMessagesStrategy(strategy timecache. Strategy) Option func WithSeenMessagesTTL(ttl time. Duration) Option func WithStrictSignatureVerification(required bool) Option func WithSubscriptionFilter(subFilter SubscriptionFilter) Option func WithValidateQueueSize(n int) Option func WithValidateThrottle(n int) Option func WithValidateWorkers(n int) Option type PBTracer func NewPBTracer(file string) (*PBTracer, error) func OpenPBTracer(file string, flags int, perm os. FileMode) (*PBTracer, error) func (t *PBTracer) Close() func (t *PBTracer) Trace(evt * pb. TraceEvent) type PeerEvent type PeerFilter type PeerGaterParams func DefaultPeerGaterParams() *PeerGaterParams func NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams func (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams type PeerMetadataStore type PeerScoreInspectFn type PeerScoreParams type PeerScoreSnapshot type PeerScoreThresholds type ProtocolMatchFn type ProvideKey type PubOpt func WithLocalPublication(local bool) PubOpt func WithReadiness(ready RouterReady) PubOpt func WithSecretKeyAndPeerId(key crypto. PrivKey, pid peer. ID) PubOpt type PubSub func NewFloodSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) func NewFloodsubWithProtocols(ctx context. Context, h host. Host, ps []protocol. ID, opts ...Option) (*PubSub, error) func NewGossipSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) func NewGossipSubWithRouter(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) func NewPubSub(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) func NewRandomSub(ctx context. Context, h host. Host, size int, opts ...Option) (*PubSub, error) func (p *PubSub) BlacklistPeer(pid peer. ID) func (p *PubSub) GetTopics() []string func (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error) func (p *PubSub) ListPeers(topic string) []peer. ID func (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) errordeprecated func (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error func (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)deprecated func (p *PubSub) UnregisterTopicValidator(topic string) error type PubSubNotif func (p *PubSubNotif) ClosedStream(n network. Network, s network. Stream) func (p *PubSubNotif) Connected(n network. Network, c network. Conn) func (p *PubSubNotif) Disconnected(n network. Network, c network. Conn) func (p *PubSubNotif) Initialize() func (p *PubSubNotif) Listen(n network. Network, _ ma. Multiaddr) func (p *PubSubNotif) ListenClose(n network. Network, _ ma. Multiaddr) func (p *PubSubNotif) OpenedStream(n network. Network, s network. Stream) type PubSubRouter type PublishOptions type RPC type RandomSubRouter func (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus func (rs *RandomSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (rs *RandomSubRouter) Attach(p *PubSub) func (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool func (rs *RandomSubRouter) HandleRPC(rpc *RPC) func (rs *RandomSubRouter) Join(topic string) func (rs *RandomSubRouter) Leave(topic string) func (rs *RandomSubRouter) Protocols() []protocol. ID func (rs *RandomSubRouter) Publish(msg *Message) func (rs *RandomSubRouter) RemovePeer(p peer. ID) type RawTracer type RelayCancelFunc type RemoteTracer func NewRemoteTracer(ctx context. Context, host host. Host, pi peer. AddrInfo) (*RemoteTracer, error) func (t *RemoteTracer) Close() func (t *RemoteTracer) Trace(evt * pb. TraceEvent) type RouterReady func MinTopicSize(size int) RouterReady type SubOpt func WithBufferSize(size int) SubOpt type Subscription func (sub *Subscription) Cancel() func (sub *Subscription) Next(ctx context. Context) (*Message, error) func (sub *Subscription) Topic() string type SubscriptionFilter func NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter func NewRegexpSubscriptionFilter(rx *regexp. Regexp) SubscriptionFilter func WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter type TimeCachedBlacklist func (b *TimeCachedBlacklist) Add(p peer. ID) bool func (b *TimeCachedBlacklist) Contains(p peer. ID) bool type Topic func (t *Topic) Close() error func (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error) func (t *Topic) ListPeers() []peer. ID func (t *Topic) Publish(ctx context. Context, data []byte, opts ...PubOpt) error func (t *Topic) Relay() (RelayCancelFunc, error) func (t *Topic) SetScoreParams(p *TopicScoreParams) error func (t *Topic) String() string func (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error) type TopicEventHandler func (t *TopicEventHandler) Cancel() func (t *TopicEventHandler) NextPeerEvent(ctx context. Context) (PeerEvent, error) type TopicEventHandlerOpt type TopicOpt func WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt type TopicOptions type TopicScoreParams type TopicScoreSnapshot type ValidationError func (e ValidationError) Error() string type ValidationResult type Validator type ValidatorEx func NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx type ValidatorOpt func WithValidatorConcurrency(n int) ValidatorOpt func WithValidatorInline(inline bool) ValidatorOpt func WithValidatorTimeout(timeout time. Duration) ValidatorOpt Constants ¶ View Source const ( MinBackoffDelay = 100 * time. Millisecond MaxBackoffDelay = 10 * time. Second TimeToLive = 10 * time. Minute BackoffCleanupInterval = 1 * time. Minute BackoffMultiplier = 2 MaxBackoffJitterCoff = 100 MaxBackoffAttempts = 4 ) View Source const ( FloodSubID = protocol. ID(\"/floodsub/1.0.0\") FloodSubTopicSearchSize = 5 ) View Source const ( // GossipSubID_v10 is the protocol ID for version 1.0.0 of the GossipSub protocol. // It is advertised along with GossipSubID_v11 for backwards compatibility. GossipSubID_v10 = protocol. ID(\"/meshsub/1.0.0\") // GossipSubID_v11 is the protocol ID for version 1.1.0 of the GossipSub protocol. // See the spec for details about how v1.1.0 compares to v1.0.0: // https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md GossipSubID_v11 = protocol. ID(\"/meshsub/1.1.0\") ) View Source const ( // Protocol supports basic GossipSub Mesh -- gossipsub-v1.0 compatible GossipSubFeatureMesh = iota // Protocol supports Peer eXchange on prune -- gossipsub-v1.1 compatible GossipSubFeaturePX ) View Source const ( DefaultDecayInterval = time. Second DefaultDecayToZero = 0.01 )","Second DefaultDecayToZero = 0.01 ) View Source const ( // StrictSign produces signatures and expects and verifies incoming signatures StrictSign = msgSigning | msgVerification // StrictNoSign does not produce signatures and drops and penalises incoming messages that carry one StrictNoSign = msgVerification // LaxSign produces signatures and validates incoming signatures iff one is present // Deprecated: it is recommend to either strictly enable, or strictly disable, signatures. LaxSign = msgSigning // LaxNoSign does not produce signatures and validates incoming signatures iff one is present // Deprecated: it is recommend to either strictly enable, or strictly disable, signatures. LaxNoSign = 0 ) View Source const ( RejectBlacklstedPeer = \"blacklisted peer\" RejectBlacklistedSource = \"blacklisted source\" RejectMissingSignature = \"missing signature\" RejectUnexpectedSignature = \"unexpected signature\" RejectUnexpectedAuthInfo = \"unexpected auth info\" RejectInvalidSignature = \"invalid signature\" RejectValidationQueueFull = \"validation queue full\" RejectValidationThrottled = \"validation throttled\" RejectValidationFailed = \"validation failed\" RejectValidationIgnored = \"validation ignored\" RejectSelfOrigin = \"self originated message\" ) rejection reasons View Source const ( // ValidationAccept is a validation decision that indicates a valid message that should be accepted and // delivered to the application and forwarded to the network. ValidationAccept = ValidationResult(0) // ValidationReject is a validation decision that indicates an invalid message that should not be // delivered to the application or forwarded to the application. Furthermore the peer that forwarded // the message should be penalized by peer scoring routers. ValidationReject = ValidationResult(1) // ValidationIgnore is a validation decision that indicates a message that should be ignored: it will // be neither delivered to the application nor forwarded to the network. However, in contrast to // ValidationReject, the peer that forwarded the message must not be penalized by peer scoring routers. ValidationIgnore = ValidationResult(2) ) View Source const DefaultMaxMessageSize = 1 << 20 DefaultMaximumMessageSize is 1mb. View Source const ( RandomSubID = protocol. ID(\"/randomsub/1.0.0\") ) View Source const RemoteTracerProtoID = protocol. ID(\"/libp2p/pubsub/tracer/1.0.0\") View Source const SignPrefix = \"libp2p-pubsub:\" Variables ¶ View Source var ( // DiscoveryPollInitialDelay is how long the discovery system waits after it first starts before polling DiscoveryPollInitialDelay = 0 * time. Millisecond // DiscoveryPollInterval is approximately how long the discovery system waits in between checks for whether the // more peers are needed for any topic DiscoveryPollInterval = 1 * time. Second ) View Source var ( GossipSubD = 6 GossipSubDlo = 5 GossipSubDhi = 12 GossipSubDscore = 4 GossipSubDout = 2 GossipSubHistoryLength = 5 GossipSubHistoryGossip = 3 GossipSubDlazy = 6 GossipSubGossipFactor = 0.25 GossipSubGossipRetransmission = 3 GossipSubHeartbeatInitialDelay = 100 * time. Millisecond GossipSubHeartbeatInterval = 1 * time. Second GossipSubFanoutTTL = 60 * time. Second GossipSubPrunePeers = 16 GossipSubPruneBackoff = time. Minute GossipSubUnsubscribeBackoff = 10 * time. Second GossipSubConnectors = 8 GossipSubMaxPendingConnections = 128 GossipSubConnectionTimeout = 30 * time. Second GossipSubDirectConnectTicks uint64 = 300 GossipSubDirectConnectInitialDelay = time. Second GossipSubOpportunisticGraftTicks uint64 = 60 GossipSubOpportunisticGraftPeers = 2 GossipSubGraftFloodThreshold = 10 * time. Second GossipSubMaxIHaveLength = 5000 GossipSubMaxIHaveMessages = 10 GossipSubIWantFollowupTime = 3 * time. Second ) Defines the default gossipsub parameters. View Source var ( DefaultPeerGaterRetainStats = 6 * time. Hour DefaultPeerGaterQuiet = time. Minute DefaultPeerGaterDuplicateWeight = 0.125 DefaultPeerGaterIgnoreWeight = 1.0 DefaultPeerGaterRejectWeight = 16.0 DefaultPeerGaterThreshold = 0.33 DefaultPeerGaterGlobalDecay = ScoreParameterDecay(2 * time. Minute) DefaultPeerGaterSourceDecay = ScoreParameterDecay(time. Hour) ) View Source var ( // TimeCacheDuration specifies how long a message ID will be remembered as seen. // Use WithSeenMessagesTTL to configure this per pubsub instance, instead of overriding the global default. TimeCacheDuration = 120 * time. Second // TimeCacheStrategy specifies which type of lookup/cleanup strategy is used by the seen messages cache. // Use WithSeenMessagesStrategy to configure this per pubsub instance, instead of overriding the global default. TimeCacheStrategy = timecache. Strategy_FirstSeen // ErrSubscriptionCancelled may be returned when a subscription Next() is called after the // subscription has been cancelled. ErrSubscriptionCancelled = errors. New(\"subscription cancelled\") ) View Source var ( // GossipSubConnTagBumpMessageDelivery is the amount to add to the connection manager // tag that tracks message deliveries. Each time a peer is the first to deliver a // message within a topic, we \"bump\" a tag by this amount, up to a maximum // of GossipSubConnTagMessageDeliveryCap. // Note that the delivery tags decay over time, decreasing by GossipSubConnTagDecayAmount // at every GossipSubConnTagDecayInterval. GossipSubConnTagBumpMessageDelivery = 1 // GossipSubConnTagDecayInterval is the decay interval for decaying connection manager tags. GossipSubConnTagDecayInterval = 10 * time. Minute // GossipSubConnTagDecayAmount is subtracted from decaying tag values at each decay interval. GossipSubConnTagDecayAmount = 1 // GossipSubConnTagMessageDeliveryCap is the maximum value for the connection manager tags that // track message deliveries. GossipSubConnTagMessageDeliveryCap = 15 ) View Source var ErrEmptyPeerID = errors. New(\"empty peer ID\") ErrEmptyPeerID is returned if an empty peer ID was provided View Source var ErrNilSignKey = errors. New(\"nil sign key\") ErrNilSignKey is returned if a nil private key was provided View Source var ErrTooManySubscriptions = errors. New(\"too many subscriptions\") ErrTooManySubscriptions may be returned by a SubscriptionFilter to signal that there are too many subscriptions to process. View Source var ErrTopicClosed = errors. New(\"this Topic is closed, try opening a new one\") ErrTopicClosed is returned if a Topic is utilized after it has been closed View Source var GossipSubDefaultProtocols = []protocol. ID{GossipSubID_v11, GossipSubID_v10, FloodSubID} GossipSubDefaultProtocols is the default gossipsub router protocol list View Source var MinTraceBatchSize = 16 View Source var ( RandomSubD = 6 ) View Source var TraceBufferSize = 1 << 16 // 64K ought to be enough for everyone; famous last words. Functions ¶ func DefaultMsgIdFn ¶ added in v0.2.5 func DefaultMsgIdFn(pmsg *pb.Message) string DefaultMsgIdFn returns a unique ID of the passed Message func DefaultPeerFilter ¶ added in v0.5.5 func DefaultPeerFilter(pid peer. ID, topic string) bool DefaultPeerFilter accepts all peers on all topics func FilterSubscriptions ¶ added in v0.3.6 func FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts FilterSubscriptions filters (and deduplicates) a list of subscriptions. filter should return true if a topic is of interest. func GossipSubDefaultFeatures ¶ added in v0.5.0 func GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol. ID) bool GossipSubDefaultFeatures is the feature test function for the default gossipsub protocols func ScoreParameterDecay ¶ added in v0.3.0 func ScoreParameterDecay(decay time. Duration) float64 ScoreParameterDecay computes the decay factor for a parameter, assuming the DecayInterval is 1s and that the value decays to zero if it drops below 0.01 func ScoreParameterDecayWithBase ¶ added in v0.3.0 func ScoreParameterDecayWithBase(decay time. Duration, base time. Duration, decayToZero float64) float64 ScoreParameterDecayWithBase computes the decay factor for a parameter using base as the DecayInterval Types ¶ type AcceptStatus ¶ added in v0.3.6 type AcceptStatus int const ( // AcceptNone signals to drop the incoming RPC AcceptNone AcceptStatus = iota // AcceptControl signals to accept the incoming RPC only for control message processing by // the router. Included payload messages will _not_ be pushed to the validation queue. AcceptControl // AcceptAll signals to accept the incoming RPC for full processing AcceptAll ) type BackoffConnectorFactory ¶ added in v0.2.0 type BackoffConnectorFactory func(host host. Host) ( *discimpl. BackoffConnector, error) BackoffConnectorFactory creates a BackoffConnector that is attached to a given host type BasicSeqnoValidator ¶ added in v0.9.2 type BasicSeqnoValidator struct { // contains filtered or unexported fields } BasicSeqnoValidator is a basic validator, usable as a default validator, that ignores replayed messages outside the seen cache window. The validator uses the message seqno as a peer-specific nonce to decide whether the message should be propagated, comparing to the maximal nonce store in the peer metadata store. This is useful to ensure that there can be no infinitely propagating messages in the network regardless of the seen cache span and network diameter. It requires that pubsub is instantiated with a strict message signing policy and that seqnos are not disabled, ie it doesn't support anonymous mode. Warning: See https://github.com/libp2p/rust-libp2p/issues/3453 TL;DR: rust is currently violating the spec by issuing a random seqno, which creates an interoperability hazard. We expect this issue to be addressed in the not so distant future, but keep this in mind if you are in a mixed environment with (older) rust nodes. type Blacklist ¶ type Blacklist interface { Add(peer.ID) bool Contains(peer.ID) bool } Blacklist is an interface for peer blacklisting. func NewMapBlacklist ¶ func NewMapBlacklist() Blacklist NewMapBlacklist creates a new MapBlacklist func NewTimeCachedBlacklist ¶ added in v0.2.6 func NewTimeCachedBlacklist(expiry time. Duration) (Blacklist, error) NewTimeCachedBlacklist creates a new TimeCachedBlacklist with the given expiry duration type CacheEntry ¶ type CacheEntry struct { // contains filtered or unexported fields } type DiscoverOpt ¶ added in v0.2.0 type DiscoverOpt func(*discoverOptions) error func WithDiscoverConnector ¶ added in v0.2.0 func WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt WithDiscoverConnector adds a custom connector that deals with how the discovery subsystem connects to peers func WithDiscoveryOpts ¶ added in v0.2.0 func WithDiscoveryOpts(opts ...discovery. Option) DiscoverOpt WithDiscoveryOpts passes libp2p Discovery options into the PubSub discovery subsystem type EventTracer ¶ added in v0.2.3 type EventTracer interface { Trace(evt *pb.TraceEvent) } EventTracer is a generic event tracer interface. This is a high level tracing interface which delivers tracing events, as defined by the protobuf schema in pb/trace.proto. type EventType ¶ added in v0.1.1 type EventType int const ( PeerJoin EventType = iota PeerLeave ) type ExtendedPeerScoreInspectFn ¶ added in v0.3.3 type ExtendedPeerScoreInspectFn = func(map[peer. ID]*PeerScoreSnapshot) type FloodSubRouter ¶ type FloodSubRouter struct { // contains filtered or unexported fields } func (*FloodSubRouter) AcceptFrom ¶ added in v0.3.0 func (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus func (*FloodSubRouter) AddPeer ¶ func (fs *FloodSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*FloodSubRouter) Attach ¶ func (fs *FloodSubRouter) Attach(p *PubSub) func (*FloodSubRouter) EnoughPeers ¶ added in v0.2.0 func (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool func (*FloodSubRouter) HandleRPC ¶ func (fs *FloodSubRouter) HandleRPC(rpc *RPC) func (*FloodSubRouter) Join ¶ func (fs *FloodSubRouter) Join(topic string) func (*FloodSubRouter) Leave ¶ func (fs *FloodSubRouter) Leave(topic string) func (*FloodSubRouter) Protocols ¶ func (fs *FloodSubRouter) Protocols() []protocol. ID func (*FloodSubRouter) Publish ¶ func (fs *FloodSubRouter) Publish(msg *Message) func (*FloodSubRouter) RemovePeer ¶ func (fs *FloodSubRouter) RemovePeer(p peer. ID) type GossipSubFeature ¶ added in v0.5.0 type GossipSubFeature int GossipSubFeature is a feature discriminant enum type GossipSubFeatureTest ¶ added in v0.5.0 type GossipSubFeatureTest = func(GossipSubFeature, protocol. ID) bool GossipSubFeatureTest is a feature test function; it takes a feature and a protocol ID and should return true if the feature is supported by the protocol type GossipSubParams ¶ added in v0.5.0 type GossipSubParams struct { // D sets the optimal degree for a GossipSub topic mesh. For example, if D == 6, // each peer will want to have about six peers in their mesh for each topic they're subscribed to. // D should be set somewhere between Dlo and Dhi. D int // Dlo sets the lower bound on the number of peers we keep in a GossipSub topic mesh. // If we have fewer than Dlo peers, we will attempt to graft some more into the mesh at // the next heartbeat. Dlo int // Dhi sets the upper bound on the number of peers we keep in a GossipSub topic mesh. // If we have more than Dhi peers, we will select some to prune from the mesh at the next heartbeat. Dhi int // Dscore affects how peers are selected when pruning a mesh due to over subscription. // At least Dscore of the retained peers will be high-scoring, while the remainder are // chosen randomly. Dscore int // Dout sets the quota for the number of outbound connections to maintain in a topic mesh. // When the mesh is pruned due to over subscription, we make sure that we have outbound connections // to at least Dout of the survivor peers. This prevents sybil attackers from overwhelming // our mesh with incoming connections. // // Dout must be set below Dlo, and must not exceed D / 2. Dout int // HistoryLength controls the size of the message cache used for gossip. // The message cache will remember messages for HistoryLength heartbeats. HistoryLength int // HistoryGossip controls how many cached message ids we will advertise in // IHAVE gossip messages. When asked for our seen message IDs, we will return // only those from the most recent HistoryGossip heartbeats. The slack between // HistoryGossip and HistoryLength allows us to avoid advertising messages // that will be expired by the time they're requested. // // HistoryGossip must be less than or equal to HistoryLength to // avoid a runtime panic. HistoryGossip int // Dlazy affects how many peers we will emit gossip to at each heartbeat. // We will send gossip to at least Dlazy peers outside our mesh. The actual // number may be more, depending on GossipFactor and how many peers we're // connected to. Dlazy int // GossipFactor affects how many peers we will emit gossip to at each heartbeat. // We will send gossip to GossipFactor * (total number of non-mesh peers), or // Dlazy, whichever is greater. GossipFactor float64 // GossipRetransmission controls how many times we will allow a peer to request // the same message id through IWANT gossip before we start ignoring them. This is designed // to prevent peers from spamming us with requests and wasting our resources. GossipRetransmission int // HeartbeatInitialDelay is the short delay before the heartbeat timer begins // after the router is initialized. HeartbeatInitialDelay time. Duration // HeartbeatInterval controls the time between heartbeats. HeartbeatInterval time. Duration // SlowHeartbeatWarning is the duration threshold for heartbeat processing before emitting // a warning; this would be indicative of an overloaded peer. SlowHeartbeatWarning float64 // FanoutTTL controls how long we keep track of the fanout state. If it's been // FanoutTTL since we've published to a topic that we're not subscribed to, // we'll delete the fanout map for that topic. FanoutTTL time. Duration // PrunePeers controls the number of peers to include in prune Peer eXchange. // When we prune a peer that's eligible for PX (has a good score, etc), we will try to // send them signed peer records for up to PrunePeers other peers that we // know of. PrunePeers int // PruneBackoff controls the backoff time for pruned peers. This is how long // a peer must wait before attempting to graft into our mesh again after being pruned. // When pruning a peer, we send them our value of PruneBackoff so they know // the minimum time to wait. Peers running older versions may not send a backoff time, // so if we receive a prune message without one, we will wait at least PruneBackoff // before attempting to re-graft. PruneBackoff time. Duration // UnsubscribeBackoff controls the backoff time to use when unsuscribing // from a topic. A peer should not resubscribe to this topic before this // duration. UnsubscribeBackoff time. Duration // Connectors controls the number of active connection attempts for peers obtained through PX. Connectors int // MaxPendingConnections sets the maximum number of pending connections for peers attempted through px. MaxPendingConnections int // ConnectionTimeout controls the timeout for connection attempts. ConnectionTimeout time. Duration // DirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers // that are not currently connected. DirectConnectTicks uint64 // DirectConnectInitialDelay is the initial delay before opening connections to direct peers DirectConnectInitialDelay time. Duration // OpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh // with opportunistic grafting. Every OpportunisticGraftTicks we will attempt to select some // high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls // below a threshold (see https://godoc.org/github.com/libp2p/go-libp2p-pubsub#PeerScoreThresholds). OpportunisticGraftTicks uint64 // OpportunisticGraftPeers is the number of peers to opportunistically graft. OpportunisticGraftPeers int // If a GRAFT comes before GraftFloodThreshold has elapsed since the last PRUNE, // then there is an extra score penalty applied to the peer through P7. GraftFloodThreshold time. Duration // MaxIHaveLength is the maximum number of messages to include in an IHAVE message. // Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a // peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the // default if your system is pushing more than 5000 messages in HistoryGossip heartbeats; // with the defaults this is 1666 messages/s. MaxIHaveLength int // MaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat. MaxIHaveMessages int // Time to wait for a message requested through IWANT following an IHAVE advertisement. // If the message is not received within this window, a broken promise is declared and // the router may apply bahavioural penalties. IWantFollowupTime time. Duration } GossipSubParams defines all the gossipsub specific parameters. func DefaultGossipSubParams ¶ added in v0.5.0 func DefaultGossipSubParams() GossipSubParams DefaultGossipSubParams returns the default gossip sub parameters as a config. type GossipSubRouter ¶ type GossipSubRouter struct { // contains filtered or unexported fields } GossipSubRouter is a router that implements the gossipsub protocol. For each topic we have joined, we maintain an overlay through which messages flow; this is the mesh map. For each topic we publish to without joining, we maintain a list of peers to use for injecting our messages in the overlay with stable routes; this is the fanout map. Fanout peer lists are expired if we don't publish any messages to their topic for GossipSubFanoutTTL. func DefaultGossipSubRouter ¶ added in v0.8.2 func DefaultGossipSubRouter(h host. Host) *GossipSubRouter DefaultGossipSubRouter returns a new GossipSubRouter with default parameters. func (*GossipSubRouter) AcceptFrom ¶ added in v0.3.0 func (gs *GossipSubRouter) AcceptFrom(p peer. ID) AcceptStatus func (*GossipSubRouter) AddPeer ¶ func (gs *GossipSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*GossipSubRouter) Attach ¶ func (gs *GossipSubRouter) Attach(p *PubSub) func (*GossipSubRouter) EnoughPeers ¶ added in v0.2.0 func (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool func (*GossipSubRouter) HandleRPC ¶ func (gs *GossipSubRouter) HandleRPC(rpc *RPC) func (*GossipSubRouter) Join ¶ func (gs *GossipSubRouter) Join(topic string) func (*GossipSubRouter) Leave ¶ func (gs *GossipSubRouter) Leave(topic string) func (*GossipSubRouter) Protocols ¶ func (gs *GossipSubRouter) Protocols() []protocol. ID func (*GossipSubRouter) Publish ¶ func (gs *GossipSubRouter) Publish(msg *Message) func (*GossipSubRouter) RemovePeer ¶ func (gs *GossipSubRouter) RemovePeer(p peer. ID) func (*GossipSubRouter) WithDefaultTagTracer ¶ added in v0.8.2 func (gs *GossipSubRouter) WithDefaultTagTracer() Option WithDefaultTagTracer returns the tag tracer of the GossipSubRouter as a PubSub option. This is useful for cases where the GossipSubRouter is instantiated externally, and is injected into the GossipSub constructor as a dependency. This allows the tag tracer to be also injected into the GossipSub constructor as a PubSub option dependency. type JSONTracer ¶ added in v0.2.3 type JSONTracer struct { // contains filtered or unexported fields } JSONTracer is a tracer that writes events to a file, encoded in ndjson. func NewJSONTracer ¶ added in v0.2.3 func NewJSONTracer(file string) (* JSONTracer, error) NewJsonTracer creates a new JSONTracer writing traces to file. func OpenJSONTracer ¶ added in v0.2.3 func OpenJSONTracer(file string, flags int, perm os. FileMode) (*JSONTracer, error) OpenJSONTracer creates a new JSONTracer, with explicit control of OpenFile flags and permissions. func (*JSONTracer) Close ¶ added in v0.2.3 func (t *JSONTracer) Close() func (*JSONTracer) Trace ¶ added in v0.2.3 func (t *JSONTracer) Trace(evt * pb. TraceEvent) type MapBlacklist ¶ type MapBlacklist map[peer. ID]struct{} MapBlacklist is a blacklist implementation using a perfect map func (MapBlacklist) Add ¶ func (b MapBlacklist) Add(p peer. ID) bool func (MapBlacklist) Contains ¶ func (b MapBlacklist) Contains(p peer. ID) bool type Message ¶ type Message struct { *pb. Message ID string ReceivedFrom peer. ID ValidatorData interface{} Local bool } func (*Message) GetFrom ¶ func (m *Message) GetFrom() peer. ID type MessageCache ¶ type MessageCache struct { // contains filtered or unexported fields } func NewMessageCache ¶ func NewMessageCache(gossip, history int) * MessageCache NewMessageCache creates a sliding window cache that remembers messages for as long as `history` slots. When queried for messages to advertise, the cache only returns messages in the last `gossip` slots. The `gossip` parameter must be smaller or equal to `history`, or this function will panic. The slack between `gossip` and `history` accounts for the reaction time between when a message is advertised via IHAVE gossip, and the peer pulls it via an IWANT command. func (*MessageCache) Get ¶ func (mc *MessageCache) Get(mid string) (*Message, bool) func (*MessageCache) GetForPeer ¶ added in v0.3.0 func (mc *MessageCache) GetForPeer(mid string, p peer. ID) (*Message, int, bool) func (*MessageCache) GetGossipIDs ¶ func (mc *MessageCache) GetGossipIDs(topic string) []string func (*MessageCache) Put ¶ func (mc *MessageCache) Put(msg *Message) func (*MessageCache) SetMsgIdFn ¶ added in v0.2.5 func (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string) func (*MessageCache) Shift ¶ func (mc *MessageCache) Shift() type MessageSignaturePolicy ¶ added in v0.3.3 type MessageSignaturePolicy uint8 MessageSignaturePolicy describes if signatures are produced, expected, and/or verified. type MsgIdFunction ¶ added in v0.2.5 type MsgIdFunction func(pmsg *pb.Message) string MsgIdFunction returns a unique ID for the passed Message, and PubSub can be customized to use any implementation of this function by configuring it with the Option from WithMessageIdFn. type Option ¶ type Option func(*PubSub) error func WithAppSpecificRpcInspector ¶ added in v0.8.2 func WithAppSpecificRpcInspector(inspector func(peer. ID, *RPC) error) Option WithAppSpecificRpcInspector sets a hook that inspect incomings RPCs prior to processing them. The inspector is invoked on an accepted RPC just before it is handled. If inspector's error is nil, the RPC is handled. Otherwise, it is dropped. func WithBlacklist ¶ func WithBlacklist(b Blacklist) Option WithBlacklist provides an implementation of the blacklist; the default is a MapBlacklist func WithDefaultValidator ¶ added in v0.9.2 func WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option / Options WithDefaultValidator adds a validator that applies to all topics by default; it can be used more than once and add multiple validators. Having a defult validator does not inhibit registering a per topic validator. func WithDirectConnectTicks ¶ added in v0.3.2 func WithDirectConnectTicks(t uint64) Option WithDirectConnectTicks is a gossipsub router option that sets the number of heartbeat ticks between attempting to reconnect direct peers that are not currently connected. A \"tick\" is based on the heartbeat interval, which is 1s by default. The default value for direct connect ticks is 300. func WithDirectPeers ¶ added in v0.3.0 func WithDirectPeers(pis []peer. AddrInfo) Option WithDirectPeers is a gossipsub router option that specifies peers with direct peering agreements. These peers are connected outside of the mesh, with all (valid) message unconditionally forwarded to them. The router will maintain open connections to these peers. Note that the peering agreement should be reciprocal with direct peers symmetrically configured at both ends. func WithDiscovery ¶ added in v0.2.0 func WithDiscovery(d discovery. Discovery, opts ...DiscoverOpt) Option WithDiscovery provides a discovery mechanism used to bootstrap and provide peers into PubSub func WithEventTracer ¶ added in v0.2.3 func WithEventTracer(tracer EventTracer) Option WithEventTracer provides a tracer for the pubsub system func WithFloodPublish ¶ added in v0.3.0 func WithFloodPublish(floodPublish bool) Option WithFloodPublish is a gossipsub router option that enables flood publishing. When this is enabled, published messages are forwarded to all peers with score >= to publishThreshold func WithGossipSubParams ¶ added in v0.5.0 func WithGossipSubParams(cfg GossipSubParams) Option WithGossipSubParams is a gossip sub router option that allows a custom config to be set when instantiating the gossipsub router. func WithGossipSubProtocols ¶ added in v0.5.0 func WithGossipSubProtocols(protos []protocol. ID, feature GossipSubFeatureTest) Option WithGossipSubProtocols is a gossipsub router option that configures a custom protocol list and feature test function func WithMaxMessageSize ¶ added in v0.3.0 func WithMaxMessageSize(maxMessageSize int) Option WithMaxMessageSize sets the global maximum message size for pubsub wire messages. The default value is 1MiB (DefaultMaxMessageSize). Observe the following warnings when setting this option. WARNING #1: Make sure to change the default protocol prefixes for floodsub (FloodSubID) and gossipsub (GossipSubID). This avoids accidentally joining the public default network, which uses the default max message size, and therefore will cause messages to be dropped. WARNING #2: Reducing the default max message limit is fine, if you are certain that your application messages will not exceed the new limit. However, be wary of increasing the limit, as pubsub networks are naturally write-amplifying, i.e. for every message we receive, we send D copies of the message to our peers. If those messages are large, the bandwidth requirements will grow linearly. Note that propagation is sent on the uplink, which traditionally is more constrained than the downlink. Instead, consider out-of-band retrieval for large messages, by sending a CID (Content-ID) or another type of locator, such that messages can be fetched on-demand, rather than being pushed proactively. Under this design, you'd use the pubsub layer as a signalling system, rather than a data delivery system. func WithMessageAuthor ¶ func WithMessageAuthor(author peer. ID) Option WithMessageAuthor sets the author for outbound messages to the given peer ID (defaults to the host's ID). If message signing is enabled, the private key must be available in the host's peerstore. func WithMessageIdFn ¶ added in v0.2.5 func WithMessageIdFn(fn MsgIdFunction) Option WithMessageIdFn is an option to customize the way a message ID is computed for a pubsub message. The default ID function is DefaultMsgIdFn (concatenate source and seq nr.), but it can be customized to e.g. the hash of the message. func WithMessageSignaturePolicy ¶ added in v0.3.3 func WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option WithMessageSignaturePolicy sets the mode of operation for producing and verifying message signatures. func WithMessageSigning ¶ func WithMessageSigning(enabled bool) Option WithMessageSigning enables or disables message signing (enabled by default). Deprecated: signature verification without message signing, or message signing without verification, are not recommended. func WithNoAuthor ¶ added in v0.3.3 func WithNoAuthor() Option WithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures.","func WithNoAuthor ¶ added in v0.3.3 func WithNoAuthor() Option WithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures. Not recommended to use with the default message ID function, see WithMessageIdFn. func WithPeerExchange ¶ added in v0.3.0 func WithPeerExchange(doPX bool) Option WithPeerExchange is a gossipsub router option that enables Peer eXchange on PRUNE. This should generally be enabled in bootstrappers and well connected/trusted nodes used for bootstrapping. func WithPeerFilter ¶ added in v0.5.5 func WithPeerFilter(filter PeerFilter) Option WithPeerFilter is an option to set a filter for pubsub peers. The default peer filter is DefaultPeerFilter (which always returns true), but it can be customized to any custom implementation. func WithPeerGater ¶ added in v0.3.6 func WithPeerGater(params *PeerGaterParams) Option WithPeerGater is a gossipsub router option that enables reactive validation queue management. The Gater is activated if the ratio of throttled/validated messages exceeds the specified threshold. Once active, the Gater probabilistically throttles peers _before_ they enter the validation queue, performing Random Early Drop. The throttle decision is randomized, with the probability of allowing messages to enter the validation queue controlled by the statistical observations of the performance of all peers in the IP address of the gated peer. The Gater deactivates if there is no validation throttlinc occurring for the specified quiet interval. func WithPeerOutboundQueueSize ¶ added in v0.2.2 func WithPeerOutboundQueueSize(size int) Option WithPeerOutboundQueueSize is an option to set the buffer size for outbound messages to a peer We start dropping messages to a peer if the outbound queue if full func WithPeerScore ¶ added in v0.3.0 func WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option WithPeerScore is a gossipsub router option that enables peer scoring. func WithPeerScoreInspect ¶ added in v0.3.0 func WithPeerScoreInspect(inspect interface{}, period time. Duration) Option WithPeerScoreInspect is a gossipsub router option that enables peer score debugging. When this option is enabled, the supplied function will be invoked periodically to allow the application to inspect or dump the scores for connected peers. The supplied function can have one of two signatures: PeerScoreInspectFn, which takes a map of peer IDs to score. ExtendedPeerScoreInspectFn, which takes a map of peer IDs to PeerScoreSnapshots and allows inspection of individual score components for debugging peer scoring. This option must be passed _after_ the WithPeerScore option. func WithProtocolMatchFn ¶ added in v0.5.4 func WithProtocolMatchFn(m ProtocolMatchFn) Option WithProtocolMatchFn sets a custom matching function for protocol selection to be used by the protocol handler on the Host's Mux. Should be combined with WithGossipSubProtocols feature function for checking if certain protocol features are supported func WithRawTracer ¶ added in v0.5.0 func WithRawTracer(tracer RawTracer) Option WithRawTracer adds a raw tracer to the pubsub system. Multiple tracers can be added using multiple invocations of the option. func WithSeenMessagesStrategy ¶ added in v0.8.3 func WithSeenMessagesStrategy(strategy timecache. Strategy) Option WithSeenMessagesStrategy configures which type of lookup/cleanup strategy is used by the seen messages cache func WithSeenMessagesTTL ¶ added in v0.7.0 func WithSeenMessagesTTL(ttl time. Duration) Option WithSeenMessagesTTL configures when a previously seen message ID can be forgotten about func WithStrictSignatureVerification ¶ func WithStrictSignatureVerification(required bool) Option WithStrictSignatureVerification is an option to enable or disable strict message signing. When enabled (which is the default), unsigned messages will be discarded. Deprecated: signature verification without message signing, or message signing without verification, are not recommended. func WithSubscriptionFilter ¶ added in v0.3.6 func WithSubscriptionFilter(subFilter SubscriptionFilter) Option WithSubscriptionFilter is a pubsub option that specifies a filter for subscriptions in topics of interest. func WithValidateQueueSize ¶ added in v0.2.6 func WithValidateQueueSize(n int) Option WithValidateQueueSize sets the buffer of validate queue. Defaults to 32. When queue is full, validation is throttled and new messages are dropped. func WithValidateThrottle ¶ func WithValidateThrottle(n int) Option WithValidateThrottle sets the upper bound on the number of active validation goroutines across all topics. The default is 8192. func WithValidateWorkers ¶ added in v0.0.3 func WithValidateWorkers(n int) Option WithValidateWorkers sets the number of synchronous validation worker goroutines. Defaults to NumCPU. The synchronous validation workers perform signature validation, apply inline user validators, and schedule asynchronous user validators. You can adjust this parameter to devote less cpu time to synchronous validation. type PBTracer ¶ added in v0.2.3 type PBTracer struct { // contains filtered or unexported fields } PBTracer is a tracer that writes events to a file, as delimited protobufs. func NewPBTracer ¶ added in v0.2.3 func NewPBTracer(file string) (*PBTracer, error) func OpenPBTracer ¶ added in v0.2.3 func OpenPBTracer(file string, flags int, perm os. FileMode) (*PBTracer, error) OpenPBTracer creates a new PBTracer, with explicit control of OpenFile flags and permissions. func (*PBTracer) Close ¶ added in v0.2.3 func (t *PBTracer) Close() func (*PBTracer) Trace ¶ added in v0.2.3 func (t *PBTracer) Trace(evt * pb. TraceEvent) type PeerEvent ¶ added in v0.1.1 type PeerEvent struct { Type EventType Peer peer. ID } type PeerFilter ¶ added in v0.5.5 type PeerFilter func(pid peer. ID, topic string) bool PeerFilter is used to filter pubsub peers. It should return true for peers that are accepted for a given topic. PubSub can be customized to use any implementation of this function by configuring it with the Option from WithPeerFilter. type PeerGaterParams ¶ added in v0.3.6 type PeerGaterParams struct { // when the ratio of throttled/validated messages exceeds this threshold, the gater turns on Threshold float64 // (linear) decay parameter for gater counters GlobalDecay float64 // global counter decay SourceDecay float64 // per IP counter decay // decay interval DecayInterval time. Duration // counter zeroing threshold DecayToZero float64 // how long to retain stats RetainStats time. Duration // quiet interval before turning off the gater; if there are no validation throttle events // for this interval, the gater turns off Quiet time. Duration // weight of duplicate message deliveries DuplicateWeight float64 // weight of ignored messages IgnoreWeight float64 // weight of rejected messages RejectWeight float64 // priority topic delivery weights TopicDeliveryWeights map[string]float64 } PeerGaterParams groups together parameters that control the operation of the peer gater func DefaultPeerGaterParams ¶ added in v0.3.6 func DefaultPeerGaterParams() *PeerGaterParams DefaultPeerGaterParams creates a new PeerGaterParams struct using default values func NewPeerGaterParams ¶ added in v0.3.6 func NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams NewPeerGaterParams creates a new PeerGaterParams struct, using the specified threshold and decay parameters and default values for all other parameters. func (*PeerGaterParams) WithTopicDeliveryWeights ¶ added in v0.3.6 func (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams WithTopicDeliveryWeights is a fluid setter for the priority topic delivery weights type PeerMetadataStore ¶ added in v0.9.2 type PeerMetadataStore interface { // Get retrieves the metadata associated with a peer; // It should return nil if there is no metadata associated with the peer and not an error. Get(context. Context, peer.ID) ([]byte, error) // Put sets the metadata associated with a peer. Put(context. Context, peer. ID, []byte) error } PeerMetadataStore is an interface for storing and retrieving per peer metadata type PeerScoreInspectFn ¶ added in v0.3.0 type PeerScoreInspectFn = func(map[peer. ID]float64) type PeerScoreParams ¶ added in v0.3.0 type PeerScoreParams struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // Score parameters per topic. Topics map[string]*TopicScoreParams // Aggregate topic score cap; this limits the total contribution of topics towards a positive // score. It must be positive (or 0 for no cap). TopicScoreCap float64 // P5: Application-specific peer scoring AppSpecificScore func(p peer. ID) float64 AppSpecificWeight float64 // P6: IP-colocation factor. // The parameter has an associated counter which counts the number of peers with the same IP. // If the number of peers in the same IP exceeds IPColocationFactorThreshold, then the value // is the square of the difference, ie (PeersInSameIP - IPColocationThreshold)^2. // If the number of peers in the same IP is less than the threshold, then the value is 0. // The weight of the parameter MUST be negative, unless you want to disable for testing. // Note: In order to simulate many IPs in a managable manner when testing, you can set the weight to 0 // thus disabling the IP colocation penalty. IPColocationFactorWeight float64 IPColocationFactorThreshold int IPColocationFactorWhitelist []*net. IPNet // P7: behavioural pattern penalties. // This parameter has an associated counter which tracks misbehaviour as detected by the // router. The router currently applies penalties for the following behaviors: // - attempting to re-graft before the prune backoff time has elapsed. // - not following up in IWANT requests for messages advertised with IHAVE. // // The value of the parameter is the square of the counter over the threshold, which decays with // BehaviourPenaltyDecay. // The weight of the parameter MUST be negative (or zero to disable). BehaviourPenaltyWeight, BehaviourPenaltyThreshold, BehaviourPenaltyDecay float64 // the decay interval for parameter counters. DecayInterval time. Duration // counter value below which it is considered 0. DecayToZero float64 // time to remember counters for a disconnected peer. RetainScore time. Duration // time to remember a message delivery for. Default to global TimeCacheDuration if 0. SeenMsgTTL time. Duration } type PeerScoreSnapshot ¶ added in v0.3.3 type PeerScoreSnapshot struct { Score float64 Topics map[string]*TopicScoreSnapshot AppSpecificScore float64 IPColocationFactor float64 BehaviourPenalty float64 } type PeerScoreThresholds ¶ added in v0.3.0 type PeerScoreThresholds struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // GossipThreshold is the score threshold below which gossip propagation is suppressed; // should be negative. GossipThreshold float64 // PublishThreshold is the score threshold below which we shouldn't publish when using flood // publishing (also applies to fanout and floodsub peers); should be negative and <= GossipThreshold. PublishThreshold float64 // GraylistThreshold is the score threshold below which message processing is suppressed altogether, // implementing an effective gray list according to peer score; should be negative and <= PublishThreshold. GraylistThreshold float64 // AcceptPXThreshold is the score threshold below which PX will be ignored; this should be positive // and limited to scores attainable by bootstrappers and other trusted nodes. AcceptPXThreshold float64 // OpportunisticGraftThreshold is the median mesh score threshold before triggering opportunistic // grafting; this should have a small positive value. OpportunisticGraftThreshold float64 } type ProtocolMatchFn ¶ added in v0.5.4 type ProtocolMatchFn = func(protocol. ID) func(protocol. ID) bool type ProvideKey ¶ added in v0.7.0 type ProvideKey func() (crypto. PrivKey, peer. ID) ProvideKey is a function that provides a private key and its associated peer ID when publishing a new message type PubOpt ¶ added in v0.2.0 type PubOpt func(pub *PublishOptions) error func WithLocalPublication ¶ added in v0.8.0 func WithLocalPublication(local bool) PubOpt WithLocalPublication returns a publishing option to notify in-process subscribers only. It prevents message publication to mesh peers. Useful in edge cases where the msg needs to be only delivered to the in-process subscribers, e.g. not to spam the network with outdated msgs. Should not be used specifically for in-process pubsubing. func WithReadiness ¶ added in v0.2.0 func WithReadiness(ready RouterReady) PubOpt WithReadiness returns a publishing option for only publishing when the router is ready. This option is not useful unless PubSub is also using WithDiscovery func WithSecretKeyAndPeerId ¶ added in v0.7.0 func WithSecretKeyAndPeerId(key crypto. PrivKey, pid peer. ID) PubOpt WithSecretKeyAndPeerId returns a publishing option for providing a custom private key and its corresponding peer ID This option is useful when we want to send messages from \"virtual\", never-connectable peers in the network type PubSub ¶ type PubSub struct { // contains filtered or unexported fields } PubSub is the implementation of the pubsub system. func NewFloodSub ¶ func NewFloodSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) NewFloodSub returns a new PubSub object using the FloodSubRouter. func NewFloodsubWithProtocols ¶ func NewFloodsubWithProtocols(ctx context. Context, h host. Host, ps []protocol. ID, opts ...Option) (*PubSub, error) NewFloodsubWithProtocols returns a new floodsub-enabled PubSub objecting using the protocols specified in ps. func NewGossipSub ¶ func NewGossipSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) NewGossipSub returns a new PubSub object using the default GossipSubRouter as the router. func NewGossipSubWithRouter ¶ added in v0.8.2 func NewGossipSubWithRouter(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) NewGossipSubWithRouter returns a new PubSub object using the given router. func NewPubSub ¶ func NewPubSub(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) NewPubSub returns a new PubSub management object. func NewRandomSub ¶ func NewRandomSub(ctx context. Context, h host. Host, size int, opts ...Option) (*PubSub, error) NewRandomSub returns a new PubSub object using RandomSubRouter as the router. func (*PubSub) BlacklistPeer ¶ func (p *PubSub) BlacklistPeer(pid peer. ID) BlacklistPeer blacklists a peer; all messages from this peer will be unconditionally dropped. func (*PubSub) GetTopics ¶ func (p *PubSub) GetTopics() []string GetTopics returns the topics this node is subscribed to. func (*PubSub) Join ¶ added in v0.2.0 func (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error) Join joins the topic and returns a Topic handle. Only one Topic handle should exist per topic, and Join will error if the Topic handle already exists. func (*PubSub) ListPeers ¶ func (p *PubSub) ListPeers(topic string) []peer. ID ListPeers returns a list of peers we are connected to in the given topic. func (*PubSub) Publish deprecated func (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) error Publish publishes data to the given topic. Deprecated: use pubsub. Join() and topic. Publish() instead func (*PubSub) RegisterTopicValidator ¶ func (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error RegisterTopicValidator registers a validator for topic. By default validators are asynchronous, which means they will run in a separate goroutine. The number of active goroutines is controlled by global and per topic validator throttles; if it exceeds the throttle threshold, messages will be dropped. func (*PubSub) Subscribe deprecated func (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error) Subscribe returns a new Subscription for the given topic. Note that subscription is not an instantaneous operation. It may take some time before the subscription is processed by the pubsub main loop and propagated to our peers. Deprecated: use pubsub. Join() and topic. Subscribe() instead func (*PubSub) UnregisterTopicValidator ¶ func (p *PubSub) UnregisterTopicValidator(topic string) error UnregisterTopicValidator removes a validator from a topic. Returns an error if there was no validator registered with the topic. type PubSubNotif ¶ type PubSubNotif PubSub func (*PubSubNotif) ClosedStream ¶ func (p *PubSubNotif) ClosedStream(n network. Network, s network. Stream) func (*PubSubNotif) Connected ¶ func (p *PubSubNotif) Connected(n network. Network, c network. Conn) func (*PubSubNotif) Disconnected ¶ func (p *PubSubNotif) Disconnected(n network. Network, c network. Conn) func (*PubSubNotif) Initialize ¶ added in v0.4.1 func (p *PubSubNotif) Initialize() func (*PubSubNotif) Listen ¶ func (p *PubSubNotif) Listen(n network. Network, _ ma. Multiaddr) func (*PubSubNotif) ListenClose ¶ func (p *PubSubNotif) ListenClose(n network. Network, _ ma. Multiaddr) func (*PubSubNotif) OpenedStream ¶ func (p *PubSubNotif) OpenedStream(n network. Network, s network. Stream) type PubSubRouter ¶ type PubSubRouter interface { // Protocols returns the list of protocols supported by the router. Protocols() []protocol. ID // Attach is invoked by the PubSub constructor to attach the router to a // freshly initialized PubSub instance. Attach(*PubSub) // AddPeer notifies the router that a new peer has been connected. AddPeer(peer.ID, protocol. ID) // RemovePeer notifies the router that a peer has been disconnected. RemovePeer(peer.ID) // EnoughPeers returns whether the router needs more peers before it's ready to publish new records. // Suggested (if greater than 0) is a suggested number of peers that the router should need. EnoughPeers(topic string, suggested int) bool // AcceptFrom is invoked on any incoming message before pushing it to the validation pipeline // or processing control information. // Allows routers with internal scoring to vet peers before committing any processing resources // to the message and implement an effective graylist and react to validation queue overload. AcceptFrom(peer.ID) AcceptStatus // HandleRPC is invoked to process control messages in the RPC envelope. // It is invoked after subscriptions and payload messages have been processed. HandleRPC(*RPC) // Publish is invoked to forward a new message that has been validated. Publish(*Message) // Join notifies the router that we want to receive and forward messages in a topic. // It is invoked after the subscription announcement. Join(topic string) // Leave notifies the router that we are no longer interested in a topic. // It is invoked after the unsubscription announcement. Leave(topic string) } PubSubRouter is the message router component of PubSub. type PublishOptions ¶ added in v0.2.0 type PublishOptions struct { // contains filtered or unexported fields } type RPC ¶ type RPC struct { pb.RPC // contains filtered or unexported fields } type RandomSubRouter ¶ type RandomSubRouter struct { // contains filtered or unexported fields } RandomSubRouter is a router that implements a random propagation strategy. For each message, it selects the square root of the network size peers, with a min of RandomSubD, and forwards the message to them. func (*RandomSubRouter) AcceptFrom ¶ added in v0.3.0 func (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus func (*RandomSubRouter) AddPeer ¶ func (rs *RandomSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*RandomSubRouter) Attach ¶ func (rs *RandomSubRouter) Attach(p *PubSub) func (*RandomSubRouter) EnoughPeers ¶ added in v0.2.0 func (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool func (*RandomSubRouter) HandleRPC ¶ func (rs *RandomSubRouter) HandleRPC(rpc *RPC) func (*RandomSubRouter) Join ¶ func (rs *RandomSubRouter) Join(topic string) func (*RandomSubRouter) Leave ¶ func (rs *RandomSubRouter) Leave(topic string) func (*RandomSubRouter) Protocols ¶ func (rs *RandomSubRouter) Protocols() []protocol. ID func (*RandomSubRouter) Publish ¶ func (rs *RandomSubRouter) Publish(msg *Message) func (*RandomSubRouter) RemovePeer ¶ func (rs *RandomSubRouter) RemovePeer(p peer. ID) type RawTracer ¶ added in v0.5.0 type RawTracer interface { // AddPeer is invoked when a new peer is added. AddPeer(p peer. ID, proto protocol. ID) // RemovePeer is invoked when a peer is removed. RemovePeer(p peer. ID) // Join is invoked when a new topic is joined Join(topic string) // Leave is invoked when a topic is abandoned Leave(topic string) // Graft is invoked when a new peer is grafted on the mesh (gossipsub) Graft(p peer. ID, topic string) // Prune is invoked when a peer is pruned from the message (gossipsub) Prune(p peer. ID, topic string) // ValidateMessage is invoked when a message first enters the validation pipeline. ValidateMessage(msg *Message) // DeliverMessage is invoked when a message is delivered DeliverMessage(msg *Message) // RejectMessage is invoked when a message is Rejected or Ignored. // The reason argument can be one of the named strings Reject*. RejectMessage(msg *Message, reason string) // DuplicateMessage is invoked when a duplicate message is dropped. DuplicateMessage(msg *Message) // ThrottlePeer is invoked when a peer is throttled by the peer gater. ThrottlePeer(p peer. ID) // RecvRPC is invoked when an incoming RPC is received. RecvRPC(rpc *RPC) // SendRPC is invoked when a RPC is sent. SendRPC(rpc *RPC, p peer. ID) // DropRPC is invoked when an outbound RPC is dropped, typically because of a queue full. DropRPC(rpc *RPC, p peer. ID) // UndeliverableMessage is invoked when the consumer of Subscribe is not reading messages fast enough and // the pressure release mechanism trigger, dropping messages. UndeliverableMessage(msg *Message) } RawTracer is a low level tracing interface that allows an application to trace the internal operation of the pubsub subsystem. Note that the tracers are invoked synchronously, which means that application tracers must take care to not block or modify arguments. Warning: this interface is not fixed, we may be adding new methods as necessitated by the system in the future. type RelayCancelFunc ¶ added in v0.3.0 type RelayCancelFunc func() type RemoteTracer ¶ added in v0.2.3 type RemoteTracer struct { // contains filtered or unexported fields } RemoteTracer is a tracer that sends trace events to a remote peer func NewRemoteTracer ¶ added in v0.2.3 func NewRemoteTracer(ctx context. Context, host host. Host, pi peer. AddrInfo) (*RemoteTracer, error) NewRemoteTracer constructs a RemoteTracer, tracing to the peer identified by pi func (*RemoteTracer) Close ¶ added in v0.2.3 func (t *RemoteTracer) Close() func (*RemoteTracer) Trace ¶ added in v0.2.3 func (t *RemoteTracer) Trace(evt * pb. TraceEvent) type RouterReady ¶ added in v0.2.0 type RouterReady func(rt PubSubRouter, topic string) (bool, error) RouterReady is a function that decides if a router is ready to publish func MinTopicSize ¶ added in v0.2.0 func MinTopicSize(size int) RouterReady MinTopicSize returns a function that checks if a router is ready for publishing based on the topic size. The router ultimately decides the whether it is ready or not, the given size is just a suggestion. Note that the topic size does not include the router in the count. type SubOpt ¶ type SubOpt func(sub *Subscription) error func WithBufferSize ¶ added in v0.5.0 func WithBufferSize(size int) SubOpt WithBufferSize is a Subscribe option to customize the size of the subscribe output buffer. The default length is 32 but it can be configured to avoid dropping messages if the consumer is not reading fast enough. type Subscription ¶ type Subscription struct { // contains filtered or unexported fields } Subscription handles the details of a particular Topic subscription. There may be many subscriptions for a given Topic. func (*Subscription) Cancel ¶ func (sub *Subscription) Cancel() Cancel closes the subscription. If this is the last active subscription then pubsub will send an unsubscribe announcement to the network. func (*Subscription) Next ¶ func (sub *Subscription) Next(ctx context. Context) (*Message, error) Next returns the next message in our subscription func (*Subscription) Topic ¶ func (sub *Subscription) Topic() string Topic returns the topic string associated with the Subscription type SubscriptionFilter ¶ added in v0.3.6 type SubscriptionFilter interface { // CanSubscribe returns true if the topic is of interest and we can subscribe to it CanSubscribe(topic string) bool // FilterIncomingSubscriptions is invoked for all RPCs containing subscription notifications. // It should filter only the subscriptions of interest and my return an error if (for instance) // there are too many subscriptions. FilterIncomingSubscriptions(peer. ID, []*pb.RPC_SubOpts) ([]*pb.RPC_SubOpts, error) } SubscriptionFilter is a function that tells us whether we are interested in allowing and tracking subscriptions for a given topic. The filter is consulted whenever a subscription notification is received by another peer; if the filter returns false, then the notification is ignored. The filter is also consulted when joining topics; if the filter returns false, then the Join operation will result in an error. func NewAllowlistSubscriptionFilter ¶ added in v0.3.6 func NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter NewAllowlistSubscriptionFilter creates a subscription filter that only allows explicitly specified topics for local subscriptions and incoming peer subscriptions. func NewRegexpSubscriptionFilter ¶ added in v0.3.6 func NewRegexpSubscriptionFilter(rx *regexp. Regexp) SubscriptionFilter NewRegexpSubscriptionFilter creates a subscription filter that only allows topics that match a regular expression for local subscriptions and incoming peer subscriptions. Warning: the user should take care to match start/end of string in the supplied regular expression, otherwise the filter might match unwanted topics unexpectedly. func WrapLimitSubscriptionFilter ¶ added in v0.3.6 func WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter WrapLimitSubscriptionFilter wraps a subscription filter with a hard limit in the number of subscriptions allowed in an RPC message. type TimeCachedBlacklist ¶ added in v0.2.6 type TimeCachedBlacklist struct { // contains filtered or unexported fields } TimeCachedBlacklist is a blacklist implementation using a time cache func (*TimeCachedBlacklist) Add ¶ added in v0.2.6 func (b *TimeCachedBlacklist) Add(p peer. ID) bool Add returns a bool saying whether Add of peer was successful func (*TimeCachedBlacklist) Contains ¶ added in v0.2.6 func (b *TimeCachedBlacklist) Contains(p peer. ID) bool type Topic ¶ added in v0.2.0 type Topic struct { // contains filtered or unexported fields } Topic is the handle for a pubsub topic func (*Topic) Close ¶ added in v0.2.0 func (t *Topic) Close() error Close closes down the topic. Will return an error unless there are no active event handlers or subscriptions. Does not error if the topic is already closed. func (*Topic) EventHandler ¶ added in v0.2.0 func (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error) EventHandler creates a handle for topic specific events Multiple event handlers may be created and will operate independently of each other func (*Topic) ListPeers ¶ added in v0.2.0 func (t *Topic) ListPeers() []peer. ID ListPeers returns a list of peers we are connected to in the given topic. func (*Topic) Publish ¶ added in v0.2.0 func (t *Topic) Publish(ctx context. Context, data []byte, opts ...PubOpt) error Publish publishes data to topic. func (*Topic) Relay ¶ added in v0.3.0 func (t *Topic) Relay() (RelayCancelFunc, error) Relay enables message relaying for the topic and returns a reference cancel function. Subsequent calls increase the reference counter. To completely disable the relay, all references must be cancelled. func (*Topic) SetScoreParams ¶ added in v0.3.6 func (t *Topic) SetScoreParams(p *TopicScoreParams) error SetScoreParams sets the topic score parameters if the pubsub router supports peer scoring func (*Topic) String ¶ added in v0.3.5 func (t *Topic) String() string String returns the topic associated with t func (*Topic) Subscribe ¶ added in v0.2.0 func (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error) Subscribe returns a new Subscription for the topic. Note that subscription is not an instantaneous operation. It may take some time before the subscription is processed by the pubsub main loop and propagated to our peers. type TopicEventHandler ¶ added in v0.2.0 type TopicEventHandler struct { // contains filtered or unexported fields } TopicEventHandler is used to manage topic specific events. No Subscription is required to receive events. func (*TopicEventHandler) Cancel ¶ added in v0.2.0 func (t *TopicEventHandler) Cancel() Cancel closes the topic event handler func (*TopicEventHandler) NextPeerEvent ¶ added in v0.2.0 func (t *TopicEventHandler) NextPeerEvent(ctx context. Context) (PeerEvent, error) NextPeerEvent returns the next event regarding subscribed peers Guarantees: Peer Join and Peer Leave events for a given peer will fire in order. Unless a peer both Joins and Leaves before NextPeerEvent emits either event all events will eventually be received from NextPeerEvent. type TopicEventHandlerOpt ¶ added in v0.2.0 type TopicEventHandlerOpt func(t *TopicEventHandler) error type TopicOpt ¶ added in v0.2.0 type TopicOpt func(t *Topic) error func WithTopicMessageIdFn ¶ added in v0.7.0 func WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt WithTopicMessageIdFn sets custom MsgIdFunction for a Topic, enabling topics to have own msg id generation rules. type TopicOptions ¶ added in v0.2.0 type TopicOptions struct{} type TopicScoreParams ¶ added in v0.3.0 type TopicScoreParams struct { // whether it is allowed to just set some params and not all of them.","type TopicOptions ¶ added in v0.2.0 type TopicOptions struct{} type TopicScoreParams ¶ added in v0.3.0 type TopicScoreParams struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // The weight of the topic. TopicWeight float64 // P1: time in the mesh // This is the time the peer has been grafted in the mesh. // The value of the parameter is the time/TimeInMeshQuantum, capped by TimeInMeshCap. // The weight of the parameter MUST be positive (or zero to disable). TimeInMeshWeight float64 TimeInMeshQuantum time. Duration TimeInMeshCap float64 // P2: first message deliveries // This is the number of message deliveries in the topic. // The value of the parameter is a counter, decaying with FirstMessageDeliveriesDecay, and capped // by FirstMessageDeliveriesCap. // The weight of the parameter MUST be positive (or zero to disable). FirstMessageDeliveriesWeight, FirstMessageDeliveriesDecay float64 FirstMessageDeliveriesCap float64 // P3: mesh message deliveries // This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of // message validation; deliveries during validation also count and are retroactively applied // when validation succeeds. // This window accounts for the minimum time before a hostile mesh peer trying to game the score // could replay back a valid message we just sent them. // It effectively tracks first and near-first deliveries, i.e., a message seen from a mesh peer // before we have forwarded it to them. // The parameter has an associated counter, decaying with MeshMessageDeliveriesDecay. // If the counter exceeds the threshold, its value is 0. // If the counter is below the MeshMessageDeliveriesThreshold, the value is the square of // the deficit, ie (MessageDeliveriesThreshold - counter)^2 // The penalty is only activated after MeshMessageDeliveriesActivation time in the mesh. // The weight of the parameter MUST be negative (or zero to disable). MeshMessageDeliveriesWeight, MeshMessageDeliveriesDecay float64 MeshMessageDeliveriesCap, MeshMessageDeliveriesThreshold float64 MeshMessageDeliveriesWindow, MeshMessageDeliveriesActivation time. Duration // P3b: sticky mesh propagation failures // This is a sticky penalty that applies when a peer gets pruned from the mesh with an active // mesh message delivery penalty. // The weight of the parameter MUST be negative (or zero to disable) MeshFailurePenaltyWeight, MeshFailurePenaltyDecay float64 // P4: invalid messages // This is the number of invalid messages in the topic. // The value of the parameter is the square of the counter, decaying with // InvalidMessageDeliveriesDecay. // The weight of the parameter MUST be negative (or zero to disable). InvalidMessageDeliveriesWeight, InvalidMessageDeliveriesDecay float64 } type TopicScoreSnapshot ¶ added in v0.3.3 type TopicScoreSnapshot struct { TimeInMesh time. Duration FirstMessageDeliveries float64 MeshMessageDeliveries float64 InvalidMessageDeliveries float64 } type ValidationError ¶ added in v0.5.0 type ValidationError struct { Reason string } ValidationError is an error that may be signalled from message publication when the message fails validation func ( ValidationError) Error ¶ added in v0.5.0 func (e ValidationError) Error() string type ValidationResult ¶ added in v0.3.0 type ValidationResult int ValidationResult represents the decision of an extended validator type Validator ¶ type Validator func(context. Context, peer. ID, *Message) bool Validator is a function that validates a message with a binary decision: accept or reject. type ValidatorEx ¶ added in v0.3.0 type ValidatorEx func(context. Context, peer. ID, *Message) ValidationResult ValidatorEx is an extended validation function that validates a message with an enumerated decision func NewBasicSeqnoValidator ¶ added in v0.9.2 func NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx NewBasicSeqnoValidator constructs a BasicSeqnoValidator using the givven PeerMetadataStore. type ValidatorOpt ¶ type ValidatorOpt func(addVal *addValReq) error ValidatorOpt is an option for RegisterTopicValidator. func WithValidatorConcurrency ¶ func WithValidatorConcurrency(n int) ValidatorOpt WithValidatorConcurrency is an option that sets the topic validator throttle. This controls the number of active validation goroutines for the topic; the default is 1024. func WithValidatorInline ¶ added in v0.0.3 func WithValidatorInline(inline bool) ValidatorOpt WithValidatorInline is an option that sets the validation disposition to synchronous: it will be executed inline in validation front-end, without spawning a new goroutine. This is suitable for simple or cpu-bound validators that do not block. func WithValidatorTimeout ¶ func WithValidatorTimeout(timeout time. Duration) ValidatorOpt WithValidatorTimeout is an option that sets a timeout for an (asynchronous) topic validator. By default there is no timeout in asynchronous validators. Source Files ¶ View all Source files backoff.go blacklist.go comm.go discovery.go doc.go floodsub.go gossip_tracer.go gossipsub.go gossipsub_feat.go mcache.go midgen.go notify.go peer_gater.go pubsub.go randomsub.go score.go score_params.go sign.go subscription.go subscription_filter.go tag_tracer.go topic.go trace.go tracer.go validation.go validation_builtin.go Directories ¶ Show internal Collapse all Path Synopsis compat pb timecache Click to show internal directories. Click to hide internal directories. Why Go Use Cases Case Studies Get Started Playground Tour Stack Overflow Help Packages Standard Library Sub-repositories About Go Packages About Download Blog Issue Tracker Release Notes Brand Guidelines Code of Conduct Connect Twitter GitHub Slack r/golang Meetup Golang Weekly Copyright Terms of Service Privacy Policy Report an Issue Theme Toggle Shortcuts Modal Jump to Close Keyboard shortcuts ? : This menu / : Search site f or F : Jump to y or Y : Canonical URL Close go.dev uses cookies from Google to deliver and enhance the quality of its services and to analyze traffic. Learn more. Okay"],"chunk_summaries":["The text provides information about the go-libp2p-pubsub package, which is used for messaging in peer-to-peer infrastructure. It explains how to implement topic subscription and message handling in Go using the package, and mentions the availability of tracing options. The text also provides details on constructors, establishing connections, publishing messages, and subscribing to topics. It includes constants and protocol IDs related to libp2p PubSub, as well as features supported by GossipSub.","providing information about implementing topic subscription and message handling in Go using libp2p PubSub. It covers various constants, variables, functions, and types related to this implementation, including validation decisions, rejection reasons, default parameters, blacklisting, event tracing, routers, and other components. It also discusses parameters, functions, and options for configuring the PubSub router, message caching, gossiping, heartbeat intervals, fanout maps, peer pruning, connection attempts, message publishing, message signatures, message IDs, and more. Additionally, it suggests using out-of-band retrieval for large messages and using the pubsub layer as a signalling system. It also mentions options for setting the author and ID of outbound messages, customizing the message ID computation, setting the message signature policy, enabling or disabling message signing, and omitting author and seq-number data of messages.","providing information about the options, functions, and types available in the libp2p PubSub package in Go for implementing topic subscription and message handling. It covers various functions such as NewRandomSub, BlacklistPeer, GetTopics, Join, ListPeers, Publish, RegisterTopicValidator, Subscribe, UnregisterTopicValidator, as well as details about setting topic score parameters, obtaining the string representation of a topic, managing topic-specific events, and setting custom message ID generation rules for a topic.","The text provides information about various types and functions related to implementing topic subscription and message handling in Go using libp2p PubSub. It includes details about topic options, topic score parameters, topic score snapshots, validation errors, validation results, validators, and validator options."],"e_summary":[0.011216279119253159,0.006072332616895437,0.0006369759794324636,-0.014977961778640747,-0.018526459112763405,0.014063329435884953,0.003018974093720317,0.025252101942896843,-0.0009481572778895497,-0.024743208661675453,0.02295520529150963,-0.0059760557487607,-0.032211557030677795,0.005443093366920948,0.027590258046984673,0.001316073234193027,0.009517676196992397,-0.012378481216728687,0.018636491149663925,0.009524553082883358,0.008864367380738258,0.014262760989367962,-0.011635771952569485,0.0019117876654490829,0.008706198073923588,0.012495389208197594,0.027617767453193665,0.005064861848950386,-0.0002727133978623897,-0.003383451607078314,0.039060983806848526,-0.024839485064148903,-0.03245912864804268,0.00043066797661595047,-0.036695320159196854,-0.02604982629418373,0.015789439901709557,-0.013857021927833557,-0.008286705240607262,-0.0024275577161461115,0.02336782217025757,-0.014496576972305775,0.006058578845113516,-0.024660684168338776,-0.010315400548279285,0.013251851312816143,0.008107905276119709,-0.032019004225730896,-0.0008123378502205014,-0.0036757211200892925,-0.019172891974449158,-0.014689130708575249,-0.037823136895895004,0.005229908041656017,0.00594510929659009,0.0013977368362247944,0.015775686129927635,-0.006103279069066048,-0.0031221280805766582,-0.018636491149663925,0.005075177177786827,-0.004177737515419722,-0.00530899316072464,-0.009916538372635841,-0.016105778515338898,-0.013712606392800808,-0.009256352670490742,0.02554093301296234,-0.02309274487197399,-0.014661623165011406,0.02094714157283306,0.006068894173949957,-0.012268450111150742,-0.018719013780355453,0.018636491149663925,-0.02226751297712326,-0.025087054818868637,-0.007165765389800072,-0.021002156659960747,-0.002773123560473323,-0.005584070459008217,-0.0053640082478523254,0.010150354355573654,0.053750116378068924,-0.009792753495275974,0.0314413420855999,0.027824074029922485,0.02030070871114731,-0.011855834163725376,-0.004511268809437752,0.016477134078741074,-0.006326779257506132,0.002131849527359009,0.010363539680838585,-0.004776030778884888,0.03716295212507248,-0.026489948853850365,0.022006189450621605,-0.00841736700385809,0.013616329059004784,-0.00826607458293438,0.02112594060599804,-0.006034509744495153,-0.013244974426925182,-0.008369228802621365,-0.012481635436415672,0.020259447395801544,-0.011126878671348095,0.022542590275406837,0.023835452273488045,-0.015954487025737762,0.03542996197938919,-0.00398174487054348,-0.011340063996613026,-0.014524084515869617,0.03336688503623009,0.018402675166726112,0.009889030829071999,0.00847238302230835,-0.04280203580856323,0.00778468931093812,-0.013657590374350548,0.009992185048758984,0.018320152536034584,-0.003943921532481909,-0.012199681252241135,-0.02276265062391758,-0.010040323249995708,0.019764307886362076,-0.013169328682124615,0.00480009987950325,0.02686130441725254,0.007351442240178585,0.013134944252669811,0.004882622975856066,0.013471913523972034,-0.017536181956529617,0.008486136794090271,-0.019736800342798233,-0.0335044227540493,0.012488512322306633,0.03487980738282204,-0.027232658118009567,0.018196366727352142,-0.02461942285299301,0.004401237703859806,0.03705291822552681,0.024481885135173798,0.027700290083885193,0.008135412819683552,0.022308774292469025,0.004758838098496199,-0.019145384430885315,0.013093682006001472,-0.009263229556381702,0.026806289330124855,-0.006756587419658899,0.021799881011247635,0.0335044227540493,0.014634115621447563,0.01847144402563572,0.025169577449560165,-0.0009799631079658866,-0.01107874047011137,0.008046012371778488,0.026283642277121544,0.020809601992368698,-0.0031410395167768,-0.0016289737541228533,-0.0008273810963146389,0.0069422647356987,-0.00008429616718785837,-0.03812572360038757,0.01004720013588667,-0.023505359888076782,0.02807164378464222,0.027383951470255852,0.017618704587221146,-0.005718170665204525,-0.008162920363247395,0.012722327373921871,0.019778061658143997,0.0033456282690167427,0.03787815198302269,-0.042004313319921494,0.003349066711962223,-0.01025350857526064,0.009187583811581135,0.022913943976163864,0.0019410145469009876,0.011683911085128784,0.02298271283507347,0.0014183676103129983,0.004958269186317921,-0.6192541718482971,-0.012426619417965412,0.020273201167583466,-0.032514143735170364,0.009462661109864712,-0.0010143477702513337,0.009455784223973751,0.012316588312387466,-0.005333062261343002,0.027920352295041084,0.017096057534217834,0.007647150661796331,0.021607326343655586,-0.028553029522299767,-0.0001022943906718865,-0.022432558238506317,0.006667187437415123,-0.012667312286794186,0.0015103466575965285,-0.007337688468396664,-0.016765965148806572,0.01624331809580326,-0.018925322219729424,-0.02061704732477665,0.029955923557281494,-0.012990527786314487,0.01654590293765068,-0.04095901921391487,-0.005835078656673431,0.010556093417108059,-0.04266449809074402,-0.00929073803126812,0.007640273775905371,0.009682723321020603,0.04379231482744217,-0.0017656527925282717,-0.012681066058576107,0.0068253567442297935,-0.002953643212094903,0.045992933213710785,-0.021057171747088432,-0.028222937136888504,0.01847144402563572,0.009462661109864712,0.022913943976163864,-0.013004282489418983,0.040298834443092346,0.003768559778109193,-0.0008871244499459863,0.008967521600425243,0.006000124849379063,-0.01704104244709015,-0.002499765483662486,-0.006653433665633202,0.015101746656000614,-0.0021215341985225677,0.02624237909913063,-0.005824762862175703,0.010611109435558319,-0.011924603022634983,-0.0035760055761784315,-0.016683442518115044,-0.015913225710392,-0.01737113483250141,-0.021524803712964058,0.028910629451274872,-0.007083241827785969,0.01336875930428505,0.019159138202667236,-0.012137788347899914,0.033229343593120575,0.01673845760524273,-0.016298333182930946,-0.007344565354287624,-0.010961832478642464,0.018003813922405243,0.010232877917587757,0.01662842556834221,0.00645400257781148,0.012969897128641605,-0.011787064373493195,0.018031321465969086,-0.031798943877220154,-0.0012782501289620996,0.029130691662430763,-0.0013865617802366614,-0.021731112152338028,-0.014881685376167297,0.028415491804480553,0.001494013937190175,0.006319902371615171,0.010968709364533424,-0.015225531533360481,-0.017522428184747696,-0.005236785393208265,0.022295020520687103,0.008107905276119709,0.005663155112415552,0.00892626028507948,-0.003147916402667761,-0.016463380306959152,-0.009215091355144978,0.0055806320160627365,0.009318245574831963,0.05353005230426788,0.004659122787415981,-0.03785064443945885,0.011202525347471237,0.013238097541034222,-0.015789439901709557,0.014125222340226173,0.016614671796560287,-0.009359506890177727,-0.012467881664633751,-0.00913944561034441,-0.04101403430104256,0.03443968668580055,0.006949141621589661,0.018003813922405243,-0.025087054818868637,0.016202056780457497,-0.003450501710176468,-0.01393954548984766,-0.01025350857526064,-0.002953643212094903,0.018402675166726112,0.009510799311101437,-0.004170860629528761,-0.0009472976671531796,0.017412396147847176,-0.0069078803062438965,-0.0012069018557667732,0.0032166859600692987,0.0019616454374045134,0.023037727922201157,-0.01108561735600233,0.04296708479523659,0.008334844373166561,-0.0017071987967938185,-0.030781155452132225,-0.01210340391844511,0.016903502866625786,0.026008564978837967,-0.023656653240323067,-0.0018774030031636357,-0.006240817718207836,-0.027947859838604927,-0.021112186834216118,0.013630082830786705,-0.006821918301284313,0.005137069616466761,-0.01940670795738697,-0.0033576630521565676,0.013980806805193424,-0.0314413420855999,-0.02378043718636036,0.003771998221054673,-0.003978306427598,0.006797849200665951,0.012928635813295841,0.002640742575749755,0.009476414881646633,-0.03625519573688507,0.016298333182930946,-0.015858208760619164,-0.027397705242037773,-0.02602231875061989,0.009916538372635841,0.008046012371778488,-0.016820980235934258,0.0075921351090073586,0.003912975545972586,-0.004494076129049063,0.006956018507480621,0.015459347516298294,0.027232658118009567,-0.014771654270589352,-0.00265621580183506,-0.02613234892487526,0.00020222483726684004,0.011450095102190971,0.003185739740729332,-0.013671345077455044,0.011016848497092724,0.017082303762435913,0.017027288675308228,0.017604950815439224,0.01551436260342598,-0.015101746656000614,0.005216154269874096,-0.003037885529920459,0.034962333738803864,-0.017329873517155647,0.029378261417150497,-0.00561845488846302,-0.01358194462954998,0.0006313885096460581,-0.016986027359962463,-0.0008609061478637159,0.0006799568654969335,0.048633676022291183,-0.013850145041942596,0.010948078706860542,-0.03870338574051857,-0.001414929167367518,-0.00413303729146719,-0.003988621756434441,-0.02675127238035202,-0.00775718130171299,0.01521177776157856,0.031166264787316322,0.003493482479825616,-0.022845175117254257,0.01745365746319294,0.02134600281715393,0.05042168125510216,-0.020878370851278305,0.016064517199993134,-0.02490825392305851,-0.022790158167481422,-0.0007311040535569191,0.005518739577382803,0.025389639660716057,-0.002066518645733595,-0.02104341797530651,0.005205838941037655,0.03306429833173752,0.0026373041328042746,0.003261385951191187,-0.014317776076495647,-0.009607076644897461,0.022198742255568504,0.012474758550524712,0.01765996590256691,0.0026183926966041327,0.007523365784436464,-0.0039679910987615585,-0.02582976408302784,0.017316119745373726,-0.016367102041840553,-0.022116219624876976,0.014977961778640747,-0.0013212308986112475,-0.01536307018250227,0.029075676575303078,0.00431871460750699,0.013038666918873787,-0.015074239112436771,-0.03256915882229805,-0.0012258135247975588,-0.04709324240684509,0.004366853274405003,-0.010975586250424385,0.0007091838051564991,0.02091963216662407,-0.011711418628692627,0.0241930540651083,0.005628770217299461,0.020562032237648964,0.005921040195971727,0.006557156331837177,0.00923572201281786,0.04439748451113701,-0.006725641433149576,0.012674189172685146,0.002609796356409788,-0.00858241319656372,-0.019956862553954124,-0.03061611019074917,-0.0041399141773581505,0.02643493376672268,-0.0025049231480807066,-0.01419399119913578,-0.018196366727352142,0.018416428938508034,0.010274139232933521,-0.001593729481101036,0.016174549236893654,-0.0010693632066249847,-0.014991715550422668,-0.02592604048550129,-0.002013222314417362,0.010391047224402428,0.024330591782927513,-0.007977243512868881,-0.025554686784744263,0.011374448426067829,0.0032888937275856733,-0.02285892888903618,-0.0228726826608181,-0.013967053033411503,0.009414522908627987,-0.007048857398331165,0.00012324754789005965,-0.010838047601282597,-0.0068253567442297935,0.02091963216662407,-0.0009748053853400052,-0.014592853374779224,-0.03666781261563301,-0.001879122224636376,0.010425431653857231,-0.029543308541178703,-0.0020527648739516735,0.03421962261199951,0.03452220931649208,0.0016496045282110572,-0.008410490117967129,-0.005745678208768368,0.013815760612487793,-0.006715326104313135,0.014620361849665642,-0.02093338780105114,-0.05187958851456642,0.013286236673593521,0.007011034060269594,-0.02134600281715393,0.0025049231480807066,0.014482823200523853,-0.016064517199993134,-0.007681535091251135,-0.03152386471629143,0.006715326104313135,0.001603185199201107,0.034357160329818726,0.009366383776068687,0.01455159205943346,0.0072895498014986515,-0.010803663171827793,-0.012137788347899914,-0.03306429833173752,-0.008486136794090271,0.012729204259812832,-0.006780656985938549,-0.0009636303875595331,0.0073927040211856365,-0.010954955592751503,0.013953299261629581,0.023532867431640625,0.009325122460722923,-0.022528836503624916,-0.026710011065006256,0.02521084062755108,-0.006371479481458664,0.028718076646327972,-0.004631614778190851,-0.024124283343553543,0.027824074029922485,0.009318245574831963,0.02888312190771103,0.03314682096242905,0.0053915162570774555,-0.0004186333389952779,-0.028360474854707718,-0.0012507423525676131,0.013451282866299152,-0.006134225055575371,-0.001481119659729302,-0.038648366928100586,0.053254976868629456,0.014771654270589352,-0.011243786662817001,-0.009421399794518948,0.01910412311553955,0.009847769513726234,0.00495483074337244,0.004016129299998283,-0.00194617232773453,-0.010734894312918186,-0.03482479229569435,-0.04511268809437752,0.008451751433312893,-0.012151542119681835,0.016463380306959152,0.02327154390513897,-0.004126160405576229,-0.007537119556218386,-0.007000718731433153,0.047725923359394073,-0.015253039076924324,0.014964208006858826,0.028360474854707718,0.006567472126334906,-0.03482479229569435,-0.028938138857483864,-0.005491231568157673,-0.006952580064535141,-0.013712606392800808,-0.0016616391949355602,-0.029845893383026123,-0.02635241113603115,0.005831639748066664,-0.02379419095814228,-0.00679097231477499,0.02309274487197399,0.010844924487173557,-0.018842799589037895,-0.007358319126069546,0.021868649870157242,0.014592853374779224,0.031386326998472214,0.006667187437415123,0.0027920352295041084,0.004721015226095915,-0.009050045162439346,-0.027521489188075066,-0.0008441436220891774,-0.010652370750904083,0.01858147606253624,0.015610639937222004,-0.014235253445804119,-0.006264886818826199,0.009834015741944313,0.013863898813724518,-0.022597605362534523,0.01838892139494419,-0.02838798239827156,-0.004961707629263401,0.0050132847391068935,0.028415491804480553,0.001216357690282166,0.02204745076596737,0.003239035839214921,-0.013079928234219551,0.007406457792967558,0.0009223687811754644,-0.022707635536789894,-0.031083742156624794,-0.00781907420605421,0.01829264499247074,-0.011697664856910706,0.005271169822663069,-0.024564407765865326,-0.012295957654714584,0.019351692870259285,-0.03928104788064957,0.02554093301296234,0.011704541742801666,0.018155105412006378,0.03443968668580055,-0.0007659185212105513,0.012158419005572796,0.002167953411117196,-0.012901128269731998,-0.0013117751805111766,-0.018705260008573532,0.0038992215413600206,0.0033353129401803017,-0.04357225447893143,0.0068047260865569115,-0.021662341430783272,-0.02285892888903618,-0.020163170993328094,0.015913225710392,-0.007083241827785969,0.025183331221342087,0.009428276680409908,-0.015693163499236107,-0.005890093743801117,0.0025822885800153017,-0.010391047224402428,0.0062820790335536,-0.015019224025309086,-0.0061686099506914616,-0.004693507216870785,-0.017481166869401932,-0.014730392955243587,-0.00256337714381516,0.018815292045474052,-0.024743208661675453,-0.04481010138988495,0.017192333936691284,-0.0018481760052964091,0.004174299072474241,-0.020465755835175514,0.0008811071747913957,-0.0053640082478523254,-0.012797974050045013,-0.004095213953405619,-0.021497296169400215,0.00026046388666145504,-0.01374011393636465,0.02185489609837532,0.010452939197421074,0.014964208006858826,0.011505110189318657,0.009077552706003189,0.009723984636366367,-0.01704104244709015,-0.0007938560447655618,0.017082303762435913,0.007557750213891268,-0.03276171162724495,-0.02757650427520275,0.007062611170113087,0.01010909304022789,0.002166234189644456,-0.0004947094130329788,-0.006797849200665951,0.014180237427353859,0.0027576505672186613,0.009675846435129642,-0.016078270971775055,-0.029680846258997917,-0.008706198073923588,0.018553968518972397,-0.007330811582505703,0.024316838011145592,-0.03771310672163963,-0.01734362728893757,-0.0038854677695780993,0.000608178845141083,0.00763339689001441,0.016422118991613388,0.02604982629418373,-0.011732049286365509,0.027205150574445724,0.01307305134832859,0.011931480839848518,0.0031599511858075857,-0.026820043101906776,-0.025609701871871948,0.009730861522257328,0.0008742302306927741,0.012983650900423527,0.028745584189891815,0.00033525051549077034,-0.0021043417509645224,-0.001880841446109116,0.01592697948217392,-0.021153448149561882,0.002291738288477063,0.03545746952295303,-0.00796348974108696,-0.034467194229364395,-0.015143008902668953,-0.011628895066678524,0.006522771902382374,0.024248069152235985,0.0014218060532584786,-0.009765245951712132,0.00579381687566638,-0.0049170078709721565,-0.02163483388721943,0.03438466787338257,-0.013458159752190113,0.03542996197938919,0.008912506513297558,0.005102685187011957,-0.009778999723494053,-0.023642899468541145,0.020754586905241013,0.0020046262070536613,0.0027146695647388697,0.023752929642796516,0.010370416566729546,0.01611953228712082,0.01394642237573862,-0.01026726234704256,0.0018859991105273366,-0.000464622862637043,-0.016600918024778366,-0.021318495273590088,0.008211059495806694,0.033449407666921616,0.015899471938610077,-0.010164108127355576,0.006337094586342573,-0.015335562638938427,0.02624237909913063,-0.005446531809866428,0.0004175588255748153,0.0003780164697673172,0.0005364008247852325,-0.010377293452620506,0.024261822924017906,0.0013745271135121584,0.02990090847015381,-0.024688193574547768,0.017742490395903587,-0.021015910431742668,-0.0004822449991479516,-0.015583132393658161,-0.008279828354716301,0.00034126784885302186,0.0006288096192292869,-0.032624173909425735,-0.018498951569199562,0.014799161814153194,0.006557156331837177,-0.02328529767692089,-0.005628770217299461,-0.006887249182909727,0.03295426815748215,-0.016422118991613388,-0.005511862691491842,-0.002023537876084447,-0.011511987075209618,0.010948078706860542,-0.019557999446988106,0.01797630451619625,-0.01440029963850975,0.0023845769464969635,-0.013973929919302464,0.03474226966500282,0.02042449451982975,-0.006667187437415123,-0.02940576896071434,0.018347660079598427,-0.03441217914223671,-0.016903502866625786,-0.010975586250424385,0.015555624850094318,-0.00760588888078928,-0.039143506437540054,-0.03157887980341911,-0.034852299839258194,0.009497045539319515,0.029955923557281494,-0.028470506891608238,0.01138132531195879,0.05617079511284828,-0.02798912115395069,0.007378950249403715,0.010514832101762295,-0.012983650900423527,-0.03226657584309578,0.006698133423924446,-0.009125690907239914,-0.03790565952658653,0.00778468931093812,-0.005921040195971727,0.0007023068610578775,-0.038015689700841904,0.0055634393356740475,0.000047923633246682584,-0.0003408380434848368,0.005185208283364773,0.020452002063393593,-0.0008712215931154788,0.0004179886309430003,-0.01970929279923439,0.003218405181542039,0.023821698501706123,0.006361163686960936,-0.020878370851278305,0.016312086954712868,0.0007938560447655618,0.03207401931285858,0.005824762862175703,0.017907535657286644,-0.01209652703255415,-0.026159856468439102,-0.026668749749660492,0.00727579602971673,-0.045690350234508514,-0.03950110822916031,-0.0012473039096221328,0.022693881765007973,-0.026517456397414207,-0.0001886858808575198,-0.006495263893157244,0.03625519573688507,0.033751990646123886,0.011298802681267262,0.018952829763293266,0.018031321465969086,-0.015115500427782536,-0.023711668327450752,-0.009944046847522259,-0.024316838011145592,-0.005955424625426531,-0.03688787296414375,-0.013265606015920639,-0.008988152258098125,0.041619203984737396,0.007351442240178585,-0.01592697948217392,-0.03677784278988838,-0.00030344471451826394,-0.036722827702760696,-0.008080397732555866,0.0194892305880785,0.002998343203216791,-0.018732767552137375,0.01827889122068882,0.0020527648739516735,-0.005879778414964676,0.004215560387820005,0.04585539549589157,-0.016573410481214523,-0.005914163310080767,0.01004720013588667,-0.01394642237573862,0.006876933854073286,-0.011787064373493195,-0.03501734882593155,-0.002465380821377039,0.03746553510427475,-0.017893781885504723,-0.010164108127355576,0.016202056780457497,-0.015541871078312397,-0.01827889122068882,-0.011718295514583588,-0.019062861800193787,0.00431871460750699,-0.02296895906329155,-0.006471194792538881,-0.018650244921445847,-0.0042430683970451355,0.024275576695799828,0.003586321137845516,-0.009215091355144978,-0.014028945006430149,0.019145384430885315,0.021621080115437508,0.01563814841210842,-0.005171454511582851,-0.011807695962488651,-0.0001792300899978727,-0.0008772388682700694,0.011732049286365509,-0.009331999346613884,-0.0053915162570774555,0.02563720941543579,-0.028938138857483864,0.01716482639312744,-0.007083241827785969,0.02816792204976082,-0.035264916718006134,-0.02185489609837532,0.030781155452132225,-0.0037995059974491596,0.007578381337225437,-0.00727579602971673,-0.018045075237751007,0.004029883071780205,-0.0112919257953763,-0.012426619417965412,0.0027163890190422535,-0.01204838789999485,0.005731924436986446,-0.011649525724351406,-0.054272763431072235,-0.017219843342900276,-0.002749054227024317,0.03053358756005764,-0.018223874270915985,0.0002160861622542143,-0.005384639371186495,-0.013437529094517231,0.007722796872258186,-0.024179300293326378,0.02196492627263069,-0.005903847981244326,-0.021387264132499695,0.012516019865870476,-0.006068894173949957,-0.008142289705574512,0.17274858057498932,-0.010088462382555008,0.034247130155563354,0.019626770168542862,-0.01756368950009346,0.003771998221054673,0.00530899316072464,-0.004435622598975897,0.005085492506623268,0.011560126207768917,-0.011264418251812458,-0.012516019865870476,-0.012014003470540047,-0.007550873328000307,0.01285986602306366,-0.010446062311530113,-0.02288643643260002,-0.03432965278625488,-0.04073895514011383,-0.010899940505623817,0.0059760557487607,-0.01404269877821207,-0.019447969272732735,-0.024316838011145592,0.026985088363289833,0.007365196477621794,-0.026820043101906776,0.004377168603241444,0.03320183604955673,0.022693881765007973,-0.008884998969733715,-0.017219843342900276,0.021070925518870354,-0.003593198023736477,0.006134225055575371,0.019544245675206184,0.03064361773431301,-0.036695320159196854,0.018719013780355453,0.00029248459031805396,0.008857490494847298,-0.015789439901709557,0.014221499674022198,-0.0058557093143463135,-0.0019633646588772535,0.0009937169961631298,-0.012481635436415672,0.022322528064250946,0.0009919977746903896,0.0036000749096274376,-0.027604013681411743,0.011855834163725376,-0.005883216857910156,0.002530711703002453,-0.026283642277121544,-0.0005385499098338187,0.004390922375023365,0.004848238546401262,-0.0004822449991479516,-0.0019152261083945632,-0.013361882418394089,0.0017183738527819514,-0.009689600206911564,0.019214153289794922,-0.011209402233362198,0.021194709464907646,-0.0171373188495636,-0.021772373467683792,0.014077084138989449,-0.03787815198302269,-0.018003813922405243,-0.01180081907659769,-0.006230501923710108,-0.0025719732511788607,-0.007344565354287624,-0.019255414605140686,0.0015567658701911569,0.041096556931734085,0.006852864753454924,0.03482479229569435,-0.006770341657102108,0.02858053706586361,-0.015115500427782536,0.006024193949997425,-0.0019375761039555073,-0.019681785255670547,0.02439936250448227,-0.0036103902384638786,0.010212247259914875,-0.0005716451560147107,0.013554437085986137,0.01778375171124935,-0.0008940013940446079,-0.0023519115056842566,0.00003545919025782496,0.0068047260865569115,-0.0227764043956995,-0.0075646270997822285,0.0021834266372025013,0.005198962055146694,-0.024784469977021217,0.09567190706729889,0.026930073276162148,-0.013746990822255611,-0.012584788724780083,-0.02798912115395069,0.01285986602306366,0.007282672915607691,-0.0025650963652879,-0.0076677813194692135,-0.008382982574403286,-0.020548278465867043,0.011202525347471237,-0.016793472692370415,0.021978680044412613,0.017192333936691284,0.02675127238035202,0.007509612012654543,-0.001557625480927527,-0.006182363722473383,-0.0050132847391068935,-0.014950454235076904,-0.014056452549993992,0.01358194462954998,-0.031303804367780685,0.008706198073923588,-0.035072363913059235,-0.0006460020085796714,-0.008857490494847298,-0.04607545584440231,0.04747835174202919,0.00156880053691566,-0.010879309847950935,-0.011573879979550838,0.010005938820540905,-0.008307335898280144,0.01992935501039028,-0.01951673813164234,-0.036200180649757385,0.02633865736424923,0.015404332429170609,-0.004301522392779589,0.0021215341985225677,0.005449970252811909,0.014111468568444252,-0.002587446477264166,0.006680941209197044,0.014510330744087696,0.011058109812438488,-0.004445937927812338,-0.013829514384269714,-0.016573410481214523,-0.011346940882503986,0.030588602647185326,-0.006017317064106464,-0.016188303008675575,-0.0049273231998085976,-0.05061423406004906,0.00989590771496296,-0.02124972641468048,-0.0404638797044754,0.022295020520687103,0.0030808662995696068,-0.0171373188495636,-0.02633865736424923,0.00597261730581522,-0.17450907826423645,0.0006511596729978919,0.029680846258997917,-0.0009980150498449802,0.030148478224873543,-0.020273201167583466,0.020850863307714462,-0.005587508901953697,-0.0047175767831504345,0.003362820716574788,0.0059519861824810505,-0.017013534903526306,-0.005725047551095486,-0.029763370752334595,-0.005993247963488102,-0.006368041038513184,0.015321808867156506,0.000740559829864651,0.019640523940324783,0.026311149820685387,0.03053358756005764,-0.01767371967434883,0.01653214916586876,0.009462661109864712,0.0032252820674329996,0.005728485994040966,-0.023766683414578438,-0.02082335576415062,-0.006185802165418863,-0.0301209706813097,-0.00826607458293438,0.012295957654714584,0.014469069428741932,-0.011250663548707962,0.000962770776823163,0.016463380306959152,-0.003073989413678646,-0.0062442561611533165,0.020493263378739357,0.03256915882229805,0.01776999793946743,0.023010220378637314,-0.021896157413721085,0.0016762526938691735,0.007949735969305038,-0.000015352217815234326,0.012797974050045013,0.0032338781747967005,-0.002002906985580921,-0.014730392955243587,0.025087054818868637,0.008843736723065376,-0.00007591490430058911,-0.006495263893157244,0.01746741309762001,-0.00007349723455263302,0.011498233303427696,0.00002564075475675054,0.007977243512868881,0.00847238302230835,0.019159138202667236,-0.016986027359962463,0.009620830416679382,0.0025014847051352262,-0.009971554391086102,-0.04511268809437752,-0.025664716958999634,-0.026091087609529495,-0.01470288448035717,0.0023140881676226854,0.003912975545972586,-0.007612765766680241,-0.006502141244709492,-0.02411052957177162,0.05625331774353981,0.012199681252241135,-0.01643587276339531,0.0055634393356740475,0.0006472914246842265,0.002621831139549613,-0.004941076971590519,0.0076884119771420956,-0.010164108127355576,0.014469069428741932,0.024633176624774933,0.0015524678165093064,-0.025857271626591682,-0.0005316729657351971,0.006051701959222555,0.0002866821887437254,0.005608139559626579,-0.01869150623679161,0.0265449658036232,0.003006939310580492,-0.001959926215931773,0.0178800281137228,0.014661623165011406,-0.004923884756863117,0.022405050694942474,-0.021511049941182137,-0.0034969209227710962,0.0025272732600569725,-0.009331999346613884,0.0005669172387570143,0.023422837257385254,-0.0027576505672186613,0.02237754315137863,-0.0010040323249995708,0.032101526856422424,0.004026444628834724,-0.025582194328308105,0.017398642376065254,0.02247381955385208,0.013410021550953388,0.0018051951192319393,0.0530899316072464,-0.013293113559484482,-0.018113844096660614,-0.013313744217157364,0.0025118000339716673,0.057546183466911316,-0.014964208006858826,0.008960644714534283,0.0021645149681717157,-0.0017321277409791946,-0.020286954939365387,-0.09924791008234024,-0.03658528998494148,0.026599980890750885,0.006808164529502392,-0.007337688468396664,0.0007401300244964659,-0.01225469633936882,0.013348128646612167,-0.0010315401013940573,0.022721389308571815,-0.011965865269303322,-0.025444654747843742,-0.016380855813622475,0.00627520214766264,-0.00002612428943393752,-0.03930855542421341,-0.021579818800091743,-0.030506078153848648,-0.0016074832528829575,0.010996216908097267,-0.001382263726554811,-0.029323246330022812,-0.03724547475576401,0.006852864753454924,-0.03207401931285858,-0.010851801373064518,0.003947359975427389,0.02940576896071434,0.011986495926976204,0.003974867984652519,-0.006072332616895437,-0.014620361849665642,0.0168484877794981,-0.009483291767537594,0.01526679378002882,-0.006075771059840918,-0.006670625880360603,-0.03463223949074745,0.026792533695697784,0.00797036662697792,0.0022693881765007973,0.015349316410720348,0.0301209706813097,-0.006880372297018766,-0.010906817391514778,-0.00778468931093812,-0.01991560123860836,0.03551248833537102,0.023739175871014595,-0.012082773260772228,-0.01556937862187624,0.019131630659103394,-0.023821698501706123,-0.012811727821826935,0.029653338715434074,-0.014125222340226173,-0.006711887661367655,-0.0010753805981948972,-0.015335562638938427,0.00020770489936694503,0.010611109435558319,0.0002901206607930362,0.0028264198917895555,0.02858053706586361,0.011828326620161533,-0.015885718166828156,-0.01972304657101631,-0.00841736700385809,0.02523834817111492,-0.024151792749762535,-0.02530711703002453,0.006017317064106464,-0.005979494191706181,0.026173610240221024,-0.008465506136417389,0.004497514571994543,0.01743990369141102,-0.0055806320160627365,0.017536181956529617,0.013045543804764748,0.01010221615433693,-0.008307335898280144,-0.012144665233790874,-0.027232658118009567,0.02082335576415062,0.01005407702177763,0.0264486875385046,-0.0011183613678440452,0.014359038323163986,-0.011821449734270573,-0.003778875106945634,0.03545746952295303,0.0007788127404637635,0.014675376936793327,0.012825481593608856,0.00014430815645027906,-0.010652370750904083,-0.0005931355408392847,-0.024371853098273277,0.007860335521399975,-0.03102872520685196,0.003919852431863546,-0.06623862683773041,0.026517456397414207,0.0228726826608181,-0.010652370750904083,-0.007220780476927757,0.003015535417944193,0.007447719573974609,-0.03515488654375076,-0.012866743840277195,-0.0037960675545036793,-0.03889593854546547,0.013478790409862995,-0.006901003420352936,-0.0138845294713974,-0.0007173501653596759,-0.02503203973174095,0.03133131191134453,-0.02336782217025757,0.01046669390052557,0.021414771676063538,0.012674189172685146,0.011972742155194283,0.01321746688336134,0.01705479621887207,-0.03994123265147209,-0.020795848220586777,-0.012344096787273884,0.01746741309762001,-0.010040323249995708,0.000851020566187799,0.020589539781212807,-0.019076615571975708,-0.006526210345327854,0.019131630659103394,0.022831421345472336,-0.007351442240178585,0.00013098410272505134,0.020562032237648964,0.02838798239827156,0.040683940052986145,0.009820261970162392,-0.010666124522686005,0.024578161537647247,-0.039886217564344406,0.03245912864804268,-0.005178331397473812,-0.023505359888076782,0.01764621213078499,0.036502763628959656,-0.01767371967434883,0.031193772330880165,0.0035588133614510298,-0.01404269877821207,-0.03958363085985184,-0.019255414605140686,-0.026063580065965652,0.023354068398475647,0.008802475407719612,-0.017316119745373726,-0.01321746688336134,0.025265855714678764,0.02500453218817711,0.019131630659103394,-0.018333906307816505,0.028855614364147186,-0.0014570503262802958,-0.032431621104478836,-0.008878122083842754,0.0003580303746275604,-0.043764807283878326,-0.01756368950009346,-0.01734362728893757,0.009820261970162392,0.01006095390766859,0.014964208006858826,-0.022336281836032867,0.0004263698938302696,0.01950298435986042,-0.007619642652571201,0.014138976112008095,0.02959832362830639,-0.003285455284640193,-0.011903972364962101,0.03529242426156998,0.015500608831644058,0.008513644337654114,0.0023467536084353924,-0.00775718130171299,-0.001978837652131915,-0.01869150623679161,-0.030065955594182014,0.014166483655571938,0.012681066058576107,0.021112186834216118,0.010439185425639153,0.001793160568922758,-0.011106248013675213,0.019379200413823128,0.018416428938508034,0.0033095243852585554,0.00913256872445345,0.02929573878645897,0.013320621103048325,-0.017632458359003067,0.0047278921119868755,0.014647869393229485,-0.045552808791399,-0.028332967311143875,-0.005848832428455353,0.009311368688941002,-0.007262042257934809,-0.013767621479928493,-0.025981055572628975,0.025403393432497978,0.006223625037819147,0.02838798239827156,-0.007378950249403715,0.03421962261199951,-0.018705260008573532,0.028332967311143875,-0.010177861899137497,0.020699571818113327,0.008142289705574512,-0.010934324935078621,0.013018036261200905,-0.01726110465824604,0.0026940389070659876,-0.017522428184747696,0.0009498764993622899,-0.011883341707289219,0.016765965148806572,-0.014221499674022198,-0.026613734662532806,-0.02196492627263069,-0.010906817391514778,-0.009682723321020603,-0.017233597114682198,0.019846830517053604,-0.02717764303088188,0.052017129957675934,0.02921321615576744,-0.004222437273710966,-0.02002563141286373,-0.011787064373493195,0.015610639937222004,-0.008142289705574512,0.016793472692370415,-0.005302116274833679,-0.036612797528505325,-0.000807609932962805,0.014964208006858826,-0.011628895066678524,-0.03287174552679062,-0.013994560576975346,0.010164108127355576,-0.029543308541178703,0.02368416078388691,-0.004359975922852755,0.006220186594873667,0.02510080859065056,0.01541808620095253,0.0022195305209606886,-0.0071932729333639145,-0.018663998693227768,-0.01291488204151392,0.03358694538474083,-0.0040436373092234135,-0.011883341707289219,-0.0410415418446064,0.02796161361038685,-0.0021163765341043472,-0.045690350234508514,-0.03776812180876732,-0.01673845760524273,0.006677502766251564,-0.007110749837011099,-0.019049106165766716,0.017907535657286644,0.03072614036500454,0.0225838515907526,-0.01470288448035717,-0.028608044609427452,-0.026930073276162148,-0.000420137686887756,0.007062611170113087,-0.03001094050705433,0.0007607607985846698,-0.040683940052986145],"e_chunks":[[0.01655435562133789,0.008115886710584164,0.005322614219039679,-0.0018420204287394881,-0.017067555338144302,0.01607048325240612,0.0009970737155526876,0.012983952648937702,0.003561239456757903,-0.034164439886808395,0.012617381289601326,-0.0046994430013000965,-0.015249363146722317,0.006748576182872057,0.013460495509207249,0.009721469134092331,0.010843176394701004,-0.017976652830839157,0.0135484728962183,-0.0003585524682421237,0.0030315439216792583,0.020659953355789185,-0.00905430968850851,0.005113668739795685,0.0016843947814777493,0.003537412267178297,0.029794909060001373,-0.002476188587024808,-0.004963374231010675,0.006840219255536795,0.048504702746868134,-0.02319662645459175,-0.04612932354211807,-0.002127945888787508,-0.017654070630669594,-0.024633586406707764,0.014149649068713188,-0.0016981412190943956,-0.0011409529251977801,-0.0039406404830515385,0.01963355392217636,-0.009450206533074379,0.0038966520223766565,-0.015000094659626484,-0.002452361397445202,0.01629042439162731,0.004688445944339037,-0.04131990671157837,0.0011766935931518674,-0.014846134930849075,-0.021129164844751358,0.015586608089506626,-0.0043878573924303055,0.02917907014489174,0.004211903549730778,-0.016466379165649414,0.019985463470220566,0.000594761804677546,0.0037756836973130703,-0.012705358676612377,0.010359303094446659,-0.01111443992704153,-0.011950221844017506,0.004978037439286709,-0.017390139400959015,-0.02268342673778534,-0.026862340047955513,0.024442968890070915,-0.042815517634153366,-0.021539725363254547,0.009846103377640247,0.02687700279057026,-0.007313095964491367,-0.004288883414119482,0.023211289197206497,-0.03384185582399368,-0.01362178660929203,0.00778597267344594,-0.0070638274773955345,-0.00675590755417943,0.003286310937255621,0.00424122903496027,-0.00263014854863286,0.04184776917099953,-0.0029069099109619856,0.02416437491774559,0.01696491613984108,0.025234762579202652,-0.02913508005440235,0.002604488516226411,0.013570467010140419,-0.019574902951717377,-0.0028152670711278915,0.0067522418685257435,0.020205406472086906,0.01501475740224123,-0.025659985840320587,0.028753846883773804,-0.009479532018303871,0.021832982078194618,-0.013746420852839947,0.005351939704269171,-0.003484259592369199,-0.012859318405389786,0.005421588197350502,0.006011768244206905,0.008863692171871662,-0.02530807815492153,0.008511783555150032,0.0020747932139784098,-0.007749315816909075,0.05498568341135979,0.0014058006927371025,0.007800635881721973,-0.012016205117106438,0.017639407888054848,0.03087995946407318,-0.008255183696746826,0.006854881998151541,-0.03407645970582962,0.00781529862433672,0.0028665869031101465,0.01580655202269554,0.02326994203031063,-0.008768383413553238,0.0007271856884472072,-0.022170227020978928,-0.0029325697105377913,0.019105691462755203,-0.01997080072760582,0.02651043049991131,0.004409851972013712,0.009596834890544415,0.017434127628803253,0.010359303094446659,0.03519083932042122,-0.01885642297565937,-0.0011189586948603392,-0.014626191928982735,-0.010022057220339775,-0.009398886002600193,0.03322601690888405,-0.027140934020280838,0.015586608089506626,-0.01878310926258564,-0.0018750118324533105,0.011634971015155315,0.02802070416510105,0.02145174890756607,-0.005920125171542168,0.016510367393493652,0.0013691434869542718,-0.016246436163783073,0.02171568013727665,-0.003482426516711712,0.016099808737635612,-0.019985463470220566,0.018607154488563538,0.01796199008822441,0.005546222440898418,0.00390764931216836,0.049795035272836685,-0.015073408372700214,-0.0004999114898964763,-0.0009352148626931012,0.02646644227206707,0.020425349473953247,-0.009560177102684975,-0.0017219682922586799,-0.006763238925486803,0.001010820153169334,0.004897391423583031,-0.03788880258798599,0.03434039279818535,0.014025014825165272,0.03237557038664818,0.03044007532298565,0.02297668345272541,-0.014670180156826973,-0.003951638005673885,0.012778673321008682,-0.012441427446901798,0.006074085365980864,0.04551348462700844,-0.021964948624372482,0.0016889768885448575,-0.007617350202053785,0.0003848997876048088,0.013145243749022484,0.00928158313035965,0.010923822410404682,0.029091091826558113,0.023621849715709686,0.0101173659786582,-0.5639918446540833,-0.0038673263043165207,-0.008746389299631119,-0.029384348541498184,0.01934029720723629,-0.022067587822675705,0.022932695224881172,0.03827003762125969,0.0035465764813125134,0.028944464400410652,0.005051351618021727,-0.00309569388628006,0.023988420143723488,-0.0037683520931750536,-0.01145168486982584,-0.009376891888678074,0.018988389521837234,-0.019208332523703575,-0.008863692171871662,0.0020931216422468424,-0.01681828685104847,0.009222932159900665,-0.0039039836265146732,-0.019091028720140457,0.04633460193872452,-0.007324093021452427,0.006136402487754822,-0.04733167588710785,0.0057221767492592335,-0.00768333300948143,-0.037214308977127075,-0.014376923441886902,0.008519114926457405,0.004648122936487198,0.06398867070674896,-0.009941411204636097,-0.00029508984880521894,-0.00445384019985795,0.020102765411138535,0.05448714643716812,-0.005102671217173338,-0.022580787539482117,0.0072324504144489765,0.00016037491150200367,0.026085209101438522,-0.002734621288254857,0.03439904376864433,-0.003029711078852415,-0.021173153072595596,0.014875460416078568,0.017771372571587563,-0.010124697349965572,0.02390044368803501,-0.015161385759711266,-0.0025421713944524527,-0.010249331593513489,0.0356307215988636,-0.010476605966687202,0.004497828893363476,-0.02064529061317444,-0.010711210779845715,-0.005802822299301624,-0.025659985840320587,-0.0034512681886553764,-0.03187703341245651,0.02917907014489174,-0.04038148745894432,0.007247113157063723,0.02520543709397316,0.015322676859796047,0.027052955701947212,0.008636417798697948,-0.005953116808086634,-0.01878310926258564,0.01302794087678194,0.05044019967317581,0.0020418018102645874,-0.007632012944668531,0.0101173659786582,0.012829992920160294,-0.003744525136426091,0.001847518957220018,0.004780088551342487,-0.027258235961198807,0.02372448891401291,-0.008680406957864761,-0.02089455910027027,-0.011202416382730007,0.04076271876692772,-0.010535256937146187,-0.004754428751766682,-0.00619871960952878,-0.03390050679445267,-0.013108586892485619,0.01193555910140276,0.02368050068616867,0.008922343142330647,0.023181963711977005,-0.006458985153585672,0.004615131765604019,-0.01455287728458643,0.0021554387640208006,-0.0008499870309606194,0.014596866443753242,0.03920845687389374,0.00907630380243063,-0.009640823118388653,-0.015762561932206154,0.022844718769192696,-0.005084342788904905,0.004101932048797607,-0.0014140484854578972,-0.015557282604277134,-0.014193638227880001,-0.013357855379581451,-0.03677442669868469,0.02605588175356388,-0.01293263304978609,0.04184776917099953,-0.01733148656785488,0.0005145743489265442,-0.00883436668664217,-0.02205292508006096,-0.005769831128418446,0.03395915776491165,0.001859432552009821,0.006466316524893045,0.0187391210347414,0.0036657121963799,-0.005157656967639923,0.011253736913204193,-0.007005176041275263,0.014244957827031612,-0.011517668142914772,0.04149586334824562,0.014472232200205326,0.04442843422293663,-0.005000031553208828,0.008431138470768929,-0.03208231180906296,-0.00228740437887609,0.01351181510835886,0.030088165774941444,-0.023299267515540123,-0.011546993628144264,-0.014120323583483696,-0.042258329689502716,-0.03445769473910332,0.02208225056529045,0.007763978559523821,-0.00799858383834362,-0.0008234106353484094,0.014098329469561577,0.00901765190064907,-0.013929706066846848,-0.028123345226049423,-0.0021939286962151527,-0.004153252113610506,-0.0036235565785318613,0.019692206755280495,0.02906176634132862,0.0215250626206398,-0.027668796479701996,0.0005035772337578237,-0.04618797451257706,-0.0060410937294363976,-0.03252219781279564,0.005186982918530703,-0.005689185578376055,-0.01636373996734619,0.00009668315760791302,0.01180359348654747,-0.015176048502326012,-0.0178153607994318,0.003720697946846485,0.03961901739239693,-0.020469337701797485,-0.0015102734323590994,-0.009112960658967495,0.007104150485247374,0.017126208171248436,-0.016832951456308365,-0.013717095367610455,0.0005205311463214457,0.02331393025815487,0.027478178963065147,0.019310971722006798,0.0107625313103199,-0.0015588441165164113,0.0025476699229329824,-0.0038233378436416388,0.009494194760918617,-0.022844718769192696,0.028401939198374748,-0.013240552507340908,0.023064661771059036,-0.003702369285747409,-0.0031763396691530943,0.0031708411406725645,0.01907636597752571,0.024149712175130844,-0.02554268203675747,0.005982442293316126,-0.03284478187561035,0.010454610921442509,-0.015102734789252281,0.012976621277630329,-0.016788961365818977,0.0008605259354226291,0.022096913307905197,0.03381253033876419,0.015615934506058693,-0.026701048016548157,0.012639375403523445,0.018211258575320244,0.04486831650137901,-0.020689280703663826,0.022038262337446213,0.0024193699937313795,0.003856329247355461,-0.011686290614306927,0.006103410851210356,0.01766873337328434,-0.006341682281345129,-0.009772788733243942,0.024780215695500374,0.020161418244242668,0.006862213369458914,-0.0008788545383140445,-0.03351927176117897,-0.017712721601128578,0.03310871124267578,0.014919448643922806,0.00516132265329361,0.016876939684152603,0.011187753640115261,0.027888739481568336,-0.020146753638982773,0.007100484799593687,-0.03140782192349434,-0.007258110214024782,-0.0016550690634176135,-0.01052059419453144,-0.01182558760046959,0.02045467495918274,-0.017492778599262238,0.009413548745214939,0.015293351374566555,-0.03249287232756615,-0.010806519538164139,-0.016642333939671516,0.015205373987555504,0.003077365458011627,-0.010344640351831913,0.02360718697309494,0.004769091494381428,0.016979578882455826,0.015615934506058693,0.017008904367685318,0.007027170155197382,0.005934787914156914,-0.02064529061317444,0.03137849643826485,0.0013572300085797906,0.011664296500384808,-0.010476605966687202,-0.030234795063734055,-0.0326688289642334,-0.014787483029067516,-0.008445801213383675,0.017947327345609665,0.005000031553208828,-0.02319662645459175,0.0028372611850500107,0.014413580298423767,0.014618860557675362,0.004050611983984709,0.040146879851818085,0.016950253397226334,-0.007082155905663967,-0.026334477588534355,-0.018871085718274117,-0.0073754130862653255,0.03683307766914368,-0.02457493543624878,-0.023856455460190773,-0.000016753450836404227,-0.0034292738419026136,-0.017067555338144302,-0.009618829004466534,-0.03560139611363411,0.008980995044112206,-0.03838733956217766,0.023783141747117043,-0.014069003984332085,0.015073408372700214,0.027404865249991417,-0.014912117272615433,-0.03237557038664818,-0.03363657370209694,0.013020609505474567,0.010953147895634174,-0.024853529408574104,-0.012742015533149242,0.012903307564556599,0.010777194052934647,-0.01640772819519043,-0.00044721688027493656,0.0014021348906680942,0.01408366672694683,0.010659891180694103,-0.00996340624988079,0.0070235044695436954,-0.03381253033876419,0.018944401293992996,-0.033460620790719986,-0.001822775462642312,-0.008570435456931591,0.005333611276000738,0.0021774331107735634,-0.007632012944668531,-0.015029420144855976,0.0061767250299453735,0.013042604550719261,0.031789056956768036,0.02780076116323471,0.0036033950746059418,-0.008695069700479507,-0.00526029709726572,-0.011092444881796837,-0.04774223640561104,-0.0003232700109947473,0.005832148250192404,0.01585054025053978,-0.004431846085935831,0.01759541966021061,-0.030674679204821587,-0.016832951456308365,0.02816733345389366,0.010007394477725029,0.00039864619611762464,-0.028387276455760002,0.011656965129077435,-0.0006589117692783475,0.027302224189043045,-0.016730310395359993,-0.01662767119705677,0.018020641058683395,0.020542651414871216,0.02372448891401291,0.014956105500459671,0.005799156613647938,-0.0004806665237993002,-0.0245016198605299,-0.005986107978969812,0.013981026597321033,0.013834398239850998,0.0066239419393241405,-0.047830212861299515,0.04184776917099953,0.019574902951717377,0.008768383413553238,0.011612975969910622,0.018900413066148758,0.025923917070031166,-0.012331455945968628,0.005000031553208828,0.01225080993026495,0.008790377527475357,-0.013313867151737213,-0.031642429530620575,-0.00007348607323365286,-0.0018896746914833784,0.008673075586557388,0.015879865735769272,0.0032331582624465227,-0.00781529862433672,-0.005568217020481825,0.04733167588710785,-0.012038199231028557,0.007932601496577263,0.01580655202269554,-0.0030132154934108257,-0.046422578394412994,-0.009083635173738003,-0.03137849643826485,-0.015835877507925034,-0.02011742815375328,-0.0019446603255346417,-0.02835794910788536,-0.029985526576638222,-0.005384931340813637,-0.03571870177984238,-0.004417183343321085,-0.0004916636389680207,-0.006334350910037756,-0.0073607503436505795,-0.014853466302156448,0.009142286144196987,0.012661370448768139,0.011744941584765911,0.009332903660833836,-0.009912085719406605,0.011180422268807888,0.009736131876707077,-0.02920839563012123,0.0015469305217266083,-0.01453088317066431,-0.003315636655315757,0.009662817232310772,0.0005493985954672098,0.006085082422941923,0.004219234921038151,0.007588024251163006,-0.01912035420536995,0.021055851131677628,-0.019794845953583717,-0.021407758817076683,0.0018172768177464604,0.032463546842336655,0.0007281021098606288,0.0007757563726045191,0.015527957119047642,-0.00676690461114049,0.0008651081006973982,-0.00108321791049093,-0.030000189319252968,-0.018123282119631767,-0.02074793167412281,0.02828463539481163,0.011818256229162216,-0.009684811346232891,-0.0050440202467143536,-0.02164236456155777,0.005923790857195854,-0.031231869012117386,0.0250588096678257,0.008599760942161083,0.017844686284661293,0.02297668345272541,0.009648154489696026,0.005740505177527666,-0.00031731321359984577,-0.03422309085726738,-0.008394480682909489,-0.00961149763315916,0.021437084302306175,0.016906265169382095,-0.023548536002635956,0.02665705978870392,-0.02850457839667797,-0.021129164844751358,-0.03143714740872383,0.01145168486982584,-0.004838739987462759,0.01432560384273529,-0.004783754702657461,-0.027712784707546234,-0.014633523300290108,-0.020322708413004875,0.006686259061098099,0.009156948886811733,-0.030088165774941444,0.010960479266941547,-0.011942890472710133,0.01211884431540966,0.006686259061098099,-0.008731726557016373,0.005766165442764759,-0.035396117717027664,-0.042962148785591125,0.003060869639739394,0.006125404965132475,-0.0021719345822930336,-0.026627734303474426,0.006268368102610111,0.003114022547379136,-0.016495704650878906,-0.014699505642056465,-0.017830023542046547,0.016026493161916733,-0.014098329469561577,0.017082219943404198,0.014472232200205326,0.018577829003334045,0.0027602813206613064,0.013878386467695236,0.031114565208554268,-0.0034897581208497286,-0.01109977625310421,0.0028225984424352646,-0.01989748515188694,-0.019501589238643646,-0.00846046395599842,0.013988357968628407,0.025938579812645912,-0.006140068173408508,-0.013240552507340908,-0.012353450059890747,0.026378465816378593,0.004369528964161873,0.022507473826408386,-0.02372448891401291,-0.06181856989860535,-0.008423807099461555,0.012008873745799065,-0.042522262781858444,0.010879834182560444,-0.03310871124267578,-0.012448758818209171,0.004178911913186312,-0.02304999902844429,0.015000094659626484,0.020498663187026978,0.02576262503862381,-0.024838866665959358,0.016950253397226334,0.029970863834023476,0.011634971015155315,-0.011964884586632252,-0.016686322167515755,-0.032199617475271225,0.004747097380459309,0.013915043324232101,0.016305088996887207,0.041671816259622574,0.006268368102610111,-0.007624681573361158,-0.014516220428049564,-0.009288914501667023,-0.04668651148676872,-0.0034585995599627495,0.03516151010990143,-0.010491268709301949,-0.024633586406707764,-0.04146653786301613,-0.02598256804049015,0.00240287440828979,-0.005685519892722368,-0.006114407908171415,-0.005839479621499777,0.017507441341876984,-0.01674497313797474,-0.03146647289395332,0.018724458292126656,-0.01878310926258564,0.03692105412483215,0.008849029429256916,0.016598345711827278,0.003015048336237669,-0.025997230783104897,0.013951701112091541,0.0012325957650318742,0.011891570873558521,0.013709763996303082,0.009824109263718128,0.004963374231010675,0.01975085772573948,-0.016686322167515755,-0.004336537793278694,-0.00033357981010340154,-0.025953242555260658,-0.011539662256836891,0.03102658875286579,0.02230219356715679,0.01711154542863369,-0.025938579812645912,0.014127654954791069,-0.0032624839805066586,0.009831440635025501,-0.013827066868543625,-0.012829992920160294,0.019208332523703575,-0.00781529862433672,0.0035484095569700003,0.021994274109601974,0.013394512236118317,0.022507473826408386,-0.002021640306338668,0.0033742880914360285,-0.015865202993154526,0.0018841760465875268,0.017756709828972816,-0.00026393128791823983,0.0009668315760791302,0.016378402709960938,-0.020058777183294296,0.00480574881657958,0.015308014117181301,0.0050110286101698875,-0.025044146925210953,0.00005922416312387213,-0.014384254813194275,0.03912048041820526,-0.008541109971702099,0.00038352515548467636,-0.014574872329831123,-0.012404770590364933,0.014230295084416866,-0.021627701818943024,-0.005340942647308111,-0.03522016480565071,0.0024303672835230827,-0.022771405056118965,0.020293382927775383,-0.008189201354980469,-0.017654070630669594,-0.025674648582935333,0.009420880116522312,-0.023519210517406464,-0.0002529341436456889,-0.025894591584801674,0.026642397046089172,-0.027786098420619965,-0.021393096074461937,-0.02642245404422283,-0.016862276941537857,0.002395543036982417,0.019589565694332123,-0.04316742718219757,0.008218526840209961,0.054105911403894424,-0.01774204708635807,-0.006283030845224857,-0.008863692171871662,-0.006535965017974377,-0.03507353365421295,0.004512491635978222,-0.02668638527393341,-0.02324061654508114,0.007305764593183994,-0.003289976855739951,0.011781599372625351,-0.04299147427082062,-0.007151804398745298,0.01434759795665741,-0.0011079615214839578,0.02074793167412281,-0.004578474443405867,0.008973663672804832,0.00041353816050104797,0.00029967198497615755,0.03237557038664818,0.029047103598713875,0.022170227020978928,-0.019472263753414154,0.021290456876158714,0.01759541966021061,0.033401969820261,-0.011107108555734158,0.0031048583332449198,-0.035689372569322586,-0.02241949550807476,-0.020997200161218643,0.023475220426917076,-0.020146753638982773,-0.006579953711479902,-0.01388571783900261,-0.00526029709726572,-0.02888581156730652,-0.00799858383834362,-0.01926698349416256,0.024369655176997185,0.02164236456155777,0.020718606188893318,0.019956137984991074,0.006334350910037756,-0.003911314997822046,-0.01596784219145775,0.009457537904381752,-0.008629086427390575,0.012888643890619278,-0.029941538348793983,-0.002445030026137829,0.009904754348099232,0.038739245384931564,0.012771341018378735,-0.005923790857195854,-0.027126271277666092,-0.0001634678483242169,-0.04557213559746742,-0.0045968033373355865,-0.01596784219145775,0.011840250343084335,-0.016730310395359993,0.011876908130943775,-0.008658411912620068,0.018885750323534012,-0.004497828893363476,0.02142242155969143,-0.051056038588285446,0.003561239456757903,0.014604197815060616,0.0008426556014455855,0.015747899189591408,-0.006092413794249296,-0.030674679204821587,-0.015264025889337063,0.04061609134078026,-0.013460495509207249,-0.0031176882330328226,0.015894528478384018,-0.019618891179561615,-0.006678927689790726,-0.031642429530620575,-0.0157772246748209,-0.024618923664093018,-0.015007426030933857,0.0026154855731874704,-0.03208231180906296,-0.03152512386441231,0.022067587822675705,0.007423067465424538,0.0074780527502298355,-0.007961926981806755,0.028445927426218987,0.03131984546780586,0.008900349028408527,0.0011757771717384458,-0.008497120812535286,0.0078079672530293465,0.017008904367685318,0.02453094720840454,-0.010307982563972473,0.0250588096678257,0.054281868040561676,-0.00952352024614811,0.017287498340010643,-0.006796230562031269,0.018284572288393974,-0.04401787370443344,-0.012162833474576473,-0.01388571783900261,-0.011195085011422634,-0.011070450767874718,-0.022991348057985306,-0.012573393061757088,0.009428211487829685,-0.03237557038664818,-0.005318948533385992,-0.016319751739501953,-0.020029451698064804,0.013951701112091541,0.0000837386105558835,-0.045337527990341187,0.00309935980476439,0.0055865454487502575,0.029164407402276993,-0.0035410779528319836,-0.020850570872426033,-0.00835049245506525,0.0001421609049430117,-0.0050110286101698875,-0.018328560516238213,0.00816720724105835,-0.012661370448768139,-0.01067455392330885,0.0319356843829155,-0.00987542886286974,-0.033431295305490494,0.19167275726795197,0.012074856087565422,0.024750888347625732,0.028387276455760002,-0.024736225605010986,0.022624775767326355,-0.001559760537929833,-0.01785935088992119,0.0015460141003131866,0.016642333939671516,-0.0032148296013474464,-0.005175985861569643,-0.009002989158034325,-0.00914961751550436,0.028753846883773804,0.014354929327964783,-0.028959127143025398,-0.05061615630984306,-0.02530807815492153,0.013585129752755165,0.025601334869861603,-0.020293382927775383,-0.028959127143025398,-0.028269972652196884,0.014340266585350037,0.0017540432745590806,-0.01778603531420231,0.010505931451916695,0.04026418179273605,0.02780076116323471,-0.017419464886188507,-0.02639312855899334,0.016994241625070572,0.010102703236043453,-0.00286292121745646,0.0146628487855196,0.04595336690545082,-0.027888739481568336,-0.004197240341454744,0.000414683687267825,0.01009537186473608,-0.018871085718274117,0.011224410496652126,-0.012111512944102287,0.00004751106826006435,-0.007793304044753313,-0.009002989158034325,0.03926710784435272,0.024120386689901352,-0.0013498985208570957,-0.020440012216567993,0.024633586406707764,-0.0015221870271489024,-0.002842759946361184,-0.01662767119705677,-0.003805009415373206,-0.014200969599187374,-0.007566030137240887,0.01417897455394268,-0.0028775841929018497,0.009230263531208038,0.004798417445272207,0.0020436346530914307,0.02690632827579975,-0.027932727709412575,0.027302224189043045,-0.006612944882363081,0.004688445944339037,0.01759541966021061,-0.02208225056529045,-0.010549919679760933,-0.009156948886811733,-0.014010352082550526,-0.01863648183643818,-0.0039736321195960045,-0.0194869264960289,-0.006283030845224857,0.03272747993469238,0.013577798381447792,0.030117491260170937,-0.00802057795226574,0.015645259991288185,-0.03017614409327507,-0.004589471500366926,0.003682208014652133,-0.017126208171248436,0.03014681674540043,-0.017272835597395897,0.003119521075859666,-0.004204571712762117,-0.013541140593588352,0.010102703236043453,0.012074856087565422,-0.010124697349965572,0.03850464150309563,-0.009978068992495537,-0.013563135638833046,-0.010212674736976624,-0.01914968155324459,-0.0022617443464696407,-0.027712784707546234,0.06510304659605026,0.04706774652004242,0.006946524605154991,-0.021627701818943024,-0.02802070416510105,0.00561587093397975,0.025997230783104897,-0.0019721530843526125,-0.017214184626936913,-0.015132060274481773,-0.019912149757146835,0.00011002864630427212,-0.0004410310066305101,0.01565992273390293,0.021964948624372482,0.024003082886338234,0.011495674028992653,-0.025586672127246857,-0.006110742222517729,-0.02309398725628853,-0.01417897455394268,-0.01725817285478115,0.011371039785444736,-0.03407645970582962,-0.008211195468902588,-0.0076540070585906506,-0.0006919031729921699,-0.0024285344406962395,-0.04108530282974243,0.03956036642193794,0.0024376986548304558,0.004457505885511637,-0.03985362499952316,0.0072324504144489765,-0.004794751759618521,0.03991227596998215,-0.02888581156730652,-0.017639407888054848,0.029369685798883438,0.014684842899441719,0.011173090897500515,0.0213491078466177,0.004967039916664362,0.003645550925284624,-0.00907630380243063,-0.01005871407687664,0.005395928397774696,0.01249274704605341,0.0069208648055791855,-0.008093892596662045,-0.016437053680419922,-0.016085145995020866,0.017272835597395897,-0.019721532240509987,-0.013211227022111416,-0.007632012944668531,-0.04633460193872452,0.014897454530000687,-0.023621849715709686,-0.047273024916648865,0.012807998806238174,0.027683459222316742,0.01989748515188694,-0.02958962880074978,-0.02721424773335457,-0.18756715953350067,0.014149649068713188,0.010110034607350826,-0.005520562641322613,0.02721424773335457,-0.009098297916352749,0.028812497854232788,0.0018557668663561344,0.010586576536297798,-0.01428894605487585,0.0206013023853302,-0.022932695224881172,0.011972215957939625,-0.013277209363877773,-0.0061950539238750935,-0.021964948624372482,0.01217749621719122,0.014618860557675362,0.05184783414006233,0.015322676859796047,0.04486831650137901,-0.025029482319951057,0.02464824914932251,-0.004589471500366926,-0.006961187347769737,-0.0057478370144963264,-0.011334381997585297,0.004670117516070604,-0.00572584243491292,-0.045484159141778946,-0.017566092312335968,-0.012851987034082413,0.0006974017596803606,-0.024061735719442368,-0.0024047072511166334,0.016613008454442024,0.0008348659612238407,-0.003720697946846485,0.008827035315334797,0.032346244901418686,0.01211884431540966,0.048534031957387924,-0.0055792140774428844,-0.002688799984753132,0.015176048502326012,0.00527129415422678,0.02571863681077957,-0.01271269004791975,-0.004519823007285595,-0.006429659202694893,0.042668890208005905,0.00047975010238587856,0.0016266597667708993,0.01043261680752039,0.013761083595454693,0.014523551799356937,0.014406248927116394,0.010667222552001476,0.0031836710404604673,0.011876908130943775,0.0018658475019037724,-0.025528019294142723,-0.0006515803397633135,-0.010285988450050354,-0.015527957119047642,-0.018812434747815132,-0.011297725141048431,-0.014076335355639458,-0.024838866665959358,-0.007822629995644093,0.0010713044321164489,-0.00562320277094841,0.011986878700554371,-0.023445894941687584,0.059707120060920715,0.038358014076948166,-0.0033962824381887913,0.009882760234177113,0.00992674846202135,-0.0013022442581132054,-0.019941475242376328,0.017918001860380173,-0.001992314588278532,0.018841760233044624,0.001177610014565289,0.0003530539106577635,-0.02145174890756607,-0.012983952648937702,-0.002067461609840393,-0.004079937934875488,-0.012353450059890747,-0.010791856795549393,0.018827097490429878,-0.009824109263718128,0.0064406562596559525,0.0022085916716605425,0.003614392364397645,-0.014618860557675362,0.022243542596697807,-0.016539692878723145,-0.007236116100102663,-0.020161418244242668,-0.0055938768200576305,-0.0072397817857563496,0.04809414595365524,-0.0007528456626459956,0.02118781767785549,-0.011180422268807888,0.012294799089431763,-0.0007340588490478694,-0.0378594771027565,0.0163344144821167,0.0423169806599617,0.020278720185160637,-0.019017715007066727,0.04451641067862511,0.0003104399947915226,-0.012507409788668156,0.008401812054216862,-0.0018411040073260665,0.05627601593732834,-0.016598345711827278,0.0091862753033638,-0.000630960741546005,0.006371007766574621,-0.020733268931508064,-0.0812908336520195,-0.026642397046089172,0.011363708414137363,0.008915011771023273,-0.036539819091558456,-0.006825556047260761,-0.022932695224881172,0.01878310926258564,0.007536704186350107,0.02942833863198757,-0.014750826172530651,-0.007844624109566212,-0.029648279771208763,0.017566092312335968,-0.011627639643847942,-0.024824203923344612,-0.014992763288319111,-0.02609987184405327,-0.02212623879313469,0.029003115370869637,0.011994210071861744,-0.02702363021671772,-0.014435574412345886,-0.0075440360233187675,-0.040440138429403305,-0.01912035420536995,0.006436990574002266,0.007316761650145054,0.0018319396767765284,0.01142969075590372,0.0050440202467143536,-0.016642333939671516,-0.005795490927994251,-0.015615934506058693,0.009992731735110283,-0.00020894559565931559,-0.00028569644200615585,-0.008555772714316845,0.028812497854232788,-0.0107625313103199,0.010029388591647148,0.006810893304646015,0.03812340646982193,-0.008079229854047298,-0.014479563571512699,-0.007030836306512356,-0.021173153072595596,0.04815279692411423,0.007181130349636078,0.003467763774096966,-0.00952352024614811,-0.007932601496577263,-0.02052798867225647,-0.012976621277630329,0.017771372571587563,-0.013247883878648281,0.0024138714652508497,-0.003401780966669321,-0.005817485507577658,-0.023445894941687584,0.0016624005511403084,-0.012324124574661255,0.019428275525569916,0.05073345825076103,0.023563198745250702,-0.010916491039097309,-0.029164407402276993,0.003266149666160345,0.010615902952849865,-0.02750750444829464,-0.040557440370321274,0.025102797895669937,-0.005575548391789198,0.022067587822675705,-0.00810855533927679,0.0016669826582074165,0.02675969898700714,-0.00538126565515995,0.024824203923344612,0.008255183696746826,-0.006414996460080147,-0.01870979554951191,0.0050036972388625145,-0.024618923664093018,-0.0023607187904417515,0.037360940128564835,0.024413643404841423,0.009442875161767006,-0.0032881437800824642,-0.03956036642193794,0.027419527992606163,0.016349077224731445,0.0005626868223771453,0.004879062995314598,0.017976652830839157,0.013761083595454693,0.005516896955668926,-0.011048456653952599,-0.011869575828313828,0.010975142009556293,-0.035132184624671936,-0.009530851617455482,-0.07366615533828735,0.02283005602657795,0.0263491403311491,-0.005480239633470774,-0.030058840289711952,0.005406925454735756,-0.015308014117181301,-0.024736225605010986,-0.017243510112166405,0.009604166261851788,-0.0426982156932354,0.014406248927116394,-0.020014788955450058,-0.018504515290260315,-0.004054277669638395,-0.027228910475969315,0.0027786099817603827,-0.007283770013600588,0.008145212195813656,0.030645353719592094,-0.005388597026467323,0.01052059419453144,-0.012067524716258049,0.02772744745016098,-0.025146786123514175,-0.014069003984332085,-0.028973789885640144,-0.0013608956942334771,9.572377166477963e-6,-0.00527129415422678,0.029149744659662247,-0.005766165442764759,-0.0026503100525587797,0.006539630703628063,0.014274283312261105,-0.0022984016686677933,0.0093695605173707,0.006341682281345129,0.030557377263903618,0.011524999514222145,-0.0093695605173707,-0.009750794619321823,0.023064661771059036,-0.03850464150309563,0.00994874257594347,-0.018768446519970894,-0.031906358897686005,0.018123282119631767,0.03466297313570976,-0.0035264152102172375,0.010491268709301949,-0.0032221609726548195,-0.015542619861662388,-0.025528019294142723,-0.012030867859721184,-0.009890091605484486,-0.0032844780944287777,0.0015166884986683726,0.0015084405895322561,-0.009032314643263817,0.02876850962638855,0.01956024020910263,0.021583713591098785,-0.02799137867987156,0.012089518830180168,0.002855589846149087,-0.04469236359000206,0.004032283555716276,0.013849060982465744,-0.040880024433135986,-0.007991252467036247,-0.012742015533149242,0.007122478913515806,0.023915106430649757,-0.0033376310020685196,-0.022991348057985306,-0.026964979246258736,0.027375539764761925,-0.017023567110300064,0.00020780006889253855,0.0007171049364842474,-0.017507441341876984,-0.0018896746914833784,0.01982417143881321,-0.007052830420434475,-0.009728800505399704,-0.0012060193112120032,-0.019179007038474083,-0.011759605258703232,-0.01239743921905756,-0.04038148745894432,0.01563059724867344,0.007129810284823179,0.01662767119705677,0.014054340310394764,0.005344608332961798,-0.00029852642910555005,0.010593908838927746,0.00950152613222599,-0.009252257645130157,0.00917161162942648,0.008717063814401627,0.0017751211998984218,-0.009384223259985447,-0.004112929105758667,0.02772744745016098,-0.035953305661678314,-0.008980995044112206,0.00629036221653223,0.0000910127637325786,-0.01655435562133789,-0.010982474312186241,-0.012456090189516544,0.0315544493496418,-0.0057295081205666065,0.029941538348793983,0.005095339845865965,0.0061693936586380005,-0.03360724821686745,0.032316919416189194,-0.03348994627594948,0.00810855533927679,0.029970863834023476,-0.011986878700554371,0.0035392451100051403,0.0045968033373355865,-0.012170164845883846,-0.018607154488563538,0.011532330885529518,-0.02639312855899334,0.005692851264029741,0.008218526840209961,-0.01674497313797474,-0.01107778213918209,-0.008027910254895687,0.004189908970147371,-0.008959000930190086,0.007126144599169493,-0.02222887985408306,0.09771322458982468,0.03929643705487251,-0.025659985840320587,-0.010124697349965572,-0.000021793804990011267,0.026583746075630188,-0.02038135938346386,-0.0032514866907149553,0.003718865104019642,-0.057624995708465576,-0.026569081470370293,0.008203864097595215,-0.0032203281298279762,-0.029369685798883438,-0.009794782847166061,-0.008027910254895687,-0.04328472912311554,0.050645481795072556,-0.008387149311602116,0.0009704973199404776,0.03222894296050072,0.00629036221653223,0.011239074170589447,0.01523470040410757,-0.012881312519311905,-0.01523470040410757,0.03659847006201744,0.016994241625070572,-0.01684761419892311,-0.026774361729621887,0.02942833863198757,0.013504483737051487,-0.034868255257606506,-0.03460432216525078,-0.005318948533385992,0.02101186290383339,-0.00025843270123004913,-0.03612925857305527,0.014156980440020561,0.004406186286360025,0.01747811585664749,-0.04627595096826553,-0.022507473826408386,-0.019985463470220566,-0.005175985861569643,0.006583619397133589,-0.036803752183914185,0.004930383060127497,-0.053841982036828995],[-0.00876461062580347,0.012256027199327946,-0.009384986013174057,0.019866449758410454,-0.01416043657809496,0.009500404819846153,-0.007051363587379456,0.008793464861810207,-0.00394227122887969,-0.03635690361261368,0.0375976525247097,0.007978320121765137,-0.016966555267572403,0.016663579270243645,0.01330922357738018,0.005017108283936977,0.009493190795183182,-0.007083824835717678,0.044638197869062424,0.010459822602570057,0.018957527354359627,0.016634725034236908,-0.016548162326216698,-0.006207364145666361,0.0037438953295350075,0.03188442438840866,0.03306746855378151,0.008490490727126598,-0.012659993022680283,0.014535547234117985,0.0562954880297184,-0.00007174221536843106,-0.029835743829607964,0.0073759788647294044,-0.023213593289256096,-0.012631137855350971,-0.00818751659244299,0.0079494658857584,0.02112162858247757,-0.020097287371754646,0.01783219538629055,0.000361810700269416,0.0012010762002319098,-0.005287620704621077,-0.002892682095989585,0.01216946355998516,-0.008793464861810207,-0.050524551421403885,-0.0141820777207613,0.0018539134180173278,-0.0005897175869904459,-0.003547322703525424,-0.020962927490472794,0.030095435678958893,0.004248852375894785,-0.002348050009459257,0.018337151035666466,0.017933186143636703,0.002961212070658803,0.01607205905020237,0.01638946123421192,-0.01946248486638069,-0.007704200688749552,-0.00147970428224653,-0.02410808950662613,-0.01493229903280735,-0.015033290721476078,0.02472846396267414,-0.057997915893793106,-0.017543647438287735,0.0056410906836390495,0.015004435554146767,0.0052299113012850285,0.0050459629856050014,0.01703869178891182,-0.026185626164078712,-0.010329976677894592,-0.000334534008288756,-0.026243334636092186,-0.013006248511373997,0.015783512964844704,0.016461597755551338,-0.020573390647768974,0.058863554149866104,0.013669907115399837,0.018986381590366364,0.012782624922692776,0.010265054181218147,-0.028537282720208168,-0.006117193028330803,0.028046753257513046,-0.0019981868099421263,0.0027285711839795113,0.005442714784294367,0.014326350763440132,-0.0012263241223990917,-0.008807891979813576,0.013374146074056625,-0.012659993022680283,0.0390980988740921,-0.012905257754027843,-0.01179435197263956,0.00009884983592201024,-0.01209732610732317,-0.0004129826556891203,0.0020414688624441624,-0.013006248511373997,-0.021972842514514923,0.008439995348453522,0.01361219771206379,-0.0008430978050455451,0.02960490621626377,-0.008173089474439621,-0.004454441834241152,-0.018683407455682755,0.019116228446364403,0.02367526851594448,0.02661844715476036,-0.003520271508023143,-0.040165722370147705,0.019534621387720108,0.0029972803313285112,0.0380304753780365,0.005987347103655338,0.009240712970495224,0.008771823719143867,-0.018943101167678833,-0.006809705402702093,0.004295741207897663,-0.0033489468041807413,0.021713150665163994,0.01519199088215828,-0.011080198921263218,0.025897080078721046,0.019924160093069077,0.03589522838592529,-0.04351286217570305,0.007311055436730385,-0.028782548382878304,-0.005410253535956144,-0.019794313237071037,0.047148555517196655,-0.0352315679192543,0.01946248486638069,-0.021280329674482346,-0.00961582362651825,0.016346178948879242,0.033788833767175674,0.032086409628391266,-0.022867336869239807,0.005089244805276394,0.02249222621321678,-0.018640125170350075,0.02283848263323307,-0.006928731221705675,0.04019457474350929,-0.028292017057538033,0.006283107679337263,0.020313696935772896,0.028998957946896553,-0.007877328433096409,0.04316660761833191,-0.019751030951738358,-0.01572580263018608,0.020962927490472794,0.023603131994605064,0.013136095367372036,-0.013460710644721985,-0.007354337722063065,-0.016274042427539825,-0.007430081255733967,0.0015274948673322797,-0.04986089468002319,0.03719368949532509,0.011159549467265606,0.0388961136341095,0.031682442873716354,-0.0023913320619612932,-0.011866488493978977,-0.006027022376656532,0.006236218847334385,0.0034120664931833744,-0.0059548853896558285,0.04106021672487259,-0.02503143809735775,-0.006030628923326731,-0.004144254140555859,-0.01651930622756481,0.01576908491551876,0.019967442378401756,0.014167649671435356,0.012277668341994286,0.016793426126241684,-0.010445395484566689,-0.5498548746109009,-0.016634725034236908,-0.009558114223182201,-0.01757250353693962,0.03145160526037216,-0.017457084730267525,0.030557110905647278,0.04492674395442009,-0.0016131572192534804,0.04256065934896469,-0.004869227763265371,0.009305635467171669,0.017716776579618454,-0.011938625946640968,0.00196572532877326,-0.017024263739585876,-0.0012191104469820857,-0.010842147283256054,0.018279442563652992,-0.014369633048772812,-0.017500365152955055,0.00635524420067668,-0.007711414247751236,-0.028205454349517822,0.01381418015807867,-0.019390348345041275,-0.00023489516752306372,-0.03044169209897518,-0.004400339443236589,-0.027166685089468956,-0.02292504720389843,-0.012068471871316433,-0.006106372456997633,-0.006373278331011534,0.057767078280448914,-0.021799713373184204,0.001597828115336597,-0.004371484741568565,0.02419465221464634,0.036068353801965714,0.0009377772221341729,-0.021943988278508186,0.0018376826774328947,-0.008569841273128986,0.0317978635430336,-0.002569870324805379,0.008663618937134743,0.0036915962118655443,-0.004476082976907492,-0.015740230679512024,-0.001913426211103797,0.003989160060882568,0.03130733221769333,0.006806098856031895,0.0030640067998319864,-0.012724915519356728,0.040252283215522766,-0.010813293047249317,0.001474293996579945,-0.01040932722389698,-0.018149595707654953,0.018870962783694267,-0.0380304753780365,-0.01100084837526083,-0.003619459457695484,0.04157960042357445,-0.019419202581048012,0.010640164837241173,0.027527369558811188,0.0031595879700034857,0.01800532266497612,0.020097287371754646,-0.0016131572192534804,-0.0423298217356205,-0.003619459457695484,0.04258951544761658,0.015494965016841888,-0.014297496527433395,0.013294795528054237,0.015581529587507248,-0.016923272982239723,-0.0028277591336518526,0.000017188825950142927,-0.016403887420892715,0.005164988338947296,-0.01989530399441719,-0.025218993425369263,-0.017514793202280998,0.0395309180021286,-0.01323708612471819,0.011325463652610779,0.006225398276001215,-0.01247243769466877,-0.02687813900411129,-0.0009215464815497398,0.008230798877775669,0.01106577180325985,-0.00011491152690723538,0.0034679723903536797,0.006225398276001215,-0.015004435554146767,-0.006531978957355022,0.004342630039900541,0.0014084692811593413,0.04954349249601364,-0.0002614955883473158,-0.011051343753933907,-0.013540060259401798,0.021006209775805473,0.0001768476504366845,0.023646414279937744,-0.00447968952357769,-0.014196504838764668,-0.02051568031311035,-0.027729351073503494,-0.03500073030591011,0.0403965562582016,-0.0015455289976671338,0.0476967915892601,0.011606796644628048,0.0030531862284988165,0.0031289297621697187,-0.00792782474309206,-0.02037140727043152,0.03277892246842384,0.014239787124097347,0.0018971954705193639,0.03188442438840866,0.009103653021156788,-0.0046239630319178104,0.003877348266541958,0.003626673249527812,0.031249623745679855,-8.883241207513493e-6,0.02275191806256771,0.017053117975592613,0.04175272956490517,-0.001615862362086773,0.00145445647649467,-0.006834953557699919,-0.009457122534513474,0.01556710246950388,0.02393496036529541,-0.028796974569559097,-0.017327237874269485,-0.020313696935772896,-0.032259538769721985,-0.029835743829607964,0.002337229438126087,0.0076392777264118195,-0.004753809422254562,0.0050856382586061954,-0.004158681258559227,0.004360664170235395,-0.03162473440170288,-0.031769007444381714,-0.015379547141492367,-0.01416043657809496,0.010755583643913269,0.02236238121986389,0.02977803349494934,0.03508729487657547,-0.010827720165252686,-0.023530995473265648,-0.027902480214834213,-0.011996335349977016,-0.00563027011230588,-0.004840373061597347,0.0050748176872730255,-0.01440570130944252,-0.035462405532598495,0.015552674420177937,-0.0005360659561119974,-0.03433707356452942,-0.0008494097855873406,0.02586822398006916,-0.012876402586698532,-0.007274987176060677,-0.015177563764154911,0.014434555545449257,0.04163730889558792,-0.00290891295298934,-0.03583751618862152,0.015927786007523537,0.017760058864951134,0.0269647017121315,0.02064552716910839,-0.0038052115123718977,-0.010596882551908493,-0.0013733026571571827,-0.026329899206757545,0.02621448040008545,-0.003312878543511033,0.007610423024743795,0.003210083581507206,0.019534621387720108,-0.011210044845938683,-0.035202715545892715,-0.004288527648895979,0.02855171076953411,0.017630212008953094,-0.00952925905585289,0.031422752887010574,-0.03338487073779106,0.0023660841397941113,-0.014751957729458809,0.004843980073928833,-0.021006209775805473,-0.01152744609862566,0.045330710709095,0.00981780607253313,0.005042355973273516,-0.004028835333883762,0.033096324652433395,0.01638946123421192,0.03370227292180061,-0.013713188469409943,0.028926821425557137,-0.0004918822087347507,-0.00819473061710596,-0.010950352996587753,-0.012638351880013943,0.02301160991191864,0.008064884692430496,-0.025796087458729744,0.019736604765057564,0.019534621387720108,-0.005017108283936977,-0.006185723003000021,-0.016879990696907043,0.0006645594257861376,0.010084711946547031,0.0219151321798563,-0.006571654230356216,-0.010250627063214779,0.011686147190630436,0.004302954766899347,-0.002308374736458063,0.023487713187932968,-0.02876812033355236,-0.0012939522275701165,-0.008295721374452114,-0.006019808351993561,0.0017285759095102549,0.017269529402256012,-0.032172974199056625,0.011484164744615555,0.015119854360818863,-0.009911583736538887,-0.003615852678194642,-0.00819473061710596,0.02687813900411129,-0.0013029692927375436,-0.012234386056661606,0.01897195540368557,-0.004735775291919708,0.012176676653325558,0.004133433569222689,0.016057631000876427,0.013511206023395061,0.006795278284698725,-0.011462523601949215,0.015206418931484222,-0.02081865444779396,0.03586637228727341,0.011419241316616535,-0.027080120518803596,-0.028912393376231194,-0.010236199013888836,-0.0090243024751544,0.012746556662023067,-0.009680746123194695,-0.018769972026348114,0.004674458876252174,0.002896288875490427,0.010553601197898388,0.004162288270890713,0.01826501451432705,0.0031000750605016947,-0.017110828310251236,-0.0020468791481107473,-0.010127994231879711,0.021641014143824577,0.03878069669008255,-0.01972217671573162,-0.02827759087085724,0.0018701442750170827,-0.0009102750918827951,-0.008966593071818352,-0.0049666124396026134,-0.027368668466806412,-0.008937738835811615,-0.035202715545892715,0.001978349406272173,-0.015653666108846664,0.0214823130518198,0.008230798877775669,-0.02389167807996273,-0.02133803814649582,-0.016504880040884018,-0.0024201865307986736,0.021814141422510147,-0.026935847476124763,-0.017182964831590652,0.004959398880600929,0.02156887575984001,-0.02722439542412758,0.005201057065278292,-0.005009894724935293,0.0013345291372388601,0.0027429985348135233,-0.0010162258986383677,0.0006875530234538019,-0.04062739387154579,0.022867336869239807,-0.006503124255686998,0.001891785184852779,-0.002257879124954343,-0.01238587312400341,0.003201066516339779,-0.012320950627326965,-0.025796087458729744,0.0018178451573476195,0.002376904711127281,0.04224325716495514,0.047667939215898514,0.003619459457695484,0.0062470389530062675,-0.014658180065453053,-0.0061027659103274345,-0.019476911053061485,-0.0012975591234862804,0.0008530166232958436,0.0009296618518419564,-0.005579774733632803,0.0019026057561859488,-0.02608463540673256,0.012919684872031212,0.0155238201841712,0.0005405744886957109,0.007855688221752644,-0.025319986045360565,0.004627570044249296,0.0030405623838305473,0.012292095459997654,-0.016014350578188896,-0.01708197221159935,0.023992670699954033,0.012219958938658237,0.029460633173584938,-0.0003550478722900152,-0.015610383823513985,0.009478763677179813,-0.010221771895885468,-0.015437256544828415,0.006687073037028313,0.012782624922692776,-0.0038052115123718977,-0.04137761890888214,0.033529143780469894,0.018322724848985672,-0.0030856477096676826,0.001682588830590248,-0.0020504859276115894,0.03350028768181801,0.0065896883606910706,0.008930524811148643,0.013460710644721985,-0.0024418276734650135,-0.025796087458729744,-0.040021445602178574,-0.004580681212246418,0.0024292038287967443,-0.007321876008063555,0.028609419241547585,-0.008093738928437233,-0.0024616653099656105,-0.0155238201841712,0.04515758156776428,-0.021280329674482346,0.012638351880013943,0.0031704085413366556,-0.005154167767614126,-0.027989042922854424,-0.025017011910676956,-0.0408293791115284,-0.00983944721519947,-0.005453535355627537,0.00524794589728117,-0.02060224488377571,-0.02898452989757061,-0.004598715342581272,-0.026820428669452667,0.007523858919739723,-0.012760983780026436,0.016057631000876427,-0.014788025990128517,-0.007332696579396725,0.002544622402638197,0.024930447340011597,-0.0008503114804625511,0.009911583736538887,-0.003594211535528302,0.02221810631453991,-0.008129807189106941,-0.0103660449385643,-0.000500448455568403,-0.008937738835811615,0.002553639467805624,0.02090521901845932,0.012825907208025455,0.018914245069026947,-0.011945839039981365,0.0192316472530365,-0.019866449758410454,0.034798748791217804,0.007271380629390478,-0.02419465221464634,-0.004912510048598051,0.002324605593457818,0.003917023539543152,0.0031163059175014496,0.016923272982239723,-0.0008575251558795571,0.025449831038713455,0.0023913320619612932,-0.039242371916770935,-0.012155035510659218,-0.020659953355789185,0.014614897780120373,0.005399432964622974,-0.0006054975092411041,-0.0034427244681864977,-0.014766384847462177,-0.010048643685877323,-0.015321837738156319,0.020674381405115128,-0.00023647314810659736,0.012616710737347603,0.027902480214834213,0.010041430592536926,0.0008313755970448256,-0.010647378861904144,-0.03733796253800392,0.008548200130462646,-0.012313736602663994,0.031163059175014496,0.01238587312400341,-0.013049530796706676,0.017543647438287735,-0.019000809639692307,-0.019217219203710556,-0.026026925072073936,0.03003772720694542,-0.01628846861422062,0.020356979221105576,0.0048115188255906105,-0.03702056035399437,-0.023833969607949257,0.014131581410765648,0.014218145981431007,-0.006730355322360992,-0.0030297418124973774,0.013063957914710045,-0.003938664216548204,0.020270416513085365,-0.0004192946362309158,-0.0185824166983366,0.017933186143636703,-0.03526042401790619,-0.05115935578942299,0.004486903548240662,0.006737568881362677,0.011938625946640968,-0.04432079568505287,0.010784437879920006,0.008266867138445377,-0.006329996511340141,-0.0033327159471809864,-0.004569860640913248,-0.003504040651023388,-0.01409551315009594,0.01656258851289749,-0.0033940321300178766,0.005868321284651756,0.000997290015220642,0.03811703622341156,0.040252283215522766,-0.004566253628581762,0.0007790764793753624,0.021756431087851524,-0.01673571765422821,-0.011974694207310677,-0.017933186143636703,0.00322811771184206,0.0042704930528998375,-0.00013345290790311992,-0.019866449758410454,0.004245245363563299,0.007790764793753624,0.03517385944724083,0.017601357772946358,-0.026156771928071976,-0.06353801488876343,0.0028043147176504135,0.01950576715171337,-0.014766384847462177,0.015408401377499104,-0.023026037961244583,-0.014225359074771404,0.00043710338650271297,-0.023083748295903206,0.00878625176846981,0.019751030951738358,0.03635690361261368,-0.03127847611904144,0.020674381405115128,0.017399374395608902,0.016764571890234947,0.015091000124812126,-0.0143407778814435,-0.018120741471648216,0.00841114018112421,0.005399432964622974,0.004901689477264881,0.039992593228816986,0.01556710246950388,-0.003336322959512472,-0.013532847166061401,-0.02068880945444107,-0.05265979841351509,-0.010625737719237804,0.004706920590251684,-0.014059444889426231,-0.008317362517118454,-0.020674381405115128,-0.02731095813214779,0.00004739607174997218,0.01853913441300392,-0.028003470972180367,-0.03174015134572983,0.01576908491551876,-0.009558114223182201,-0.04625405743718147,0.017312809824943542,-0.006452628877013922,0.04561925679445267,-0.007826833054423332,-0.00013784875045530498,-0.012760983780026436,-0.008836747147142887,0.0055725607089698315,0.01442734245210886,0.005345330107957125,0.012155035510659218,0.024035951122641563,0.00464560417458415,0.012241600081324577,0.00661132950335741,0.014174863696098328,-0.012609496712684631,-0.021265901625156403,-0.022203680127859116,0.02358870394527912,0.02451205439865589,0.014701461419463158,-0.01273934356868267,0.006301141809672117,-0.019664468243718147,-0.001918836496770382,-0.017889903858304024,-0.025002583861351013,0.02133803814649582,-0.012054044753313065,0.003247955348342657,0.0156825203448534,0.03531813248991966,0.024843882769346237,0.004836766514927149,-0.0015374136855825782,-0.01901523768901825,-0.005395825952291489,0.01871226355433464,0.014860162511467934,-0.0002939570986200124,0.03878069669008255,-0.02542097680270672,0.01440570130944252,-0.021799713373184204,0.003783570369705558,-0.009219071827828884,0.002582494169473648,-0.020039578899741173,0.04088708758354187,-0.024627473205327988,0.011072984896600246,-0.001449046190828085,-0.027426376938819885,0.011916984803974628,-0.0037727500312030315,-0.0038160320837050676,-0.036558885127305984,-0.0248150285333395,-0.019072946161031723,0.04449392482638359,0.004111792426556349,-0.021713150665163994,-0.01699540950357914,0.006503124255686998,-0.018192877992987633,0.003837672993540764,-0.028998957946896553,0.037886202335357666,-0.02634432725608349,-0.006402133032679558,-0.032172974199056625,-0.018164023756980896,0.02397824265062809,0.010568028315901756,-0.036299191415309906,0.01748593896627426,0.049774330109357834,-0.02389167807996273,0.00508203124627471,-0.007920610718429089,-0.02340114861726761,-0.03624148294329643,-0.007210064213722944,-0.017644640058279037,-0.021814141422510147,0.00047655313392169774,0.004620356485247612,0.00774026894941926,-0.040425412356853485,-0.004295741207897663,0.005835860036313534,0.008201943710446358,0.02560853213071823,-0.00959418248385191,0.0008408435387536883,-0.0003597818431444466,-0.009976507164537907,0.0352315679192543,0.041262198239564896,0.026200054213404655,-0.024973729625344276,0.03122076764702797,0.010344404727220535,0.03805932775139809,-0.01998186856508255,-0.0027213573921471834,-0.019707748666405678,-0.010914284735918045,-0.029633760452270508,0.006852987688034773,0.0013146915007382631,-0.02595478855073452,-0.006243432406336069,0.0037150406278669834,-0.0345967672765255,0.002647417364642024,-0.019130656495690346,0.020804228261113167,0.00045040357508696616,0.03681857883930206,0.021179338917136192,-0.0016014350112527609,-0.0044580488465726376,-0.009558114223182201,0.00454461295157671,0.00632278248667717,0.008252440020442009,-0.009687960147857666,-0.01637503318488598,0.0030441691633313894,0.0491972379386425,0.022420089691877365,0.0009183905203826725,-0.017803341150283813,0.00023669858637731522,-0.011779924854636192,-0.018077459186315536,-0.0180486049503088,0.011657292023301125,-0.017356092110276222,-0.00576372304931283,-0.009197430685162544,0.01673571765422821,0.005067604128271341,0.013958453200757504,-0.037395671010017395,0.002281323540955782,0.002512160921469331,0.005237125325948,0.02739752270281315,0.004710527136921883,-0.02275191806256771,0.0010423754574730992,0.03404852747917175,-0.025017011910676956,-0.02279520034790039,0.01840928941965103,-0.01752922125160694,-0.02850842848420143,-0.025680668652057648,0.013121667318046093,0.0018971954705193639,-0.0317978635430336,0.002943177707493305,-0.02954719588160515,-0.01901523768901825,0.009471550583839417,0.010438182391226292,-0.01302067656069994,0.013684334233403206,0.024916019290685654,0.03182671591639519,0.016663579270243645,-0.0004625766596291214,-0.0010667216265574098,0.01264556497335434,0.000973845599219203,0.031509313732385635,-0.0014174863463267684,0.00841114018112421,0.03289433941245079,-0.00847606360912323,0.018813254311680794,0.0027375882491469383,0.012984608300030231,-0.03390425443649292,-0.012623924762010574,0.0011100036790594459,-0.010755583643913269,0.016144195571541786,-0.010171276517212391,-0.022160397842526436,0.009118080139160156,-0.01236423198133707,0.008569841273128986,-0.025680668652057648,-0.022650927305221558,0.009745669551193714,0.02384839579463005,-0.06301862746477127,0.007523858919739723,-0.008418354205787182,0.020962927490472794,0.00029170283232815564,-0.014304709620773792,-0.016923272982239723,0.005958492401987314,0.0027844770811498165,-0.02125147543847561,0.008916097693145275,-0.016057631000876427,0.010315549559891224,0.0076392777264118195,0.010077498853206635,-0.012256027199327946,0.19586560130119324,-0.02133803814649582,0.018438143655657768,0.025262275710701942,-0.020674381405115128,0.024050379171967506,0.010373258963227272,-0.0030495794489979744,0.01866898126900196,0.03174015134572983,0.012840334326028824,-0.01150580495595932,-0.03277892246842384,0.004256065934896469,0.010647378861904144,0.017356092110276222,-0.03205755352973938,-0.04954349249601364,-0.014917871914803982,0.010885429568588734,0.017269529402256012,-0.003240741789340973,-0.03702056035399437,-0.027613932266831398,0.038232456892728806,-0.00981780607253313,-0.018466997891664505,-0.0016898025060072541,0.013049530796706676,0.022723063826560974,-0.012292095459997654,-0.03139389678835869,0.005558133590966463,-0.002203776501119137,0.004256065934896469,-0.0005008992739021778,0.031769007444381714,-0.02498815581202507,-0.0001446115638827905,0.0164327435195446,0.02692142128944397,-0.010568028315901756,0.008533773012459278,-0.008916097693145275,0.004259672947227955,-0.012869189493358135,0.005110885947942734,0.04535956308245659,0.006236218847334385,-0.0017944006249308586,-0.025276703760027885,0.013597769662737846,0.0012479651486501098,0.009709601290524006,-0.008750182576477528,-0.01293411199003458,-0.02445434406399727,-0.010481463745236397,0.0103660449385643,-0.021799713373184204,-0.015163136646151543,-0.013374146074056625,-0.014016162604093552,0.007935037836432457,-0.025060294196009636,0.03399081900715828,-0.04527299851179123,-0.02037140727043152,0.019029663875699043,-0.03904038667678833,-0.00715956836938858,-0.00872132834047079,-0.021352466195821762,-0.010106353089213371,-0.022030550986528397,-0.013576128520071507,-0.011173976585268974,0.03315403312444687,0.013763684779405594,0.039328936487436295,-0.011072984896600246,0.012082898989319801,-0.019419202581048012,-0.0031307332683354616,0.004858407657593489,-0.013604983687400818,0.032692357897758484,0.0015987298684194684,-0.0006041449378244579,-0.0068746283650398254,-0.008230798877775669,-0.007790764793753624,0.009579755365848541,0.009543687105178833,0.014831307344138622,-0.01641831547021866,-0.017687922343611717,-0.020876364782452583,-0.03693399578332901,-0.008937738835811615,-0.02928750403225422,0.05938294157385826,0.04123334214091301,-0.00651033828034997,-0.019202793017029762,-0.024786174297332764,0.009031516499817371,0.0075599271804094315,0.02028484269976616,-0.040915943682193756,-0.03332715854048729,-0.016086487099528313,0.0033471432980149984,0.003365177661180496,0.015321837738156319,0.026416463777422905,-0.009096438996493816,0.03087451308965683,-0.007098252419382334,-0.014066658914089203,-0.0003311525797471404,-0.02954719588160515,-0.021020637825131416,0.002988263266161084,-0.02937406860291958,-0.009623037651181221,-0.004111792426556349,-0.013922384940087795,0.00906758476048708,-0.03171129897236824,0.03944435343146324,0.015321837738156319,-0.0017799733905121684,-0.022189252078533173,-0.0009413840598426759,-0.014023376628756523,0.04120448976755142,-0.040685106068849564,-0.025622960180044174,0.013936812989413738,0.01179435197263956,0.006052270065993071,0.037309106439352036,-0.012284881435334682,0.007502217777073383,-0.00955090019851923,-0.005648304242640734,0.018236160278320312,0.007487790659070015,0.024670755490660667,-0.020659953355789185,-0.00379799772053957,-0.007531072478741407,0.007870115339756012,-0.01879882626235485,-0.01918836496770382,-0.016836708411574364,-0.069193534553051,-0.013136095367372036,-0.008137021213769913,-0.039761755615472794,0.020457971841096878,-0.021987268701195717,0.009204644709825516,-0.03583751618862152,0.0004181675030849874,-0.18247702717781067,0.010438182391226292,0.0053886123932898045,-0.01234259083867073,0.02239123545587063,-0.011931411921977997,0.023819541558623314,0.011109053157269955,-0.0031181094236671925,0.005936851259320974,0.03165359050035477,-0.01071230135858059,0.013395787216722965,-0.019621185958385468,0.001302067656069994,-0.015292982570827007,0.0044183735735714436,0.005825039464980364,0.043022334575653076,0.011448095552623272,0.03961748257279396,-0.026113489642739296,0.0293307863175869,-0.015105427242815495,-0.0037475021090358496,0.004292134195566177,-0.0015626614913344383,-0.00576372304931283,-0.006845773663371801,-0.037049416452646255,-0.02977803349494934,-0.019072946161031723,0.01998186856508255,-0.014831307344138622,0.001906212535686791,0.009954866021871567,-0.0024021524004638195,-0.014196504838764668,0.007094645407050848,0.017601357772946358,0.009493190795183182,0.04781221225857735,-0.003826852422207594,0.007848474197089672,0.007451722398400307,0.012227172031998634,0.00466724531725049,-0.0053777918219566345,0.001106396783143282,-0.00007534904580097646,0.02969147078692913,0.0041550747118890285,-0.011015275493264198,0.007567140739411116,0.016879990696907043,0.004165894817560911,0.016750143840909004,-0.0016861956100910902,0.006254252977669239,0.0030658103059977293,-0.00018778086814563721,-0.017601357772946358,0.01871226355433464,-0.011916984803974628,-0.0016861956100910902,-0.014860162511467934,-0.025723950937390327,-0.008584268391132355,-0.02595478855073452,-0.018120741471648216,-0.016461597755551338,-0.006528372410684824,0.003572570625692606,-0.025594104081392288,0.05147675797343254,0.033615708351135254,-0.01493229903280735,0.015624811872839928,-0.013078385964035988,0.01150580495595932,-0.017904331907629967,0.026243334636092186,-0.006106372456997633,0.02679157443344593,0.0073651582933962345,-0.008923310786485672,-0.024540908634662628,-0.00027502121520228684,0.009370558895170689,-0.008634764701128006,-0.029099948704242706,-0.0017249691300094128,0.021842995658516884,-0.01126054022461176,-0.008584268391132355,0.009478763677179813,0.015913357958197594,-0.0057601165026426315,0.010784437879920006,-0.019390348345041275,-0.00908922590315342,-0.01133267767727375,-0.012898043729364872,-0.014398487284779549,0.00926956720650196,0.003224510932341218,0.018654553219676018,-0.001421994878910482,0.004804304800927639,-0.024483200162649155,-0.023732976987957954,0.00957254134118557,0.03586637228727341,0.025536395609378815,-0.013302009552717209,0.02002515085041523,0.007303841877728701,-0.00046347835450433195,0.03047054633498192,-0.013475137762725353,0.0620952807366848,-0.009305635467171669,0.012782624922692776,0.018452569842338562,0.0005743885412812233,-0.015163136646151543,-0.09447023272514343,-0.03413509204983711,0.004836766514927149,0.020674381405115128,-0.03240381181240082,-0.008447208441793919,-0.018524708226323128,-0.002201972994953394,0.001293050590902567,0.033182885497808456,-0.012898043729364872,-0.021511167287826538,-0.03820360079407692,0.02433892711997032,-0.00715956836938858,-0.029980016872286797,-0.031076494604349136,-0.015826795250177383,-0.020804228261113167,0.03399081900715828,-0.0015175760490819812,-0.04504216089844704,-0.015653666108846664,-0.004436407703906298,-0.02819102630019188,-0.025594104081392288,-0.0020432723686099052,0.02120819315314293,-0.0024598618037998676,0.014564401470124722,-0.011072984896600246,-0.01352563314139843,-0.008836747147142887,-0.0007709611090831459,-0.002910716226324439,-0.007199243642389774,0.01297739427536726,-0.027830343693494797,0.028869111090898514,-0.011181190609931946,0.024800600484013557,0.020876364782452583,0.024209080263972282,0.002187545644119382,-0.02143903076648712,-0.003525681793689728,-0.013201017864048481,0.04905296489596367,-0.007040543016046286,0.0036717585753649473,-0.01778891310095787,-0.01611534133553505,-0.017327237874269485,0.00025292934151366353,0.006308355368673801,-0.03165359050035477,0.0020450756419450045,0.023862823843955994,-0.017630212008953094,-0.0072172777727246284,-0.011361531913280487,0.007361551281064749,-0.004450835287570953,0.023083748295903206,0.0037871773820370436,-0.02354542165994644,-0.020587816834449768,0.010337190702557564,0.004577074199914932,-0.030845656991004944,-0.04308004304766655,0.025060294196009636,0.004010801203548908,0.012941326014697552,-0.0024346138816326857,0.01725510135293007,0.016360605135560036,-0.006308355368673801,0.03514500707387924,-0.005655518267303705,-0.017760058864951134,-0.01431913673877716,0.01291247084736824,-0.04325317218899727,-0.001784481923095882,0.02182856947183609,0.015999922528862953,0.011152335442602634,-0.000649230380076915,-0.03670315816998482,0.039415497332811356,0.028292017057538033,-0.01018570363521576,0.013366932049393654,0.0007849375833757222,0.009154148399829865,0.011484164744615555,0.00045378500362858176,0.0033182885963469744,-0.0132659412920475,-0.031682442873716354,-0.004775450099259615,-0.07127106934785843,0.039069242775440216,0.023949388414621353,-0.010445395484566689,-0.030182000249624252,0.0026672547683119774,-0.016043204814195633,-0.02432449907064438,-0.007603209465742111,0.01563923805952072,-0.028623847290873528,0.003242545062676072,-0.023386722430586815,-0.04192585498094559,-0.010596882551908493,-0.03981946408748627,0.004375091288238764,-0.017947614192962646,0.021799713373184204,0.03237495571374893,0.001981956185773015,0.010394900105893612,-0.011217258870601654,0.013907957822084427,0.010575241409242153,-0.01940477453172207,-0.020616671070456505,0.016490451991558075,0.013172163628041744,0.02591150626540184,0.031682442873716354,0.00761763658374548,-0.000361810700269416,0.016504880040884018,-0.010063070803880692,0.008086524903774261,-0.008966593071818352,0.00390980951488018,0.020847508683800697,-0.007509431801736355,-0.0007790764793753624,-0.011678933165967464,-0.0036519209388643503,-0.0155238201841712,0.025637386366724968,0.009485977701842785,-0.04149303585290909,0.019000809639692307,0.01462211087346077,0.0008534674416296184,0.023386722430586815,0.0003124421346001327,-0.019246075302362442,-0.011650078929960728,-0.0429646261036396,-0.012890830636024475,-0.003244348568841815,-0.001956708263605833,0.0008638371364213526,-0.010373258963227272,0.03837672993540764,0.04241638630628586,0.02907109446823597,-0.03860756754875183,-0.006517551839351654,-0.011181190609931946,-0.04746595397591591,-0.007797978352755308,0.004259672947227955,-0.04065624997019768,-0.010625737719237804,0.010250627063214779,0.008403927087783813,0.0213813204318285,0.008872815407812595,-0.013893530704081059,-0.0100991390645504,0.030759094282984734,-0.007531072478741407,0.02120819315314293,0.019347066059708595,-0.01985202357172966,-0.009716815315186977,0.014463410712778568,0.0012091916287317872,0.000368122651707381,-0.016447169706225395,-0.005933244246989489,-0.01729838363826275,-0.02322802133858204,-0.0399637371301651,0.011823207139968872,0.018899818882346153,-0.000899454636964947,0.011996335349977016,0.0004431899287737906,0.006550013553351164,0.024569762870669365,0.0221315436065197,0.0015410204650834203,0.0018349775345996022,0.011036916635930538,-0.005493210628628731,0.014701461419463158,0.019029663875699043,0.03012428991496563,-0.043195463716983795,-0.006694286596029997,0.010798865929245949,0.007495004218071699,-0.020472398027777672,0.0031938529573380947,-0.01840928941965103,0.03399081900715828,-0.024353353306651115,0.020443543791770935,-0.012234386056661606,0.02234795317053795,-0.03078794851899147,0.025579677894711494,-0.016100913286209106,-0.01387910358607769,0.033442579209804535,-0.017197391018271446,0.0023660841397941113,0.00019758695270866156,-0.022376807406544685,-0.03396196290850639,0.029172085225582123,-0.024209080263972282,0.030816802754998207,0.0052984412759542465,-0.00028696886147372425,-0.015091000124812126,-0.011217258870601654,0.010777224786579609,0.008151448331773281,0.025536395609378815,-0.025897080078721046,0.0930275022983551,0.031682442873716354,-0.008540986105799675,-0.0006271385354921222,-0.009060370735824108,0.03312517702579498,-0.013446282595396042,-0.015538247302174568,0.014723102562129498,-0.039069242775440216,-0.015163136646151543,-0.004234424792230129,-0.009175789542496204,-0.03577980771660805,-0.010070284828543663,-0.0024544515181332827,-0.030557110905647278,0.047667939215898514,-0.012703274376690388,-0.008064884692430496,0.03938664495944977,0.00595127884298563,0.02221810631453991,0.014535547234117985,-0.008728542365133762,-0.02630104497075081,0.03145160526037216,0.01910180039703846,-0.015595956705510616,-0.008706901222467422,0.017803341150283813,0.02485831081867218,-0.03277892246842384,-0.023430002853274345,-0.009868302382528782,0.017327237874269485,-0.018279442563652992,-0.005056783556938171,-0.014961154200136662,0.008591482415795326,0.002943177707493305,-0.029042240232229233,-0.01888539083302021,-0.03249037638306618,0.007466149516403675,-0.001485114567913115,-0.02318473905324936,0.0069431583397090435,-0.03543355315923691],[-0.026306331157684326,0.0004325034096837044,-0.003749266965314746,0.014866909943521023,-0.004096354357898235,0.016298646107316017,0.0006083067855797708,0.011822664178907871,-0.024035802111029625,-0.00631265202537179,0.033754248172044754,0.019711671397089958,-0.019060881808400154,0.005712479818612337,0.007274372968822718,-0.004638678394258022,0.0037420359440147877,-0.011866049841046333,0.030283374711871147,-0.0029918209183961153,0.004569984041154385,0.02254621870815754,-0.033869944512844086,0.0027568137738853693,-0.014433050528168678,0.00799747183918953,0.026783576235175133,-0.009826911613345146,-0.0018836722010746598,0.0006733856862410903,0.05038551986217499,0.01412211824208498,-0.040001820772886276,0.016573423519730568,-0.02026122622191906,-0.023486247286200523,-0.002013830002397299,-0.004154202062636614,0.040175363421440125,-0.011309264227747917,0.011851588264107704,-0.003111132187768817,-0.008460255339741707,0.002673657611012459,-0.0010982061503455043,0.023992415517568588,-0.002328377915546298,-0.059409789741039276,-0.010824787430465221,-0.01547431293874979,0.004949610680341721,-0.011714199557900429,-0.019031958654522896,0.00812762975692749,-0.0019379046279937029,-0.012285447679460049,0.031874191015958786,0.016587885096669197,-0.02569892816245556,0.009949838742613792,0.017094053328037262,-0.019494742155075073,-0.0006037874263711274,0.007614229340106249,-0.017513450235128403,-0.0028887793887406588,-0.030775081366300583,0.02154834195971489,-0.031469255685806274,-0.003051476553082466,0.007722694426774979,0.013305016793310642,-0.0097039844840765,-0.02052154205739498,0.017744842916727066,-0.045034587383270264,-0.00749130267649889,0.013746106997132301,-0.03751436248421669,-0.015315230935811996,0.023066848516464233,-0.004443441517651081,-0.020940938964486122,0.04659648239612579,0.021490493789315224,0.011714199557900429,0.027578985318541527,0.015922633931040764,-0.003178018843755126,-0.013370095752179623,0.04888147488236427,0.0010367428185418248,-0.010795864276587963,0.01908980682492256,0.01561893243342638,0.009024271741509438,-0.01871379464864731,0.0033678323961794376,-0.006782665848731995,0.04133232310414314,-0.012719306163489819,-0.0031671724282205105,-0.011027255095541477,-0.011605734936892986,0.0034654506016522646,0.018901800736784935,-0.015228458680212498,-0.025713389739394188,0.016052791848778725,0.0146933663636446,-0.007361144758760929,0.03109324537217617,-0.02584354765713215,-0.01754237525165081,-0.020796319469809532,0.0031762111466377974,0.01454151514917612,0.029314422979950905,-0.005636554677039385,-0.03583677113056183,0.017600223422050476,-0.013919650577008724,0.03439057618379593,0.013478560373187065,0.022748686373233795,0.0013404441997408867,-0.021476032212376595,0.013160396367311478,0.006240341812372208,-0.020174454897642136,0.02711620181798935,0.011894973926246166,0.005766712129116058,0.032163430005311966,0.013529176823794842,0.03979935497045517,-0.021794196218252182,-0.006178878713399172,-0.02082524262368679,-0.018381169065833092,-0.01998644880950451,0.049546726047992706,-0.0404646061360836,0.021186793223023415,-0.03742758929729462,-0.004645909182727337,0.02908303029835224,0.031006474047899246,0.04269174858927727,-0.006713971495628357,0.012480683624744415,0.02827315963804722,-0.02309577353298664,0.013702720403671265,-0.002971935784444213,0.03505582734942436,-0.027492213994264603,0.01175758522003889,0.029907362535595894,0.019017497077584267,0.012299909256398678,0.0408116914331913,0.0012066710041835904,-0.009783525951206684,0.01754237525165081,0.019914139062166214,0.0033389083109796047,0.004371131770312786,-0.0063415756449103355,-0.02769468165934086,0.014729521237313747,0.02166403830051422,-0.04873685538768768,0.03820853680372238,0.011150182224810123,0.0339277908205986,0.0005134000675752759,0.00983414240181446,0.005343699362128973,0.006019796710461378,0.007729925215244293,0.011468345299363136,-0.009942607022821903,0.030341222882270813,-0.028866101056337357,0.00749130267649889,-0.01055001001805067,-0.012256523594260216,0.01710851490497589,0.01255299337208271,-0.004591676872223616,0.02723189815878868,0.035865698009729385,-0.004255435895174742,-0.5284984111785889,-0.026017092168331146,-0.011952822096645832,-0.027289746329188347,0.047146037220954895,-0.04321238026022911,0.017585761845111847,0.05310437083244324,0.003035206813365221,0.032741911709308624,-0.006493426393717527,0.011099565774202347,0.006786281708627939,-0.01813531666994095,0.00759976776316762,-0.005350930616259575,0.003121978836134076,-0.025004753842949867,0.021042173728346825,-0.00976906344294548,-0.014743982814252377,0.00021896333782933652,0.0011036294745281339,-0.028316546231508255,0.01813531666994095,-0.01583586260676384,0.015242921188473701,-0.03441949933767319,0.01548877451568842,-0.05322006717324257,-0.02710174024105072,0.007758849300444126,-0.011229722760617733,-0.014020884409546852,0.05793466791510582,-0.008691647090017796,-0.006330729462206364,0.0005188233335502446,0.020709548145532608,0.03065938502550125,0.0202323030680418,-0.03022552654147148,-0.005296698305755854,0.010817556641995907,0.03670449182391167,0.005585937760770321,0.021461570635437965,-0.0017453795298933983,0.0033497547265142202,-0.010029379278421402,-0.018872875720262527,0.013203782960772514,0.019422432407736778,0.007570843677967787,-0.008771187625825405,-0.001839382341131568,0.028923949226737022,-0.000010542836207605433,-0.019914139062166214,-0.004555521998554468,-0.020362459123134613,0.012777154333889484,-0.026132788509130478,-0.02355855703353882,0.0010584357660263777,0.030717233195900917,-0.013203782960772514,0.007881776429712772,0.040580298751592636,-0.0005829983274452388,0.011345419101417065,0.02295115403831005,0.009660598821938038,-0.03485335782170296,0.0028779329732060432,0.05148462951183319,0.03783252462744713,0.0042012035846710205,0.006894746329635382,0.019480278715491295,-0.013247168622910976,-0.002185565885156393,0.004859223496168852,-0.01347132958471775,0.00927012600004673,-0.025481998920440674,-0.03514259681105614,-0.01425227615982294,0.029459042474627495,-0.013088086619973183,0.01433181669563055,0.02040584571659565,-0.023500708863139153,-0.013825647532939911,-0.007357529364526272,-0.010672937147319317,0.01213359646499157,0.002651964547112584,0.009552134200930595,-0.01177927851676941,-0.00856871996074915,0.0031255942303687334,0.003035206813365221,-0.00416866410523653,0.046307243406772614,0.006728433538228273,-0.017484527081251144,-0.043299149721860886,0.011612965725362301,-0.017325446009635925,0.047724515199661255,0.0018041313160210848,-0.01767253316938877,-0.016775891184806824,-0.022329289466142654,-0.0322791263461113,0.056719861924648285,0.008019165135920048,0.023761024698615074,-0.013579794205725193,0.002505537122488022,-0.011171875521540642,-0.0066055068746209145,-0.01898857206106186,0.02723189815878868,0.03381209447979927,-0.0020626389887183905,0.018308859318494797,0.006977902725338936,0.0024151497054845095,0.012929005548357964,-0.015083839185535908,0.03514259681105614,-0.002962897066026926,0.01982736773788929,0.015387540683150291,0.023674251511693,0.0097039844840765,0.008286711759865284,-0.021996663883328438,0.006901977118104696,0.018005158752202988,0.014997067861258984,-0.015937095507979393,-0.012661458924412727,-0.02837439440190792,-0.023037925362586975,-0.02808515354990959,0.0012518647126853466,0.004186741542071104,0.00024562759790569544,0.010889866389334202,0.004085507709532976,0.02224251627922058,-0.03979935497045517,-0.03097754903137684,0.004197588190436363,-0.010752477683126926,-0.00920504704117775,0.04060922563076019,0.02909749187529087,0.0467989481985569,-0.008105936460196972,-0.005933024920523167,-0.03450627252459526,-0.01441135723143816,-0.012646996416151524,0.004468750208616257,0.02081078104674816,-0.01169250626116991,-0.02011660672724247,0.005929409526288509,-0.01712297834455967,-0.028923949226737022,-0.0002831383317243308,0.012668689712882042,-0.00926289428025484,-0.004909840412437916,0.0025923089124262333,0.017498988658189774,0.02095540054142475,0.006988749373704195,-0.02681250125169754,0.0011415921617299318,0.017658071592450142,0.02010214515030384,0.013218244537711143,0.015864785760641098,-0.029849514365196228,0.0146933663636446,-0.015445388853549957,0.03037014603614807,-0.011735891923308372,0.014461974613368511,0.015402003191411495,0.017021743580698967,0.0030659385956823826,-0.010651243850588799,-0.001281692530028522,0.02423826977610588,0.024469660595059395,-0.006464502774178982,0.020347997546195984,-0.029878439381718636,0.015098301693797112,-0.01784607581794262,-0.010253540240228176,-0.021186793223023415,-0.001414561877027154,0.03198988735675812,0.011931128799915314,-0.011323725804686546,-0.015141687355935574,0.02869255654513836,0.0012609034311026335,0.019031958654522896,-0.03355178236961365,0.012683151289820671,0.0045302133075892925,-0.03690695762634277,-0.016342030838131905,-0.031729571521282196,0.010983869433403015,0.013825647532939911,-0.0243973508477211,0.020290149375796318,0.022083435207605362,0.003998735919594765,-0.009450900368392467,-0.025293992832303047,-0.0031093244906514883,0.02812854014337063,0.024281654506921768,-0.0014163695741444826,-0.017600223422050476,0.021172329783439636,-0.0005002939142286777,-0.0034184493124485016,0.032452668994665146,-0.03470873832702637,0.0007759752916172147,0.0031490949913859367,-0.015459850430488586,0.0038360387552529573,0.014179965481162071,-0.02782483957707882,-0.003850500797852874,0.007220140658318996,0.0007276181131601334,-0.011070641689002514,0.005220772698521614,0.02580016292631626,0.014953681267797947,-0.0020282918121665716,0.027738066390156746,0.005347315222024918,0.015170611441135406,-0.00360283930785954,0.0029231265652924776,0.015040453523397446,-0.010759709402918816,-0.00968952290713787,0.01611064001917839,-0.008727801963686943,0.02412257343530655,-0.004291590768843889,-0.006547658704221249,-0.03112216852605343,-0.0221268218010664,0.0071405996568500996,0.010622319765388966,-0.024325041100382805,-0.0022289517801254988,-0.011584041640162468,0.008019165135920048,-0.004703757353127003,0.012733768671751022,0.02081078104674816,-0.0015908172354102135,-0.00905319582670927,-0.02081078104674816,-0.011171875521540642,0.02069508470594883,0.05275728181004524,-0.021447107195854187,-0.027868224307894707,-0.01426673773676157,0.012393912300467491,-0.018627023324370384,0.005036382470279932,-0.007925162091851234,-0.019292274489998817,-0.027492213994264603,0.00588602339848876,0.005195464473217726,0.01684820093214512,0.03413026034832001,-0.026219559833407402,-0.001617933390662074,-0.023312702775001526,-0.014447512105107307,0.019407968968153,-0.017021743580698967,-0.018627023324370384,-0.01519953552633524,0.02026122622191906,-0.023992415517568588,-0.012256523594260216,0.008829035796225071,-0.0024820363614708185,0.019306736066937447,-0.010477700270712376,0.002988205524161458,-0.04098523408174515,0.010586164891719818,-0.010101689025759697,-0.0073466831818223,0.017513450235128403,-0.003568492131307721,-0.007082751952111721,-0.022083435207605362,-0.021042173728346825,0.009754601866006851,0.0004831203259527683,0.0393654927611351,0.04596015438437462,0.001573643647134304,0.0067175873555243015,-0.012256523594260216,0.010969407856464386,-0.025453075766563416,0.010672937147319317,-0.0001794188719941303,0.008301173336803913,-0.012379449792206287,0.008033626712858677,-0.0062981899827718735,0.009132737293839455,0.005094230640679598,-0.007469609845429659,-0.031064320355653763,-0.03751436248421669,0.014765676110982895,-0.01156234834343195,0.027607908472418785,-0.005238850135356188,-0.02339947409927845,0.0019487510435283184,0.035750001668930054,0.024339502677321434,-0.00288697169162333,-0.011309264227747917,0.0016839161980897188,-0.030427994206547737,-0.021606190130114555,0.012090210802853107,0.013963036239147186,-0.0029918209183961153,-0.03291545435786247,0.042749594897031784,0.024165960028767586,0.022864380851387978,0.007780542131513357,-0.018193162977695465,0.021504955366253853,0.011396035552024841,0.016877124086022377,-0.0028237004298716784,-0.016877124086022377,-0.028056230396032333,-0.03413026034832001,-0.017209749668836594,-0.006551274564117193,-0.0023066848516464233,0.015228458680212498,-0.019610436633229256,-0.01006553415209055,-0.008366252295672894,0.04182403162121773,-0.0060631828382611275,0.01418719720095396,0.01613956317305565,-0.005491934716701508,-0.025062602013349533,-0.01757129840552807,-0.0269426591694355,-0.03291545435786247,-0.007158677559345961,-0.009595519863069057,-0.028591323643922806,-0.03554753214120865,-0.0006083067855797708,-0.023717638105154037,0.0026971581391990185,-0.001954174367710948,0.04179510474205017,-0.005604015197604895,0.0029249342624098063,0.021866505965590477,0.02011660672724247,0.005871561821550131,0.0013521945802494884,-0.011294801719486713,0.031874191015958786,-0.010795864276587963,-0.016631269827485085,-0.006088491063565016,-0.016862662509083748,-0.013167628087103367,-0.005275005009025335,-0.006005334667861462,0.015213997103273869,-0.011367111466825008,0.015893710777163506,-0.017932849004864693,0.008554257452487946,0.01613956317305565,-0.0016188372392207384,-0.011764816008508205,-0.013717182911932468,-0.00013027075328864157,0.016906047239899635,0.025351841002702713,-0.008019165135920048,0.021490493789315224,-0.01140326727181673,-0.033869944512844086,-0.007505764719098806,-0.015228458680212498,0.012545762583613396,0.015213997103273869,0.004063814878463745,-0.013529176823794842,-0.0261183250695467,-0.00927012600004673,-0.002496498404070735,0.016746966168284416,-0.00720567861571908,0.018786104395985603,0.02154834195971489,-0.008120398968458176,0.007939623668789864,-0.021736348047852516,-0.03962580859661102,0.00955936498939991,-0.0036878034006804228,0.041014160960912704,-0.004790529143065214,-0.03065938502550125,0.028562398627400398,-0.015806937590241432,-0.028591323643922806,-0.03279975801706314,0.03832423314452171,-0.0061752633191645145,0.014483666978776455,0.01397749874740839,-0.03508475050330162,-0.021186793223023415,-0.014823523350059986,0.006428347434848547,0.003510644193738699,-0.02284991927444935,0.0184100940823555,0.0018439017003402114,0.01327609270811081,0.006793512497097254,-0.025727853178977966,0.021620651707053185,-0.034882280975580215,-0.05660416930913925,-0.010564472526311874,0.004259051289409399,0.00022890593390911818,-0.0201310683041811,0.013153165578842163,0.028605785220861435,-0.01092602126300335,-0.020217839628458023,-0.024498585611581802,0.0024151497054845095,-0.01412211824208498,0.014642748981714249,-0.003648033132776618,0.0022054510191082954,-0.004761605057865381,0.030919700860977173,0.03065938502550125,-0.0097039844840765,-0.007954086177051067,0.01255299337208271,-0.00015930768859107047,-0.0007601575343869627,-0.008525334298610687,0.01998644880950451,-0.0015185073716565967,-0.025163834914565086,-0.019046420231461525,0.005625708028674126,0.005148462951183319,0.009682292118668556,0.01547431293874979,-0.022329289466142654,-0.05455056577920914,0.010730785317718983,0.0014064270071685314,-0.01369548961520195,0.009819680824875832,-0.008547026664018631,0.004519367124885321,-0.0218520425260067,-0.012336064130067825,0.014729521237313747,0.010513855144381523,0.025424150750041008,-0.025756776332855225,0.022488370537757874,0.019885214045643806,0.004410902038216591,0.003854116192087531,-0.0013657526578754187,-0.021172329783439636,0.009212277829647064,0.013493021950125694,0.0010864558862522244,0.0419108010828495,0.0034744893200695515,0.0009689523139968514,-0.03068831004202366,-0.000900709826964885,-0.04248927906155586,0.005867945961654186,0.019711671397089958,-0.009732908569276333,-0.013652103953063488,-0.026176173239946365,-0.023153621703386307,0.0013079048367217183,0.00631265202537179,-0.0324815958738327,-0.005199079867452383,0.014295661821961403,0.012205906212329865,-0.045179206877946854,0.021750809624791145,-0.023674251511693,0.05154247581958771,-0.009125505574047565,0.004291590768843889,-0.007650384679436684,0.0042228964157402515,0.011656351387500763,-0.0014163695741444826,-0.0012202290818095207,0.029444579035043716,0.0073105283081531525,-0.011410498060286045,0.013456867076456547,0.010304156690835953,-0.0004173635388724506,-0.008619336411356926,-0.04266282543540001,-0.033436086028814316,0.002896010410040617,0.036328479647636414,0.021302487701177597,-0.01413657981902361,0.00317259575240314,0.0005766712129116058,0.024628741666674614,-0.018930723890662193,-0.016023866832256317,0.02096986211836338,-0.0025814624968916178,0.00942920707166195,0.03210558369755745,0.03809284046292305,0.026450950652360916,-0.0028399701695889235,0.00041307014180347323,-0.005802867468446493,-0.011302033439278603,0.014107655733823776,-0.009277356788516045,-0.005101461429148912,0.03363855183124542,-0.015864785760641098,0.0069345165975391865,-0.0009318934753537178,0.01757129840552807,0.014866909943521023,0.0021204869262874126,-0.015387540683150291,0.03765898197889328,0.0018583637429401278,0.012567455880343914,0.009103813208639622,-0.007447917014360428,0.00785285234451294,-0.008409637957811356,-0.0060848756693303585,-0.02526506967842579,-0.016182949766516685,-0.025886934250593185,0.024715514853596687,-0.01005107257515192,-0.024194883182644844,-0.017195288091897964,0.011750354431569576,0.004367516376078129,-0.00008406022971030325,-0.027868224307894707,0.025308454409241676,-0.02438288927078247,-0.0159660205245018,-0.03109324537217617,-0.0008609394426457584,0.02283545769751072,-0.0015519505832344294,-0.029907362535595894,0.010817556641995907,0.02497583068907261,-0.03583677113056183,-0.006431963294744492,-0.012458991259336472,-0.035865698009729385,-0.018178701400756836,0.007021288387477398,-0.025481998920440674,-0.00977629516273737,0.012205906212329865,-0.00848194770514965,0.013601486571133137,-0.02095540054142475,-0.006008950527757406,0.0035702998284250498,-0.0038685782346874475,0.022228054702281952,-0.020304612815380096,-0.004913455806672573,0.00413612462580204,-0.02241606079041958,0.03297330066561699,0.03320469334721565,0.0009987801313400269,-0.02637864090502262,0.029907362535595894,0.006388577166944742,0.024874595925211906,0.0019740595016628504,0.01105617918074131,-0.014823523350059986,-0.006659739185124636,-0.03178742155432701,0.0062981899827718735,-0.0021656807512044907,-0.017860539257526398,-0.022213593125343323,0.008510871790349483,-0.03265513852238655,-0.002268722280859947,-0.0012319794623181224,0.018178701400756836,0.01781715266406536,0.027564523741602898,0.02668234333395958,-0.0035757231526076794,-0.02096986211836338,-0.015011529438197613,0.0027983919717371464,0.01441135723143816,0.013254399411380291,-0.024353964254260063,-0.011294801719486713,0.02768021821975708,0.04520813375711441,0.022661913186311722,-0.006189724896103144,-0.01441135723143816,-0.0038432697765529156,-0.019422432407736778,-0.0006168935797177255,-0.03126678988337517,0.009935376234352589,-0.015373079106211662,-0.015604470856487751,-0.0074262237176299095,0.01796177215874195,0.01076694019138813,0.0007172235636971891,-0.010709092020988464,-0.01184435747563839,0.0026121940463781357,0.01923442631959915,0.03904733061790466,0.004060199484229088,-0.04303883761167526,0.006008950527757406,0.020434770733118057,-0.024860134348273277,-0.01384734082967043,0.010253540240228176,-0.012220368720591068,-0.02850455231964588,-0.03407241031527519,-0.0073322211392223835,-0.002829123754054308,-0.012285447679460049,0.011866049841046333,-0.03861347213387489,-0.024050263687968254,0.012740999460220337,0.004537444561719894,-0.026450950652360916,0.004653140436857939,0.021591728553175926,0.01609617844223976,0.03789037466049194,-0.010152306407690048,-0.0008672665571793914,0.00928458757698536,0.002521806862205267,0.03323361650109291,-0.010933252982795238,0.008915807120501995,0.047001417726278305,-0.01939350739121437,0.010181229561567307,0.000761061382945627,0.021071096882224083,-0.0433569997549057,-0.014114887453615665,0.005043613724410534,-0.013297785073518753,0.0134207122027874,0.002391648944467306,-0.0218520425260067,0.021765271201729774,0.010246308520436287,0.020058758556842804,-0.01728205941617489,-0.0028146617114543915,-0.00019083026563748717,0.02569892816245556,-0.05090615153312683,-0.0010909752454608679,0.008973655290901661,0.02053600363433361,-0.0022162976674735546,-0.008951961994171143,-0.0038396541494876146,-0.0019397123251110315,0.023587480187416077,-0.008677184581756592,0.0005509108304977417,-0.033580705523490906,-0.0027586217038333416,-0.015937095507979393,0.007896238006651402,-0.023009002208709717,0.19633576273918152,-0.014548745937645435,-0.010253540240228176,0.00542324036359787,-0.011714199557900429,0.017889462411403656,0.006348806899040937,0.019610436633229256,0.005209926515817642,0.009024271741509438,0.009111043997108936,-0.0077516185119748116,-0.03381209447979927,0.004823068622499704,0.0070972139947116375,0.0006837802357040346,-0.027419904246926308,-0.03621278330683708,-0.011670812964439392,0.009327973239123821,0.009863066487014294,0.004504905082285404,-0.044282566756010056,-0.021779732778668404,0.04512136057019234,-0.015271845273673534,-0.0032503288239240646,0.00806255079805851,0.005980026442557573,0.023862257599830627,-0.005249696783721447,-0.026320792734622955,0.02056492678821087,-0.0015302576357498765,-0.00047272577648982406,0.003919194918125868,0.01852578856050968,-0.013688258826732635,0.0018710179720073938,0.02037692256271839,0.02284991927444935,-0.01839563064277172,0.03803499415516853,-0.011634658090770245,0.0007777830469422042,-0.006421116646379232,0.0021494110114872456,0.05920732393860817,-0.03569215163588524,0.011251416057348251,-0.03734081983566284,0.02081078104674816,-0.00869887787848711,0.0029032414313405752,-0.019451355561614037,-0.003497990081086755,-0.008800111711025238,0.001700185821391642,0.0017300136387348175,0.006706740707159042,-0.005936640314757824,0.001126226270571351,-0.01391241978853941,0.004298822022974491,-0.017310982570052147,0.052294500172138214,-0.027289746329188347,-0.003568492131307721,0.031758494675159454,-0.0273909792304039,-0.0034076026640832424,-0.014035345986485481,-0.027911610901355743,-0.002715235808864236,-0.00898811686784029,-0.02781037613749504,0.010145074687898159,0.02584354765713215,0.007440685760229826,0.017513450235128403,-0.002977358875796199,0.0037818062119185925,-0.011106796562671661,-0.005032767076045275,0.010940483771264553,-0.017094053328037262,0.02555430866777897,-0.011750354431569576,0.0016061830101534724,-0.016602346673607826,0.010087227448821068,0.0034618352074176073,0.0032412901055067778,0.007787773385643959,0.0035829541739076376,-0.01955259032547474,-0.011439422145485878,-0.036762338131666183,-0.04405117407441139,-0.0020951784681528807,-0.036154936999082565,0.045323826372623444,0.021924354135990143,-0.027636833488941193,-0.02652326039969921,-0.01525738276541233,-0.006124646402895451,0.01127310935407877,0.011461114510893822,-0.040146440267562866,-0.030630461871623993,-0.003973427694290876,0.0028688942547887564,0.011670812964439392,0.03551860898733139,0.014743982814252377,-0.023876719176769257,0.018091930076479912,-0.007021288387477398,0.0011343611404299736,-0.0011913051130250096,-0.009450900368392467,-0.01276992354542017,0.01997198723256588,-0.033031150698661804,0.0012789808679372072,-0.007903468795120716,-0.023573018610477448,0.00481945276260376,-0.03008090704679489,0.04619154706597328,0.00595110235735774,-0.006876668892800808,-0.02598816715180874,0.00890857633203268,-0.007534688804298639,0.04205542057752609,-0.030167678371071815,-0.0045591373927891254,0.0057992516085505486,0.014519822783768177,-0.019205501303076744,0.023341625928878784,-0.004616985563188791,0.014953681267797947,-0.013941342942416668,0.0025868855882436037,-0.004056583624333143,0.013008546084165573,0.004483212251216173,-0.01742667891085148,-0.008033626712858677,-0.014454743824899197,0.021461570635437965,-0.013659334741532803,-0.01952366530895233,-0.01755683682858944,-0.06473179906606674,-0.00954490341246128,0.004768835846334696,-0.04379085823893547,0.006428347434848547,-0.0016351069789379835,-0.00774438725784421,-0.024021338671445847,-0.026320792734622955,-0.1817580908536911,0.0019830982200801373,0.0036010316107422113,-0.000726262282114476,0.03812176361680031,-0.01812085323035717,0.052149880677461624,-0.0036588795483112335,-0.017918385565280914,0.013934112153947353,0.020781857892870903,-0.008185477927327156,0.014584900811314583,-0.015358616597950459,-0.001725494279526174,-0.013876264914870262,0.004913455806672573,0.01447643619030714,0.032597292214632034,0.014382433146238327,0.034477345645427704,-0.01926334947347641,0.04139016941189766,-0.008662723004817963,-0.002702581463381648,0.0184100940823555,0.0006516927387565374,-0.02069508470594883,-0.0164143405854702,-0.05805036425590515,-0.017079591751098633,-0.008019165135920048,0.021721886470913887,-0.006804359145462513,0.008084244094789028,0.01955259032547474,-0.01070186123251915,-0.021316951140761375,0.027072815224528313,0.0251204501837492,0.010268001817166805,0.02637864090502262,-0.01112125813961029,0.006160801276564598,0.016197411343455315,-0.00499299680814147,0.0012509607477113605,0.004154202062636614,-0.01175758522003889,-0.0057992516085505486,0.03413026034832001,-0.0079830102622509,-0.016038330271840096,0.019046420231461525,0.0038360387552529573,-0.016067253425717354,0.023023463785648346,0.00791793130338192,0.0057775587774813175,-0.009848604910075665,0.004779682494699955,0.006356037687510252,0.0038071146700531244,-0.024353964254260063,-0.005748634692281485,-0.009248432703316212,-0.01561893243342638,-0.005683555733412504,-0.025438612326979637,-0.019595975056290627,-0.021476032212376595,0.015561084263026714,0.02525060810148716,-0.01968274638056755,0.045179206877946854,0.025641079992055893,-0.00749130267649889,0.011287570931017399,0.009696753695607185,0.017339907586574554,-0.02124463953077793,0.022213593125343323,-0.0146933663636446,0.02996521070599556,0.006366884335875511,-0.002086139749735594,-0.013109779916703701,0.006963440682739019,0.006728433538228273,-0.0069128237664699554,-0.02895287238061428,-0.019595975056290627,0.0016956664621829987,-0.014606594108045101,-0.014910295605659485,0.022517293691635132,0.004349438939243555,-0.020174454897642136,0.013297785073518753,-0.004475980997085571,-0.011873280629515648,-0.0017896693898364902,0.007766080088913441,-0.0299362875521183,0.01784607581794262,0.003685995703563094,0.011887743137776852,0.0022849920205771923,0.011280340142548084,-0.014375202357769012,-0.039857201278209686,0.011605734936892986,0.03896055743098259,0.028461165726184845,-0.001595336594618857,0.001652280567213893,0.01871379464864731,0.0020319074392318726,0.03054369054734707,0.0061571854166686535,0.056719861924648285,0.013218244537711143,0.028851639479398727,0.030572613701224327,-0.00848917942494154,-0.01742667891085148,-0.0910525918006897,-0.027217436581850052,-0.007737156469374895,0.026176173239946365,-0.042460355907678604,-0.020926477387547493,-0.03349393233656883,-0.005181002430617809,-0.008113167248666286,0.0419108010828495,-0.013963036239147186,-0.013789492659270763,-0.03696480765938759,0.02737651765346527,-0.0016088946722447872,-0.03765898197889328,-0.03300222381949425,-0.02682696282863617,-0.014866909943521023,0.03893163427710533,-0.003002667333930731,-0.03453519567847252,-0.0067103561013937,-0.018193162977695465,-0.033031150698661804,-0.023009002208709717,0.006222264375537634,0.03196096420288086,0.011786509305238724,0.00799747183918953,-0.02026122622191906,-0.0037818062119185925,0.018005158752202988,-0.01639987900853157,0.0035070287995040417,-0.0005002939142286777,0.015242921188473701,-0.012929005548357964,0.029849514365196228,-0.014895834028720856,0.014469205401837826,0.002626656088978052,0.03170064836740494,-0.018063006922602654,-0.01984182931482792,-0.022213593125343323,-0.029878439381718636,0.06033535674214363,0.010217385366559029,0.010007685981690884,-0.031324636191129684,-0.006764588411897421,-0.005224388092756271,-0.026306331157684326,0.009667829610407352,-0.018193162977695465,-0.004895378369837999,0.02370317652821541,-0.00620418693870306,-0.009696753695607185,-0.009096581488847733,0.005795636214315891,0.009125505574047565,0.029647046700119972,-0.014317355118691921,-0.02597370557487011,-0.014353509992361069,0.026855885982513428,0.004475980997085571,-0.029213188216090202,-0.036473099142313004,0.02681250125169754,0.0026917350478470325,0.01966828480362892,0.005792020820081234,0.003168980125337839,0.029704894870519638,0.002664618892595172,0.03320469334721565,0.007303297054022551,-0.02624848298728466,-0.016746966168284416,-0.0007723598391748965,-0.044282566756010056,-0.011938359588384628,0.039163026958703995,0.016515575349330902,-0.0036209167446941137,0.017166363075375557,-0.03719619661569595,0.0189596489071846,0.034303802996873856,-0.01856917515397072,0.02781037613749504,-0.011179106310009956,0.0059004854410886765,0.01519953552633524,0.005820944905281067,0.0012247484410181642,-0.031874191015958786,-0.01582139916718006,-0.005839022342115641,-0.08058211952447891,0.026638956740498543,0.012986852787435055,-0.008619336411356926,-0.025077063590288162,0.004577214829623699,-0.01348579116165638,-0.03010983020067215,-0.008518102578818798,0.004971303511410952,-0.031151093542575836,0.01655896008014679,-0.01184435747563839,-0.028735943138599396,0.014671673066914082,-0.011215261183679104,0.033754248172044754,-0.02225697785615921,0.027318669483065605,0.04627831652760506,0.005419624969363213,0.017600223422050476,0.023211469873785973,0.004031275399029255,-0.0027640447951853275,-0.04055137559771538,-0.018091930076479912,-0.0022470292169600725,0.016342030838131905,0.019436893984675407,0.04011751711368561,0.003995120525360107,-0.0039878892712295055,0.008821804076433182,0.023876719176769257,0.009233971126377583,-0.005759481340646744,0.013861802406609058,0.0021114482078701258,-0.008532565087080002,-0.0036552641540765762,-0.017802691087126732,0.015604470856487751,-0.008662723004817963,0.0005545263411477208,0.005911332089453936,-0.0359235443174839,0.01583586260676384,0.01384010910987854,-0.008641029708087444,0.01626972109079361,0.0013124241959303617,0.00992091465741396,-0.014483666978776455,-0.029299959540367126,-0.008886883035302162,-0.007498533930629492,-0.005141231697052717,0.01226375438272953,-0.01654449850320816,0.028996258974075317,0.03835315629839897,-0.006634430959820747,-0.02996521070599556,-0.010759709402918816,-0.013117010705173016,-0.04853438585996628,-0.013001315295696259,0.009190584532916546,-0.03765898197889328,-0.020319074392318726,0.005596783943474293,0.001176843186840415,0.012068517506122589,-0.00968952290713787,0.003114747814834118,-0.0014696981525048614,0.015937095507979393,-0.018034081906080246,0.027795914560556412,0.006251188460737467,-0.02125910297036171,0.0021873735822737217,0.03728296980261803,-0.01391241978853941,-0.00260134763084352,-0.00869887787848711,-0.013297785073518753,-0.008163784630596638,-0.02840331755578518,-0.054984427988529205,0.008735032752156258,-0.012842233292758465,0.013218244537711143,0.011041717603802681,0.004591676872223616,0.003035206813365221,0.032452668994665146,0.03491120785474777,0.0072816042229533195,0.017180826514959335,0.009863066487014294,0.011396035552024841,0.025424150750041008,-0.006760973017662764,0.03277083486318588,-0.05582322180271149,-0.0010828403756022453,-0.016356492415070534,0.008525334298610687,-0.007162292953580618,-0.021288026124238968,-0.017947310581803322,0.028634710237383842,-0.01434627827256918,0.01781715266406536,0.0068405140191316605,0.008163784630596638,-0.02768021821975708,0.02953135222196579,-0.008604874834418297,-0.020738471299409866,0.020897552371025085,-0.01005107257515192,0.008771187625825405,-0.005629323422908783,-0.027651295065879822,-0.04353054240345955,0.023891182616353035,-0.025192759931087494,0.03780360147356987,0.0033606013748794794,-0.0027513906825333834,-0.01519953552633524,-0.010889866389334202,0.013247168622910976,-0.009291818365454674,0.017209749668836594,-0.018308859318494797,0.10042394697666168,0.023066848516464233,0.004725450184196234,-0.0026158096734434366,-0.0030568998772650957,0.02465766668319702,-0.005629323422908783,-0.012292678467929363,0.0036679182667285204,-0.039452265948057175,-0.014866909943521023,0.015156148932874203,0.00011208029900444672,-0.021779732778668404,-0.011070641689002514,0.0015239305794239044,-0.012813309207558632,0.03265513852238655,-0.004002351313829422,-0.006178878713399172,0.04182403162121773,-0.009255663491785526,0.026205098256468773,-0.00706105912104249,-0.023573018610477448,-0.015893710777163506,0.031584952026605606,0.007932392880320549,-0.022502832114696503,-0.019899677485227585,0.012719306163489819,0.011114027351140976,-0.037022653967142105,-0.02669680491089821,-0.020449232310056686,0.0008012837497517467,-0.00407104566693306,-0.008756725117564201,-0.0024748053401708603,0.03479551151394844,-0.01099110022187233,-0.03696480765938759,-0.020579390227794647,-0.025033676996827126,0.002324762288480997,-0.01826547458767891,-0.03265513852238655,0.016197411343455315,-0.0379192978143692],[-0.013571144081652164,-0.01559985801577568,-0.01466972567141056,-0.010165541432797909,-0.02400766871869564,0.01899813674390316,-0.0006280224770307541,-0.024242032319307327,-0.0157170407474041,-0.028607062995433807,0.04139455407857895,0.02547244355082512,-0.024725409224629402,-0.010539059527218342,0.0015865348977968097,-0.028797484934329987,0.012655659578740597,-0.003969541285187006,0.032371535897254944,0.000131715351017192,0.009008368477225304,-0.005038827192038298,-0.03158055618405342,0.006862472742795944,-0.008678793907165527,0.03093605674803257,0.02780143730342388,-0.021151356399059296,0.00553685100749135,-0.004401650279760361,0.03855288773775101,-0.002806875854730606,-0.032957445830106735,-0.002169698476791382,-0.0365900881588459,-0.0016149148577824235,0.006166704464703798,-0.010048359632492065,0.012135664001107216,-0.018705181777477264,0.0023198381531983614,0.00876668095588684,0.0025487092789262533,-0.011029758490622044,0.005657695233821869,0.018983488902449608,-0.005430654622614384,-0.047019291669130325,0.006657404359430075,-0.0014739303151145577,0.012238198891282082,0.004083061590790749,-0.0340413823723793,0.030643101781606674,0.011066378094255924,0.004976574331521988,0.018119271844625473,0.01694745197892189,0.002407724503427744,0.019100671634078026,0.0071883853524923325,-0.010341314598917961,0.006975993048399687,-0.0012249184073880315,-0.007909786887466908,-0.00396221736446023,-0.012113692238926888,0.02413949929177761,-0.020360378548502922,-0.0067233191803097725,-0.005287839099764824,0.015072539448738098,-0.001829138258472085,-0.009286676533520222,0.032312944531440735,-0.04467565193772316,-0.018763773143291473,-0.0027482849545776844,-0.003546587424352765,-0.015189721249043941,0.00917681772261858,-0.014493952505290508,-0.01382747944444418,0.031111828982830048,-0.013497905805706978,0.003469686722382903,0.01975982077419758,0.017870260402560234,-0.009894558228552341,-0.009726108983159065,0.018910249695181847,-0.005522203166037798,0.007107822690159082,0.00985793862491846,0.00531347282230854,0.002220965689048171,-0.018954193219542503,0.019789116457104683,-0.010839338414371014,0.0279186200350523,-0.011915948241949081,0.012743545696139336,-0.00717373751103878,-0.017621248960494995,-0.000011336274837958626,-0.012018482200801373,-0.001405268907546997,-0.009389210492372513,0.0034165887627750635,0.00009366551967104897,-0.00975540466606617,0.017357587814331055,-0.0072689480148255825,-0.017884908244013786,-0.017049985006451607,0.018382931128144264,0.019789116457104683,0.001748575596138835,0.012999881990253925,-0.044587764889001846,0.02104882337152958,-0.007430073339492083,0.024417806416749954,0.012977910228073597,-0.0021953321993350983,-0.013073120266199112,-0.0007644296856597066,0.011491162702441216,0.007785281166434288,-0.013805508613586426,0.014164377935230732,0.025150194764137268,-0.008092883974313736,0.02529667131602764,-0.0011104828445240855,0.033719129860401154,-0.018646590411663055,-0.014069167897105217,-0.014926061034202576,0.0003613875596784055,-0.026746798306703568,0.05027109384536743,-0.04382608085870743,0.015643801540136337,-0.03518390655517578,-0.008268657140433788,0.03099464811384678,0.026087651029229164,0.04139455407857895,-0.010165541432797909,-0.001981108682230115,0.0018016737885773182,0.0018987151561304927,0.0320785827934742,-0.00747767835855484,0.008202741853892803,-0.023978373035788536,0.010678213089704514,0.031668443232774734,0.003074197331443429,0.02393442951142788,0.035916294902563095,-0.0012313268380239606,0.001904207980260253,-0.007763309869915247,0.02328992821276188,0.024989068508148193,-0.017342939972877502,-0.0038450355641543865,-0.017181815579533577,0.005496569909155369,0.02099023200571537,-0.05270262062549591,0.04080864414572716,-0.0005813327152282,0.02977888472378254,0.020492207258939743,0.007968378253281116,-0.014779583550989628,0.019935593008995056,-0.006199662107974291,-0.0015023102751001716,0.00733486283570528,0.043035101145505905,-0.012121016159653664,-0.01746012270450592,0.02368541806936264,-0.01357846800237894,0.026146240532398224,0.003574051894247532,0.022118108347058296,-0.0022044871002435684,0.006291210185736418,0.03445151820778847,-0.5516930222511292,-0.036619383841753006,0.006137408781796694,-0.010421876795589924,0.021268539130687714,-0.03644361346960068,0.008012321777641773,0.05399162322282791,0.0009292169124819338,0.03799627348780632,-0.0026219480205327272,-0.0033360261004418135,-0.003973203245550394,-0.007148103788495064,-0.006038536783307791,-0.011527782306075096,0.014852822758257389,-0.006737967021763325,-0.005361077841371298,0.005221924278885126,-0.02977888472378254,-0.015321550890803337,-0.005668680649250746,-0.004013484809547663,0.011000463739037514,-0.0053244587033987045,-0.0002458076342009008,-0.030379442498087883,0.022938383743166924,-0.02548709139227867,-0.031141124665737152,-0.004980236291885376,-0.008517668582499027,0.0094624487683177,0.05167727544903755,-0.01789955608546734,-0.022381767630577087,0.0038853168953210115,0.029896065592765808,0.03869936615228653,-0.01637618988752365,-0.004826434887945652,0.010641593486070633,-0.009059635922312737,0.03304533287882805,-0.018265750259160995,-0.002136741066351533,0.010656241327524185,0.01412043534219265,-0.006891768425703049,-0.010817366652190685,-0.00921343732625246,0.027391299605369568,0.0006953105912543833,-0.017430827021598816,-0.0030119444709271193,0.04795674607157707,-0.00911090336740017,-0.004529817961156368,-0.013329456560313702,-0.024491045624017715,0.004804463125765324,-0.015482676215469837,-0.020960936322808266,-0.022235291078686714,0.02285049669444561,-0.005892059300094843,0.012780165299773216,0.02008207142353058,-0.007052893750369549,0.01286805234849453,0.028651006519794464,0.004350382834672928,-0.048103224486112595,-0.01148383878171444,0.05372796207666397,0.028079744428396225,0.019818412140011787,0.01373959332704544,0.029251564294099808,0.0051340376958251,-0.0018126595532521605,-0.011784118600189686,-0.02573610469698906,0.01995024085044861,-0.04277144372463226,-0.043943263590335846,0.01511648204177618,0.041306667029857635,-0.012084397487342358,0.023597531020641327,0.023890487849712372,-0.021078119054436684,-0.027332710102200508,-0.00598360737785697,-0.020843753591179848,0.011542430147528648,0.00808556005358696,0.03178562596440315,-0.02099023200571537,-0.02670285664498806,-0.012802137061953545,0.02298232540488243,0.009220761246979237,0.035213202238082886,0.006126423366367817,-0.002065333304926753,-0.00731655303388834,0.007305567152798176,-0.006441350094974041,0.008415134623646736,-0.014222969301044941,-0.02850452996790409,-0.014662401750683784,-0.021664028987288475,-0.028343403711915016,0.047780975699424744,-0.00040624631219543517,-0.0020012494642287493,-0.003072366351261735,0.004277144093066454,0.003652783576399088,0.01937897875905037,0.003317716298624873,0.009242733009159565,0.018324339762330055,-0.0032206750474870205,0.027420595288276672,0.012890023179352283,-0.021341778337955475,0.00873006135225296,-0.0117182033136487,0.04312298819422722,-0.022176699712872505,0.016332246363162994,0.0036106714978814125,0.03228364884853363,-0.0198916494846344,0.011330037377774715,-0.01977446861565113,-0.007953730411827564,-0.002480963245034218,0.017665190622210503,-0.02651243470609188,-0.025120899081230164,-0.018705181777477264,-0.0340120866894722,-0.026688208803534508,-0.0010363286128267646,-0.006031212862581015,-0.006705009378492832,0.014677049592137337,0.004291791934520006,0.009601603262126446,-0.03055521473288536,-0.029163679108023643,-0.0038340496830642223,-0.033601947128772736,0.002014066092669964,0.0020415307953953743,0.00669036153703928,0.012926642782986164,-0.0346565879881382,-0.0035575733054429293,-0.010663565248250961,-0.01527760736644268,-0.02516484074294567,-0.004636014346033335,-0.007939082570374012,-0.013168331235647202,-0.0013118895003572106,-0.017621248960494995,-0.021136708557605743,-0.009923852980136871,0.0027482849545776844,0.014069167897105217,-0.005368401762098074,-0.035271793603897095,-0.01637618988752365,0.005448964424431324,0.02040432207286358,-0.007953730411827564,-0.027567073702812195,-0.0017421672819182277,0.022733313962817192,0.02432991936802864,0.026541730388998985,0.048161815851926804,-0.00426615821197629,0.015321550890803337,0.002885607536882162,0.010473144240677357,-0.019627990201115608,0.025648217648267746,0.01206242572516203,0.01164496410638094,-0.011798765510320663,-0.01325621735304594,-0.008166123181581497,-0.0019353345269337296,0.025516387075185776,-0.015673097223043442,0.007162751629948616,-0.015863517299294472,0.015511971898376942,-0.027552425861358643,-0.010246103629469872,-0.011696231551468372,-0.016537314280867577,0.02497442066669464,0.02336316742002964,-0.0070345839485526085,-0.022996973246335983,0.014332827180624008,-0.00452615600079298,0.03228364884853363,-0.02611694484949112,0.01932038739323616,-0.017606601119041443,-0.007228666450828314,-0.007631479762494564,-0.027962563559412956,0.021078119054436684,0.024183442816138268,-0.005533189047127962,0.023524293676018715,0.014039872214198112,0.012904671020805836,-0.013051148504018784,-0.03509601950645447,0.0005323542864061892,0.011601021513342857,0.029295507818460464,-0.00006911908712936565,0.0012532984837889671,0.0021587128285318613,0.026043707504868507,-0.008524992503225803,0.012311437167227268,-0.011205531656742096,0.009923852980136871,-0.005258543882519007,-0.01778237335383892,-0.01379818469285965,0.026776093989610672,-0.0398125946521759,0.010473144240677357,0.015131129883229733,-0.008590907789766788,-0.040720757097005844,-0.02027249149978161,-0.020140662789344788,0.016273654997348785,-0.011139617301523685,0.03415856137871742,-0.0038670070935040712,0.01907137595117092,0.020492207258939743,0.010780747048556805,0.01463310606777668,0.0015737180365249515,0.011469191871583462,0.015380142256617546,-0.008012321777641773,0.01662520132958889,-0.01584886945784092,-0.0365900881588459,-0.025911876931786537,0.007514297962188721,0.0003428490017540753,0.002995465649291873,-0.017474770545959473,-0.016639849171042442,0.006031212862581015,-0.0110737020149827,0.008004997856914997,-0.00044950295705348253,0.02913438342511654,-0.0002666348882485181,0.008722737431526184,-0.012641011737287045,-0.01855870522558689,0.009740756824612617,0.03245942294597626,-0.02144431136548519,-0.029427338391542435,0.0008335487800650299,-0.0023527955636382103,-0.02715693600475788,0.02169332467019558,-0.0060238889418542385,-0.003733346238732338,-0.028138335794210434,-0.009250056929886341,-0.01835363544523716,0.017943499609827995,0.0173282939940691,-0.02901720069348812,-0.009198789484798908,-0.011088349856436253,0.005097418557852507,0.020008832216262817,-0.014237617142498493,-0.008656823076307774,0.0327230840921402,0.003859683172777295,-0.034305039793252945,-0.024549635127186775,0.019671933725476265,0.009901882149279118,0.016449427232146263,-0.011630317196249962,-0.00850302167236805,-0.046755630522966385,0.009162169881165028,-0.026688208803534508,0.00020415306789800525,-0.025443149730563164,0.002365612192079425,-0.007836548611521721,-0.006049522664397955,-0.020228547975420952,0.007909786887466908,-0.0005726356175728142,0.0215029027312994,0.0648016631603241,0.0003387293254490942,0.009484420530498028,0.002689693821594119,-0.0013521708315238357,-0.01052441168576479,0.011893976479768753,0.00422221515327692,0.0014235785929486156,-0.00312180258333683,0.017049985006451607,-0.006737967021763325,0.005998255219310522,0.003991513047367334,0.00723599037155509,-0.008459078148007393,-0.01460381131619215,0.02324598655104637,-0.001990263583138585,0.005174319259822369,-0.024110203608870506,0.009235409088432789,0.033719129860401154,0.035711225122213364,0.01912996731698513,-0.009630898013710976,0.012765517458319664,0.002019559033215046,-0.03310392424464226,-0.04520297050476074,0.02594117261469364,0.00442728353664279,0.006261914968490601,-0.0340413823723793,0.04177539423108101,0.030086487531661987,0.005335444584488869,0.007814576849341393,-0.007298243697732687,-0.00630585802718997,-0.008290628902614117,0.01899813674390316,0.020975584164261818,-0.01382747944444418,-0.022865144535899162,-0.02387584000825882,-0.008305276744067669,0.012948614545166492,0.004394326359033585,0.0034129268024116755,0.008063588291406631,-0.012831432744860649,-0.023202043026685715,0.022557541728019714,-0.01977446861565113,-0.007063879631459713,0.0000743259079172276,0.003623488126322627,-0.0423613041639328,-0.03459799662232399,-0.033221106976270676,-0.021839801222085953,-0.001246890053153038,-0.006269238889217377,-0.0314633771777153,-0.030701693147420883,-0.010421876795589924,-0.05114995688199997,0.00985793862491846,-0.0016881537158042192,0.025384558364748955,-0.009491744451224804,-0.01277284137904644,0.014625782147049904,0.0221474040299654,-0.02123924344778061,0.007682747207581997,0.010253427550196648,0.023202043026685715,0.011212855577468872,-0.0115570779889822,-0.014450009912252426,-0.0039255982264876366,-0.0012981572654098272,0.012465238571166992,-0.008261333219707012,0.04602324217557907,0.015043243765830994,0.008166123181581497,-0.017284350469708443,0.023202043026685715,-0.021869096904993057,-0.027552425861358643,0.01248721033334732,0.01888095587491989,0.0008330910350196064,0.018119271844625473,0.027698902413249016,-0.03219576179981232,0.031170420348644257,-0.013336780481040478,-0.02868030220270157,-0.024754704907536507,-0.02034573070704937,0.030057191848754883,0.024080907925963402,-0.006521912757307291,0.006210647523403168,-0.023861192166805267,0.011029758490622044,-0.011908624321222305,0.002493780106306076,0.006038536783307791,0.01778237335383892,0.0320785827934742,0.005624737590551376,-0.006364449393004179,-0.008158799260854721,-0.040076255798339844,-0.009044988080859184,-0.00194998225197196,0.023714713752269745,-0.020580094307661057,0.003195041324943304,0.025208784267306328,-0.014127759262919426,-0.00519629055634141,-0.027200879529118538,0.04356241971254349,-0.00458840886130929,0.0037113747093826532,-0.0012780165998265147,-0.03679515793919563,-0.007250638213008642,-0.014230293221771717,-0.016288302838802338,0.0006953105912543833,-0.03902161866426468,0.014010576531291008,0.008041617460548878,0.0018913912354037166,0.008517668582499027,-0.013182979077100754,0.011652288027107716,-0.0365900881588459,-0.04452917352318764,0.004269820172339678,0.01212834008038044,0.03216646984219551,-0.019657285884022713,0.024534987285733223,-0.0019005461363121867,-0.029251564294099808,0.0034147577825933695,-0.017284350469708443,-0.0019188558217138052,-0.028065096586942673,0.026468491181731224,0.014303531497716904,0.011666935868561268,0.01622971147298813,0.03313321992754936,0.035974882543087006,0.008957101963460445,0.017108576372265816,0.03949034586548805,-0.012604392133653164,-0.020331082865595818,-0.0009429491474293172,0.010744127444922924,0.012977910228073597,-0.008752033114433289,-0.005273191258311272,0.005368401762098074,0.025589626282453537,0.014142406173050404,0.021151356399059296,-0.03345546871423721,-0.051765162497758865,0.00009389439219376072,0.02444710209965706,-0.023465702310204506,0.016786325722932816,-0.03383631259202957,0.005137699656188488,-0.03240083158016205,0.0005776708130724728,0.012604392133653164,0.027947915717959404,0.02708369679749012,-0.019481513649225235,0.024080907925963402,-0.0027482849545776844,0.009652869775891304,0.004394326359033585,-0.023831896483898163,-0.0117182033136487,0.00287095969542861,0.004742210265249014,-0.010978491976857185,0.048542656004428864,-0.0014894935302436352,0.00466897152364254,-0.03260590136051178,-0.008334572426974773,-0.04455846920609474,-0.00030783170950599015,-0.002845326205715537,-0.010136245749890804,-0.005273191258311272,-0.013688325881958008,-0.03181492164731026,-0.001400691457092762,-0.0002499273105058819,0.015804925933480263,-0.03278167545795441,0.009008368477225304,0.007071203086525202,-0.02317274734377861,0.028343403711915016,-0.017679838463664055,0.029310155659914017,-0.007565564941614866,0.009081607684493065,-0.006148394662886858,0.007594860624521971,-0.0006889021606184542,0.019730525091290474,0.012106369249522686,0.029061144217848778,0.024989068508148193,0.0202139001339674,0.003390955040231347,-0.007239652331918478,0.016537314280867577,-0.02786002866923809,-0.0227919053286314,-0.03316251561045647,0.023143451660871506,0.030760284513235092,0.029544519260525703,-0.01226017065346241,0.009323295205831528,-0.024534987285733223,0.017298998311161995,-0.00905231200158596,-0.01939362660050392,0.036297135055065155,-0.015585210174322128,-0.00801964569836855,0.02452034130692482,0.028665654361248016,0.019086023792624474,-0.011000463739037514,0.009250056929886341,0.004108694847673178,-0.010780747048556805,0.014684373512864113,0.013944662176072598,0.009960472583770752,0.036941636353731155,-0.03749825060367584,0.005309810861945152,0.006737967021763325,0.012186931446194649,-0.011710879392921925,0.02979353256523609,-0.012362704612314701,0.04479283094406128,-0.029178326949477196,0.002107445616275072,0.016273654997348785,-0.012560449540615082,0.019115319475531578,-0.008510345593094826,-0.007159089669585228,-0.02632201462984085,-0.007404439616948366,-0.03685374930500984,0.035388972610235214,0.00824668537825346,-0.012501858174800873,-0.031873513013124466,0.013248893432319164,-0.006477969232946634,-0.014720993116497993,-0.0320785827934742,0.015673097223043442,-0.04532014951109886,-0.024593578651547432,-0.01444268599152565,-0.004116018768399954,0.021532198414206505,0.008437106385827065,-0.045466627925634384,-0.00089442846365273,0.0398125946521759,-0.02708369679749012,0.012252846732735634,-0.004218553192913532,-0.011373980902135372,-0.04423621669411659,0.0010363286128267646,-0.038933731615543365,-0.020228547975420952,0.006016565021127462,-0.015834221616387367,-0.00217336043715477,-0.027244823053479195,-0.008839919231832027,0.021737266331911087,-0.0022044871002435684,0.022249938920140266,-0.0008633020333945751,-0.009125551208853722,0.004258834291249514,-0.029573814943432808,0.024608226493000984,0.02406626008450985,0.01354184839874506,-0.0202139001339674,0.019994184374809265,0.004961926490068436,0.029354099184274673,-0.004705591127276421,0.006313181947916746,-0.020389674231410027,-0.04385537654161453,-0.021781209856271744,0.023128803819417953,-0.013556496240198612,-0.004200243391096592,0.0011187222553417087,0.005774877034127712,-0.0333675853908062,-0.0031309574842453003,-0.022879792377352715,0.00608247984200716,-0.009645545855164528,0.02028713934123516,0.011784118600189686,0.014838174916803837,0.019422922283411026,-0.02220599539577961,-0.013563820160925388,-0.00834189634770155,0.002878283616155386,-0.02195698395371437,-0.0359455868601799,0.012069749645888805,0.023670770227909088,0.02850452996790409,-0.008495697751641273,-0.0001838979806052521,0.009023016318678856,-0.009828642942011356,0.002019559033215046,-0.010839338414371014,-0.008898510597646236,0.0025908215902745724,0.018148567527532578,-0.0014107618480920792,0.026219479739665985,-0.008188094943761826,0.03544756397604942,-0.042390599846839905,-0.005251219961792231,-0.009601603262126446,0.003511799033731222,0.019115319475531578,-0.00771936634555459,-0.03377772122621536,0.004244186915457249,0.03448081389069557,-0.0018373776692897081,0.01501394808292389,0.018002089112997055,0.004943617153912783,-0.03049662336707115,-0.034744471311569214,0.007162751629948616,-0.021839801222085953,-0.013681001961231232,-0.001364072086289525,-0.031551264226436615,-0.0023967388551682234,0.014970004558563232,-0.009081607684493065,0.003694895887747407,0.019598694518208504,0.004148976411670446,0.02041896991431713,0.024798648431897163,-0.00911090336740017,-0.007792605087161064,0.007444721180945635,0.009154845960438251,0.03483235836029053,-0.0017439982620999217,0.015350846573710442,0.03061380609869957,0.0029771560803055763,0.01675703004002571,-0.01937897875905037,0.022835848852992058,-0.039255980402231216,-0.01598070003092289,0.000874745543114841,-0.006455997470766306,-0.002305190311744809,0.01335142832249403,-0.0015297748614102602,0.014113111421465874,0.016390837728977203,0.0032994067296385765,-0.018133919686079025,-0.024798648431897163,0.007851196452975273,0.0112348273396492,-0.04010555148124695,0.0002753320150077343,-0.002766594523563981,0.022513598203659058,-0.0053976974450051785,-0.013014529831707478,-0.01527760736644268,0.012282141484320164,0.009125551208853722,-0.021458959206938744,-0.0043870024383068085,-0.009689489379525185,-0.002292373450472951,0.011322714388370514,-0.0015682252123951912,-0.022425711154937744,0.1925300806760788,-0.004566437564790249,-0.002526737516745925,0.03919738903641701,0.021898392587900162,-0.007063879631459713,0.010641593486070633,0.011498486623167992,-0.010707507841289043,0.020521502941846848,0.020946288481354713,0.02195698395371437,-0.0073495106771588326,-0.008385838940739632,0.01789955608546734,0.019217852503061295,-0.02106347121298313,-0.028138335794210434,0.010158217512071133,0.0005781285581178963,0.014647753909230232,-0.009294000454246998,-0.013995928689837456,-0.026102297008037567,0.04646267741918564,-0.00878865271806717,-0.0077340141870081425,-0.005965298041701317,0.014362122863531113,0.008400486782193184,0.0015251974109560251,-0.03647290915250778,0.01702069118618965,-0.005884735379368067,0.010890604928135872,0.017313646152615547,0.006620784755796194,-0.013754241168498993,-0.006379096768796444,0.013270865194499493,-0.001555408351123333,-0.014896766282618046,0.03152196854352951,-0.017445474863052368,-0.026556378230452538,-0.00410503288730979,-0.001679914304986596,0.0532885305583477,-0.010963844135403633,0.0099458247423172,-0.02528202347457409,0.045671697705984116,0.007195709273219109,-0.007305567152798176,-0.02560427412390709,0.011828061193227768,0.0005785863031633198,-0.007455707062035799,0.002922226907685399,-0.015131129883229733,-0.017342939972877502,0.009667517617344856,-0.010260751470923424,-0.00654754601418972,-0.02110741287469864,0.012465238571166992,-0.025516387075185776,0.026073003187775612,0.020316435024142265,-0.017797021195292473,-0.01784096471965313,0.004793477710336447,-0.01100778765976429,0.02123924344778061,-0.017635896801948547,-0.01261171605437994,0.005756567232310772,0.04561310634016991,0.012531153857707977,-0.003154759993776679,-0.008239361457526684,0.011059054173529148,0.016346894204616547,-0.008620203472673893,-0.014655077829957008,-0.026922572404146194,0.03708811476826668,-0.0012322423281148076,-0.006975993048399687,-0.0013063965598121285,-0.017372235655784607,-0.008202741853892803,0.002418710384517908,0.015863517299294472,0.019847705960273743,-0.013410018756985664,-0.02008207142353058,-0.015292255207896233,-0.031082535162568092,-0.004965588450431824,-0.0468728132545948,0.0609932467341423,0.039314571768045425,0.003079690271988511,-0.015526619739830494,0.0013961141230538487,-0.012135664001107216,0.012370028533041477,-0.010187513194978237,-0.021590789780020714,-0.03506672382354736,-0.003237153636291623,0.01622971147298813,0.020550798624753952,0.023055564612150192,0.011337361298501492,-0.005522203166037798,0.004947279114276171,-0.016156472265720367,-0.012018482200801373,0.02015530876815319,-0.03954893723130226,0.008678793907165527,0.0008221052121371031,-0.018763773143291473,-0.024593578651547432,-0.0170060433447361,-0.002347302623093128,0.0022722329013049603,-0.030789578333497047,0.036238543689250946,0.009718785062432289,0.007441059220582247,-0.03556474670767784,0.026278071105480194,-0.03243012726306915,0.04602324217557907,-0.01822180673480034,-0.0149187371134758,-0.00009595423034625128,0.003932922147214413,-0.003339687827974558,0.040339913219213486,0.003002789570018649,0.0009859770070761442,-0.0066427565179765224,0.004145314451307058,-0.002184346318244934,0.015541267581284046,0.002259416040033102,-0.03884584456682205,-0.014742964878678322,0.004086723551154137,-0.009359914809465408,0.00709317484870553,-0.011857356876134872,-0.009887234307825565,-0.03433433547616005,-0.004134328570216894,-0.0016176613280549645,-0.024549635127186775,0.0189248975366354,-0.009909206070005894,0.01656660996377468,-0.023978373035788536,-0.02985212206840515,-0.18643660843372345,0.01675703004002571,0.005492907948791981,-0.030262259766459465,0.030145078897476196,-0.005093756597489119,0.021737266331911087,-0.002559694927185774,-0.00574191939085722,-0.00124322809278965,0.01637618988752365,-0.008774004876613617,0.014940708875656128,-0.03304533287882805,0.013746917247772217,-0.005485584028065205,0.00043485520291142166,-0.0014519586693495512,0.03902161866426468,0.013197626918554306,0.034890949726104736,-0.02309950813651085,0.032137174159288406,-0.002292373450472951,-0.013878746889531612,0.00105555378831923,-0.011066378094255924,-0.0027482849545776844,0.006089803762733936,-0.035388972610235214,-0.017372235655784607,-0.0066464184783399105,0.0037974303122609854,0.008393162861466408,-0.0025102589279413223,-0.012047777883708477,-0.0014153392985463142,-0.028094392269849777,0.01226017065346241,0.016639849171042442,0.0231141559779644,0.02207416482269764,-0.013204949907958508,0.017093928530812263,0.01559985801577568,0.007279933895915747,-0.000819358741864562,-0.0017989273183047771,-0.007386129815131426,-0.01624435931444168,0.02560427412390709,-0.01912996731698513,0.010890604928135872,-0.004119680728763342,0.022630780935287476,-0.007602184545248747,0.002997296629473567,-0.00018069377983920276,0.008817948400974274,0.008136827498674393,-0.01861729472875595,-0.008451754227280617,0.009044988080859184,-0.023260634392499924,-0.005284177139401436,0.0008001335663720965,-0.026029059663414955,0.0021989941596984863,-0.018382931128144264,-0.037263885140419006,-0.015526619739830494,0.003625319106504321,-0.002579835709184408,-0.0015874503878876567,0.06362984329462051,0.016508018597960472,-0.035594042390584946,0.020462913438677788,-0.006657404359430075,0.009564983658492565,-0.016024643555283546,0.02765495888888836,-0.009044988080859184,0.008070912212133408,0.01321959774941206,0.0016085065435618162,-0.02252824604511261,-0.004112356808036566,0.023656122386455536,-0.029368747025728226,-0.03708811476826668,-0.008554288186132908,0.003859683172777295,-0.020902344956994057,-0.017811669036746025,0.018324339762330055,0.006902754306793213,-0.0034861655440181494,0.015160425566136837,-0.01264833565801382,-0.012523829936981201,-0.004178272094577551,-0.020653333514928818,-0.00019980451907031238,-0.0038670070935040712,0.01488944236189127,0.016288302838802338,0.0096235740929842,0.020638685673475266,0.008305276744067669,-0.020887697115540504,0.01573168858885765,0.016595905646681786,0.024813296273350716,-0.016537314280867577,0.024696113541722298,0.0205361507833004,-0.007909786887466908,0.029163679108023643,0.005551498848944902,0.07183258980512619,-0.021092765033245087,0.004950941074639559,0.00677092419937253,-0.003823063801974058,-0.005416007246822119,-0.09134339541196823,-0.00731655303388834,0.0005900298710912466,0.04420692101120949,-0.04344523698091507,-0.01662520132958889,-0.032957445830106735,0.011835385113954544,-0.009389210492372513,0.03705881908535957,-0.012802137061953545,-0.03858218342065811,-0.028607062995433807,0.029105087742209435,-0.03949034586548805,-0.023919781669974327,-0.009418506175279617,-0.038992322981357574,-0.023656122386455536,0.05158938840031624,0.0041563003323972225,-0.03905091434717178,-0.03125830739736557,-0.005884735379368067,-0.025662865489721298,0.015673097223043442,-0.01751871407032013,0.02292373590171337,-0.009250056929886341,-0.002499273046851158,-0.00559910386800766,-0.012926642782986164,0.011864680796861649,-0.0025047659873962402,0.010861309245228767,0.003621657146140933,-0.00473122438415885,-0.013908042572438717,0.01751871407032013,-0.014999300241470337,0.006276562809944153,0.0104292007163167,0.02580934204161167,-0.0027409610338509083,-0.019012784585356712,0.007968378253281116,-0.029061144217848778,0.030848169699311256,0.02632201462984085,0.01097116805613041,-0.0013137204805389047,-0.006228957325220108,-0.01228946540504694,-0.018661238253116608,0.03330899402499199,-0.026600321754813194,0.027508482336997986,0.03307462856173515,0.0008358374470844865,0.015248311683535576,0.00430277781561017,0.03351406008005142,0.005928678438067436,0.02708369679749012,0.006573179736733437,-0.016903508454561234,-0.03711741045117378,0.015614505857229233,0.014098463580012321,-0.01357846800237894,-0.03035014681518078,0.006283886730670929,-0.009455124847590923,0.016903508454561234,-0.010253427550196648,0.01341734267771244,-0.006580503657460213,-0.031932104378938675,0.02144431136548519,-0.008195418864488602,-0.01952545717358589,-0.009323295205831528,-0.021869096904993057,-0.01932038739323616,-0.005002208054065704,0.054401759058237076,0.0017275195568799973,-0.007843872532248497,0.02907579205930233,-0.04048639163374901,0.01977446861565113,0.015204369090497494,-0.00695035932585597,0.014904090203344822,0.015468028374016285,0.019291091710329056,-0.008744709193706512,-0.008100207895040512,-0.010539059527218342,-0.0008958016987890005,-0.019217852503061295,-0.01200383435934782,-0.0596749484539032,0.018251102417707443,0.009528364054858685,-0.011095673777163029,-0.038465000689029694,0.010370610281825066,0.008166123181581497,-0.013065796345472336,-0.010436524637043476,-0.003079690271988511,-0.007184723392128944,0.01975982077419758,0.0023582885041832924,-0.03412926569581032,-0.017679838463664055,-0.00927202869206667,0.03093605674803257,-0.010128921829164028,0.015087186358869076,0.04452917352318764,-0.011059054173529148,0.003786444431170821,-0.0023546265438199043,0.02356823720037937,0.005024179816246033,-0.02394907735288143,-0.0008834426989778876,0.0019664610736072063,0.0016606891294941306,0.005115728359669447,0.03588699921965599,0.005181643180549145,-0.004112356808036566,0.013673678040504456,0.0002714411821216345,0.013424666598439217,0.001245974563062191,0.011102997697889805,0.015321550890803337,-0.009250056929886341,-0.003771796589717269,-0.025252727791666985,0.017284350469708443,-0.021327130496501923,0.010656241327524185,0.006364449393004179,-0.048747725784778595,0.010436524637043476,0.018133919686079025,-0.008473725989460945,0.029705645516514778,-0.01867588609457016,0.0034898275043815374,-0.010136245749890804,-0.02099023200571537,0.0025102589279413223,0.0018639267655089498,0.022367119789123535,0.011146941222250462,0.007144442293792963,0.03606276959180832,0.028914665803313255,0.010561030358076096,-0.04118948429822922,-0.0034385602921247482,0.009887234307825565,-0.03574052080512047,0.0005373894819058478,0.013886070810258389,-0.06070029363036156,-0.021341778337955475,0.006584165617823601,0.010956520214676857,0.026746798306703568,-0.02309950813651085,0.0012624532682821155,-0.00632416782900691,0.019466865807771683,-0.0037644729018211365,0.0211806520819664,0.01789955608546734,0.005906706675887108,0.013366075232625008,0.007609508465975523,-0.0018218144541606307,0.0010976660996675491,-0.016288302838802338,-0.001827307278290391,-0.008708089590072632,-0.00691373972222209,-0.02157614193856716,0.0056357234716415405,0.016537314280867577,0.003158421954140067,0.022953031584620476,-0.017753077670931816,-0.01888095587491989,0.0026750462129712105,0.03647290915250778,0.009608926251530647,-0.00691373972222209,0.011593697592616081,-0.001125130569562316,-0.0029020863585174084,-0.012047777883708477,0.00492896931245923,-0.029178326949477196,-0.017445474863052368,-0.002801382914185524,0.015321550890803337,0.004661647602915764,0.00334518076851964,-0.02805044874548912,0.03735177218914032,0.001986601622775197,0.021195299923419952,0.013161007314920425,0.0189248975366354,-0.044060442596673965,0.031170420348644257,-0.012370028533041477,-0.027889324352145195,0.04628690332174301,-0.006814867723733187,0.018763773143291473,-0.0016149148577824235,-0.010853986255824566,-0.026424547657370567,0.007506974041461945,-0.01855870522558689,0.020140662789344788,-0.006935711484402418,0.002682369900867343,-0.018016736954450607,-0.00507178483530879,-0.004998546093702316,-0.009367238730192184,0.022103460505604744,-0.02245500683784485,0.09251521527767181,0.036033473908901215,-0.021590789780020714,-0.012765517458319664,-0.012721574865281582,0.03222505748271942,-0.01707928068935871,0.003195041324943304,-0.011117645539343357,-0.05141361802816391,-0.01952545717358589,0.006426702253520489,-0.021649381145834923,-0.006679375655949116,-0.03412926569581032,-0.015673097223043442,-0.0003085183270741254,0.03547685965895653,-0.018016736954450607,-0.010004416108131409,0.04069146141409874,0.0006033043609932065,-0.0032994067296385765,0.015834221616387367,-0.00005424246410257183,-0.008612879551947117,0.027391299605369568,0.011893976479768753,-0.01584886945784092,-0.00882527232170105,0.019086023792624474,-0.0013421004405245185,-0.03407067432999611,-0.009455124847590923,-0.017928851768374443,0.014940708875656128,0.003275603987276554,-0.014376770704984665,0.005767553113400936,0.027903972193598747,0.010099626146256924,-0.03746895492076874,-0.031053239479660988,-0.029280859977006912,-0.024740057066082954,0.010546382516622543,-0.00921343732625246,-0.015629153698682785,-0.028021153062582016]],"metadata":{"location":"https://pkg.go.dev/github.com/libp2p/go-libp2p-pubsub","source_type":"webpage"}},{"raw_content":"Skip to Main Content\nWhy Go\nCase Studies\nCommon problems companies solve with Go\nUse Cases\nStories about how and why companies use Go\nSecurity Policy\nHow Go can help keep you secure by default\nLearn\nDocs\nEffective Go\nTips for writing clear, performant, and idiomatic Go code\nGo User Manual\nA complete introduction to building software with Go\nStandard library\nReference documentation for Go's standard library\nRelease Notes\nLearn what's new in each Go release\nPackages\nCommunity\nRecorded Talks\nVideos from prior events\nMeetups\nMeet other local Go developers\nConferences\nLearn and network with Go developers from around the world\nGo blog\nThe Go project's official blog.\nGo project\nGet help and stay informed from Go\nGet connected\nWhy Go\nWhy Go\nCase Studies\nUse Cases\nSecurity Policy\nLearn\nDocs\nDocs\nEffective Go\nGo User Manual\nStandard library\nRelease Notes\nPackages\nCommunity\nCommunity\nRecorded Talks\nMeetups\nConferences\nGo blog\nGo project\nGet connected\nDiscover Packages\ngithub.com/libp2p/go-libp2p-pubsub\npubsub\npackage\nmodule\nVersion:\nv0.10.0\nOpens a new window with list of versions in this module.\nLatest\nLatest\nThis package is not in the latest version of its module.\nGo to latest\nPublished: Nov\n1, 2023\nLicense: Apache-2.0, MIT, Apache-2.0, + 1 more\nOpens a new window with license information.\nImports: 37\nOpens a new window with list of imports.\nImported by: 631\nOpens a new window with list of known importers.\nMain\nVersions\nLicenses\nImports\nImported By\nDetails\nValid go.mod file\nThe Go module system was introduced in Go 1.11 and is the official dependency management\nsolution for Go.\nRedistributable license\nRedistributable licenses place minimal restrictions on how software can be used,\nmodified, and redistributed.\nTagged version\nModules with tagged versions give importers more predictable builds.\nStable version\nWhen a project reaches major version v1 it is considered stable.\nLearn more about best practices\nRepository\ngithub.com/libp2p/go-libp2p-pubsub\nLinks\nOpen Source Insights\nJump to ...\nREADME\nRepo Lead Maintainer\nTable of Contents\nInstall\nUsage\nExample\nDocumentation\nIn this repo, you will find\nTracing\nContribute\nLicense\nDocumentation\nOverview\nIndex\nConstants\nVariables\nFunctions\nDefaultMsgIdFn(pmsg)\nDefaultPeerFilter(pid, topic)\nFilterSubscriptions(subs, filter)\nGossipSubDefaultFeatures(feat, proto)\nScoreParameterDecay(decay)\nScoreParameterDecayWithBase(decay, base, decayToZero)\nTypes\ntype AcceptStatus\ntype BackoffConnectorFactory\ntype BasicSeqnoValidator\ntype Blacklist\nNewMapBlacklist()\nNewTimeCachedBlacklist(expiry)\ntype CacheEntry\ntype DiscoverOpt\nWithDiscoverConnector(connFactory)\nWithDiscoveryOpts(opts)\ntype EventTracer\ntype EventType\ntype ExtendedPeerScoreInspectFn\ntype FloodSubRouter\n(fs) AcceptFrom()\n(fs) AddPeer(p, proto)\n(fs) Attach(p)\n(fs) EnoughPeers(topic, suggested)\n(fs) HandleRPC(rpc)\n(fs) Join(topic)\n(fs) Leave(topic)\n(fs) Protocols()\n(fs) Publish(msg)\n(fs) RemovePeer(p)\ntype GossipSubFeature\ntype GossipSubFeatureTest\ntype GossipSubParams\nDefaultGossipSubParams()\ntype GossipSubRouter\nDefaultGossipSubRouter(h)\n(gs) AcceptFrom(p)\n(gs) AddPeer(p, proto)\n(gs) Attach(p)\n(gs) EnoughPeers(topic, suggested)\n(gs) HandleRPC(rpc)\n(gs) Join(topic)\n(gs) Leave(topic)\n(gs) Protocols()\n(gs) Publish(msg)\n(gs) RemovePeer(p)\n(gs) WithDefaultTagTracer()\ntype JSONTracer\nNewJSONTracer(file)\nOpenJSONTracer(file, flags, perm)\n(t) Close()\n(t) Trace(evt)\ntype MapBlacklist\n(b) Add(p)\n(b) Contains(p)\ntype Message\n(m) GetFrom()\ntype MessageCache\nNewMessageCache(gossip, history)\n(mc) Get(mid)\n(mc) GetForPeer(mid, p)\n(mc) GetGossipIDs(topic)\n(mc) Put(msg)\n(mc) SetMsgIdFn(msgID)\n(mc) Shift()\ntype MessageSignaturePolicy\ntype MsgIdFunction\ntype Option\nWithAppSpecificRpcInspector(inspector)\nWithBlacklist(b)\nWithDefaultValidator(val, opts)\nWithDirectConnectTicks(t)\nWithDirectPeers(pis)\nWithDiscovery(d, opts)\nWithEventTracer(tracer)\nWithFloodPublish(floodPublish)\nWithGossipSubParams(cfg)\nWithGossipSubProtocols(protos, feature)\nWithMaxMessageSize(maxMessageSize)\nWithMessageAuthor(author)\nWithMessageIdFn(fn)\nWithMessageSignaturePolicy(policy)\nWithMessageSigning(enabled)\nWithNoAuthor()\nWithPeerExchange(doPX)\nWithPeerFilter(filter)\nWithPeerGater(params)\nWithPeerOutboundQueueSize(size)\nWithPeerScore(params, thresholds)\nWithPeerScoreInspect(inspect, period)\nWithProtocolMatchFn(m)\nWithRawTracer(tracer)\nWithSeenMessagesStrategy(strategy)\nWithSeenMessagesTTL(ttl)\nWithStrictSignatureVerification(required)\nWithSubscriptionFilter(subFilter)\nWithValidateQueueSize(n)\nWithValidateThrottle(n)\nWithValidateWorkers(n)\ntype PBTracer\nNewPBTracer(file)\nOpenPBTracer(file, flags, perm)\n(t) Close()\n(t) Trace(evt)\ntype PeerEvent\ntype PeerFilter\ntype PeerGaterParams\nDefaultPeerGaterParams()\nNewPeerGaterParams(threshold, globalDecay, sourceDecay)\n(p) WithTopicDeliveryWeights(w)\ntype PeerMetadataStore\ntype PeerScoreInspectFn\ntype PeerScoreParams\ntype PeerScoreSnapshot\ntype PeerScoreThresholds\ntype ProtocolMatchFn\ntype ProvideKey\ntype PubOpt\nWithLocalPublication(local)\nWithReadiness(ready)\nWithSecretKeyAndPeerId(key, pid)\ntype PubSub\nNewFloodSub(ctx, h, opts)\nNewFloodsubWithProtocols(ctx, h, ps, opts)\nNewGossipSub(ctx, h, opts)\nNewGossipSubWithRouter(ctx, h, rt, opts)\nNewPubSub(ctx, h, rt, opts)\nNewRandomSub(ctx, h, size, opts)\n(p) BlacklistPeer(pid)\n(p) GetTopics()\n(p) Join(topic, opts)\n(p) ListPeers(topic)\n(p) Publish(topic, data, opts)\n(p) RegisterTopicValidator(topic, val, opts)\n(p) Subscribe(topic, opts)\n(p) UnregisterTopicValidator(topic)\ntype PubSubNotif\n(p) ClosedStream(n, s)\n(p) Connected(n, c)\n(p) Disconnected(n, c)\n(p) Initialize()\n(p) Listen(n, _)\n(p) ListenClose(n, _)\n(p) OpenedStream(n, s)\ntype PubSubRouter\ntype PublishOptions\ntype RPC\ntype RandomSubRouter\n(rs) AcceptFrom()\n(rs) AddPeer(p, proto)\n(rs) Attach(p)\n(rs) EnoughPeers(topic, suggested)\n(rs) HandleRPC(rpc)\n(rs) Join(topic)\n(rs) Leave(topic)\n(rs) Protocols()\n(rs) Publish(msg)\n(rs) RemovePeer(p)\ntype RawTracer\ntype RelayCancelFunc\ntype RemoteTracer\nNewRemoteTracer(ctx, host, pi)\n(t) Close()\n(t) Trace(evt)\ntype RouterReady\nMinTopicSize(size)\ntype SubOpt\nWithBufferSize(size)\ntype Subscription\n(sub) Cancel()\n(sub) Next(ctx)\n(sub) Topic()\ntype SubscriptionFilter\nNewAllowlistSubscriptionFilter(topics)\nNewRegexpSubscriptionFilter(rx)\nWrapLimitSubscriptionFilter(filter, limit)\ntype TimeCachedBlacklist\n(b) Add(p)\n(b) Contains(p)\ntype Topic\n(t) Close()\n(t) EventHandler(opts)\n(t) ListPeers()\n(t) Publish(ctx, data, opts)\n(t) Relay()\n(t) SetScoreParams(p)\n(t) String()\n(t) Subscribe(opts)\ntype TopicEventHandler\n(t) Cancel()\n(t) NextPeerEvent(ctx)\ntype TopicEventHandlerOpt\ntype TopicOpt\nWithTopicMessageIdFn(msgId)\ntype TopicOptions\ntype TopicScoreParams\ntype TopicScoreSnapshot\ntype ValidationError\n(e) Error()\ntype ValidationResult\ntype Validator\ntype ValidatorEx\nNewBasicSeqnoValidator(meta)\ntype ValidatorOpt\nWithValidatorConcurrency(n)\nWithValidatorInline(inline)\nWithValidatorTimeout(timeout)\nSource Files\nDirectories\nREADMEDocumentationSource FilesDirectoriesRepo Lead MaintainerTable of ContentsInstallUsageDocumentationContributeLicenseExampleIn this repo, you will findTracingOverviewIndexConstantsVariablesFunctionsTypesDefaultMsgIdFn(pmsg)DefaultPeerFilter(pid, topic)FilterSubscriptions(subs, filter)GossipSubDefaultFeatures(feat, proto)ScoreParameterDecay(decay)ScoreParameterDecayWithBase(decay, base, decayToZero)type AcceptStatustype BackoffConnectorFactorytype BasicSeqnoValidatortype Blacklisttype CacheEntrytype DiscoverOpttype EventTracertype EventTypetype ExtendedPeerScoreInspectFntype FloodSubRoutertype GossipSubFeaturetype GossipSubFeatureTesttype GossipSubParamstype GossipSubRoutertype JSONTracertype MapBlacklisttype Messagetype MessageCachetype MessageSignaturePolicytype MsgIdFunctiontype Optiontype PBTracertype PeerEventtype PeerFiltertype PeerGaterParamstype PeerMetadataStoretype PeerScoreInspectFntype PeerScoreParamstype PeerScoreSnapshottype PeerScoreThresholdstype ProtocolMatchFntype ProvideKeytype PubOpttype PubSubtype PubSubNotiftype PubSubRoutertype PublishOptionstype RPCtype RandomSubRoutertype RawTracertype RelayCancelFunctype RemoteTracertype RouterReadytype SubOpttype Subscriptiontype SubscriptionFiltertype TimeCachedBlacklisttype Topictype TopicEventHandlertype TopicEventHandlerOpttype TopicOpttype TopicOptionstype TopicScoreParamstype TopicScoreSnapshottype ValidationErrortype ValidationResulttype Validatortype ValidatorExtype ValidatorOptNewMapBlacklist()NewTimeCachedBlacklist(expiry)WithDiscoverConnector(connFactory)WithDiscoveryOpts(opts)(fs) AcceptFrom()(fs) AddPeer(p, proto)(fs) Attach(p)(fs) EnoughPeers(topic, suggested)(fs) HandleRPC(rpc)(fs) Join(topic)(fs) Leave(topic)(fs) Protocols()(fs) Publish(msg)(fs) RemovePeer(p)DefaultGossipSubParams()DefaultGossipSubRouter(h)(gs) AcceptFrom(p)(gs) AddPeer(p, proto)(gs) Attach(p)(gs) EnoughPeers(topic, suggested)(gs) HandleRPC(rpc)(gs) Join(topic)(gs) Leave(topic)(gs) Protocols()(gs) Publish(msg)(gs) RemovePeer(p)(gs) WithDefaultTagTracer()NewJSONTracer(file)OpenJSONTracer(file, flags, perm)(t) Close()(t) Trace(evt)(b) Add(p)(b) Contains(p)(m) GetFrom()NewMessageCache(gossip, history)(mc) Get(mid)(mc) GetForPeer(mid, p)(mc) GetGossipIDs(topic)(mc) Put(msg)(mc) SetMsgIdFn(msgID)(mc) Shift()WithAppSpecificRpcInspector(inspector)WithBlacklist(b)WithDefaultValidator(val, opts)WithDirectConnectTicks(t)WithDirectPeers(pis)WithDiscovery(d, opts)WithEventTracer(tracer)WithFloodPublish(floodPublish)WithGossipSubParams(cfg)WithGossipSubProtocols(protos, feature)WithMaxMessageSize(maxMessageSize)WithMessageAuthor(author)WithMessageIdFn(fn)WithMessageSignaturePolicy(policy)WithMessageSigning(enabled)WithNoAuthor()WithPeerExchange(doPX)WithPeerFilter(filter)WithPeerGater(params)WithPeerOutboundQueueSize(size)WithPeerScore(params, thresholds)WithPeerScoreInspect(inspect, period)WithProtocolMatchFn(m)WithRawTracer(tracer)WithSeenMessagesStrategy(strategy)WithSeenMessagesTTL(ttl)WithStrictSignatureVerification(required)WithSubscriptionFilter(subFilter)WithValidateQueueSize(n)WithValidateThrottle(n)WithValidateWorkers(n)NewPBTracer(file)OpenPBTracer(file, flags, perm)(t) Close()(t) Trace(evt)DefaultPeerGaterParams()NewPeerGaterParams(threshold, globalDecay, sourceDecay)(p) WithTopicDeliveryWeights(w)WithLocalPublication(local)WithReadiness(ready)WithSecretKeyAndPeerId(key, pid)NewFloodSub(ctx, h, opts)NewFloodsubWithProtocols(ctx, h, ps, opts)NewGossipSub(ctx, h, opts)NewGossipSubWithRouter(ctx, h, rt, opts)NewPubSub(ctx, h, rt, opts)NewRandomSub(ctx, h, size, opts)(p) BlacklistPeer(pid)(p) GetTopics()(p) Join(topic, opts)(p) ListPeers(topic)(p) Publish(topic, data, opts)(p) RegisterTopicValidator(topic, val, opts)(p) Subscribe(topic, opts)(p) UnregisterTopicValidator(topic)(p) ClosedStream(n, s)(p) Connected(n, c)(p) Disconnected(n, c)(p) Initialize()(p) Listen(n, _)(p) ListenClose(n, _)(p) OpenedStream(n, s)(rs) AcceptFrom()(rs) AddPeer(p, proto)(rs) Attach(p)(rs) EnoughPeers(topic, suggested)(rs) HandleRPC(rpc)(rs) Join(topic)(rs) Leave(topic)(rs) Protocols()(rs) Publish(msg)(rs) RemovePeer(p)NewRemoteTracer(ctx, host, pi)(t) Close()(t) Trace(evt)MinTopicSize(size)WithBufferSize(size)(sub) Cancel()(sub) Next(ctx)(sub) Topic()NewAllowlistSubscriptionFilter(topics)NewRegexpSubscriptionFilter(rx)WrapLimitSubscriptionFilter(filter, limit)(b) Add(p)(b) Contains(p)(t) Close()(t) EventHandler(opts)(t) ListPeers()(t) Publish(ctx, data, opts)(t) Relay()(t) SetScoreParams(p)(t) String()(t) Subscribe(opts)(t) Cancel()(t) NextPeerEvent(ctx)WithTopicMessageIdFn(msgId)(e) Error()NewBasicSeqnoValidator(meta)WithValidatorConcurrency(n)WithValidatorInline(inline)WithValidatorTimeout(timeout)\nREADME\n¶\ngo-libp2p-pubsub\nThis repo contains the canonical pubsub implementation for libp2p. We currently provide three message router options:\nFloodsub, which is the baseline flooding protocol.\nRandomsub, which is a simple probabilistic router that propagates to random subsets of peers.\nGossipsub, which is a more advanced router with mesh formation and gossip propagation. See spec and\nimplementation for more details.\nRepo Lead Maintainer\n@vyzo\nThis repo follows the Repo Lead Maintainer Protocol\nTable of Contents\nInstall\nUsage\nExample\nDocumentation\nTracing\nContribute\nLicense\nInstall\ngo get github.com/libp2p/go-libp2p-pubsub\nUsage\nTo be used for messaging in p2p instrastructure (as part of libp2p) such as IPFS, Ethereum, other blockchains, etc.\nExample\nhttps://github.com/libp2p/go-libp2p/tree/master/examples/pubsub\nDocumentation\nSee the libp2p specs for high level documentation and godoc for API documentation.\nIn this repo, you will find\n.\n├── LICENSE\n├── README.md\n# Regular Golang repo set up\n├── codecov.yml\n├── pb\n├── go.mod\n├── go.sum\n├── doc.go\n# PubSub base\n├── pubsub.go\n├── blacklist.go\n├── notify.go\n├── comm.go\n├── discovery.go\n├── sign.go\n├── subscription.go\n├── topic.go\n├── trace.go\n├── tracer.go\n├── validation.go\n# Floodsub router\n├── floodsub.go\n# Randomsub router\n├── randomsub.go\n# Gossipsub router\n├── gossipsub.go\n├── score.go\n├── score_params.go\n└── mcache.go\nTracing\nThe pubsub system supports tracing, which collects all events pertaining to the internals of the system. This allows you to recreate the complete message flow and state of the system for analysis purposes.\nTo enable tracing, instantiate the pubsub system using the WithEventTracer option; the option accepts a tracer with three available implementations in-package (trace to json, pb, or a remote peer).\nIf you want to trace using a remote peer, you can do so using the traced daemon from go-libp2p-pubsub-tracer. The package also includes a utility program, tracestat, for analyzing the traces collected by the daemon.\nFor instance, to capture the trace as a json file, you can use the following option:\ntracer, err := pubsub.NewJSONTracer(\"/path/to/trace.json\")\nif err != nil {\npanic(err)\n}\npubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nTo capture the trace as a protobuf, you can use the following option:\ntracer, err := pubsub.NewPBTracer(\"/path/to/trace.pb\")\nif err != nil {\npanic(err)\n}\npubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nFinally, to use the remote tracer, you can use the following incantations:\n// assuming that your tracer runs in x.x.x.x and has a peer ID of QmTracer\npi, err := peer.AddrInfoFromP2pAddr(ma.StringCast(\"/ip4/x.x.x.x/tcp/4001/p2p/QmTracer\"))\nif err != nil {\npanic(err)\n}\ntracer, err := pubsub.NewRemoteTracer(ctx, host, pi)\nif err != nil {\npanic(err)\n}\nps, err := pubsub.NewGossipSub(..., pubsub.WithEventTracer(tracer))\nContribute\nContributions welcome. Please check out the issues.\nCheck out our contributing document for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS Code of Conduct.\nSmall note: If editing the README, please conform to the standard-readme specification.\nLicense\nThe go-libp2p-pubsub project is dual-licensed under Apache 2.0 and MIT terms:\nApache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)\nMIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\nExpand ▾\nCollapse ▴\nDocumentation\n¶\nOverview ¶\nThe pubsub package provides facilities for the Publish/Subscribe pattern of message\npropagation, also known as overlay multicast.\nThe implementation provides topic-based pubsub, with pluggable routing algorithms.\nThe main interface to the library is the PubSub object.\nYou can construct this object with the following constructors:\n- NewFloodSub creates an instance that uses the floodsub routing algorithm.\n- NewGossipSub creates an instance that uses the gossipsub routing algorithm.\n- NewRandomSub creates an instance that uses the randomsub routing algorithm.\nIn addition, there is a generic constructor that creates a pubsub instance with\na custom PubSubRouter interface. This procedure is currently reserved for internal\nuse within the package.\nOnce you have constructed a PubSub instance, you need to establish some connections\nto your peers; the implementation relies on ambient peer discovery, leaving bootstrap\nand active peer discovery up to the client.\nTo publish a message to some topic, use Publish; you don't need to be subscribed\nto the topic in order to publish.\nTo subscribe to a topic, use Subscribe; this will give you a subscription interface\nfrom which new messages can be pumped.\nIndex ¶\nConstants\nVariables\nfunc DefaultMsgIdFn(pmsg *pb.Message) string\nfunc DefaultPeerFilter(pid peer.ID, topic string) bool\nfunc FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts\nfunc GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol.ID) bool\nfunc ScoreParameterDecay(decay time.Duration) float64\nfunc ScoreParameterDecayWithBase(decay time.Duration, base time.Duration, decayToZero float64) float64\ntype AcceptStatus\ntype BackoffConnectorFactory\ntype BasicSeqnoValidator\ntype Blacklist\nfunc NewMapBlacklist() Blacklist\nfunc NewTimeCachedBlacklist(expiry time.Duration) (Blacklist, error)\ntype CacheEntry\ntype DiscoverOpt\nfunc WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt\nfunc WithDiscoveryOpts(opts ...discovery.Option) DiscoverOpt\ntype EventTracer\ntype EventType\ntype ExtendedPeerScoreInspectFn\ntype FloodSubRouter\nfunc (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (fs *FloodSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (fs *FloodSubRouter) Attach(p *PubSub)\nfunc (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (fs *FloodSubRouter) HandleRPC(rpc *RPC)\nfunc (fs *FloodSubRouter) Join(topic string)\nfunc (fs *FloodSubRouter) Leave(topic string)\nfunc (fs *FloodSubRouter) Protocols() []protocol.ID\nfunc (fs *FloodSubRouter) Publish(msg *Message)\nfunc (fs *FloodSubRouter) RemovePeer(p peer.ID)\ntype GossipSubFeature\ntype GossipSubFeatureTest\ntype GossipSubParams\nfunc DefaultGossipSubParams() GossipSubParams\ntype GossipSubRouter\nfunc DefaultGossipSubRouter(h host.Host) *GossipSubRouter\nfunc (gs *GossipSubRouter) AcceptFrom(p peer.ID) AcceptStatus\nfunc (gs *GossipSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (gs *GossipSubRouter) Attach(p *PubSub)\nfunc (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (gs *GossipSubRouter) HandleRPC(rpc *RPC)\nfunc (gs *GossipSubRouter) Join(topic string)\nfunc (gs *GossipSubRouter) Leave(topic string)\nfunc (gs *GossipSubRouter) Protocols() []protocol.ID\nfunc (gs *GossipSubRouter) Publish(msg *Message)\nfunc (gs *GossipSubRouter) RemovePeer(p peer.ID)\nfunc (gs *GossipSubRouter) WithDefaultTagTracer() Option\ntype JSONTracer\nfunc NewJSONTracer(file string) (*JSONTracer, error)\nfunc OpenJSONTracer(file string, flags int, perm os.FileMode) (*JSONTracer, error)\nfunc (t *JSONTracer) Close()\nfunc (t *JSONTracer) Trace(evt *pb.TraceEvent)\ntype MapBlacklist\nfunc (b MapBlacklist) Add(p peer.ID) bool\nfunc (b MapBlacklist) Contains(p peer.ID) bool\ntype Message\nfunc (m *Message) GetFrom() peer.ID\ntype MessageCache\nfunc NewMessageCache(gossip, history int) *MessageCache\nfunc (mc *MessageCache) Get(mid string) (*Message, bool)\nfunc (mc *MessageCache) GetForPeer(mid string, p peer.ID) (*Message, int, bool)\nfunc (mc *MessageCache) GetGossipIDs(topic string) []string\nfunc (mc *MessageCache) Put(msg *Message)\nfunc (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string)\nfunc (mc *MessageCache) Shift()\ntype MessageSignaturePolicy\ntype MsgIdFunction\ntype Option\nfunc WithAppSpecificRpcInspector(inspector func(peer.ID, *RPC) error) Option\nfunc WithBlacklist(b Blacklist) Option\nfunc WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option\nfunc WithDirectConnectTicks(t uint64) Option\nfunc WithDirectPeers(pis []peer.AddrInfo) Option\nfunc WithDiscovery(d discovery.Discovery, opts ...DiscoverOpt) Option\nfunc WithEventTracer(tracer EventTracer) Option\nfunc WithFloodPublish(floodPublish bool) Option\nfunc WithGossipSubParams(cfg GossipSubParams) Option\nfunc WithGossipSubProtocols(protos []protocol.ID, feature GossipSubFeatureTest) Option\nfunc WithMaxMessageSize(maxMessageSize int) Option\nfunc WithMessageAuthor(author peer.ID) Option\nfunc WithMessageIdFn(fn MsgIdFunction) Option\nfunc WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option\nfunc WithMessageSigning(enabled bool) Option\nfunc WithNoAuthor() Option\nfunc WithPeerExchange(doPX bool) Option\nfunc WithPeerFilter(filter PeerFilter) Option\nfunc WithPeerGater(params *PeerGaterParams) Option\nfunc WithPeerOutboundQueueSize(size int) Option\nfunc WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option\nfunc WithPeerScoreInspect(inspect interface{}, period time.Duration) Option\nfunc WithProtocolMatchFn(m ProtocolMatchFn) Option\nfunc WithRawTracer(tracer RawTracer) Option\nfunc WithSeenMessagesStrategy(strategy timecache.Strategy) Option\nfunc WithSeenMessagesTTL(ttl time.Duration) Option\nfunc WithStrictSignatureVerification(required bool) Option\nfunc WithSubscriptionFilter(subFilter SubscriptionFilter) Option\nfunc WithValidateQueueSize(n int) Option\nfunc WithValidateThrottle(n int) Option\nfunc WithValidateWorkers(n int) Option\ntype PBTracer\nfunc NewPBTracer(file string) (*PBTracer, error)\nfunc OpenPBTracer(file string, flags int, perm os.FileMode) (*PBTracer, error)\nfunc (t *PBTracer) Close()\nfunc (t *PBTracer) Trace(evt *pb.TraceEvent)\ntype PeerEvent\ntype PeerFilter\ntype PeerGaterParams\nfunc DefaultPeerGaterParams() *PeerGaterParams\nfunc NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams\nfunc (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams\ntype PeerMetadataStore\ntype PeerScoreInspectFn\ntype PeerScoreParams\ntype PeerScoreSnapshot\ntype PeerScoreThresholds\ntype ProtocolMatchFn\ntype ProvideKey\ntype PubOpt\nfunc WithLocalPublication(local bool) PubOpt\nfunc WithReadiness(ready RouterReady) PubOpt\nfunc WithSecretKeyAndPeerId(key crypto.PrivKey, pid peer.ID) PubOpt\ntype PubSub\nfunc NewFloodSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nfunc NewFloodsubWithProtocols(ctx context.Context, h host.Host, ps []protocol.ID, opts ...Option) (*PubSub, error)\nfunc NewGossipSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nfunc NewGossipSubWithRouter(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nfunc NewPubSub(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nfunc NewRandomSub(ctx context.Context, h host.Host, size int, opts ...Option) (*PubSub, error)\nfunc (p *PubSub) BlacklistPeer(pid peer.ID)\nfunc (p *PubSub) GetTopics() []string\nfunc (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error)\nfunc (p *PubSub) ListPeers(topic string) []peer.ID\nfunc (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) errordeprecated\nfunc (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error\nfunc (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)deprecated\nfunc (p *PubSub) UnregisterTopicValidator(topic string) error\ntype PubSubNotif\nfunc (p *PubSubNotif) ClosedStream(n network.Network, s network.Stream)\nfunc (p *PubSubNotif) Connected(n network.Network, c network.Conn)\nfunc (p *PubSubNotif) Disconnected(n network.Network, c network.Conn)\nfunc (p *PubSubNotif) Initialize()\nfunc (p *PubSubNotif) Listen(n network.Network, _ ma.Multiaddr)\nfunc (p *PubSubNotif) ListenClose(n network.Network, _ ma.Multiaddr)\nfunc (p *PubSubNotif) OpenedStream(n network.Network, s network.Stream)\ntype PubSubRouter\ntype PublishOptions\ntype RPC\ntype RandomSubRouter\nfunc (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (rs *RandomSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (rs *RandomSubRouter) Attach(p *PubSub)\nfunc (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (rs *RandomSubRouter) HandleRPC(rpc *RPC)\nfunc (rs *RandomSubRouter) Join(topic string)\nfunc (rs *RandomSubRouter) Leave(topic string)\nfunc (rs *RandomSubRouter) Protocols() []protocol.ID\nfunc (rs *RandomSubRouter) Publish(msg *Message)\nfunc (rs *RandomSubRouter) RemovePeer(p peer.ID)\ntype RawTracer\ntype RelayCancelFunc\ntype RemoteTracer\nfunc NewRemoteTracer(ctx context.Context, host host.Host, pi peer.AddrInfo) (*RemoteTracer, error)\nfunc (t *RemoteTracer) Close()\nfunc (t *RemoteTracer) Trace(evt *pb.TraceEvent)\ntype RouterReady\nfunc MinTopicSize(size int) RouterReady\ntype SubOpt\nfunc WithBufferSize(size int) SubOpt\ntype Subscription\nfunc (sub *Subscription) Cancel()\nfunc (sub *Subscription) Next(ctx context.Context) (*Message, error)\nfunc (sub *Subscription) Topic() string\ntype SubscriptionFilter\nfunc NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter\nfunc NewRegexpSubscriptionFilter(rx *regexp.Regexp) SubscriptionFilter\nfunc WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter\ntype TimeCachedBlacklist\nfunc (b *TimeCachedBlacklist) Add(p peer.ID) bool\nfunc (b *TimeCachedBlacklist) Contains(p peer.ID) bool\ntype Topic\nfunc (t *Topic) Close() error\nfunc (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error)\nfunc (t *Topic) ListPeers() []peer.ID\nfunc (t *Topic) Publish(ctx context.Context, data []byte, opts ...PubOpt) error\nfunc (t *Topic) Relay() (RelayCancelFunc, error)\nfunc (t *Topic) SetScoreParams(p *TopicScoreParams) error\nfunc (t *Topic) String() string\nfunc (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error)\ntype TopicEventHandler\nfunc (t *TopicEventHandler) Cancel()\nfunc (t *TopicEventHandler) NextPeerEvent(ctx context.Context) (PeerEvent, error)\ntype TopicEventHandlerOpt\ntype TopicOpt\nfunc WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt\ntype TopicOptions\ntype TopicScoreParams\ntype TopicScoreSnapshot\ntype ValidationError\nfunc (e ValidationError) Error() string\ntype ValidationResult\ntype Validator\ntype ValidatorEx\nfunc NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx\ntype ValidatorOpt\nfunc WithValidatorConcurrency(n int) ValidatorOpt\nfunc WithValidatorInline(inline bool) ValidatorOpt\nfunc WithValidatorTimeout(timeout time.Duration) ValidatorOpt\nConstants ¶\nView Source\nconst (\nMinBackoffDelay\n= 100 * time.Millisecond\nMaxBackoffDelay\n= 10 * time.Second\nTimeToLive\n= 10 * time.Minute\nBackoffCleanupInterval = 1 * time.Minute\nBackoffMultiplier\n= 2\nMaxBackoffJitterCoff\n= 100\nMaxBackoffAttempts\n= 4\n)\nView Source\nconst (\nFloodSubID\n= protocol.ID(\"/floodsub/1.0.0\")\nFloodSubTopicSearchSize = 5\n)\nView Source\nconst (\n// GossipSubID_v10 is the protocol ID for version 1.0.0 of the GossipSub protocol.\n// It is advertised along with GossipSubID_v11 for backwards compatibility.\nGossipSubID_v10 = protocol.ID(\"/meshsub/1.0.0\")\n// GossipSubID_v11 is the protocol ID for version 1.1.0 of the GossipSub protocol.\n// See the spec for details about how v1.1.0 compares to v1.0.0:\n// https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\nGossipSubID_v11 = protocol.ID(\"/meshsub/1.1.0\")\n)\nView Source\nconst (\n// Protocol supports basic GossipSub Mesh -- gossipsub-v1.0 compatible\nGossipSubFeatureMesh = iota\n// Protocol supports Peer eXchange on prune -- gossipsub-v1.1 compatible\nGossipSubFeaturePX\n)\nView Source\nconst (\nDefaultDecayInterval = time.Second\nDefaultDecayToZero\n= 0.01\n)\nView Source\nconst (\n// StrictSign produces signatures and expects and verifies incoming signatures\nStrictSign = msgSigning | msgVerification\n// StrictNoSign does not produce signatures and drops and penalises incoming messages that carry one\nStrictNoSign = msgVerification\n// LaxSign produces signatures and validates incoming signatures iff one is present\n// Deprecated: it is recommend to either strictly enable, or strictly disable, signatures.\nLaxSign = msgSigning\n// LaxNoSign does not produce signatures and validates incoming signatures iff one is present\n// Deprecated: it is recommend to either strictly enable, or strictly disable, signatures.\nLaxNoSign = 0\n)\nView Source\nconst (\nRejectBlacklstedPeer\n= \"blacklisted peer\"\nRejectBlacklistedSource\n= \"blacklisted source\"\nRejectMissingSignature\n= \"missing signature\"\nRejectUnexpectedSignature = \"unexpected signature\"\nRejectUnexpectedAuthInfo\n= \"unexpected auth info\"\nRejectInvalidSignature\n= \"invalid signature\"\nRejectValidationQueueFull = \"validation queue full\"\nRejectValidationThrottled = \"validation throttled\"\nRejectValidationFailed\n= \"validation failed\"\nRejectValidationIgnored\n= \"validation ignored\"\nRejectSelfOrigin\n= \"self originated message\"\n)\nrejection reasons\nView Source\nconst (\n// ValidationAccept is a validation decision that indicates a valid message that should be accepted and\n// delivered to the application and forwarded to the network.\nValidationAccept = ValidationResult(0)\n// ValidationReject is a validation decision that indicates an invalid message that should not be\n// delivered to the application or forwarded to the application. Furthermore the peer that forwarded\n// the message should be penalized by peer scoring routers.\nValidationReject = ValidationResult(1)\n// ValidationIgnore is a validation decision that indicates a message that should be ignored: it will\n// be neither delivered to the application nor forwarded to the network. However, in contrast to\n// ValidationReject, the peer that forwarded the message must not be penalized by peer scoring routers.\nValidationIgnore = ValidationResult(2)\n)\nView Source\nconst DefaultMaxMessageSize = 1 << 20\nDefaultMaximumMessageSize is 1mb.\nView Source\nconst (\nRandomSubID = protocol.ID(\"/randomsub/1.0.0\")\n)\nView Source\nconst RemoteTracerProtoID = protocol.ID(\"/libp2p/pubsub/tracer/1.0.0\")\nView Source\nconst SignPrefix = \"libp2p-pubsub:\"\nVariables ¶\nView Source\nvar (\n// DiscoveryPollInitialDelay is how long the discovery system waits after it first starts before polling\nDiscoveryPollInitialDelay = 0 * time.Millisecond\n// DiscoveryPollInterval is approximately how long the discovery system waits in between checks for whether the\n// more peers are needed for any topic\nDiscoveryPollInterval = 1 * time.Second\n)\nView Source\nvar (\nGossipSubD\n= 6\nGossipSubDlo\n= 5\nGossipSubDhi\n= 12\nGossipSubDscore\n= 4\nGossipSubDout\n= 2\nGossipSubHistoryLength\n= 5\nGossipSubHistoryGossip\n= 3\nGossipSubDlazy\n= 6\nGossipSubGossipFactor\n= 0.25\nGossipSubGossipRetransmission\n= 3\nGossipSubHeartbeatInitialDelay\n= 100 * time.Millisecond\nGossipSubHeartbeatInterval\n= 1 * time.Second\nGossipSubFanoutTTL\n= 60 * time.Second\nGossipSubPrunePeers\n= 16\nGossipSubPruneBackoff\n= time.Minute\nGossipSubUnsubscribeBackoff\n= 10 * time.Second\nGossipSubConnectors\n= 8\nGossipSubMaxPendingConnections\n= 128\nGossipSubConnectionTimeout\n= 30 * time.Second\nGossipSubDirectConnectTicks\nuint64 = 300\nGossipSubDirectConnectInitialDelay\n= time.Second\nGossipSubOpportunisticGraftTicks\nuint64 = 60\nGossipSubOpportunisticGraftPeers\n= 2\nGossipSubGraftFloodThreshold\n= 10 * time.Second\nGossipSubMaxIHaveLength\n= 5000\nGossipSubMaxIHaveMessages\n= 10\nGossipSubIWantFollowupTime\n= 3 * time.Second\n)\nDefines the default gossipsub parameters.\nView Source\nvar (\nDefaultPeerGaterRetainStats\n= 6 * time.Hour\nDefaultPeerGaterQuiet\n= time.Minute\nDefaultPeerGaterDuplicateWeight = 0.125\nDefaultPeerGaterIgnoreWeight\n= 1.0\nDefaultPeerGaterRejectWeight\n= 16.0\nDefaultPeerGaterThreshold\n= 0.33\nDefaultPeerGaterGlobalDecay\n= ScoreParameterDecay(2 * time.Minute)\nDefaultPeerGaterSourceDecay\n= ScoreParameterDecay(time.Hour)\n)\nView Source\nvar (\n// TimeCacheDuration specifies how long a message ID will be remembered as seen.\n// Use WithSeenMessagesTTL to configure this per pubsub instance, instead of overriding the global default.\nTimeCacheDuration = 120 * time.Second\n// TimeCacheStrategy specifies which type of lookup/cleanup strategy is used by the seen messages cache.\n// Use WithSeenMessagesStrategy to configure this per pubsub instance, instead of overriding the global default.\nTimeCacheStrategy = timecache.Strategy_FirstSeen\n// ErrSubscriptionCancelled may be returned when a subscription Next() is called after the\n// subscription has been cancelled.\nErrSubscriptionCancelled = errors.New(\"subscription cancelled\")\n)\nView Source\nvar (\n// GossipSubConnTagBumpMessageDelivery is the amount to add to the connection manager\n// tag that tracks message deliveries. Each time a peer is the first to deliver a\n// message within a topic, we \"bump\" a tag by this amount, up to a maximum\n// of GossipSubConnTagMessageDeliveryCap.\n// Note that the delivery tags decay over time, decreasing by GossipSubConnTagDecayAmount\n// at every GossipSubConnTagDecayInterval.\nGossipSubConnTagBumpMessageDelivery = 1\n// GossipSubConnTagDecayInterval is the decay interval for decaying connection manager tags.\nGossipSubConnTagDecayInterval = 10 * time.Minute\n// GossipSubConnTagDecayAmount is subtracted from decaying tag values at each decay interval.\nGossipSubConnTagDecayAmount = 1\n// GossipSubConnTagMessageDeliveryCap is the maximum value for the connection manager tags that\n// track message deliveries.\nGossipSubConnTagMessageDeliveryCap = 15\n)\nView Source\nvar ErrEmptyPeerID = errors.New(\"empty peer ID\")\nErrEmptyPeerID is returned if an empty peer ID was provided\nView Source\nvar ErrNilSignKey = errors.New(\"nil sign key\")\nErrNilSignKey is returned if a nil private key was provided\nView Source\nvar ErrTooManySubscriptions = errors.New(\"too many subscriptions\")\nErrTooManySubscriptions may be returned by a SubscriptionFilter to signal that there are too many\nsubscriptions to process.\nView Source\nvar ErrTopicClosed = errors.New(\"this Topic is closed, try opening a new one\")\nErrTopicClosed is returned if a Topic is utilized after it has been closed\nView Source\nvar GossipSubDefaultProtocols = []protocol.ID{GossipSubID_v11, GossipSubID_v10, FloodSubID}\nGossipSubDefaultProtocols is the default gossipsub router protocol list\nView Source\nvar MinTraceBatchSize = 16\nView Source\nvar (\nRandomSubD = 6\n)\nView Source\nvar TraceBufferSize = 1 << 16 // 64K ought to be enough for everyone; famous last words.\nFunctions ¶\nfunc DefaultMsgIdFn ¶\nadded in\nv0.2.5\nfunc DefaultMsgIdFn(pmsg *pb.Message) string\nDefaultMsgIdFn returns a unique ID of the passed Message\nfunc DefaultPeerFilter ¶\nadded in\nv0.5.5\nfunc DefaultPeerFilter(pid peer.ID, topic string) bool\nDefaultPeerFilter accepts all peers on all topics\nfunc FilterSubscriptions ¶\nadded in\nv0.3.6\nfunc FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts\nFilterSubscriptions filters (and deduplicates) a list of subscriptions.\nfilter should return true if a topic is of interest.\nfunc GossipSubDefaultFeatures ¶\nadded in\nv0.5.0\nfunc GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol.ID) bool\nGossipSubDefaultFeatures is the feature test function for the default gossipsub protocols\nfunc ScoreParameterDecay ¶\nadded in\nv0.3.0\nfunc ScoreParameterDecay(decay time.Duration) float64\nScoreParameterDecay computes the decay factor for a parameter, assuming the DecayInterval is 1s\nand that the value decays to zero if it drops below 0.01\nfunc ScoreParameterDecayWithBase ¶\nadded in\nv0.3.0\nfunc ScoreParameterDecayWithBase(decay time.Duration, base time.Duration, decayToZero float64) float64\nScoreParameterDecayWithBase computes the decay factor for a parameter using base as the DecayInterval\nTypes ¶\ntype AcceptStatus ¶\nadded in\nv0.3.6\ntype AcceptStatus int\nconst (\n// AcceptNone signals to drop the incoming RPC\nAcceptNone AcceptStatus = iota\n// AcceptControl signals to accept the incoming RPC only for control message processing by\n// the router. Included payload messages will _not_ be pushed to the validation queue.\nAcceptControl\n// AcceptAll signals to accept the incoming RPC for full processing\nAcceptAll\n)\ntype BackoffConnectorFactory ¶\nadded in\nv0.2.0\ntype BackoffConnectorFactory func(host host.Host) (*discimpl.BackoffConnector, error)\nBackoffConnectorFactory creates a BackoffConnector that is attached to a given host\ntype BasicSeqnoValidator ¶\nadded in\nv0.9.2\ntype BasicSeqnoValidator struct {\n// contains filtered or unexported fields\n}\nBasicSeqnoValidator is a basic validator, usable as a default validator, that ignores replayed\nmessages outside the seen cache window. The validator uses the message seqno as a peer-specific\nnonce to decide whether the message should be propagated, comparing to the maximal nonce store\nin the peer metadata store. This is useful to ensure that there can be no infinitely propagating\nmessages in the network regardless of the seen cache span and network diameter.\nIt requires that pubsub is instantiated with a strict message signing policy and that seqnos\nare not disabled, ie it doesn't support anonymous mode.\nWarning: See https://github.com/libp2p/rust-libp2p/issues/3453\nTL;DR: rust is currently violating the spec by issuing a random seqno, which creates an\ninteroperability hazard. We expect this issue to be addressed in the not so distant future,\nbut keep this in mind if you are in a mixed environment with (older) rust nodes.\ntype Blacklist ¶\ntype Blacklist interface {\nAdd(peer.ID) bool\nContains(peer.ID) bool\n}\nBlacklist is an interface for peer blacklisting.\nfunc NewMapBlacklist ¶\nfunc NewMapBlacklist() Blacklist\nNewMapBlacklist creates a new MapBlacklist\nfunc NewTimeCachedBlacklist ¶\nadded in\nv0.2.6\nfunc NewTimeCachedBlacklist(expiry time.Duration) (Blacklist, error)\nNewTimeCachedBlacklist creates a new TimeCachedBlacklist with the given expiry duration\ntype CacheEntry ¶\ntype CacheEntry struct {\n// contains filtered or unexported fields\n}\ntype DiscoverOpt ¶\nadded in\nv0.2.0\ntype DiscoverOpt func(*discoverOptions) error\nfunc WithDiscoverConnector ¶\nadded in\nv0.2.0\nfunc WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt\nWithDiscoverConnector adds a custom connector that deals with how the discovery subsystem connects to peers\nfunc WithDiscoveryOpts ¶\nadded in\nv0.2.0\nfunc WithDiscoveryOpts(opts ...discovery.Option) DiscoverOpt\nWithDiscoveryOpts passes libp2p Discovery options into the PubSub discovery subsystem\ntype EventTracer ¶\nadded in\nv0.2.3\ntype EventTracer interface {\nTrace(evt *pb.TraceEvent)\n}\nEventTracer is a generic event tracer interface.\nThis is a high level tracing interface which delivers tracing events, as defined by the protobuf\nschema in pb/trace.proto.\ntype EventType ¶\nadded in\nv0.1.1\ntype EventType int\nconst (\nPeerJoin EventType = iota\nPeerLeave\n)\ntype ExtendedPeerScoreInspectFn ¶\nadded in\nv0.3.3\ntype ExtendedPeerScoreInspectFn = func(map[peer.ID]*PeerScoreSnapshot)\ntype FloodSubRouter ¶\ntype FloodSubRouter struct {\n// contains filtered or unexported fields\n}\nfunc (*FloodSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (*FloodSubRouter) AddPeer ¶\nfunc (fs *FloodSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*FloodSubRouter) Attach ¶\nfunc (fs *FloodSubRouter) Attach(p *PubSub)\nfunc (*FloodSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*FloodSubRouter) HandleRPC ¶\nfunc (fs *FloodSubRouter) HandleRPC(rpc *RPC)\nfunc (*FloodSubRouter) Join ¶\nfunc (fs *FloodSubRouter) Join(topic string)\nfunc (*FloodSubRouter) Leave ¶\nfunc (fs *FloodSubRouter) Leave(topic string)\nfunc (*FloodSubRouter) Protocols ¶\nfunc (fs *FloodSubRouter) Protocols() []protocol.ID\nfunc (*FloodSubRouter) Publish ¶\nfunc (fs *FloodSubRouter) Publish(msg *Message)\nfunc (*FloodSubRouter) RemovePeer ¶\nfunc (fs *FloodSubRouter) RemovePeer(p peer.ID)\ntype GossipSubFeature ¶\nadded in\nv0.5.0\ntype GossipSubFeature int\nGossipSubFeature is a feature discriminant enum\ntype GossipSubFeatureTest ¶\nadded in\nv0.5.0\ntype GossipSubFeatureTest = func(GossipSubFeature, protocol.ID) bool\nGossipSubFeatureTest is a feature test function; it takes a feature and a protocol ID and\nshould return true if the feature is supported by the protocol\ntype GossipSubParams ¶\nadded in\nv0.5.0\ntype GossipSubParams struct {\n// D sets the optimal degree for a GossipSub topic mesh. For example, if D == 6,\n// each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n// D should be set somewhere between Dlo and Dhi.\nD int\n// Dlo sets the lower bound on the number of peers we keep in a GossipSub topic mesh.\n// If we have fewer than Dlo peers, we will attempt to graft some more into the mesh at\n// the next heartbeat.\nDlo int\n// Dhi sets the upper bound on the number of peers we keep in a GossipSub topic mesh.\n// If we have more than Dhi peers, we will select some to prune from the mesh at the next heartbeat.\nDhi int\n// Dscore affects how peers are selected when pruning a mesh due to over subscription.\n// At least Dscore of the retained peers will be high-scoring, while the remainder are\n// chosen randomly.\nDscore int\n// Dout sets the quota for the number of outbound connections to maintain in a topic mesh.\n// When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n// to at least Dout of the survivor peers. This prevents sybil attackers from overwhelming\n// our mesh with incoming connections.\n//\n// Dout must be set below Dlo, and must not exceed D / 2.\nDout int\n// HistoryLength controls the size of the message cache used for gossip.\n// The message cache will remember messages for HistoryLength heartbeats.\nHistoryLength int\n// HistoryGossip controls how many cached message ids we will advertise in\n// IHAVE gossip messages. When asked for our seen message IDs, we will return\n// only those from the most recent HistoryGossip heartbeats. The slack between\n// HistoryGossip and HistoryLength allows us to avoid advertising messages\n// that will be expired by the time they're requested.\n//\n// HistoryGossip must be less than or equal to HistoryLength to\n// avoid a runtime panic.\nHistoryGossip int\n// Dlazy affects how many peers we will emit gossip to at each heartbeat.\n// We will send gossip to at least Dlazy peers outside our mesh. The actual\n// number may be more, depending on GossipFactor and how many peers we're\n// connected to.\nDlazy int\n// GossipFactor affects how many peers we will emit gossip to at each heartbeat.\n// We will send gossip to GossipFactor * (total number of non-mesh peers), or\n// Dlazy, whichever is greater.\nGossipFactor float64\n// GossipRetransmission controls how many times we will allow a peer to request\n// the same message id through IWANT gossip before we start ignoring them. This is designed\n// to prevent peers from spamming us with requests and wasting our resources.\nGossipRetransmission int\n// HeartbeatInitialDelay is the short delay before the heartbeat timer begins\n// after the router is initialized.\nHeartbeatInitialDelay time.Duration\n// HeartbeatInterval controls the time between heartbeats.\nHeartbeatInterval time.Duration\n// SlowHeartbeatWarning is the duration threshold for heartbeat processing before emitting\n// a warning; this would be indicative of an overloaded peer.\nSlowHeartbeatWarning float64\n// FanoutTTL controls how long we keep track of the fanout state. If it's been\n// FanoutTTL since we've published to a topic that we're not subscribed to,\n// we'll delete the fanout map for that topic.\nFanoutTTL time.Duration\n// PrunePeers controls the number of peers to include in prune Peer eXchange.\n// When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n// send them signed peer records for up to PrunePeers other peers that we\n// know of.\nPrunePeers int\n// PruneBackoff controls the backoff time for pruned peers. This is how long\n// a peer must wait before attempting to graft into our mesh again after being pruned.\n// When pruning a peer, we send them our value of PruneBackoff so they know\n// the minimum time to wait. Peers running older versions may not send a backoff time,\n// so if we receive a prune message without one, we will wait at least PruneBackoff\n// before attempting to re-graft.\nPruneBackoff time.Duration\n// UnsubscribeBackoff controls the backoff time to use when unsuscribing\n// from a topic. A peer should not resubscribe to this topic before this\n// duration.\nUnsubscribeBackoff time.Duration\n// Connectors controls the number of active connection attempts for peers obtained through PX.\nConnectors int\n// MaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\nMaxPendingConnections int\n// ConnectionTimeout controls the timeout for connection attempts.\nConnectionTimeout time.Duration\n// DirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n// that are not currently connected.\nDirectConnectTicks uint64\n// DirectConnectInitialDelay is the initial delay before opening connections to direct peers\nDirectConnectInitialDelay time.Duration\n// OpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n// with opportunistic grafting. Every OpportunisticGraftTicks we will attempt to select some\n// high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n// below a threshold (see https://godoc.org/github.com/libp2p/go-libp2p-pubsub#PeerScoreThresholds).\nOpportunisticGraftTicks uint64\n// OpportunisticGraftPeers is the number of peers to opportunistically graft.\nOpportunisticGraftPeers int\n// If a GRAFT comes before GraftFloodThreshold has elapsed since the last PRUNE,\n// then there is an extra score penalty applied to the peer through P7.\nGraftFloodThreshold time.Duration\n// MaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n// Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n// peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n// default if your system is pushing more than 5000 messages in HistoryGossip heartbeats;\n// with the defaults this is 1666 messages/s.\nMaxIHaveLength int\n// MaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\nMaxIHaveMessages int\n// Time to wait for a message requested through IWANT following an IHAVE advertisement.\n// If the message is not received within this window, a broken promise is declared and\n// the router may apply bahavioural penalties.\nIWantFollowupTime time.Duration\n}\nGossipSubParams defines all the gossipsub specific parameters.\nfunc DefaultGossipSubParams ¶\nadded in\nv0.5.0\nfunc DefaultGossipSubParams() GossipSubParams\nDefaultGossipSubParams returns the default gossip sub parameters\nas a config.\ntype GossipSubRouter ¶\ntype GossipSubRouter struct {\n// contains filtered or unexported fields\n}\nGossipSubRouter is a router that implements the gossipsub protocol.\nFor each topic we have joined, we maintain an overlay through which\nmessages flow; this is the mesh map.\nFor each topic we publish to without joining, we maintain a list of peers\nto use for injecting our messages in the overlay with stable routes; this\nis the fanout map. Fanout peer lists are expired if we don't publish any\nmessages to their topic for GossipSubFanoutTTL.\nfunc DefaultGossipSubRouter ¶\nadded in\nv0.8.2\nfunc DefaultGossipSubRouter(h host.Host) *GossipSubRouter\nDefaultGossipSubRouter returns a new GossipSubRouter with default parameters.\nfunc (*GossipSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (gs *GossipSubRouter) AcceptFrom(p peer.ID) AcceptStatus\nfunc (*GossipSubRouter) AddPeer ¶\nfunc (gs *GossipSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*GossipSubRouter) Attach ¶\nfunc (gs *GossipSubRouter) Attach(p *PubSub)\nfunc (*GossipSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*GossipSubRouter) HandleRPC ¶\nfunc (gs *GossipSubRouter) HandleRPC(rpc *RPC)\nfunc (*GossipSubRouter) Join ¶\nfunc (gs *GossipSubRouter) Join(topic string)\nfunc (*GossipSubRouter) Leave ¶\nfunc (gs *GossipSubRouter) Leave(topic string)\nfunc (*GossipSubRouter) Protocols ¶\nfunc (gs *GossipSubRouter) Protocols() []protocol.ID\nfunc (*GossipSubRouter) Publish ¶\nfunc (gs *GossipSubRouter) Publish(msg *Message)\nfunc (*GossipSubRouter) RemovePeer ¶\nfunc (gs *GossipSubRouter) RemovePeer(p peer.ID)\nfunc (*GossipSubRouter) WithDefaultTagTracer ¶\nadded in\nv0.8.2\nfunc (gs *GossipSubRouter) WithDefaultTagTracer() Option\nWithDefaultTagTracer returns the tag tracer of the GossipSubRouter as a PubSub option.\nThis is useful for cases where the GossipSubRouter is instantiated externally, and is\ninjected into the GossipSub constructor as a dependency. This allows the tag tracer to be\nalso injected into the GossipSub constructor as a PubSub option dependency.\ntype JSONTracer ¶\nadded in\nv0.2.3\ntype JSONTracer struct {\n// contains filtered or unexported fields\n}\nJSONTracer is a tracer that writes events to a file, encoded in ndjson.\nfunc NewJSONTracer ¶\nadded in\nv0.2.3\nfunc NewJSONTracer(file string) (*JSONTracer, error)\nNewJsonTracer creates a new JSONTracer writing traces to file.\nfunc OpenJSONTracer ¶\nadded in\nv0.2.3\nfunc OpenJSONTracer(file string, flags int, perm os.FileMode) (*JSONTracer, error)\nOpenJSONTracer creates a new JSONTracer, with explicit control of OpenFile flags and permissions.\nfunc (*JSONTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *JSONTracer) Close()\nfunc (*JSONTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *JSONTracer) Trace(evt *pb.TraceEvent)\ntype MapBlacklist ¶\ntype MapBlacklist map[peer.ID]struct{}\nMapBlacklist is a blacklist implementation using a perfect map\nfunc (MapBlacklist) Add ¶\nfunc (b MapBlacklist) Add(p peer.ID) bool\nfunc (MapBlacklist) Contains ¶\nfunc (b MapBlacklist) Contains(p peer.ID) bool\ntype Message ¶\ntype Message struct {\n*pb.Message\nID\nstring\nReceivedFrom\npeer.ID\nValidatorData interface{}\nLocal\nbool\n}\nfunc (*Message) GetFrom ¶\nfunc (m *Message) GetFrom() peer.ID\ntype MessageCache ¶\ntype MessageCache struct {\n// contains filtered or unexported fields\n}\nfunc NewMessageCache ¶\nfunc NewMessageCache(gossip, history int) *MessageCache\nNewMessageCache creates a sliding window cache that remembers messages for as\nlong as `history` slots.\nWhen queried for messages to advertise, the cache only returns messages in\nthe last `gossip` slots.\nThe `gossip` parameter must be smaller or equal to `history`, or this\nfunction will panic.\nThe slack between `gossip` and `history` accounts for the reaction time\nbetween when a message is advertised via IHAVE gossip, and the peer pulls it\nvia an IWANT command.\nfunc (*MessageCache) Get ¶\nfunc (mc *MessageCache) Get(mid string) (*Message, bool)\nfunc (*MessageCache) GetForPeer ¶\nadded in\nv0.3.0\nfunc (mc *MessageCache) GetForPeer(mid string, p peer.ID) (*Message, int, bool)\nfunc (*MessageCache) GetGossipIDs ¶\nfunc (mc *MessageCache) GetGossipIDs(topic string) []string\nfunc (*MessageCache) Put ¶\nfunc (mc *MessageCache) Put(msg *Message)\nfunc (*MessageCache) SetMsgIdFn ¶\nadded in\nv0.2.5\nfunc (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string)\nfunc (*MessageCache) Shift ¶\nfunc (mc *MessageCache) Shift()\ntype MessageSignaturePolicy ¶\nadded in\nv0.3.3\ntype MessageSignaturePolicy uint8\nMessageSignaturePolicy describes if signatures are produced, expected, and/or verified.\ntype MsgIdFunction ¶\nadded in\nv0.2.5\ntype MsgIdFunction func(pmsg *pb.Message) string\nMsgIdFunction returns a unique ID for the passed Message, and PubSub can be customized to use any\nimplementation of this function by configuring it with the Option from WithMessageIdFn.\ntype Option ¶\ntype Option func(*PubSub) error\nfunc WithAppSpecificRpcInspector ¶\nadded in\nv0.8.2\nfunc WithAppSpecificRpcInspector(inspector func(peer.ID, *RPC) error) Option\nWithAppSpecificRpcInspector sets a hook that inspect incomings RPCs prior to\nprocessing them.\nThe inspector is invoked on an accepted RPC just before it\nis handled.\nIf inspector's error is nil, the RPC is handled. Otherwise, it\nis dropped.\nfunc WithBlacklist ¶\nfunc WithBlacklist(b Blacklist) Option\nWithBlacklist provides an implementation of the blacklist; the default is a\nMapBlacklist\nfunc WithDefaultValidator ¶\nadded in\nv0.9.2\nfunc WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option\n/ Options\nWithDefaultValidator adds a validator that applies to all topics by default; it can be used\nmore than once and add multiple validators. Having a defult validator does not inhibit registering\na per topic validator.\nfunc WithDirectConnectTicks ¶\nadded in\nv0.3.2\nfunc WithDirectConnectTicks(t uint64) Option\nWithDirectConnectTicks is a gossipsub router option that sets the number of\nheartbeat ticks between attempting to reconnect direct peers that are not\ncurrently connected. A \"tick\" is based on the heartbeat interval, which is\n1s by default. The default value for direct connect ticks is 300.\nfunc WithDirectPeers ¶\nadded in\nv0.3.0\nfunc WithDirectPeers(pis []peer.AddrInfo) Option\nWithDirectPeers is a gossipsub router option that specifies peers with direct\npeering agreements. These peers are connected outside of the mesh, with all (valid)\nmessage unconditionally forwarded to them. The router will maintain open connections\nto these peers. Note that the peering agreement should be reciprocal with direct peers\nsymmetrically configured at both ends.\nfunc WithDiscovery ¶\nadded in\nv0.2.0\nfunc WithDiscovery(d discovery.Discovery, opts ...DiscoverOpt) Option\nWithDiscovery provides a discovery mechanism used to bootstrap and provide peers into PubSub\nfunc WithEventTracer ¶\nadded in\nv0.2.3\nfunc WithEventTracer(tracer EventTracer) Option\nWithEventTracer provides a tracer for the pubsub system\nfunc WithFloodPublish ¶\nadded in\nv0.3.0\nfunc WithFloodPublish(floodPublish bool) Option\nWithFloodPublish is a gossipsub router option that enables flood publishing.\nWhen this is enabled, published messages are forwarded to all peers with score >=\nto publishThreshold\nfunc WithGossipSubParams ¶\nadded in\nv0.5.0\nfunc WithGossipSubParams(cfg GossipSubParams) Option\nWithGossipSubParams is a gossip sub router option that allows a custom\nconfig to be set when instantiating the gossipsub router.\nfunc WithGossipSubProtocols ¶\nadded in\nv0.5.0\nfunc WithGossipSubProtocols(protos []protocol.ID, feature GossipSubFeatureTest) Option\nWithGossipSubProtocols is a gossipsub router option that configures a custom protocol list\nand feature test function\nfunc WithMaxMessageSize ¶\nadded in\nv0.3.0\nfunc WithMaxMessageSize(maxMessageSize int) Option\nWithMaxMessageSize sets the global maximum message size for pubsub wire\nmessages. The default value is 1MiB (DefaultMaxMessageSize).\nObserve the following warnings when setting this option.\nWARNING #1: Make sure to change the default protocol prefixes for floodsub\n(FloodSubID) and gossipsub (GossipSubID). This avoids accidentally joining\nthe public default network, which uses the default max message size, and\ntherefore will cause messages to be dropped.\nWARNING #2: Reducing the default max message limit is fine, if you are\ncertain that your application messages will not exceed the new limit.\nHowever, be wary of increasing the limit, as pubsub networks are naturally\nwrite-amplifying, i.e. for every message we receive, we send D copies of the\nmessage to our peers. If those messages are large, the bandwidth requirements\nwill grow linearly. Note that propagation is sent on the uplink, which\ntraditionally is more constrained than the downlink. Instead, consider\nout-of-band retrieval for large messages, by sending a CID (Content-ID) or\nanother type of locator, such that messages can be fetched on-demand, rather\nthan being pushed proactively. Under this design, you'd use the pubsub layer\nas a signalling system, rather than a data delivery system.\nfunc WithMessageAuthor ¶\nfunc WithMessageAuthor(author peer.ID) Option\nWithMessageAuthor sets the author for outbound messages to the given peer ID\n(defaults to the host's ID). If message signing is enabled, the private key\nmust be available in the host's peerstore.\nfunc WithMessageIdFn ¶\nadded in\nv0.2.5\nfunc WithMessageIdFn(fn MsgIdFunction) Option\nWithMessageIdFn is an option to customize the way a message ID is computed for a pubsub message.\nThe default ID function is DefaultMsgIdFn (concatenate source and seq nr.),\nbut it can be customized to e.g. the hash of the message.\nfunc WithMessageSignaturePolicy ¶\nadded in\nv0.3.3\nfunc WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option\nWithMessageSignaturePolicy sets the mode of operation for producing and verifying message signatures.\nfunc WithMessageSigning ¶\nfunc WithMessageSigning(enabled bool) Option\nWithMessageSigning enables or disables message signing (enabled by default).\nDeprecated: signature verification without message signing,\nor message signing without verification, are not recommended.\nfunc WithNoAuthor ¶\nadded in\nv0.3.3\nfunc WithNoAuthor() Option\nWithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures.\nNot recommended to use with the default message ID function, see WithMessageIdFn.\nfunc WithPeerExchange ¶\nadded in\nv0.3.0\nfunc WithPeerExchange(doPX bool) Option\nWithPeerExchange is a gossipsub router option that enables Peer eXchange on PRUNE.\nThis should generally be enabled in bootstrappers and well connected/trusted nodes\nused for bootstrapping.\nfunc WithPeerFilter ¶\nadded in\nv0.5.5\nfunc WithPeerFilter(filter PeerFilter) Option\nWithPeerFilter is an option to set a filter for pubsub peers.\nThe default peer filter is DefaultPeerFilter (which always returns true), but it can be customized\nto any custom implementation.\nfunc WithPeerGater ¶\nadded in\nv0.3.6\nfunc WithPeerGater(params *PeerGaterParams) Option\nWithPeerGater is a gossipsub router option that enables reactive validation queue\nmanagement.\nThe Gater is activated if the ratio of throttled/validated messages exceeds the specified\nthreshold.\nOnce active, the Gater probabilistically throttles peers _before_ they enter the validation\nqueue, performing Random Early Drop.\nThe throttle decision is randomized, with the probability of allowing messages to enter the\nvalidation queue controlled by the statistical observations of the performance of all peers\nin the IP address of the gated peer.\nThe Gater deactivates if there is no validation throttlinc occurring for the specified quiet\ninterval.\nfunc WithPeerOutboundQueueSize ¶\nadded in\nv0.2.2\nfunc WithPeerOutboundQueueSize(size int) Option\nWithPeerOutboundQueueSize is an option to set the buffer size for outbound messages to a peer\nWe start dropping messages to a peer if the outbound queue if full\nfunc WithPeerScore ¶\nadded in\nv0.3.0\nfunc WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option\nWithPeerScore is a gossipsub router option that enables peer scoring.\nfunc WithPeerScoreInspect ¶\nadded in\nv0.3.0\nfunc WithPeerScoreInspect(inspect interface{}, period time.Duration) Option\nWithPeerScoreInspect is a gossipsub router option that enables peer score debugging.\nWhen this option is enabled, the supplied function will be invoked periodically to allow\nthe application to inspect or dump the scores for connected peers.\nThe supplied function can have one of two signatures:\nPeerScoreInspectFn, which takes a map of peer IDs to score.\nExtendedPeerScoreInspectFn, which takes a map of peer IDs to\nPeerScoreSnapshots and allows inspection of individual score\ncomponents for debugging peer scoring.\nThis option must be passed _after_ the WithPeerScore option.\nfunc WithProtocolMatchFn ¶\nadded in\nv0.5.4\nfunc WithProtocolMatchFn(m ProtocolMatchFn) Option\nWithProtocolMatchFn sets a custom matching function for protocol selection to\nbe used by the protocol handler on the Host's Mux. Should be combined with\nWithGossipSubProtocols feature function for checking if certain protocol features\nare supported\nfunc WithRawTracer ¶\nadded in\nv0.5.0\nfunc WithRawTracer(tracer RawTracer) Option\nWithRawTracer adds a raw tracer to the pubsub system.\nMultiple tracers can be added using multiple invocations of the option.\nfunc WithSeenMessagesStrategy ¶\nadded in\nv0.8.3\nfunc WithSeenMessagesStrategy(strategy timecache.Strategy) Option\nWithSeenMessagesStrategy configures which type of lookup/cleanup strategy is used by the seen messages cache\nfunc WithSeenMessagesTTL ¶\nadded in\nv0.7.0\nfunc WithSeenMessagesTTL(ttl time.Duration) Option\nWithSeenMessagesTTL configures when a previously seen message ID can be forgotten about\nfunc WithStrictSignatureVerification ¶\nfunc WithStrictSignatureVerification(required bool) Option\nWithStrictSignatureVerification is an option to enable or disable strict message signing.\nWhen enabled (which is the default), unsigned messages will be discarded.\nDeprecated: signature verification without message signing,\nor message signing without verification, are not recommended.\nfunc WithSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc WithSubscriptionFilter(subFilter SubscriptionFilter) Option\nWithSubscriptionFilter is a pubsub option that specifies a filter for subscriptions\nin topics of interest.\nfunc WithValidateQueueSize ¶\nadded in\nv0.2.6\nfunc WithValidateQueueSize(n int) Option\nWithValidateQueueSize sets the buffer of validate queue. Defaults to 32.\nWhen queue is full, validation is throttled and new messages are dropped.\nfunc WithValidateThrottle ¶\nfunc WithValidateThrottle(n int) Option\nWithValidateThrottle sets the upper bound on the number of active validation\ngoroutines across all topics. The default is 8192.\nfunc WithValidateWorkers ¶\nadded in\nv0.0.3\nfunc WithValidateWorkers(n int) Option\nWithValidateWorkers sets the number of synchronous validation worker goroutines.\nDefaults to NumCPU.\nThe synchronous validation workers perform signature validation, apply inline\nuser validators, and schedule asynchronous user validators.\nYou can adjust this parameter to devote less cpu time to synchronous validation.\ntype PBTracer ¶\nadded in\nv0.2.3\ntype PBTracer struct {\n// contains filtered or unexported fields\n}\nPBTracer is a tracer that writes events to a file, as delimited protobufs.\nfunc NewPBTracer ¶\nadded in\nv0.2.3\nfunc NewPBTracer(file string) (*PBTracer, error)\nfunc OpenPBTracer ¶\nadded in\nv0.2.3\nfunc OpenPBTracer(file string, flags int, perm os.FileMode) (*PBTracer, error)\nOpenPBTracer creates a new PBTracer, with explicit control of OpenFile flags and permissions.\nfunc (*PBTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *PBTracer) Close()\nfunc (*PBTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *PBTracer) Trace(evt *pb.TraceEvent)\ntype PeerEvent ¶\nadded in\nv0.1.1\ntype PeerEvent struct {\nType EventType\nPeer peer.ID\n}\ntype PeerFilter ¶\nadded in\nv0.5.5\ntype PeerFilter func(pid peer.ID, topic string) bool\nPeerFilter is used to filter pubsub peers. It should return true for peers that are accepted for\na given topic. PubSub can be customized to use any implementation of this function by configuring\nit with the Option from WithPeerFilter.\ntype PeerGaterParams ¶\nadded in\nv0.3.6\ntype PeerGaterParams struct {\n// when the ratio of throttled/validated messages exceeds this threshold, the gater turns on\nThreshold float64\n// (linear) decay parameter for gater counters\nGlobalDecay float64 // global counter decay\nSourceDecay float64 // per IP counter decay\n// decay interval\nDecayInterval time.Duration\n// counter zeroing threshold\nDecayToZero float64\n// how long to retain stats\nRetainStats time.Duration\n// quiet interval before turning off the gater; if there are no validation throttle events\n// for this interval, the gater turns off\nQuiet time.Duration\n// weight of duplicate message deliveries\nDuplicateWeight float64\n// weight of ignored messages\nIgnoreWeight float64\n// weight of rejected messages\nRejectWeight float64\n// priority topic delivery weights\nTopicDeliveryWeights map[string]float64\n}\nPeerGaterParams groups together parameters that control the operation of the peer gater\nfunc DefaultPeerGaterParams ¶\nadded in\nv0.3.6\nfunc DefaultPeerGaterParams() *PeerGaterParams\nDefaultPeerGaterParams creates a new PeerGaterParams struct using default values\nfunc NewPeerGaterParams ¶\nadded in\nv0.3.6\nfunc NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams\nNewPeerGaterParams creates a new PeerGaterParams struct, using the specified threshold and decay\nparameters and default values for all other parameters.\nfunc (*PeerGaterParams) WithTopicDeliveryWeights ¶\nadded in\nv0.3.6\nfunc (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams\nWithTopicDeliveryWeights is a fluid setter for the priority topic delivery weights\ntype PeerMetadataStore ¶\nadded in\nv0.9.2\ntype PeerMetadataStore interface {\n// Get retrieves the metadata associated with a peer;\n// It should return nil if there is no metadata associated with the peer and not an error.\nGet(context.Context, peer.ID) ([]byte, error)\n// Put sets the metadata associated with a peer.\nPut(context.Context, peer.ID, []byte) error\n}\nPeerMetadataStore is an interface for storing and retrieving per peer metadata\ntype PeerScoreInspectFn ¶\nadded in\nv0.3.0\ntype PeerScoreInspectFn = func(map[peer.ID]float64)\ntype PeerScoreParams ¶\nadded in\nv0.3.0\ntype PeerScoreParams struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// Score parameters per topic.\nTopics map[string]*TopicScoreParams\n// Aggregate topic score cap; this limits the total contribution of topics towards a positive\n// score. It must be positive (or 0 for no cap).\nTopicScoreCap float64\n// P5: Application-specific peer scoring\nAppSpecificScore\nfunc(p peer.ID) float64\nAppSpecificWeight float64\n// P6: IP-colocation factor.\n// The parameter has an associated counter which counts the number of peers with the same IP.\n// If the number of peers in the same IP exceeds IPColocationFactorThreshold, then the value\n// is the square of the difference, ie (PeersInSameIP - IPColocationThreshold)^2.\n// If the number of peers in the same IP is less than the threshold, then the value is 0.\n// The weight of the parameter MUST be negative, unless you want to disable for testing.\n// Note: In order to simulate many IPs in a managable manner when testing, you can set the weight to 0\n//\nthus disabling the IP colocation penalty.\nIPColocationFactorWeight\nfloat64\nIPColocationFactorThreshold int\nIPColocationFactorWhitelist []*net.IPNet\n// P7: behavioural pattern penalties.\n// This parameter has an associated counter which tracks misbehaviour as detected by the\n// router. The router currently applies penalties for the following behaviors:\n// - attempting to re-graft before the prune backoff time has elapsed.\n// - not following up in IWANT requests for messages advertised with IHAVE.\n//\n// The value of the parameter is the square of the counter over the threshold, which decays with\n// BehaviourPenaltyDecay.\n// The weight of the parameter MUST be negative (or zero to disable).\nBehaviourPenaltyWeight, BehaviourPenaltyThreshold, BehaviourPenaltyDecay float64\n// the decay interval for parameter counters.\nDecayInterval time.Duration\n// counter value below which it is considered 0.\nDecayToZero float64\n// time to remember counters for a disconnected peer.\nRetainScore time.Duration\n// time to remember a message delivery for. Default to global TimeCacheDuration if 0.\nSeenMsgTTL time.Duration\n}\ntype PeerScoreSnapshot ¶\nadded in\nv0.3.3\ntype PeerScoreSnapshot struct {\nScore\nfloat64\nTopics\nmap[string]*TopicScoreSnapshot\nAppSpecificScore\nfloat64\nIPColocationFactor float64\nBehaviourPenalty\nfloat64\n}\ntype PeerScoreThresholds ¶\nadded in\nv0.3.0\ntype PeerScoreThresholds struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// GossipThreshold is the score threshold below which gossip propagation is suppressed;\n// should be negative.\nGossipThreshold float64\n// PublishThreshold is the score threshold below which we shouldn't publish when using flood\n// publishing (also applies to fanout and floodsub peers); should be negative and <= GossipThreshold.\nPublishThreshold float64\n// GraylistThreshold is the score threshold below which message processing is suppressed altogether,\n// implementing an effective gray list according to peer score; should be negative and <= PublishThreshold.\nGraylistThreshold float64\n// AcceptPXThreshold is the score threshold below which PX will be ignored; this should be positive\n// and limited to scores attainable by bootstrappers and other trusted nodes.\nAcceptPXThreshold float64\n// OpportunisticGraftThreshold is the median mesh score threshold before triggering opportunistic\n// grafting; this should have a small positive value.\nOpportunisticGraftThreshold float64\n}\ntype ProtocolMatchFn ¶\nadded in\nv0.5.4\ntype ProtocolMatchFn = func(protocol.ID) func(protocol.ID) bool\ntype ProvideKey ¶\nadded in\nv0.7.0\ntype ProvideKey func() (crypto.PrivKey, peer.ID)\nProvideKey is a function that provides a private key and its associated peer ID when publishing a new message\ntype PubOpt ¶\nadded in\nv0.2.0\ntype PubOpt func(pub *PublishOptions) error\nfunc WithLocalPublication ¶\nadded in\nv0.8.0\nfunc WithLocalPublication(local bool) PubOpt\nWithLocalPublication returns a publishing option to notify in-process subscribers only.\nIt prevents message publication to mesh peers.\nUseful in edge cases where the msg needs to be only delivered to the in-process subscribers,\ne.g. not to spam the network with outdated msgs.\nShould not be used specifically for in-process pubsubing.\nfunc WithReadiness ¶\nadded in\nv0.2.0\nfunc WithReadiness(ready RouterReady) PubOpt\nWithReadiness returns a publishing option for only publishing when the router is ready.\nThis option is not useful unless PubSub is also using WithDiscovery\nfunc WithSecretKeyAndPeerId ¶\nadded in\nv0.7.0\nfunc WithSecretKeyAndPeerId(key crypto.PrivKey, pid peer.ID) PubOpt\nWithSecretKeyAndPeerId returns a publishing option for providing a custom private key and its corresponding peer ID\nThis option is useful when we want to send messages from \"virtual\", never-connectable peers in the network\ntype PubSub ¶\ntype PubSub struct {\n// contains filtered or unexported fields\n}\nPubSub is the implementation of the pubsub system.\nfunc NewFloodSub ¶\nfunc NewFloodSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nNewFloodSub returns a new PubSub object using the FloodSubRouter.\nfunc NewFloodsubWithProtocols ¶\nfunc NewFloodsubWithProtocols(ctx context.Context, h host.Host, ps []protocol.ID, opts ...Option) (*PubSub, error)\nNewFloodsubWithProtocols returns a new floodsub-enabled PubSub objecting using the protocols specified in ps.\nfunc NewGossipSub ¶\nfunc NewGossipSub(ctx context.Context, h host.Host, opts ...Option) (*PubSub, error)\nNewGossipSub returns a new PubSub object using the default GossipSubRouter as the router.\nfunc NewGossipSubWithRouter ¶\nadded in\nv0.8.2\nfunc NewGossipSubWithRouter(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nNewGossipSubWithRouter returns a new PubSub object using the given router.\nfunc NewPubSub ¶\nfunc NewPubSub(ctx context.Context, h host.Host, rt PubSubRouter, opts ...Option) (*PubSub, error)\nNewPubSub returns a new PubSub management object.\nfunc NewRandomSub ¶\nfunc NewRandomSub(ctx context.Context, h host.Host, size int, opts ...Option) (*PubSub, error)\nNewRandomSub returns a new PubSub object using RandomSubRouter as the router.\nfunc (*PubSub) BlacklistPeer ¶\nfunc (p *PubSub) BlacklistPeer(pid peer.ID)\nBlacklistPeer blacklists a peer; all messages from this peer will be unconditionally dropped.\nfunc (*PubSub) GetTopics ¶\nfunc (p *PubSub) GetTopics() []string\nGetTopics returns the topics this node is subscribed to.\nfunc (*PubSub) Join ¶\nadded in\nv0.2.0\nfunc (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error)\nJoin joins the topic and returns a Topic handle. Only one Topic handle should exist per topic, and Join will error if\nthe Topic handle already exists.\nfunc (*PubSub) ListPeers ¶\nfunc (p *PubSub) ListPeers(topic string) []peer.ID\nListPeers returns a list of peers we are connected to in the given topic.\nfunc (*PubSub) Publish\ndeprecated\nfunc (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) error\nPublish publishes data to the given topic.\nDeprecated: use pubsub.Join() and topic.Publish() instead\nfunc (*PubSub) RegisterTopicValidator ¶\nfunc (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error\nRegisterTopicValidator registers a validator for topic.\nBy default validators are asynchronous, which means they will run in a separate goroutine.\nThe number of active goroutines is controlled by global and per topic validator\nthrottles; if it exceeds the throttle threshold, messages will be dropped.\nfunc (*PubSub) Subscribe\ndeprecated\nfunc (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)\nSubscribe returns a new Subscription for the given topic.\nNote that subscription is not an instantaneous operation. It may take some time\nbefore the subscription is processed by the pubsub main loop and propagated to our peers.\nDeprecated: use pubsub.Join() and topic.Subscribe() instead\nfunc (*PubSub) UnregisterTopicValidator ¶\nfunc (p *PubSub) UnregisterTopicValidator(topic string) error\nUnregisterTopicValidator removes a validator from a topic.\nReturns an error if there was no validator registered with the topic.\ntype PubSubNotif ¶\ntype PubSubNotif PubSub\nfunc (*PubSubNotif) ClosedStream ¶\nfunc (p *PubSubNotif) ClosedStream(n network.Network, s network.Stream)\nfunc (*PubSubNotif) Connected ¶\nfunc (p *PubSubNotif) Connected(n network.Network, c network.Conn)\nfunc (*PubSubNotif) Disconnected ¶\nfunc (p *PubSubNotif) Disconnected(n network.Network, c network.Conn)\nfunc (*PubSubNotif) Initialize ¶\nadded in\nv0.4.1\nfunc (p *PubSubNotif) Initialize()\nfunc (*PubSubNotif) Listen ¶\nfunc (p *PubSubNotif) Listen(n network.Network, _ ma.Multiaddr)\nfunc (*PubSubNotif) ListenClose ¶\nfunc (p *PubSubNotif) ListenClose(n network.Network, _ ma.Multiaddr)\nfunc (*PubSubNotif) OpenedStream ¶\nfunc (p *PubSubNotif) OpenedStream(n network.Network, s network.Stream)\ntype PubSubRouter ¶\ntype PubSubRouter interface {\n// Protocols returns the list of protocols supported by the router.\nProtocols() []protocol.ID\n// Attach is invoked by the PubSub constructor to attach the router to a\n// freshly initialized PubSub instance.\nAttach(*PubSub)\n// AddPeer notifies the router that a new peer has been connected.\nAddPeer(peer.ID, protocol.ID)\n// RemovePeer notifies the router that a peer has been disconnected.\nRemovePeer(peer.ID)\n// EnoughPeers returns whether the router needs more peers before it's ready to publish new records.\n// Suggested (if greater than 0) is a suggested number of peers that the router should need.\nEnoughPeers(topic string, suggested int) bool\n// AcceptFrom is invoked on any incoming message before pushing it to the validation pipeline\n// or processing control information.\n// Allows routers with internal scoring to vet peers before committing any processing resources\n// to the message and implement an effective graylist and react to validation queue overload.\nAcceptFrom(peer.ID) AcceptStatus\n// HandleRPC is invoked to process control messages in the RPC envelope.\n// It is invoked after subscriptions and payload messages have been processed.\nHandleRPC(*RPC)\n// Publish is invoked to forward a new message that has been validated.\nPublish(*Message)\n// Join notifies the router that we want to receive and forward messages in a topic.\n// It is invoked after the subscription announcement.\nJoin(topic string)\n// Leave notifies the router that we are no longer interested in a topic.\n// It is invoked after the unsubscription announcement.\nLeave(topic string)\n}\nPubSubRouter is the message router component of PubSub.\ntype PublishOptions ¶\nadded in\nv0.2.0\ntype PublishOptions struct {\n// contains filtered or unexported fields\n}\ntype RPC ¶\ntype RPC struct {\npb.RPC\n// contains filtered or unexported fields\n}\ntype RandomSubRouter ¶\ntype RandomSubRouter struct {\n// contains filtered or unexported fields\n}\nRandomSubRouter is a router that implements a random propagation strategy.\nFor each message, it selects the square root of the network size peers, with a min of RandomSubD,\nand forwards the message to them.\nfunc (*RandomSubRouter) AcceptFrom ¶\nadded in\nv0.3.0\nfunc (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus\nfunc (*RandomSubRouter) AddPeer ¶\nfunc (rs *RandomSubRouter) AddPeer(p peer.ID, proto protocol.ID)\nfunc (*RandomSubRouter) Attach ¶\nfunc (rs *RandomSubRouter) Attach(p *PubSub)\nfunc (*RandomSubRouter) EnoughPeers ¶\nadded in\nv0.2.0\nfunc (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool\nfunc (*RandomSubRouter) HandleRPC ¶\nfunc (rs *RandomSubRouter) HandleRPC(rpc *RPC)\nfunc (*RandomSubRouter) Join ¶\nfunc (rs *RandomSubRouter) Join(topic string)\nfunc (*RandomSubRouter) Leave ¶\nfunc (rs *RandomSubRouter) Leave(topic string)\nfunc (*RandomSubRouter) Protocols ¶\nfunc (rs *RandomSubRouter) Protocols() []protocol.ID\nfunc (*RandomSubRouter) Publish ¶\nfunc (rs *RandomSubRouter) Publish(msg *Message)\nfunc (*RandomSubRouter) RemovePeer ¶\nfunc (rs *RandomSubRouter) RemovePeer(p peer.ID)\ntype RawTracer ¶\nadded in\nv0.5.0\ntype RawTracer interface {\n// AddPeer is invoked when a new peer is added.\nAddPeer(p peer.ID, proto protocol.ID)\n// RemovePeer is invoked when a peer is removed.\nRemovePeer(p peer.ID)\n// Join is invoked when a new topic is joined\nJoin(topic string)\n// Leave is invoked when a topic is abandoned\nLeave(topic string)\n// Graft is invoked when a new peer is grafted on the mesh (gossipsub)\nGraft(p peer.ID, topic string)\n// Prune is invoked when a peer is pruned from the message (gossipsub)\nPrune(p peer.ID, topic string)\n// ValidateMessage is invoked when a message first enters the validation pipeline.\nValidateMessage(msg *Message)\n// DeliverMessage is invoked when a message is delivered\nDeliverMessage(msg *Message)\n// RejectMessage is invoked when a message is Rejected or Ignored.\n// The reason argument can be one of the named strings Reject*.\nRejectMessage(msg *Message, reason string)\n// DuplicateMessage is invoked when a duplicate message is dropped.\nDuplicateMessage(msg *Message)\n// ThrottlePeer is invoked when a peer is throttled by the peer gater.\nThrottlePeer(p peer.ID)\n// RecvRPC is invoked when an incoming RPC is received.\nRecvRPC(rpc *RPC)\n// SendRPC is invoked when a RPC is sent.\nSendRPC(rpc *RPC, p peer.ID)\n// DropRPC is invoked when an outbound RPC is dropped, typically because of a queue full.\nDropRPC(rpc *RPC, p peer.ID)\n// UndeliverableMessage is invoked when the consumer of Subscribe is not reading messages fast enough and\n// the pressure release mechanism trigger, dropping messages.\nUndeliverableMessage(msg *Message)\n}\nRawTracer is a low level tracing interface that allows an application to trace the internal\noperation of the pubsub subsystem.\nNote that the tracers are invoked synchronously, which means that application tracers must\ntake care to not block or modify arguments.\nWarning: this interface is not fixed, we may be adding new methods as necessitated by the system\nin the future.\ntype RelayCancelFunc ¶\nadded in\nv0.3.0\ntype RelayCancelFunc func()\ntype RemoteTracer ¶\nadded in\nv0.2.3\ntype RemoteTracer struct {\n// contains filtered or unexported fields\n}\nRemoteTracer is a tracer that sends trace events to a remote peer\nfunc NewRemoteTracer ¶\nadded in\nv0.2.3\nfunc NewRemoteTracer(ctx context.Context, host host.Host, pi peer.AddrInfo) (*RemoteTracer, error)\nNewRemoteTracer constructs a RemoteTracer, tracing to the peer identified by pi\nfunc (*RemoteTracer) Close ¶\nadded in\nv0.2.3\nfunc (t *RemoteTracer) Close()\nfunc (*RemoteTracer) Trace ¶\nadded in\nv0.2.3\nfunc (t *RemoteTracer) Trace(evt *pb.TraceEvent)\ntype RouterReady ¶\nadded in\nv0.2.0\ntype RouterReady func(rt PubSubRouter, topic string) (bool, error)\nRouterReady is a function that decides if a router is ready to publish\nfunc MinTopicSize ¶\nadded in\nv0.2.0\nfunc MinTopicSize(size int) RouterReady\nMinTopicSize returns a function that checks if a router is ready for publishing based on the topic size.\nThe router ultimately decides the whether it is ready or not, the given size is just a suggestion. Note\nthat the topic size does not include the router in the count.\ntype SubOpt ¶\ntype SubOpt func(sub *Subscription) error\nfunc WithBufferSize ¶\nadded in\nv0.5.0\nfunc WithBufferSize(size int) SubOpt\nWithBufferSize is a Subscribe option to customize the size of the subscribe output buffer.\nThe default length is 32 but it can be configured to avoid dropping messages if the consumer is not reading fast\nenough.\ntype Subscription ¶\ntype Subscription struct {\n// contains filtered or unexported fields\n}\nSubscription handles the details of a particular Topic subscription.\nThere may be many subscriptions for a given Topic.\nfunc (*Subscription) Cancel ¶\nfunc (sub *Subscription) Cancel()\nCancel closes the subscription. If this is the last active subscription then pubsub will send an unsubscribe\nannouncement to the network.\nfunc (*Subscription) Next ¶\nfunc (sub *Subscription) Next(ctx context.Context) (*Message, error)\nNext returns the next message in our subscription\nfunc (*Subscription) Topic ¶\nfunc (sub *Subscription) Topic() string\nTopic returns the topic string associated with the Subscription\ntype SubscriptionFilter ¶\nadded in\nv0.3.6\ntype SubscriptionFilter interface {\n// CanSubscribe returns true if the topic is of interest and we can subscribe to it\nCanSubscribe(topic string) bool\n// FilterIncomingSubscriptions is invoked for all RPCs containing subscription notifications.\n// It should filter only the subscriptions of interest and my return an error if (for instance)\n// there are too many subscriptions.\nFilterIncomingSubscriptions(peer.ID, []*pb.RPC_SubOpts) ([]*pb.RPC_SubOpts, error)\n}\nSubscriptionFilter is a function that tells us whether we are interested in allowing and tracking\nsubscriptions for a given topic.\nThe filter is consulted whenever a subscription notification is received by another peer; if the\nfilter returns false, then the notification is ignored.\nThe filter is also consulted when joining topics; if the filter returns false, then the Join\noperation will result in an error.\nfunc NewAllowlistSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter\nNewAllowlistSubscriptionFilter creates a subscription filter that only allows explicitly\nspecified topics for local subscriptions and incoming peer subscriptions.\nfunc NewRegexpSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc NewRegexpSubscriptionFilter(rx *regexp.Regexp) SubscriptionFilter\nNewRegexpSubscriptionFilter creates a subscription filter that only allows topics that\nmatch a regular expression for local subscriptions and incoming peer subscriptions.\nWarning: the user should take care to match start/end of string in the supplied regular\nexpression, otherwise the filter might match unwanted topics unexpectedly.\nfunc WrapLimitSubscriptionFilter ¶\nadded in\nv0.3.6\nfunc WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter\nWrapLimitSubscriptionFilter wraps a subscription filter with a hard limit in the number of\nsubscriptions allowed in an RPC message.\ntype TimeCachedBlacklist ¶\nadded in\nv0.2.6\ntype TimeCachedBlacklist struct {\n// contains filtered or unexported fields\n}\nTimeCachedBlacklist is a blacklist implementation using a time cache\nfunc (*TimeCachedBlacklist) Add ¶\nadded in\nv0.2.6\nfunc (b *TimeCachedBlacklist) Add(p peer.ID) bool\nAdd returns a bool saying whether Add of peer was successful\nfunc (*TimeCachedBlacklist) Contains ¶\nadded in\nv0.2.6\nfunc (b *TimeCachedBlacklist) Contains(p peer.ID) bool\ntype Topic ¶\nadded in\nv0.2.0\ntype Topic struct {\n// contains filtered or unexported fields\n}\nTopic is the handle for a pubsub topic\nfunc (*Topic) Close ¶\nadded in\nv0.2.0\nfunc (t *Topic) Close() error\nClose closes down the topic. Will return an error unless there are no active event handlers or subscriptions.\nDoes not error if the topic is already closed.\nfunc (*Topic) EventHandler ¶\nadded in\nv0.2.0\nfunc (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error)\nEventHandler creates a handle for topic specific events\nMultiple event handlers may be created and will operate independently of each other\nfunc (*Topic) ListPeers ¶\nadded in\nv0.2.0\nfunc (t *Topic) ListPeers() []peer.ID\nListPeers returns a list of peers we are connected to in the given topic.\nfunc (*Topic) Publish ¶\nadded in\nv0.2.0\nfunc (t *Topic) Publish(ctx context.Context, data []byte, opts ...PubOpt) error\nPublish publishes data to topic.\nfunc (*Topic) Relay ¶\nadded in\nv0.3.0\nfunc (t *Topic) Relay() (RelayCancelFunc, error)\nRelay enables message relaying for the topic and returns a reference\ncancel function. Subsequent calls increase the reference counter.\nTo completely disable the relay, all references must be cancelled.\nfunc (*Topic) SetScoreParams ¶\nadded in\nv0.3.6\nfunc (t *Topic) SetScoreParams(p *TopicScoreParams) error\nSetScoreParams sets the topic score parameters if the pubsub router supports peer\nscoring\nfunc (*Topic) String ¶\nadded in\nv0.3.5\nfunc (t *Topic) String() string\nString returns the topic associated with t\nfunc (*Topic) Subscribe ¶\nadded in\nv0.2.0\nfunc (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error)\nSubscribe returns a new Subscription for the topic.\nNote that subscription is not an instantaneous operation. It may take some time\nbefore the subscription is processed by the pubsub main loop and propagated to our peers.\ntype TopicEventHandler ¶\nadded in\nv0.2.0\ntype TopicEventHandler struct {\n// contains filtered or unexported fields\n}\nTopicEventHandler is used to manage topic specific events. No Subscription is required to receive events.\nfunc (*TopicEventHandler) Cancel ¶\nadded in\nv0.2.0\nfunc (t *TopicEventHandler) Cancel()\nCancel closes the topic event handler\nfunc (*TopicEventHandler) NextPeerEvent ¶\nadded in\nv0.2.0\nfunc (t *TopicEventHandler) NextPeerEvent(ctx context.Context) (PeerEvent, error)\nNextPeerEvent returns the next event regarding subscribed peers\nGuarantees: Peer Join and Peer Leave events for a given peer will fire in order.\nUnless a peer both Joins and Leaves before NextPeerEvent emits either event\nall events will eventually be received from NextPeerEvent.\ntype TopicEventHandlerOpt ¶\nadded in\nv0.2.0\ntype TopicEventHandlerOpt func(t *TopicEventHandler) error\ntype TopicOpt ¶\nadded in\nv0.2.0\ntype TopicOpt func(t *Topic) error\nfunc WithTopicMessageIdFn ¶\nadded in\nv0.7.0\nfunc WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt\nWithTopicMessageIdFn sets custom MsgIdFunction for a Topic, enabling topics to have own msg id generation rules.\ntype TopicOptions ¶\nadded in\nv0.2.0\ntype TopicOptions struct{}\ntype TopicScoreParams ¶\nadded in\nv0.3.0\ntype TopicScoreParams struct {\n// whether it is allowed to just set some params and not all of them.\nSkipAtomicValidation bool\n// The weight of the topic.\nTopicWeight float64\n// P1: time in the mesh\n// This is the time the peer has been grafted in the mesh.\n// The value of the parameter is the time/TimeInMeshQuantum, capped by TimeInMeshCap.\n// The weight of the parameter MUST be positive (or zero to disable).\nTimeInMeshWeight\nfloat64\nTimeInMeshQuantum time.Duration\nTimeInMeshCap\nfloat64\n// P2: first message deliveries\n// This is the number of message deliveries in the topic.\n// The value of the parameter is a counter, decaying with FirstMessageDeliveriesDecay, and capped\n// by FirstMessageDeliveriesCap.\n// The weight of the parameter MUST be positive (or zero to disable).\nFirstMessageDeliveriesWeight, FirstMessageDeliveriesDecay float64\nFirstMessageDeliveriesCap\nfloat64\n// P3: mesh message deliveries\n// This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of\n// message validation; deliveries during validation also count and are retroactively applied\n// when validation succeeds.\n// This window accounts for the minimum time before a hostile mesh peer trying to game the score\n// could replay back a valid message we just sent them.\n// It effectively tracks first and near-first deliveries, i.e., a message seen from a mesh peer\n// before we have forwarded it to them.\n// The parameter has an associated counter, decaying with MeshMessageDeliveriesDecay.\n// If the counter exceeds the threshold, its value is 0.\n// If the counter is below the MeshMessageDeliveriesThreshold, the value is the square of\n// the deficit, ie (MessageDeliveriesThreshold - counter)^2\n// The penalty is only activated after MeshMessageDeliveriesActivation time in the mesh.\n// The weight of the parameter MUST be negative (or zero to disable).\nMeshMessageDeliveriesWeight, MeshMessageDeliveriesDecay\nfloat64\nMeshMessageDeliveriesCap, MeshMessageDeliveriesThreshold\nfloat64\nMeshMessageDeliveriesWindow, MeshMessageDeliveriesActivation time.Duration\n// P3b: sticky mesh propagation failures\n// This is a sticky penalty that applies when a peer gets pruned from the mesh with an active\n// mesh message delivery penalty.\n// The weight of the parameter MUST be negative (or zero to disable)\nMeshFailurePenaltyWeight, MeshFailurePenaltyDecay float64\n// P4: invalid messages\n// This is the number of invalid messages in the topic.\n// The value of the parameter is the square of the counter, decaying with\n// InvalidMessageDeliveriesDecay.\n// The weight of the parameter MUST be negative (or zero to disable).\nInvalidMessageDeliveriesWeight, InvalidMessageDeliveriesDecay float64\n}\ntype TopicScoreSnapshot ¶\nadded in\nv0.3.3\ntype TopicScoreSnapshot struct {\nTimeInMesh\ntime.Duration\nFirstMessageDeliveries\nfloat64\nMeshMessageDeliveries\nfloat64\nInvalidMessageDeliveries float64\n}\ntype ValidationError ¶\nadded in\nv0.5.0\ntype ValidationError struct {\nReason string\n}\nValidationError is an error that may be signalled from message publication when the message\nfails validation\nfunc (ValidationError) Error ¶\nadded in\nv0.5.0\nfunc (e ValidationError) Error() string\ntype ValidationResult ¶\nadded in\nv0.3.0\ntype ValidationResult int\nValidationResult represents the decision of an extended validator\ntype Validator ¶\ntype Validator func(context.Context, peer.ID, *Message) bool\nValidator is a function that validates a message with a binary decision: accept or reject.\ntype ValidatorEx ¶\nadded in\nv0.3.0\ntype ValidatorEx func(context.Context, peer.ID, *Message) ValidationResult\nValidatorEx is an extended validation function that validates a message with an enumerated decision\nfunc NewBasicSeqnoValidator ¶\nadded in\nv0.9.2\nfunc NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx\nNewBasicSeqnoValidator constructs a BasicSeqnoValidator using the givven PeerMetadataStore.\ntype ValidatorOpt ¶\ntype ValidatorOpt func(addVal *addValReq) error\nValidatorOpt is an option for RegisterTopicValidator.\nfunc WithValidatorConcurrency ¶\nfunc WithValidatorConcurrency(n int) ValidatorOpt\nWithValidatorConcurrency is an option that sets the topic validator throttle.\nThis controls the number of active validation goroutines for the topic; the default is 1024.\nfunc WithValidatorInline ¶\nadded in\nv0.0.3\nfunc WithValidatorInline(inline bool) ValidatorOpt\nWithValidatorInline is an option that sets the validation disposition to synchronous:\nit will be executed inline in validation front-end, without spawning a new goroutine.\nThis is suitable for simple or cpu-bound validators that do not block.\nfunc WithValidatorTimeout ¶\nfunc WithValidatorTimeout(timeout time.Duration) ValidatorOpt\nWithValidatorTimeout is an option that sets a timeout for an (asynchronous) topic validator.\nBy default there is no timeout in asynchronous validators.\nSource Files\n¶\nView all Source files\nbackoff.go\nblacklist.go\ncomm.go\ndiscovery.go\ndoc.go\nfloodsub.go\ngossip_tracer.go\ngossipsub.go\ngossipsub_feat.go\nmcache.go\nmidgen.go\nnotify.go\npeer_gater.go\npubsub.go\nrandomsub.go\nscore.go\nscore_params.go\nsign.go\nsubscription.go\nsubscription_filter.go\ntag_tracer.go\ntopic.go\ntrace.go\ntracer.go\nvalidation.go\nvalidation_builtin.go\nDirectories\n¶\nShow internal\nCollapse all\nPath\nSynopsis\ncompat\npb\ntimecache\nClick to show internal directories.\nClick to hide internal directories.\nWhy Go\nUse Cases\nCase Studies\nGet Started\nPlayground\nTour\nStack Overflow\nHelp\nPackages\nStandard Library\nSub-repositories\nAbout Go Packages\nAbout\nDownload\nBlog\nIssue Tracker\nRelease Notes\nBrand Guidelines\nCode of Conduct\nConnect\nTwitter\nGitHub\nSlack\nr/golang\nMeetup\nGolang Weekly\nCopyright\nTerms of Service\nPrivacy Policy\nReport an Issue\nTheme Toggle\nShortcuts Modal\nJump to\nClose\nKeyboard shortcuts\n? : This menu\n/ : Search site\nf or F : Jump to\ny or Y\n: Canonical URL\nClose\ngo.dev uses cookies from Google to deliver and enhance the quality of its services and to\nanalyze traffic. Learn more.\nOkay","summary":"providing information about how to create message publishing functionality in Go using the libp2p PubSub package. It discusses various options and functions for customizing and managing the PubSub system, including message routing, tracing, and configuring the router. It also covers topics such as joining and subscribing to topics, publishing messages, managing peers, and customizing behavior. Additionally, it mentions options for setting message author and ID, customizing message ID computation, and enabling or disabling message signing.","chunks":["Skip to Main Content Why Go Case Studies Common problems companies solve with Go Use Cases Stories about how and why companies use Go Security Policy How Go can help keep you secure by default Learn Docs Effective Go Tips for writing clear, performant, and idiomatic Go code Go User Manual A complete introduction to building software with Go Standard library Reference documentation for Go's standard library Release Notes Learn what's new in each Go release Packages Community Recorded Talks Videos from prior events Meetups Meet other local Go developers Conferences Learn and network with Go developers from around the world Go blog The Go project's official blog. Go project Get help and stay informed from Go Get connected Why Go Why Go Case Studies Use Cases Security Policy Learn Docs Docs Effective Go Go User Manual Standard library Release Notes Packages Community Community Recorded Talks Meetups Conferences Go blog Go project Get connected Discover Packages github.com/libp2p/go-libp2p-pubsub pubsub package module Version: v0.10.0 Opens a new window with list of versions in this module. Latest Latest This package is not in the latest version of its module. Go to latest Published: Nov 1, 2023 License: Apache-2.0, MIT, Apache-2.0, + 1 more Opens a new window with license information. Imports: 37 Opens a new window with list of imports. Imported by: 631 Opens a new window with list of known importers. Main Versions Licenses Imports Imported By Details Valid go.mod file The Go module system was introduced in Go 1.11 and is the official dependency management solution for Go. Redistributable license Redistributable licenses place minimal restrictions on how software can be used, modified, and redistributed. Tagged version Modules with tagged versions give importers more predictable builds. Stable version When a project reaches major version v1 it is considered stable. Learn more about best practices Repository github.com/libp2p/go-libp2p-pubsub Links Open Source Insights Jump to ... README Repo Lead Maintainer Table of Contents Install Usage Example Documentation In this repo, you will find Tracing Contribute License Documentation Overview Index Constants Variables Functions DefaultMsgIdFn(pmsg) DefaultPeerFilter(pid, topic) FilterSubscriptions(subs, filter) GossipSubDefaultFeatures(feat, proto) ScoreParameterDecay(decay) ScoreParameterDecayWithBase(decay, base, decayToZero) Types type AcceptStatus type BackoffConnectorFactory type BasicSeqnoValidator type Blacklist NewMapBlacklist() NewTimeCachedBlacklist(expiry) type CacheEntry type DiscoverOpt WithDiscoverConnector(connFactory) WithDiscoveryOpts(opts) type EventTracer type EventType type ExtendedPeerScoreInspectFn type FloodSubRouter (fs) AcceptFrom() (fs) AddPeer(p, proto) (fs) Attach(p) (fs) EnoughPeers(topic, suggested) (fs) HandleRPC(rpc) (fs) Join(topic) (fs) Leave(topic) (fs) Protocols() (fs) Publish(msg) (fs) RemovePeer(p) type GossipSubFeature type GossipSubFeatureTest type GossipSubParams DefaultGossipSubParams() type GossipSubRouter DefaultGossipSubRouter(h) (gs) AcceptFrom(p) (gs) AddPeer(p, proto) (gs) Attach(p) (gs) EnoughPeers(topic, suggested) (gs) HandleRPC(rpc) (gs) Join(topic) (gs) Leave(topic) (gs) Protocols() (gs) Publish(msg) (gs) RemovePeer(p) (gs) WithDefaultTagTracer() type JSONTracer NewJSONTracer(file) OpenJSONTracer(file, flags, perm) (t) Close() (t) Trace(evt) type MapBlacklist (b) Add(p) (b) Contains(p) type Message (m) GetFrom() type MessageCache NewMessageCache(gossip, history) (mc) Get(mid) (mc) GetForPeer(mid, p) (mc) GetGossipIDs(topic) (mc) Put(msg) (mc) SetMsgIdFn(msgID) (mc) Shift() type MessageSignaturePolicy type MsgIdFunction type Option WithAppSpecificRpcInspector(inspector) WithBlacklist(b) WithDefaultValidator(val, opts) WithDirectConnectTicks(t) WithDirectPeers(pis) WithDiscovery(d, opts) WithEventTracer(tracer) WithFloodPublish(floodPublish) WithGossipSubParams(cfg) WithGossipSubProtocols(protos, feature) WithMaxMessageSize(maxMessageSize) WithMessageAuthor(author) WithMessageIdFn(fn) WithMessageSignaturePolicy(policy) WithMessageSigning(enabled) WithNoAuthor() WithPeerExchange(doPX) WithPeerFilter(filter) WithPeerGater(params) WithPeerOutboundQueueSize(size) WithPeerScore(params, thresholds) WithPeerScoreInspect(inspect, period) WithProtocolMatchFn(m) WithRawTracer(tracer) WithSeenMessagesStrategy(strategy) WithSeenMessagesTTL(ttl) WithStrictSignatureVerification(required) WithSubscriptionFilter(subFilter) WithValidateQueueSize(n) WithValidateThrottle(n) WithValidateWorkers(n) type PBTracer NewPBTracer(file) OpenPBTracer(file, flags, perm) (t) Close() (t) Trace(evt) type PeerEvent type PeerFilter type PeerGaterParams DefaultPeerGaterParams() NewPeerGaterParams(threshold, globalDecay, sourceDecay) (p) WithTopicDeliveryWeights(w) type PeerMetadataStore type PeerScoreInspectFn type PeerScoreParams type PeerScoreSnapshot type PeerScoreThresholds type ProtocolMatchFn type ProvideKey type PubOpt WithLocalPublication(local) WithReadiness(ready) WithSecretKeyAndPeerId(key, pid) type PubSub NewFloodSub(ctx, h, opts) NewFloodsubWithProtocols(ctx, h, ps, opts) NewGossipSub(ctx, h, opts) NewGossipSubWithRouter(ctx, h, rt, opts) NewPubSub(ctx, h, rt, opts) NewRandomSub(ctx, h, size, opts) (p) BlacklistPeer(pid) (p) GetTopics() (p) Join(topic, opts) (p) ListPeers(topic) (p) Publish(topic, data, opts) (p) RegisterTopicValidator(topic, val, opts) (p) Subscribe(topic, opts) (p) UnregisterTopicValidator(topic) type PubSubNotif (p) ClosedStream(n, s) (p) Connected(n, c) (p) Disconnected(n, c) (p) Initialize() (p) Listen(n, _) (p) ListenClose(n, _) (p) OpenedStream(n, s) type PubSubRouter type PublishOptions type RPC type RandomSubRouter (rs) AcceptFrom() (rs) AddPeer(p, proto) (rs) Attach(p) (rs) EnoughPeers(topic, suggested) (rs) HandleRPC(rpc) (rs) Join(topic) (rs) Leave(topic) (rs) Protocols() (rs) Publish(msg) (rs) RemovePeer(p) type RawTracer type RelayCancelFunc type RemoteTracer NewRemoteTracer(ctx, host, pi) (t) Close() (t) Trace(evt) type RouterReady MinTopicSize(size) type SubOpt WithBufferSize(size) type Subscription (sub) Cancel() (sub) Next(ctx) (sub) Topic() type SubscriptionFilter NewAllowlistSubscriptionFilter(topics) NewRegexpSubscriptionFilter(rx) WrapLimitSubscriptionFilter(filter, limit) type TimeCachedBlacklist (b) Add(p) (b) Contains(p) type Topic (t) Close() (t) EventHandler(opts) (t) ListPeers() (t) Publish(ctx, data, opts) (t) Relay() (t) SetScoreParams(p) (t) String() (t) Subscribe(opts) type TopicEventHandler (t) Cancel() (t) NextPeerEvent(ctx) type TopicEventHandlerOpt type TopicOpt WithTopicMessageIdFn(msgId) type TopicOptions type TopicScoreParams type TopicScoreSnapshot type ValidationError (e) Error() type ValidationResult type Validator type ValidatorEx NewBasicSeqnoValidator(meta) type ValidatorOpt WithValidatorConcurrency(n) WithValidatorInline(inline) WithValidatorTimeout(timeout) Source Files Directories READMEDocumentationSource FilesDirectoriesRepo Lead MaintainerTable of ContentsInstallUsageDocumentationContributeLicenseExampleIn this repo, you will findTracingOverviewIndexConstantsVariablesFunctionsTypesDefaultMsgIdFn(pmsg)DefaultPeerFilter(pid, topic)FilterSubscriptions(subs, filter)GossipSubDefaultFeatures(feat, proto)ScoreParameterDecay(decay)ScoreParameterDecayWithBase(decay, base, decayToZero)type AcceptStatustype BackoffConnectorFactorytype BasicSeqnoValidatortype Blacklisttype CacheEntrytype DiscoverOpttype EventTracertype EventTypetype ExtendedPeerScoreInspectFntype FloodSubRoutertype GossipSubFeaturetype GossipSubFeatureTesttype GossipSubParamstype GossipSubRoutertype JSONTracertype MapBlacklisttype Messagetype MessageCachetype MessageSignaturePolicytype MsgIdFunctiontype Optiontype PBTracertype PeerEventtype PeerFiltertype PeerGaterParamstype PeerMetadataStoretype PeerScoreInspectFntype PeerScoreParamstype PeerScoreSnapshottype PeerScoreThresholdstype ProtocolMatchFntype ProvideKeytype PubOpttype PubSubtype PubSubNotiftype PubSubRoutertype PublishOptionstype RPCtype RandomSubRoutertype RawTracertype RelayCancelFunctype RemoteTracertype RouterReadytype SubOpttype Subscriptiontype SubscriptionFiltertype TimeCachedBlacklisttype Topictype TopicEventHandlertype TopicEventHandlerOpttype TopicOpttype TopicOptionstype TopicScoreParamstype TopicScoreSnapshottype ValidationErrortype ValidationResulttype Validatortype ValidatorExtype ValidatorOptNewMapBlacklist()NewTimeCachedBlacklist(expiry)WithDiscoverConnector(connFactory)WithDiscoveryOpts(opts)(fs) AcceptFrom()(fs) AddPeer(p, proto)(fs) Attach(p)(fs) EnoughPeers(topic, suggested)(fs) HandleRPC(rpc)(fs) Join(topic)(fs) Leave(topic)(fs) Protocols()(fs) Publish(msg)(fs) RemovePeer(p)DefaultGossipSubParams()DefaultGossipSubRouter(h)(gs) AcceptFrom(p)(gs) AddPeer(p, proto)(gs) Attach(p)(gs) EnoughPeers(topic, suggested)(gs) HandleRPC(rpc)(gs) Join(topic)(gs) Leave(topic)(gs) Protocols()(gs) Publish(msg)(gs) RemovePeer(p)(gs) WithDefaultTagTracer()NewJSONTracer(file)OpenJSONTracer(file, flags, perm)(t) Close()(t) Trace(evt)(b) Add(p)(b) Contains(p)(m) GetFrom()NewMessageCache(gossip, history)(mc) Get(mid)(mc) GetForPeer(mid, p)(mc) GetGossipIDs(topic)(mc) Put(msg)(mc) SetMsgIdFn(msgID)(mc) Shift()WithAppSpecificRpcInspector(inspector)WithBlacklist(b)WithDefaultValidator(val, opts)WithDirectConnectTicks(t)WithDirectPeers(pis)WithDiscovery(d, opts)WithEventTracer(tracer)WithFloodPublish(floodPublish)WithGossipSubParams(cfg)WithGossipSubProtocols(protos, feature)WithMaxMessageSize(maxMessageSize)WithMessageAuthor(author)WithMessageIdFn(fn)WithMessageSignaturePolicy(policy)WithMessageSigning(enabled)WithNoAuthor()WithPeerExchange(doPX)WithPeerFilter(filter)WithPeerGater(params)WithPeerOutboundQueueSize(size)WithPeerScore(params, thresholds)WithPeerScoreInspect(inspect, period)WithProtocolMatchFn(m)WithRawTracer(tracer)WithSeenMessagesStrategy(strategy)WithSeenMessagesTTL(ttl)WithStrictSignatureVerification(required)WithSubscriptionFilter(subFilter)WithValidateQueueSize(n)WithValidateThrottle(n)WithValidateWorkers(n)NewPBTracer(file)OpenPBTracer(file, flags, perm)(t) Close()(t) Trace(evt)DefaultPeerGaterParams()NewPeerGaterParams(threshold, globalDecay, sourceDecay)(p) WithTopicDeliveryWeights(w)WithLocalPublication(local)WithReadiness(ready)WithSecretKeyAndPeerId(key, pid)NewFloodSub(ctx, h, opts)NewFloodsubWithProtocols(ctx, h, ps, opts)NewGossipSub(ctx, h, opts)NewGossipSubWithRouter(ctx, h, rt, opts)NewPubSub(ctx, h, rt, opts)NewRandomSub(ctx, h, size, opts)(p) BlacklistPeer(pid)(p) GetTopics()(p) Join(topic, opts)(p) ListPeers(topic)(p) Publish(topic, data, opts)(p) RegisterTopicValidator(topic, val, opts)(p) Subscribe(topic, opts)(p) UnregisterTopicValidator(topic)(p) ClosedStream(n, s)(p) Connected(n, c)(p) Disconnected(n, c)(p) Initialize()(p) Listen(n, _)(p) ListenClose(n, _)(p) OpenedStream(n, s)(rs) AcceptFrom()(rs) AddPeer(p, proto)(rs) Attach(p)(rs) EnoughPeers(topic, suggested)(rs) HandleRPC(rpc)(rs) Join(topic)(rs) Leave(topic)(rs) Protocols()(rs) Publish(msg)(rs) RemovePeer(p)NewRemoteTracer(ctx, host, pi)(t) Close()(t) Trace(evt)MinTopicSize(size)WithBufferSize(size)(sub) Cancel()(sub) Next(ctx)(sub) Topic()NewAllowlistSubscriptionFilter(topics)NewRegexpSubscriptionFilter(rx)WrapLimitSubscriptionFilter(filter, limit)(b) Add(p)(b) Contains(p)(t) Close()(t) EventHandler(opts)(t) ListPeers()(t) Publish(ctx, data, opts)(t) Relay()(t) SetScoreParams(p)(t) String()(t) Subscribe(opts)(t) Cancel()(t) NextPeerEvent(ctx)WithTopicMessageIdFn(msgId)(e) Error()NewBasicSeqnoValidator(meta)WithValidatorConcurrency(n)WithValidatorInline(inline)WithValidatorTimeout(timeout) README ¶ go-libp2p-pubsub This repo contains the canonical pubsub implementation for libp2p. We currently provide three message router options: Floodsub, which is the baseline flooding protocol. Randomsub, which is a simple probabilistic router that propagates to random subsets of peers. Gossipsub, which is a more advanced router with mesh formation and gossip propagation. See spec and implementation for more details. Repo Lead Maintainer @vyzo This repo follows the Repo Lead Maintainer Protocol Table of Contents Install Usage Example Documentation Tracing Contribute License Install go get github.com/libp2p/go-libp2p-pubsub Usage To be used for messaging in p2p instrastructure (as part of libp2p) such as IPFS, Ethereum, other blockchains, etc. Example https://github.com/libp2p/go-libp2p/tree/master/examples/pubsub Documentation See the libp2p specs for high level documentation and godoc for API documentation. In this repo, you will find . ├── LICENSE ├── README.md # Regular Golang repo set up ├── codecov.yml ├── pb ├── go.mod ├── go.sum ├── doc.go # PubSub base ├── pubsub.go ├── blacklist.go ├── notify.go ├── comm.go ├── discovery.go ├── sign.go ├── subscription.go ├── topic.go ├── trace.go ├── tracer.go ├── validation.go # Floodsub router ├── floodsub.go # Randomsub router ├── randomsub.go # Gossipsub router ├── gossipsub.go ├── score.go ├── score_params.go └── mcache.go Tracing The pubsub system supports tracing, which collects all events pertaining to the internals of the system. This allows you to recreate the complete message flow and state of the system for analysis purposes. To enable tracing, instantiate the pubsub system using the WithEventTracer option; the option accepts a tracer with three available implementations in-package (trace to json, pb, or a remote peer). If you want to trace using a remote peer, you can do so using the traced daemon from go-libp2p-pubsub-tracer. The package also includes a utility program, tracestat, for analyzing the traces collected by the daemon. For instance, to capture the trace as a json file, you can use the following option: tracer, err := pubsub. NewJSONTracer(\"/path/to/trace.json\") if err ! = nil { panic(err) } pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) To capture the trace as a protobuf, you can use the following option: tracer, err := pubsub. NewPBTracer(\"/path/to/trace.pb\") if err ! = nil { panic(err) } pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) Finally, to use the remote tracer, you can use the following incantations: // assuming that your tracer runs in x.x.x.x and has a peer ID of QmTracer pi, err := peer. AddrInfoFromP2pAddr(ma. StringCast(\"/ip4/x.x.x.x/tcp/4001/p2p/QmTracer\")) if err ! = nil { panic(err) } tracer, err := pubsub. NewRemoteTracer(ctx, host, pi) if err ! = nil { panic(err) } ps, err := pubsub. NewGossipSub(..., pubsub.WithEventTracer(tracer)) Contribute Contributions welcome. Please check out the issues. Check out our contributing document for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS Code of Conduct. Small note: If editing the README, please conform to the standard-readme specification. License The go-libp2p-pubsub project is dual-licensed under Apache 2.0 and MIT terms: Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) Expand ▾ Collapse ▴ Documentation ¶ Overview ¶ The pubsub package provides facilities for the Publish/Subscribe pattern of message propagation, also known as overlay multicast. The implementation provides topic-based pubsub, with pluggable routing algorithms. The main interface to the library is the PubSub object. You can construct this object with the following constructors: - NewFloodSub creates an instance that uses the floodsub routing algorithm. - NewGossipSub creates an instance that uses the gossipsub routing algorithm. - NewRandomSub creates an instance that uses the randomsub routing algorithm. In addition, there is a generic constructor that creates a pubsub instance with a custom PubSubRouter interface. This procedure is currently reserved for internal use within the package. Once you have constructed a PubSub instance, you need to establish some connections to your peers; the implementation relies on ambient peer discovery, leaving bootstrap and active peer discovery up to the client. To publish a message to some topic, use Publish; you don't need to be subscribed to the topic in order to publish. To subscribe to a topic, use Subscribe; this will give you a subscription interface from which new messages can be pumped. Index ¶ Constants Variables func DefaultMsgIdFn(pmsg *pb.Message) string func DefaultPeerFilter(pid peer. ID, topic string) bool func FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts func GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol. ID) bool func ScoreParameterDecay(decay time. Duration) float64 func ScoreParameterDecayWithBase(decay time. Duration, base time. Duration, decayToZero float64) float64 type AcceptStatus type BackoffConnectorFactory type BasicSeqnoValidator type Blacklist func NewMapBlacklist() Blacklist func NewTimeCachedBlacklist(expiry time. Duration) (Blacklist, error) type CacheEntry type DiscoverOpt func WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt func WithDiscoveryOpts(opts ...discovery. Option) DiscoverOpt type EventTracer type EventType type ExtendedPeerScoreInspectFn type FloodSubRouter func (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus func (fs *FloodSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (fs *FloodSubRouter) Attach(p *PubSub) func (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool func (fs *FloodSubRouter) HandleRPC(rpc *RPC) func (fs *FloodSubRouter) Join(topic string) func (fs *FloodSubRouter) Leave(topic string) func (fs *FloodSubRouter) Protocols() []protocol. ID func (fs *FloodSubRouter) Publish(msg *Message) func (fs *FloodSubRouter) RemovePeer(p peer. ID) type GossipSubFeature type GossipSubFeatureTest type GossipSubParams func DefaultGossipSubParams() GossipSubParams type GossipSubRouter func DefaultGossipSubRouter(h host. Host) *GossipSubRouter func (gs *GossipSubRouter) AcceptFrom(p peer. ID) AcceptStatus func (gs *GossipSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (gs *GossipSubRouter) Attach(p *PubSub) func (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool func (gs *GossipSubRouter) HandleRPC(rpc *RPC) func (gs *GossipSubRouter) Join(topic string) func (gs *GossipSubRouter) Leave(topic string) func (gs *GossipSubRouter) Protocols() []protocol. ID func (gs *GossipSubRouter) Publish(msg *Message) func (gs *GossipSubRouter) RemovePeer(p peer. ID) func (gs *GossipSubRouter) WithDefaultTagTracer() Option type JSONTracer func NewJSONTracer(file string) (*JSONTracer, error) func OpenJSONTracer(file string, flags int, perm os. FileMode) (*JSONTracer, error) func (t *JSONTracer) Close() func (t *JSONTracer) Trace(evt * pb. TraceEvent) type MapBlacklist func (b MapBlacklist) Add(p peer. ID) bool func (b MapBlacklist) Contains(p peer. ID) bool type Message func (m *Message) GetFrom() peer. ID type MessageCache func NewMessageCache(gossip, history int) * MessageCache func (mc *MessageCache) Get(mid string) (*Message, bool) func (mc *MessageCache) GetForPeer(mid string, p peer. ID) (*Message, int, bool) func (mc *MessageCache) GetGossipIDs(topic string) []string func (mc *MessageCache) Put(msg *Message) func (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string) func (mc *MessageCache) Shift() type MessageSignaturePolicy type MsgIdFunction type Option func WithAppSpecificRpcInspector(inspector func(peer. ID, *RPC) error) Option func WithBlacklist(b Blacklist) Option func WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option func WithDirectConnectTicks(t uint64) Option func WithDirectPeers(pis []peer. AddrInfo) Option func WithDiscovery(d discovery. Discovery, opts ...DiscoverOpt) Option func WithEventTracer(tracer EventTracer) Option func WithFloodPublish(floodPublish bool) Option func WithGossipSubParams(cfg GossipSubParams) Option func WithGossipSubProtocols(protos []protocol. ID, feature GossipSubFeatureTest) Option func WithMaxMessageSize(maxMessageSize int) Option func WithMessageAuthor(author peer. ID) Option func WithMessageIdFn(fn MsgIdFunction) Option func WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option func WithMessageSigning(enabled bool) Option func WithNoAuthor() Option func WithPeerExchange(doPX bool) Option func WithPeerFilter(filter PeerFilter) Option func WithPeerGater(params *PeerGaterParams) Option func WithPeerOutboundQueueSize(size int) Option func WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option func WithPeerScoreInspect(inspect interface{}, period time. Duration) Option func WithProtocolMatchFn(m ProtocolMatchFn) Option func WithRawTracer(tracer RawTracer) Option func WithSeenMessagesStrategy(strategy timecache. Strategy) Option func WithSeenMessagesTTL(ttl time. Duration) Option func WithStrictSignatureVerification(required bool) Option func WithSubscriptionFilter(subFilter SubscriptionFilter) Option func WithValidateQueueSize(n int) Option func WithValidateThrottle(n int) Option func WithValidateWorkers(n int) Option type PBTracer func NewPBTracer(file string) (*PBTracer, error) func OpenPBTracer(file string, flags int, perm os. FileMode) (*PBTracer, error) func (t *PBTracer) Close() func (t *PBTracer) Trace(evt * pb. TraceEvent) type PeerEvent type PeerFilter type PeerGaterParams func DefaultPeerGaterParams() *PeerGaterParams func NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams func (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams type PeerMetadataStore type PeerScoreInspectFn type PeerScoreParams type PeerScoreSnapshot type PeerScoreThresholds type ProtocolMatchFn type ProvideKey type PubOpt func WithLocalPublication(local bool) PubOpt func WithReadiness(ready RouterReady) PubOpt func WithSecretKeyAndPeerId(key crypto. PrivKey, pid peer. ID) PubOpt type PubSub func NewFloodSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) func NewFloodsubWithProtocols(ctx context. Context, h host. Host, ps []protocol. ID, opts ...Option) (*PubSub, error) func NewGossipSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) func NewGossipSubWithRouter(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) func NewPubSub(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) func NewRandomSub(ctx context. Context, h host. Host, size int, opts ...Option) (*PubSub, error) func (p *PubSub) BlacklistPeer(pid peer. ID) func (p *PubSub) GetTopics() []string func (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error) func (p *PubSub) ListPeers(topic string) []peer. ID func (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) errordeprecated func (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error func (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error)deprecated func (p *PubSub) UnregisterTopicValidator(topic string) error type PubSubNotif func (p *PubSubNotif) ClosedStream(n network. Network, s network. Stream) func (p *PubSubNotif) Connected(n network. Network, c network. Conn) func (p *PubSubNotif) Disconnected(n network. Network, c network. Conn) func (p *PubSubNotif) Initialize() func (p *PubSubNotif) Listen(n network. Network, _ ma. Multiaddr) func (p *PubSubNotif) ListenClose(n network. Network, _ ma. Multiaddr) func (p *PubSubNotif) OpenedStream(n network. Network, s network. Stream) type PubSubRouter type PublishOptions type RPC type RandomSubRouter func (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus func (rs *RandomSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (rs *RandomSubRouter) Attach(p *PubSub) func (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool func (rs *RandomSubRouter) HandleRPC(rpc *RPC) func (rs *RandomSubRouter) Join(topic string) func (rs *RandomSubRouter) Leave(topic string) func (rs *RandomSubRouter) Protocols() []protocol. ID func (rs *RandomSubRouter) Publish(msg *Message) func (rs *RandomSubRouter) RemovePeer(p peer. ID) type RawTracer type RelayCancelFunc type RemoteTracer func NewRemoteTracer(ctx context. Context, host host. Host, pi peer. AddrInfo) (*RemoteTracer, error) func (t *RemoteTracer) Close() func (t *RemoteTracer) Trace(evt * pb. TraceEvent) type RouterReady func MinTopicSize(size int) RouterReady type SubOpt func WithBufferSize(size int) SubOpt type Subscription func (sub *Subscription) Cancel() func (sub *Subscription) Next(ctx context. Context) (*Message, error) func (sub *Subscription) Topic() string type SubscriptionFilter func NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter func NewRegexpSubscriptionFilter(rx *regexp. Regexp) SubscriptionFilter func WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter type TimeCachedBlacklist func (b *TimeCachedBlacklist) Add(p peer. ID) bool func (b *TimeCachedBlacklist) Contains(p peer. ID) bool type Topic func (t *Topic) Close() error func (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error) func (t *Topic) ListPeers() []peer. ID func (t *Topic) Publish(ctx context. Context, data []byte, opts ...PubOpt) error func (t *Topic) Relay() (RelayCancelFunc, error) func (t *Topic) SetScoreParams(p *TopicScoreParams) error func (t *Topic) String() string func (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error) type TopicEventHandler func (t *TopicEventHandler) Cancel() func (t *TopicEventHandler) NextPeerEvent(ctx context. Context) (PeerEvent, error) type TopicEventHandlerOpt type TopicOpt func WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt type TopicOptions type TopicScoreParams type TopicScoreSnapshot type ValidationError func (e ValidationError) Error() string type ValidationResult type Validator type ValidatorEx func NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx type ValidatorOpt func WithValidatorConcurrency(n int) ValidatorOpt func WithValidatorInline(inline bool) ValidatorOpt func WithValidatorTimeout(timeout time. Duration) ValidatorOpt Constants ¶ View Source const ( MinBackoffDelay = 100 * time. Millisecond MaxBackoffDelay = 10 * time. Second TimeToLive = 10 * time. Minute BackoffCleanupInterval = 1 * time. Minute BackoffMultiplier = 2 MaxBackoffJitterCoff = 100 MaxBackoffAttempts = 4 ) View Source const ( FloodSubID = protocol. ID(\"/floodsub/1.0.0\") FloodSubTopicSearchSize = 5 ) View Source const ( // GossipSubID_v10 is the protocol ID for version 1.0.0 of the GossipSub protocol. // It is advertised along with GossipSubID_v11 for backwards compatibility. GossipSubID_v10 = protocol. ID(\"/meshsub/1.0.0\") // GossipSubID_v11 is the protocol ID for version 1.1.0 of the GossipSub protocol. // See the spec for details about how v1.1.0 compares to v1.0.0: // https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md GossipSubID_v11 = protocol. ID(\"/meshsub/1.1.0\") ) View Source const ( // Protocol supports basic GossipSub Mesh -- gossipsub-v1.0 compatible GossipSubFeatureMesh = iota // Protocol supports Peer eXchange on prune -- gossipsub-v1.1 compatible GossipSubFeaturePX ) View Source const ( DefaultDecayInterval = time. Second DefaultDecayToZero = 0.01 )","Second DefaultDecayToZero = 0.01 ) View Source const ( // StrictSign produces signatures and expects and verifies incoming signatures StrictSign = msgSigning | msgVerification // StrictNoSign does not produce signatures and drops and penalises incoming messages that carry one StrictNoSign = msgVerification // LaxSign produces signatures and validates incoming signatures iff one is present // Deprecated: it is recommend to either strictly enable, or strictly disable, signatures. LaxSign = msgSigning // LaxNoSign does not produce signatures and validates incoming signatures iff one is present // Deprecated: it is recommend to either strictly enable, or strictly disable, signatures. LaxNoSign = 0 ) View Source const ( RejectBlacklstedPeer = \"blacklisted peer\" RejectBlacklistedSource = \"blacklisted source\" RejectMissingSignature = \"missing signature\" RejectUnexpectedSignature = \"unexpected signature\" RejectUnexpectedAuthInfo = \"unexpected auth info\" RejectInvalidSignature = \"invalid signature\" RejectValidationQueueFull = \"validation queue full\" RejectValidationThrottled = \"validation throttled\" RejectValidationFailed = \"validation failed\" RejectValidationIgnored = \"validation ignored\" RejectSelfOrigin = \"self originated message\" ) rejection reasons View Source const ( // ValidationAccept is a validation decision that indicates a valid message that should be accepted and // delivered to the application and forwarded to the network. ValidationAccept = ValidationResult(0) // ValidationReject is a validation decision that indicates an invalid message that should not be // delivered to the application or forwarded to the application. Furthermore the peer that forwarded // the message should be penalized by peer scoring routers. ValidationReject = ValidationResult(1) // ValidationIgnore is a validation decision that indicates a message that should be ignored: it will // be neither delivered to the application nor forwarded to the network. However, in contrast to // ValidationReject, the peer that forwarded the message must not be penalized by peer scoring routers. ValidationIgnore = ValidationResult(2) ) View Source const DefaultMaxMessageSize = 1 << 20 DefaultMaximumMessageSize is 1mb. View Source const ( RandomSubID = protocol. ID(\"/randomsub/1.0.0\") ) View Source const RemoteTracerProtoID = protocol. ID(\"/libp2p/pubsub/tracer/1.0.0\") View Source const SignPrefix = \"libp2p-pubsub:\" Variables ¶ View Source var ( // DiscoveryPollInitialDelay is how long the discovery system waits after it first starts before polling DiscoveryPollInitialDelay = 0 * time. Millisecond // DiscoveryPollInterval is approximately how long the discovery system waits in between checks for whether the // more peers are needed for any topic DiscoveryPollInterval = 1 * time. Second ) View Source var ( GossipSubD = 6 GossipSubDlo = 5 GossipSubDhi = 12 GossipSubDscore = 4 GossipSubDout = 2 GossipSubHistoryLength = 5 GossipSubHistoryGossip = 3 GossipSubDlazy = 6 GossipSubGossipFactor = 0.25 GossipSubGossipRetransmission = 3 GossipSubHeartbeatInitialDelay = 100 * time. Millisecond GossipSubHeartbeatInterval = 1 * time. Second GossipSubFanoutTTL = 60 * time. Second GossipSubPrunePeers = 16 GossipSubPruneBackoff = time. Minute GossipSubUnsubscribeBackoff = 10 * time. Second GossipSubConnectors = 8 GossipSubMaxPendingConnections = 128 GossipSubConnectionTimeout = 30 * time. Second GossipSubDirectConnectTicks uint64 = 300 GossipSubDirectConnectInitialDelay = time. Second GossipSubOpportunisticGraftTicks uint64 = 60 GossipSubOpportunisticGraftPeers = 2 GossipSubGraftFloodThreshold = 10 * time. Second GossipSubMaxIHaveLength = 5000 GossipSubMaxIHaveMessages = 10 GossipSubIWantFollowupTime = 3 * time. Second ) Defines the default gossipsub parameters. View Source var ( DefaultPeerGaterRetainStats = 6 * time. Hour DefaultPeerGaterQuiet = time. Minute DefaultPeerGaterDuplicateWeight = 0.125 DefaultPeerGaterIgnoreWeight = 1.0 DefaultPeerGaterRejectWeight = 16.0 DefaultPeerGaterThreshold = 0.33 DefaultPeerGaterGlobalDecay = ScoreParameterDecay(2 * time. Minute) DefaultPeerGaterSourceDecay = ScoreParameterDecay(time. Hour) ) View Source var ( // TimeCacheDuration specifies how long a message ID will be remembered as seen. // Use WithSeenMessagesTTL to configure this per pubsub instance, instead of overriding the global default. TimeCacheDuration = 120 * time. Second // TimeCacheStrategy specifies which type of lookup/cleanup strategy is used by the seen messages cache. // Use WithSeenMessagesStrategy to configure this per pubsub instance, instead of overriding the global default. TimeCacheStrategy = timecache. Strategy_FirstSeen // ErrSubscriptionCancelled may be returned when a subscription Next() is called after the // subscription has been cancelled. ErrSubscriptionCancelled = errors. New(\"subscription cancelled\") ) View Source var ( // GossipSubConnTagBumpMessageDelivery is the amount to add to the connection manager // tag that tracks message deliveries. Each time a peer is the first to deliver a // message within a topic, we \"bump\" a tag by this amount, up to a maximum // of GossipSubConnTagMessageDeliveryCap. // Note that the delivery tags decay over time, decreasing by GossipSubConnTagDecayAmount // at every GossipSubConnTagDecayInterval. GossipSubConnTagBumpMessageDelivery = 1 // GossipSubConnTagDecayInterval is the decay interval for decaying connection manager tags. GossipSubConnTagDecayInterval = 10 * time. Minute // GossipSubConnTagDecayAmount is subtracted from decaying tag values at each decay interval. GossipSubConnTagDecayAmount = 1 // GossipSubConnTagMessageDeliveryCap is the maximum value for the connection manager tags that // track message deliveries. GossipSubConnTagMessageDeliveryCap = 15 ) View Source var ErrEmptyPeerID = errors. New(\"empty peer ID\") ErrEmptyPeerID is returned if an empty peer ID was provided View Source var ErrNilSignKey = errors. New(\"nil sign key\") ErrNilSignKey is returned if a nil private key was provided View Source var ErrTooManySubscriptions = errors. New(\"too many subscriptions\") ErrTooManySubscriptions may be returned by a SubscriptionFilter to signal that there are too many subscriptions to process. View Source var ErrTopicClosed = errors. New(\"this Topic is closed, try opening a new one\") ErrTopicClosed is returned if a Topic is utilized after it has been closed View Source var GossipSubDefaultProtocols = []protocol. ID{GossipSubID_v11, GossipSubID_v10, FloodSubID} GossipSubDefaultProtocols is the default gossipsub router protocol list View Source var MinTraceBatchSize = 16 View Source var ( RandomSubD = 6 ) View Source var TraceBufferSize = 1 << 16 // 64K ought to be enough for everyone; famous last words. Functions ¶ func DefaultMsgIdFn ¶ added in v0.2.5 func DefaultMsgIdFn(pmsg *pb.Message) string DefaultMsgIdFn returns a unique ID of the passed Message func DefaultPeerFilter ¶ added in v0.5.5 func DefaultPeerFilter(pid peer. ID, topic string) bool DefaultPeerFilter accepts all peers on all topics func FilterSubscriptions ¶ added in v0.3.6 func FilterSubscriptions(subs []*pb.RPC_SubOpts, filter func(string) bool) []*pb.RPC_SubOpts FilterSubscriptions filters (and deduplicates) a list of subscriptions. filter should return true if a topic is of interest. func GossipSubDefaultFeatures ¶ added in v0.5.0 func GossipSubDefaultFeatures(feat GossipSubFeature, proto protocol. ID) bool GossipSubDefaultFeatures is the feature test function for the default gossipsub protocols func ScoreParameterDecay ¶ added in v0.3.0 func ScoreParameterDecay(decay time. Duration) float64 ScoreParameterDecay computes the decay factor for a parameter, assuming the DecayInterval is 1s and that the value decays to zero if it drops below 0.01 func ScoreParameterDecayWithBase ¶ added in v0.3.0 func ScoreParameterDecayWithBase(decay time. Duration, base time. Duration, decayToZero float64) float64 ScoreParameterDecayWithBase computes the decay factor for a parameter using base as the DecayInterval Types ¶ type AcceptStatus ¶ added in v0.3.6 type AcceptStatus int const ( // AcceptNone signals to drop the incoming RPC AcceptNone AcceptStatus = iota // AcceptControl signals to accept the incoming RPC only for control message processing by // the router. Included payload messages will _not_ be pushed to the validation queue. AcceptControl // AcceptAll signals to accept the incoming RPC for full processing AcceptAll ) type BackoffConnectorFactory ¶ added in v0.2.0 type BackoffConnectorFactory func(host host. Host) ( *discimpl. BackoffConnector, error) BackoffConnectorFactory creates a BackoffConnector that is attached to a given host type BasicSeqnoValidator ¶ added in v0.9.2 type BasicSeqnoValidator struct { // contains filtered or unexported fields } BasicSeqnoValidator is a basic validator, usable as a default validator, that ignores replayed messages outside the seen cache window. The validator uses the message seqno as a peer-specific nonce to decide whether the message should be propagated, comparing to the maximal nonce store in the peer metadata store. This is useful to ensure that there can be no infinitely propagating messages in the network regardless of the seen cache span and network diameter. It requires that pubsub is instantiated with a strict message signing policy and that seqnos are not disabled, ie it doesn't support anonymous mode. Warning: See https://github.com/libp2p/rust-libp2p/issues/3453 TL;DR: rust is currently violating the spec by issuing a random seqno, which creates an interoperability hazard. We expect this issue to be addressed in the not so distant future, but keep this in mind if you are in a mixed environment with (older) rust nodes. type Blacklist ¶ type Blacklist interface { Add(peer.ID) bool Contains(peer.ID) bool } Blacklist is an interface for peer blacklisting. func NewMapBlacklist ¶ func NewMapBlacklist() Blacklist NewMapBlacklist creates a new MapBlacklist func NewTimeCachedBlacklist ¶ added in v0.2.6 func NewTimeCachedBlacklist(expiry time. Duration) (Blacklist, error) NewTimeCachedBlacklist creates a new TimeCachedBlacklist with the given expiry duration type CacheEntry ¶ type CacheEntry struct { // contains filtered or unexported fields } type DiscoverOpt ¶ added in v0.2.0 type DiscoverOpt func(*discoverOptions) error func WithDiscoverConnector ¶ added in v0.2.0 func WithDiscoverConnector(connFactory BackoffConnectorFactory) DiscoverOpt WithDiscoverConnector adds a custom connector that deals with how the discovery subsystem connects to peers func WithDiscoveryOpts ¶ added in v0.2.0 func WithDiscoveryOpts(opts ...discovery. Option) DiscoverOpt WithDiscoveryOpts passes libp2p Discovery options into the PubSub discovery subsystem type EventTracer ¶ added in v0.2.3 type EventTracer interface { Trace(evt *pb.TraceEvent) } EventTracer is a generic event tracer interface. This is a high level tracing interface which delivers tracing events, as defined by the protobuf schema in pb/trace.proto. type EventType ¶ added in v0.1.1 type EventType int const ( PeerJoin EventType = iota PeerLeave ) type ExtendedPeerScoreInspectFn ¶ added in v0.3.3 type ExtendedPeerScoreInspectFn = func(map[peer. ID]*PeerScoreSnapshot) type FloodSubRouter ¶ type FloodSubRouter struct { // contains filtered or unexported fields } func (*FloodSubRouter) AcceptFrom ¶ added in v0.3.0 func (fs *FloodSubRouter) AcceptFrom(peer.ID) AcceptStatus func (*FloodSubRouter) AddPeer ¶ func (fs *FloodSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*FloodSubRouter) Attach ¶ func (fs *FloodSubRouter) Attach(p *PubSub) func (*FloodSubRouter) EnoughPeers ¶ added in v0.2.0 func (fs *FloodSubRouter) EnoughPeers(topic string, suggested int) bool func (*FloodSubRouter) HandleRPC ¶ func (fs *FloodSubRouter) HandleRPC(rpc *RPC) func (*FloodSubRouter) Join ¶ func (fs *FloodSubRouter) Join(topic string) func (*FloodSubRouter) Leave ¶ func (fs *FloodSubRouter) Leave(topic string) func (*FloodSubRouter) Protocols ¶ func (fs *FloodSubRouter) Protocols() []protocol. ID func (*FloodSubRouter) Publish ¶ func (fs *FloodSubRouter) Publish(msg *Message) func (*FloodSubRouter) RemovePeer ¶ func (fs *FloodSubRouter) RemovePeer(p peer. ID) type GossipSubFeature ¶ added in v0.5.0 type GossipSubFeature int GossipSubFeature is a feature discriminant enum type GossipSubFeatureTest ¶ added in v0.5.0 type GossipSubFeatureTest = func(GossipSubFeature, protocol. ID) bool GossipSubFeatureTest is a feature test function; it takes a feature and a protocol ID and should return true if the feature is supported by the protocol type GossipSubParams ¶ added in v0.5.0 type GossipSubParams struct { // D sets the optimal degree for a GossipSub topic mesh. For example, if D == 6, // each peer will want to have about six peers in their mesh for each topic they're subscribed to. // D should be set somewhere between Dlo and Dhi. D int // Dlo sets the lower bound on the number of peers we keep in a GossipSub topic mesh. // If we have fewer than Dlo peers, we will attempt to graft some more into the mesh at // the next heartbeat. Dlo int // Dhi sets the upper bound on the number of peers we keep in a GossipSub topic mesh. // If we have more than Dhi peers, we will select some to prune from the mesh at the next heartbeat. Dhi int // Dscore affects how peers are selected when pruning a mesh due to over subscription. // At least Dscore of the retained peers will be high-scoring, while the remainder are // chosen randomly. Dscore int // Dout sets the quota for the number of outbound connections to maintain in a topic mesh. // When the mesh is pruned due to over subscription, we make sure that we have outbound connections // to at least Dout of the survivor peers. This prevents sybil attackers from overwhelming // our mesh with incoming connections. // // Dout must be set below Dlo, and must not exceed D / 2. Dout int // HistoryLength controls the size of the message cache used for gossip. // The message cache will remember messages for HistoryLength heartbeats. HistoryLength int // HistoryGossip controls how many cached message ids we will advertise in // IHAVE gossip messages. When asked for our seen message IDs, we will return // only those from the most recent HistoryGossip heartbeats. The slack between // HistoryGossip and HistoryLength allows us to avoid advertising messages // that will be expired by the time they're requested. // // HistoryGossip must be less than or equal to HistoryLength to // avoid a runtime panic. HistoryGossip int // Dlazy affects how many peers we will emit gossip to at each heartbeat. // We will send gossip to at least Dlazy peers outside our mesh. The actual // number may be more, depending on GossipFactor and how many peers we're // connected to. Dlazy int // GossipFactor affects how many peers we will emit gossip to at each heartbeat. // We will send gossip to GossipFactor * (total number of non-mesh peers), or // Dlazy, whichever is greater. GossipFactor float64 // GossipRetransmission controls how many times we will allow a peer to request // the same message id through IWANT gossip before we start ignoring them. This is designed // to prevent peers from spamming us with requests and wasting our resources. GossipRetransmission int // HeartbeatInitialDelay is the short delay before the heartbeat timer begins // after the router is initialized. HeartbeatInitialDelay time. Duration // HeartbeatInterval controls the time between heartbeats. HeartbeatInterval time. Duration // SlowHeartbeatWarning is the duration threshold for heartbeat processing before emitting // a warning; this would be indicative of an overloaded peer. SlowHeartbeatWarning float64 // FanoutTTL controls how long we keep track of the fanout state. If it's been // FanoutTTL since we've published to a topic that we're not subscribed to, // we'll delete the fanout map for that topic. FanoutTTL time. Duration // PrunePeers controls the number of peers to include in prune Peer eXchange. // When we prune a peer that's eligible for PX (has a good score, etc), we will try to // send them signed peer records for up to PrunePeers other peers that we // know of. PrunePeers int // PruneBackoff controls the backoff time for pruned peers. This is how long // a peer must wait before attempting to graft into our mesh again after being pruned. // When pruning a peer, we send them our value of PruneBackoff so they know // the minimum time to wait. Peers running older versions may not send a backoff time, // so if we receive a prune message without one, we will wait at least PruneBackoff // before attempting to re-graft. PruneBackoff time. Duration // UnsubscribeBackoff controls the backoff time to use when unsuscribing // from a topic. A peer should not resubscribe to this topic before this // duration. UnsubscribeBackoff time. Duration // Connectors controls the number of active connection attempts for peers obtained through PX. Connectors int // MaxPendingConnections sets the maximum number of pending connections for peers attempted through px. MaxPendingConnections int // ConnectionTimeout controls the timeout for connection attempts. ConnectionTimeout time. Duration // DirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers // that are not currently connected. DirectConnectTicks uint64 // DirectConnectInitialDelay is the initial delay before opening connections to direct peers DirectConnectInitialDelay time. Duration // OpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh // with opportunistic grafting. Every OpportunisticGraftTicks we will attempt to select some // high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls // below a threshold (see https://godoc.org/github.com/libp2p/go-libp2p-pubsub#PeerScoreThresholds). OpportunisticGraftTicks uint64 // OpportunisticGraftPeers is the number of peers to opportunistically graft. OpportunisticGraftPeers int // If a GRAFT comes before GraftFloodThreshold has elapsed since the last PRUNE, // then there is an extra score penalty applied to the peer through P7. GraftFloodThreshold time. Duration // MaxIHaveLength is the maximum number of messages to include in an IHAVE message. // Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a // peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the // default if your system is pushing more than 5000 messages in HistoryGossip heartbeats; // with the defaults this is 1666 messages/s. MaxIHaveLength int // MaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat. MaxIHaveMessages int // Time to wait for a message requested through IWANT following an IHAVE advertisement. // If the message is not received within this window, a broken promise is declared and // the router may apply bahavioural penalties. IWantFollowupTime time. Duration } GossipSubParams defines all the gossipsub specific parameters. func DefaultGossipSubParams ¶ added in v0.5.0 func DefaultGossipSubParams() GossipSubParams DefaultGossipSubParams returns the default gossip sub parameters as a config. type GossipSubRouter ¶ type GossipSubRouter struct { // contains filtered or unexported fields } GossipSubRouter is a router that implements the gossipsub protocol. For each topic we have joined, we maintain an overlay through which messages flow; this is the mesh map. For each topic we publish to without joining, we maintain a list of peers to use for injecting our messages in the overlay with stable routes; this is the fanout map. Fanout peer lists are expired if we don't publish any messages to their topic for GossipSubFanoutTTL. func DefaultGossipSubRouter ¶ added in v0.8.2 func DefaultGossipSubRouter(h host. Host) *GossipSubRouter DefaultGossipSubRouter returns a new GossipSubRouter with default parameters. func (*GossipSubRouter) AcceptFrom ¶ added in v0.3.0 func (gs *GossipSubRouter) AcceptFrom(p peer. ID) AcceptStatus func (*GossipSubRouter) AddPeer ¶ func (gs *GossipSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*GossipSubRouter) Attach ¶ func (gs *GossipSubRouter) Attach(p *PubSub) func (*GossipSubRouter) EnoughPeers ¶ added in v0.2.0 func (gs *GossipSubRouter) EnoughPeers(topic string, suggested int) bool func (*GossipSubRouter) HandleRPC ¶ func (gs *GossipSubRouter) HandleRPC(rpc *RPC) func (*GossipSubRouter) Join ¶ func (gs *GossipSubRouter) Join(topic string) func (*GossipSubRouter) Leave ¶ func (gs *GossipSubRouter) Leave(topic string) func (*GossipSubRouter) Protocols ¶ func (gs *GossipSubRouter) Protocols() []protocol. ID func (*GossipSubRouter) Publish ¶ func (gs *GossipSubRouter) Publish(msg *Message) func (*GossipSubRouter) RemovePeer ¶ func (gs *GossipSubRouter) RemovePeer(p peer. ID) func (*GossipSubRouter) WithDefaultTagTracer ¶ added in v0.8.2 func (gs *GossipSubRouter) WithDefaultTagTracer() Option WithDefaultTagTracer returns the tag tracer of the GossipSubRouter as a PubSub option. This is useful for cases where the GossipSubRouter is instantiated externally, and is injected into the GossipSub constructor as a dependency. This allows the tag tracer to be also injected into the GossipSub constructor as a PubSub option dependency. type JSONTracer ¶ added in v0.2.3 type JSONTracer struct { // contains filtered or unexported fields } JSONTracer is a tracer that writes events to a file, encoded in ndjson. func NewJSONTracer ¶ added in v0.2.3 func NewJSONTracer(file string) (* JSONTracer, error) NewJsonTracer creates a new JSONTracer writing traces to file. func OpenJSONTracer ¶ added in v0.2.3 func OpenJSONTracer(file string, flags int, perm os. FileMode) (*JSONTracer, error) OpenJSONTracer creates a new JSONTracer, with explicit control of OpenFile flags and permissions. func (*JSONTracer) Close ¶ added in v0.2.3 func (t *JSONTracer) Close() func (*JSONTracer) Trace ¶ added in v0.2.3 func (t *JSONTracer) Trace(evt * pb. TraceEvent) type MapBlacklist ¶ type MapBlacklist map[peer. ID]struct{} MapBlacklist is a blacklist implementation using a perfect map func (MapBlacklist) Add ¶ func (b MapBlacklist) Add(p peer. ID) bool func (MapBlacklist) Contains ¶ func (b MapBlacklist) Contains(p peer. ID) bool type Message ¶ type Message struct { *pb. Message ID string ReceivedFrom peer. ID ValidatorData interface{} Local bool } func (*Message) GetFrom ¶ func (m *Message) GetFrom() peer. ID type MessageCache ¶ type MessageCache struct { // contains filtered or unexported fields } func NewMessageCache ¶ func NewMessageCache(gossip, history int) * MessageCache NewMessageCache creates a sliding window cache that remembers messages for as long as `history` slots. When queried for messages to advertise, the cache only returns messages in the last `gossip` slots. The `gossip` parameter must be smaller or equal to `history`, or this function will panic. The slack between `gossip` and `history` accounts for the reaction time between when a message is advertised via IHAVE gossip, and the peer pulls it via an IWANT command. func (*MessageCache) Get ¶ func (mc *MessageCache) Get(mid string) (*Message, bool) func (*MessageCache) GetForPeer ¶ added in v0.3.0 func (mc *MessageCache) GetForPeer(mid string, p peer. ID) (*Message, int, bool) func (*MessageCache) GetGossipIDs ¶ func (mc *MessageCache) GetGossipIDs(topic string) []string func (*MessageCache) Put ¶ func (mc *MessageCache) Put(msg *Message) func (*MessageCache) SetMsgIdFn ¶ added in v0.2.5 func (mc *MessageCache) SetMsgIdFn(msgID func(*Message) string) func (*MessageCache) Shift ¶ func (mc *MessageCache) Shift() type MessageSignaturePolicy ¶ added in v0.3.3 type MessageSignaturePolicy uint8 MessageSignaturePolicy describes if signatures are produced, expected, and/or verified. type MsgIdFunction ¶ added in v0.2.5 type MsgIdFunction func(pmsg *pb.Message) string MsgIdFunction returns a unique ID for the passed Message, and PubSub can be customized to use any implementation of this function by configuring it with the Option from WithMessageIdFn. type Option ¶ type Option func(*PubSub) error func WithAppSpecificRpcInspector ¶ added in v0.8.2 func WithAppSpecificRpcInspector(inspector func(peer. ID, *RPC) error) Option WithAppSpecificRpcInspector sets a hook that inspect incomings RPCs prior to processing them. The inspector is invoked on an accepted RPC just before it is handled. If inspector's error is nil, the RPC is handled. Otherwise, it is dropped. func WithBlacklist ¶ func WithBlacklist(b Blacklist) Option WithBlacklist provides an implementation of the blacklist; the default is a MapBlacklist func WithDefaultValidator ¶ added in v0.9.2 func WithDefaultValidator(val interface{}, opts ...ValidatorOpt) Option / Options WithDefaultValidator adds a validator that applies to all topics by default; it can be used more than once and add multiple validators. Having a defult validator does not inhibit registering a per topic validator. func WithDirectConnectTicks ¶ added in v0.3.2 func WithDirectConnectTicks(t uint64) Option WithDirectConnectTicks is a gossipsub router option that sets the number of heartbeat ticks between attempting to reconnect direct peers that are not currently connected. A \"tick\" is based on the heartbeat interval, which is 1s by default. The default value for direct connect ticks is 300. func WithDirectPeers ¶ added in v0.3.0 func WithDirectPeers(pis []peer. AddrInfo) Option WithDirectPeers is a gossipsub router option that specifies peers with direct peering agreements. These peers are connected outside of the mesh, with all (valid) message unconditionally forwarded to them. The router will maintain open connections to these peers. Note that the peering agreement should be reciprocal with direct peers symmetrically configured at both ends. func WithDiscovery ¶ added in v0.2.0 func WithDiscovery(d discovery. Discovery, opts ...DiscoverOpt) Option WithDiscovery provides a discovery mechanism used to bootstrap and provide peers into PubSub func WithEventTracer ¶ added in v0.2.3 func WithEventTracer(tracer EventTracer) Option WithEventTracer provides a tracer for the pubsub system func WithFloodPublish ¶ added in v0.3.0 func WithFloodPublish(floodPublish bool) Option WithFloodPublish is a gossipsub router option that enables flood publishing. When this is enabled, published messages are forwarded to all peers with score >= to publishThreshold func WithGossipSubParams ¶ added in v0.5.0 func WithGossipSubParams(cfg GossipSubParams) Option WithGossipSubParams is a gossip sub router option that allows a custom config to be set when instantiating the gossipsub router. func WithGossipSubProtocols ¶ added in v0.5.0 func WithGossipSubProtocols(protos []protocol. ID, feature GossipSubFeatureTest) Option WithGossipSubProtocols is a gossipsub router option that configures a custom protocol list and feature test function func WithMaxMessageSize ¶ added in v0.3.0 func WithMaxMessageSize(maxMessageSize int) Option WithMaxMessageSize sets the global maximum message size for pubsub wire messages. The default value is 1MiB (DefaultMaxMessageSize). Observe the following warnings when setting this option. WARNING #1: Make sure to change the default protocol prefixes for floodsub (FloodSubID) and gossipsub (GossipSubID). This avoids accidentally joining the public default network, which uses the default max message size, and therefore will cause messages to be dropped. WARNING #2: Reducing the default max message limit is fine, if you are certain that your application messages will not exceed the new limit. However, be wary of increasing the limit, as pubsub networks are naturally write-amplifying, i.e. for every message we receive, we send D copies of the message to our peers. If those messages are large, the bandwidth requirements will grow linearly. Note that propagation is sent on the uplink, which traditionally is more constrained than the downlink. Instead, consider out-of-band retrieval for large messages, by sending a CID (Content-ID) or another type of locator, such that messages can be fetched on-demand, rather than being pushed proactively. Under this design, you'd use the pubsub layer as a signalling system, rather than a data delivery system. func WithMessageAuthor ¶ func WithMessageAuthor(author peer. ID) Option WithMessageAuthor sets the author for outbound messages to the given peer ID (defaults to the host's ID). If message signing is enabled, the private key must be available in the host's peerstore. func WithMessageIdFn ¶ added in v0.2.5 func WithMessageIdFn(fn MsgIdFunction) Option WithMessageIdFn is an option to customize the way a message ID is computed for a pubsub message. The default ID function is DefaultMsgIdFn (concatenate source and seq nr.), but it can be customized to e.g. the hash of the message. func WithMessageSignaturePolicy ¶ added in v0.3.3 func WithMessageSignaturePolicy(policy MessageSignaturePolicy) Option WithMessageSignaturePolicy sets the mode of operation for producing and verifying message signatures. func WithMessageSigning ¶ func WithMessageSigning(enabled bool) Option WithMessageSigning enables or disables message signing (enabled by default). Deprecated: signature verification without message signing, or message signing without verification, are not recommended. func WithNoAuthor ¶ added in v0.3.3 func WithNoAuthor() Option WithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures.","func WithNoAuthor ¶ added in v0.3.3 func WithNoAuthor() Option WithNoAuthor omits the author and seq-number data of messages, and disables the use of signatures. Not recommended to use with the default message ID function, see WithMessageIdFn. func WithPeerExchange ¶ added in v0.3.0 func WithPeerExchange(doPX bool) Option WithPeerExchange is a gossipsub router option that enables Peer eXchange on PRUNE. This should generally be enabled in bootstrappers and well connected/trusted nodes used for bootstrapping. func WithPeerFilter ¶ added in v0.5.5 func WithPeerFilter(filter PeerFilter) Option WithPeerFilter is an option to set a filter for pubsub peers. The default peer filter is DefaultPeerFilter (which always returns true), but it can be customized to any custom implementation. func WithPeerGater ¶ added in v0.3.6 func WithPeerGater(params *PeerGaterParams) Option WithPeerGater is a gossipsub router option that enables reactive validation queue management. The Gater is activated if the ratio of throttled/validated messages exceeds the specified threshold. Once active, the Gater probabilistically throttles peers _before_ they enter the validation queue, performing Random Early Drop. The throttle decision is randomized, with the probability of allowing messages to enter the validation queue controlled by the statistical observations of the performance of all peers in the IP address of the gated peer. The Gater deactivates if there is no validation throttlinc occurring for the specified quiet interval. func WithPeerOutboundQueueSize ¶ added in v0.2.2 func WithPeerOutboundQueueSize(size int) Option WithPeerOutboundQueueSize is an option to set the buffer size for outbound messages to a peer We start dropping messages to a peer if the outbound queue if full func WithPeerScore ¶ added in v0.3.0 func WithPeerScore(params *PeerScoreParams, thresholds *PeerScoreThresholds) Option WithPeerScore is a gossipsub router option that enables peer scoring. func WithPeerScoreInspect ¶ added in v0.3.0 func WithPeerScoreInspect(inspect interface{}, period time. Duration) Option WithPeerScoreInspect is a gossipsub router option that enables peer score debugging. When this option is enabled, the supplied function will be invoked periodically to allow the application to inspect or dump the scores for connected peers. The supplied function can have one of two signatures: PeerScoreInspectFn, which takes a map of peer IDs to score. ExtendedPeerScoreInspectFn, which takes a map of peer IDs to PeerScoreSnapshots and allows inspection of individual score components for debugging peer scoring. This option must be passed _after_ the WithPeerScore option. func WithProtocolMatchFn ¶ added in v0.5.4 func WithProtocolMatchFn(m ProtocolMatchFn) Option WithProtocolMatchFn sets a custom matching function for protocol selection to be used by the protocol handler on the Host's Mux. Should be combined with WithGossipSubProtocols feature function for checking if certain protocol features are supported func WithRawTracer ¶ added in v0.5.0 func WithRawTracer(tracer RawTracer) Option WithRawTracer adds a raw tracer to the pubsub system. Multiple tracers can be added using multiple invocations of the option. func WithSeenMessagesStrategy ¶ added in v0.8.3 func WithSeenMessagesStrategy(strategy timecache. Strategy) Option WithSeenMessagesStrategy configures which type of lookup/cleanup strategy is used by the seen messages cache func WithSeenMessagesTTL ¶ added in v0.7.0 func WithSeenMessagesTTL(ttl time. Duration) Option WithSeenMessagesTTL configures when a previously seen message ID can be forgotten about func WithStrictSignatureVerification ¶ func WithStrictSignatureVerification(required bool) Option WithStrictSignatureVerification is an option to enable or disable strict message signing. When enabled (which is the default), unsigned messages will be discarded. Deprecated: signature verification without message signing, or message signing without verification, are not recommended. func WithSubscriptionFilter ¶ added in v0.3.6 func WithSubscriptionFilter(subFilter SubscriptionFilter) Option WithSubscriptionFilter is a pubsub option that specifies a filter for subscriptions in topics of interest. func WithValidateQueueSize ¶ added in v0.2.6 func WithValidateQueueSize(n int) Option WithValidateQueueSize sets the buffer of validate queue. Defaults to 32. When queue is full, validation is throttled and new messages are dropped. func WithValidateThrottle ¶ func WithValidateThrottle(n int) Option WithValidateThrottle sets the upper bound on the number of active validation goroutines across all topics. The default is 8192. func WithValidateWorkers ¶ added in v0.0.3 func WithValidateWorkers(n int) Option WithValidateWorkers sets the number of synchronous validation worker goroutines. Defaults to NumCPU. The synchronous validation workers perform signature validation, apply inline user validators, and schedule asynchronous user validators. You can adjust this parameter to devote less cpu time to synchronous validation. type PBTracer ¶ added in v0.2.3 type PBTracer struct { // contains filtered or unexported fields } PBTracer is a tracer that writes events to a file, as delimited protobufs. func NewPBTracer ¶ added in v0.2.3 func NewPBTracer(file string) (*PBTracer, error) func OpenPBTracer ¶ added in v0.2.3 func OpenPBTracer(file string, flags int, perm os. FileMode) (*PBTracer, error) OpenPBTracer creates a new PBTracer, with explicit control of OpenFile flags and permissions. func (*PBTracer) Close ¶ added in v0.2.3 func (t *PBTracer) Close() func (*PBTracer) Trace ¶ added in v0.2.3 func (t *PBTracer) Trace(evt * pb. TraceEvent) type PeerEvent ¶ added in v0.1.1 type PeerEvent struct { Type EventType Peer peer. ID } type PeerFilter ¶ added in v0.5.5 type PeerFilter func(pid peer. ID, topic string) bool PeerFilter is used to filter pubsub peers. It should return true for peers that are accepted for a given topic. PubSub can be customized to use any implementation of this function by configuring it with the Option from WithPeerFilter. type PeerGaterParams ¶ added in v0.3.6 type PeerGaterParams struct { // when the ratio of throttled/validated messages exceeds this threshold, the gater turns on Threshold float64 // (linear) decay parameter for gater counters GlobalDecay float64 // global counter decay SourceDecay float64 // per IP counter decay // decay interval DecayInterval time. Duration // counter zeroing threshold DecayToZero float64 // how long to retain stats RetainStats time. Duration // quiet interval before turning off the gater; if there are no validation throttle events // for this interval, the gater turns off Quiet time. Duration // weight of duplicate message deliveries DuplicateWeight float64 // weight of ignored messages IgnoreWeight float64 // weight of rejected messages RejectWeight float64 // priority topic delivery weights TopicDeliveryWeights map[string]float64 } PeerGaterParams groups together parameters that control the operation of the peer gater func DefaultPeerGaterParams ¶ added in v0.3.6 func DefaultPeerGaterParams() *PeerGaterParams DefaultPeerGaterParams creates a new PeerGaterParams struct using default values func NewPeerGaterParams ¶ added in v0.3.6 func NewPeerGaterParams(threshold, globalDecay, sourceDecay float64) *PeerGaterParams NewPeerGaterParams creates a new PeerGaterParams struct, using the specified threshold and decay parameters and default values for all other parameters. func (*PeerGaterParams) WithTopicDeliveryWeights ¶ added in v0.3.6 func (p *PeerGaterParams) WithTopicDeliveryWeights(w map[string]float64) *PeerGaterParams WithTopicDeliveryWeights is a fluid setter for the priority topic delivery weights type PeerMetadataStore ¶ added in v0.9.2 type PeerMetadataStore interface { // Get retrieves the metadata associated with a peer; // It should return nil if there is no metadata associated with the peer and not an error. Get(context. Context, peer.ID) ([]byte, error) // Put sets the metadata associated with a peer. Put(context. Context, peer. ID, []byte) error } PeerMetadataStore is an interface for storing and retrieving per peer metadata type PeerScoreInspectFn ¶ added in v0.3.0 type PeerScoreInspectFn = func(map[peer. ID]float64) type PeerScoreParams ¶ added in v0.3.0 type PeerScoreParams struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // Score parameters per topic. Topics map[string]*TopicScoreParams // Aggregate topic score cap; this limits the total contribution of topics towards a positive // score. It must be positive (or 0 for no cap). TopicScoreCap float64 // P5: Application-specific peer scoring AppSpecificScore func(p peer. ID) float64 AppSpecificWeight float64 // P6: IP-colocation factor. // The parameter has an associated counter which counts the number of peers with the same IP. // If the number of peers in the same IP exceeds IPColocationFactorThreshold, then the value // is the square of the difference, ie (PeersInSameIP - IPColocationThreshold)^2. // If the number of peers in the same IP is less than the threshold, then the value is 0. // The weight of the parameter MUST be negative, unless you want to disable for testing. // Note: In order to simulate many IPs in a managable manner when testing, you can set the weight to 0 // thus disabling the IP colocation penalty. IPColocationFactorWeight float64 IPColocationFactorThreshold int IPColocationFactorWhitelist []*net. IPNet // P7: behavioural pattern penalties. // This parameter has an associated counter which tracks misbehaviour as detected by the // router. The router currently applies penalties for the following behaviors: // - attempting to re-graft before the prune backoff time has elapsed. // - not following up in IWANT requests for messages advertised with IHAVE. // // The value of the parameter is the square of the counter over the threshold, which decays with // BehaviourPenaltyDecay. // The weight of the parameter MUST be negative (or zero to disable). BehaviourPenaltyWeight, BehaviourPenaltyThreshold, BehaviourPenaltyDecay float64 // the decay interval for parameter counters. DecayInterval time. Duration // counter value below which it is considered 0. DecayToZero float64 // time to remember counters for a disconnected peer. RetainScore time. Duration // time to remember a message delivery for. Default to global TimeCacheDuration if 0. SeenMsgTTL time. Duration } type PeerScoreSnapshot ¶ added in v0.3.3 type PeerScoreSnapshot struct { Score float64 Topics map[string]*TopicScoreSnapshot AppSpecificScore float64 IPColocationFactor float64 BehaviourPenalty float64 } type PeerScoreThresholds ¶ added in v0.3.0 type PeerScoreThresholds struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // GossipThreshold is the score threshold below which gossip propagation is suppressed; // should be negative. GossipThreshold float64 // PublishThreshold is the score threshold below which we shouldn't publish when using flood // publishing (also applies to fanout and floodsub peers); should be negative and <= GossipThreshold. PublishThreshold float64 // GraylistThreshold is the score threshold below which message processing is suppressed altogether, // implementing an effective gray list according to peer score; should be negative and <= PublishThreshold. GraylistThreshold float64 // AcceptPXThreshold is the score threshold below which PX will be ignored; this should be positive // and limited to scores attainable by bootstrappers and other trusted nodes. AcceptPXThreshold float64 // OpportunisticGraftThreshold is the median mesh score threshold before triggering opportunistic // grafting; this should have a small positive value. OpportunisticGraftThreshold float64 } type ProtocolMatchFn ¶ added in v0.5.4 type ProtocolMatchFn = func(protocol. ID) func(protocol. ID) bool type ProvideKey ¶ added in v0.7.0 type ProvideKey func() (crypto. PrivKey, peer. ID) ProvideKey is a function that provides a private key and its associated peer ID when publishing a new message type PubOpt ¶ added in v0.2.0 type PubOpt func(pub *PublishOptions) error func WithLocalPublication ¶ added in v0.8.0 func WithLocalPublication(local bool) PubOpt WithLocalPublication returns a publishing option to notify in-process subscribers only. It prevents message publication to mesh peers. Useful in edge cases where the msg needs to be only delivered to the in-process subscribers, e.g. not to spam the network with outdated msgs. Should not be used specifically for in-process pubsubing. func WithReadiness ¶ added in v0.2.0 func WithReadiness(ready RouterReady) PubOpt WithReadiness returns a publishing option for only publishing when the router is ready. This option is not useful unless PubSub is also using WithDiscovery func WithSecretKeyAndPeerId ¶ added in v0.7.0 func WithSecretKeyAndPeerId(key crypto. PrivKey, pid peer. ID) PubOpt WithSecretKeyAndPeerId returns a publishing option for providing a custom private key and its corresponding peer ID This option is useful when we want to send messages from \"virtual\", never-connectable peers in the network type PubSub ¶ type PubSub struct { // contains filtered or unexported fields } PubSub is the implementation of the pubsub system. func NewFloodSub ¶ func NewFloodSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) NewFloodSub returns a new PubSub object using the FloodSubRouter. func NewFloodsubWithProtocols ¶ func NewFloodsubWithProtocols(ctx context. Context, h host. Host, ps []protocol. ID, opts ...Option) (*PubSub, error) NewFloodsubWithProtocols returns a new floodsub-enabled PubSub objecting using the protocols specified in ps. func NewGossipSub ¶ func NewGossipSub(ctx context. Context, h host. Host, opts ...Option) (*PubSub, error) NewGossipSub returns a new PubSub object using the default GossipSubRouter as the router. func NewGossipSubWithRouter ¶ added in v0.8.2 func NewGossipSubWithRouter(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) NewGossipSubWithRouter returns a new PubSub object using the given router. func NewPubSub ¶ func NewPubSub(ctx context. Context, h host. Host, rt PubSubRouter, opts ...Option) (*PubSub, error) NewPubSub returns a new PubSub management object. func NewRandomSub ¶ func NewRandomSub(ctx context. Context, h host. Host, size int, opts ...Option) (*PubSub, error) NewRandomSub returns a new PubSub object using RandomSubRouter as the router. func (*PubSub) BlacklistPeer ¶ func (p *PubSub) BlacklistPeer(pid peer. ID) BlacklistPeer blacklists a peer; all messages from this peer will be unconditionally dropped. func (*PubSub) GetTopics ¶ func (p *PubSub) GetTopics() []string GetTopics returns the topics this node is subscribed to. func (*PubSub) Join ¶ added in v0.2.0 func (p *PubSub) Join(topic string, opts ...TopicOpt) (*Topic, error) Join joins the topic and returns a Topic handle. Only one Topic handle should exist per topic, and Join will error if the Topic handle already exists. func (*PubSub) ListPeers ¶ func (p *PubSub) ListPeers(topic string) []peer. ID ListPeers returns a list of peers we are connected to in the given topic. func (*PubSub) Publish deprecated func (p *PubSub) Publish(topic string, data []byte, opts ...PubOpt) error Publish publishes data to the given topic. Deprecated: use pubsub. Join() and topic. Publish() instead func (*PubSub) RegisterTopicValidator ¶ func (p *PubSub) RegisterTopicValidator(topic string, val interface{}, opts ...ValidatorOpt) error RegisterTopicValidator registers a validator for topic. By default validators are asynchronous, which means they will run in a separate goroutine. The number of active goroutines is controlled by global and per topic validator throttles; if it exceeds the throttle threshold, messages will be dropped. func (*PubSub) Subscribe deprecated func (p *PubSub) Subscribe(topic string, opts ...SubOpt) (*Subscription, error) Subscribe returns a new Subscription for the given topic. Note that subscription is not an instantaneous operation. It may take some time before the subscription is processed by the pubsub main loop and propagated to our peers. Deprecated: use pubsub. Join() and topic. Subscribe() instead func (*PubSub) UnregisterTopicValidator ¶ func (p *PubSub) UnregisterTopicValidator(topic string) error UnregisterTopicValidator removes a validator from a topic. Returns an error if there was no validator registered with the topic. type PubSubNotif ¶ type PubSubNotif PubSub func (*PubSubNotif) ClosedStream ¶ func (p *PubSubNotif) ClosedStream(n network. Network, s network. Stream) func (*PubSubNotif) Connected ¶ func (p *PubSubNotif) Connected(n network. Network, c network. Conn) func (*PubSubNotif) Disconnected ¶ func (p *PubSubNotif) Disconnected(n network. Network, c network. Conn) func (*PubSubNotif) Initialize ¶ added in v0.4.1 func (p *PubSubNotif) Initialize() func (*PubSubNotif) Listen ¶ func (p *PubSubNotif) Listen(n network. Network, _ ma. Multiaddr) func (*PubSubNotif) ListenClose ¶ func (p *PubSubNotif) ListenClose(n network. Network, _ ma. Multiaddr) func (*PubSubNotif) OpenedStream ¶ func (p *PubSubNotif) OpenedStream(n network. Network, s network. Stream) type PubSubRouter ¶ type PubSubRouter interface { // Protocols returns the list of protocols supported by the router. Protocols() []protocol. ID // Attach is invoked by the PubSub constructor to attach the router to a // freshly initialized PubSub instance. Attach(*PubSub) // AddPeer notifies the router that a new peer has been connected. AddPeer(peer.ID, protocol. ID) // RemovePeer notifies the router that a peer has been disconnected. RemovePeer(peer.ID) // EnoughPeers returns whether the router needs more peers before it's ready to publish new records. // Suggested (if greater than 0) is a suggested number of peers that the router should need. EnoughPeers(topic string, suggested int) bool // AcceptFrom is invoked on any incoming message before pushing it to the validation pipeline // or processing control information. // Allows routers with internal scoring to vet peers before committing any processing resources // to the message and implement an effective graylist and react to validation queue overload. AcceptFrom(peer.ID) AcceptStatus // HandleRPC is invoked to process control messages in the RPC envelope. // It is invoked after subscriptions and payload messages have been processed. HandleRPC(*RPC) // Publish is invoked to forward a new message that has been validated. Publish(*Message) // Join notifies the router that we want to receive and forward messages in a topic. // It is invoked after the subscription announcement. Join(topic string) // Leave notifies the router that we are no longer interested in a topic. // It is invoked after the unsubscription announcement. Leave(topic string) } PubSubRouter is the message router component of PubSub. type PublishOptions ¶ added in v0.2.0 type PublishOptions struct { // contains filtered or unexported fields } type RPC ¶ type RPC struct { pb.RPC // contains filtered or unexported fields } type RandomSubRouter ¶ type RandomSubRouter struct { // contains filtered or unexported fields } RandomSubRouter is a router that implements a random propagation strategy. For each message, it selects the square root of the network size peers, with a min of RandomSubD, and forwards the message to them. func (*RandomSubRouter) AcceptFrom ¶ added in v0.3.0 func (rs *RandomSubRouter) AcceptFrom(peer.ID) AcceptStatus func (*RandomSubRouter) AddPeer ¶ func (rs *RandomSubRouter) AddPeer(p peer. ID, proto protocol. ID) func (*RandomSubRouter) Attach ¶ func (rs *RandomSubRouter) Attach(p *PubSub) func (*RandomSubRouter) EnoughPeers ¶ added in v0.2.0 func (rs *RandomSubRouter) EnoughPeers(topic string, suggested int) bool func (*RandomSubRouter) HandleRPC ¶ func (rs *RandomSubRouter) HandleRPC(rpc *RPC) func (*RandomSubRouter) Join ¶ func (rs *RandomSubRouter) Join(topic string) func (*RandomSubRouter) Leave ¶ func (rs *RandomSubRouter) Leave(topic string) func (*RandomSubRouter) Protocols ¶ func (rs *RandomSubRouter) Protocols() []protocol. ID func (*RandomSubRouter) Publish ¶ func (rs *RandomSubRouter) Publish(msg *Message) func (*RandomSubRouter) RemovePeer ¶ func (rs *RandomSubRouter) RemovePeer(p peer. ID) type RawTracer ¶ added in v0.5.0 type RawTracer interface { // AddPeer is invoked when a new peer is added. AddPeer(p peer. ID, proto protocol. ID) // RemovePeer is invoked when a peer is removed. RemovePeer(p peer. ID) // Join is invoked when a new topic is joined Join(topic string) // Leave is invoked when a topic is abandoned Leave(topic string) // Graft is invoked when a new peer is grafted on the mesh (gossipsub) Graft(p peer. ID, topic string) // Prune is invoked when a peer is pruned from the message (gossipsub) Prune(p peer. ID, topic string) // ValidateMessage is invoked when a message first enters the validation pipeline. ValidateMessage(msg *Message) // DeliverMessage is invoked when a message is delivered DeliverMessage(msg *Message) // RejectMessage is invoked when a message is Rejected or Ignored. // The reason argument can be one of the named strings Reject*. RejectMessage(msg *Message, reason string) // DuplicateMessage is invoked when a duplicate message is dropped. DuplicateMessage(msg *Message) // ThrottlePeer is invoked when a peer is throttled by the peer gater. ThrottlePeer(p peer. ID) // RecvRPC is invoked when an incoming RPC is received. RecvRPC(rpc *RPC) // SendRPC is invoked when a RPC is sent. SendRPC(rpc *RPC, p peer. ID) // DropRPC is invoked when an outbound RPC is dropped, typically because of a queue full. DropRPC(rpc *RPC, p peer. ID) // UndeliverableMessage is invoked when the consumer of Subscribe is not reading messages fast enough and // the pressure release mechanism trigger, dropping messages. UndeliverableMessage(msg *Message) } RawTracer is a low level tracing interface that allows an application to trace the internal operation of the pubsub subsystem. Note that the tracers are invoked synchronously, which means that application tracers must take care to not block or modify arguments. Warning: this interface is not fixed, we may be adding new methods as necessitated by the system in the future. type RelayCancelFunc ¶ added in v0.3.0 type RelayCancelFunc func() type RemoteTracer ¶ added in v0.2.3 type RemoteTracer struct { // contains filtered or unexported fields } RemoteTracer is a tracer that sends trace events to a remote peer func NewRemoteTracer ¶ added in v0.2.3 func NewRemoteTracer(ctx context. Context, host host. Host, pi peer. AddrInfo) (*RemoteTracer, error) NewRemoteTracer constructs a RemoteTracer, tracing to the peer identified by pi func (*RemoteTracer) Close ¶ added in v0.2.3 func (t *RemoteTracer) Close() func (*RemoteTracer) Trace ¶ added in v0.2.3 func (t *RemoteTracer) Trace(evt * pb. TraceEvent) type RouterReady ¶ added in v0.2.0 type RouterReady func(rt PubSubRouter, topic string) (bool, error) RouterReady is a function that decides if a router is ready to publish func MinTopicSize ¶ added in v0.2.0 func MinTopicSize(size int) RouterReady MinTopicSize returns a function that checks if a router is ready for publishing based on the topic size. The router ultimately decides the whether it is ready or not, the given size is just a suggestion. Note that the topic size does not include the router in the count. type SubOpt ¶ type SubOpt func(sub *Subscription) error func WithBufferSize ¶ added in v0.5.0 func WithBufferSize(size int) SubOpt WithBufferSize is a Subscribe option to customize the size of the subscribe output buffer. The default length is 32 but it can be configured to avoid dropping messages if the consumer is not reading fast enough. type Subscription ¶ type Subscription struct { // contains filtered or unexported fields } Subscription handles the details of a particular Topic subscription. There may be many subscriptions for a given Topic. func (*Subscription) Cancel ¶ func (sub *Subscription) Cancel() Cancel closes the subscription. If this is the last active subscription then pubsub will send an unsubscribe announcement to the network. func (*Subscription) Next ¶ func (sub *Subscription) Next(ctx context. Context) (*Message, error) Next returns the next message in our subscription func (*Subscription) Topic ¶ func (sub *Subscription) Topic() string Topic returns the topic string associated with the Subscription type SubscriptionFilter ¶ added in v0.3.6 type SubscriptionFilter interface { // CanSubscribe returns true if the topic is of interest and we can subscribe to it CanSubscribe(topic string) bool // FilterIncomingSubscriptions is invoked for all RPCs containing subscription notifications. // It should filter only the subscriptions of interest and my return an error if (for instance) // there are too many subscriptions. FilterIncomingSubscriptions(peer. ID, []*pb.RPC_SubOpts) ([]*pb.RPC_SubOpts, error) } SubscriptionFilter is a function that tells us whether we are interested in allowing and tracking subscriptions for a given topic. The filter is consulted whenever a subscription notification is received by another peer; if the filter returns false, then the notification is ignored. The filter is also consulted when joining topics; if the filter returns false, then the Join operation will result in an error. func NewAllowlistSubscriptionFilter ¶ added in v0.3.6 func NewAllowlistSubscriptionFilter(topics ...string) SubscriptionFilter NewAllowlistSubscriptionFilter creates a subscription filter that only allows explicitly specified topics for local subscriptions and incoming peer subscriptions. func NewRegexpSubscriptionFilter ¶ added in v0.3.6 func NewRegexpSubscriptionFilter(rx *regexp. Regexp) SubscriptionFilter NewRegexpSubscriptionFilter creates a subscription filter that only allows topics that match a regular expression for local subscriptions and incoming peer subscriptions. Warning: the user should take care to match start/end of string in the supplied regular expression, otherwise the filter might match unwanted topics unexpectedly. func WrapLimitSubscriptionFilter ¶ added in v0.3.6 func WrapLimitSubscriptionFilter(filter SubscriptionFilter, limit int) SubscriptionFilter WrapLimitSubscriptionFilter wraps a subscription filter with a hard limit in the number of subscriptions allowed in an RPC message. type TimeCachedBlacklist ¶ added in v0.2.6 type TimeCachedBlacklist struct { // contains filtered or unexported fields } TimeCachedBlacklist is a blacklist implementation using a time cache func (*TimeCachedBlacklist) Add ¶ added in v0.2.6 func (b *TimeCachedBlacklist) Add(p peer. ID) bool Add returns a bool saying whether Add of peer was successful func (*TimeCachedBlacklist) Contains ¶ added in v0.2.6 func (b *TimeCachedBlacklist) Contains(p peer. ID) bool type Topic ¶ added in v0.2.0 type Topic struct { // contains filtered or unexported fields } Topic is the handle for a pubsub topic func (*Topic) Close ¶ added in v0.2.0 func (t *Topic) Close() error Close closes down the topic. Will return an error unless there are no active event handlers or subscriptions. Does not error if the topic is already closed. func (*Topic) EventHandler ¶ added in v0.2.0 func (t *Topic) EventHandler(opts ...TopicEventHandlerOpt) (*TopicEventHandler, error) EventHandler creates a handle for topic specific events Multiple event handlers may be created and will operate independently of each other func (*Topic) ListPeers ¶ added in v0.2.0 func (t *Topic) ListPeers() []peer. ID ListPeers returns a list of peers we are connected to in the given topic. func (*Topic) Publish ¶ added in v0.2.0 func (t *Topic) Publish(ctx context. Context, data []byte, opts ...PubOpt) error Publish publishes data to topic. func (*Topic) Relay ¶ added in v0.3.0 func (t *Topic) Relay() (RelayCancelFunc, error) Relay enables message relaying for the topic and returns a reference cancel function. Subsequent calls increase the reference counter. To completely disable the relay, all references must be cancelled. func (*Topic) SetScoreParams ¶ added in v0.3.6 func (t *Topic) SetScoreParams(p *TopicScoreParams) error SetScoreParams sets the topic score parameters if the pubsub router supports peer scoring func (*Topic) String ¶ added in v0.3.5 func (t *Topic) String() string String returns the topic associated with t func (*Topic) Subscribe ¶ added in v0.2.0 func (t *Topic) Subscribe(opts ...SubOpt) (*Subscription, error) Subscribe returns a new Subscription for the topic. Note that subscription is not an instantaneous operation. It may take some time before the subscription is processed by the pubsub main loop and propagated to our peers. type TopicEventHandler ¶ added in v0.2.0 type TopicEventHandler struct { // contains filtered or unexported fields } TopicEventHandler is used to manage topic specific events. No Subscription is required to receive events. func (*TopicEventHandler) Cancel ¶ added in v0.2.0 func (t *TopicEventHandler) Cancel() Cancel closes the topic event handler func (*TopicEventHandler) NextPeerEvent ¶ added in v0.2.0 func (t *TopicEventHandler) NextPeerEvent(ctx context. Context) (PeerEvent, error) NextPeerEvent returns the next event regarding subscribed peers Guarantees: Peer Join and Peer Leave events for a given peer will fire in order. Unless a peer both Joins and Leaves before NextPeerEvent emits either event all events will eventually be received from NextPeerEvent. type TopicEventHandlerOpt ¶ added in v0.2.0 type TopicEventHandlerOpt func(t *TopicEventHandler) error type TopicOpt ¶ added in v0.2.0 type TopicOpt func(t *Topic) error func WithTopicMessageIdFn ¶ added in v0.7.0 func WithTopicMessageIdFn(msgId MsgIdFunction) TopicOpt WithTopicMessageIdFn sets custom MsgIdFunction for a Topic, enabling topics to have own msg id generation rules. type TopicOptions ¶ added in v0.2.0 type TopicOptions struct{} type TopicScoreParams ¶ added in v0.3.0 type TopicScoreParams struct { // whether it is allowed to just set some params and not all of them.","type TopicOptions ¶ added in v0.2.0 type TopicOptions struct{} type TopicScoreParams ¶ added in v0.3.0 type TopicScoreParams struct { // whether it is allowed to just set some params and not all of them. SkipAtomicValidation bool // The weight of the topic. TopicWeight float64 // P1: time in the mesh // This is the time the peer has been grafted in the mesh. // The value of the parameter is the time/TimeInMeshQuantum, capped by TimeInMeshCap. // The weight of the parameter MUST be positive (or zero to disable). TimeInMeshWeight float64 TimeInMeshQuantum time. Duration TimeInMeshCap float64 // P2: first message deliveries // This is the number of message deliveries in the topic. // The value of the parameter is a counter, decaying with FirstMessageDeliveriesDecay, and capped // by FirstMessageDeliveriesCap. // The weight of the parameter MUST be positive (or zero to disable). FirstMessageDeliveriesWeight, FirstMessageDeliveriesDecay float64 FirstMessageDeliveriesCap float64 // P3: mesh message deliveries // This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of // message validation; deliveries during validation also count and are retroactively applied // when validation succeeds. // This window accounts for the minimum time before a hostile mesh peer trying to game the score // could replay back a valid message we just sent them. // It effectively tracks first and near-first deliveries, i.e., a message seen from a mesh peer // before we have forwarded it to them. // The parameter has an associated counter, decaying with MeshMessageDeliveriesDecay. // If the counter exceeds the threshold, its value is 0. // If the counter is below the MeshMessageDeliveriesThreshold, the value is the square of // the deficit, ie (MessageDeliveriesThreshold - counter)^2 // The penalty is only activated after MeshMessageDeliveriesActivation time in the mesh. // The weight of the parameter MUST be negative (or zero to disable). MeshMessageDeliveriesWeight, MeshMessageDeliveriesDecay float64 MeshMessageDeliveriesCap, MeshMessageDeliveriesThreshold float64 MeshMessageDeliveriesWindow, MeshMessageDeliveriesActivation time. Duration // P3b: sticky mesh propagation failures // This is a sticky penalty that applies when a peer gets pruned from the mesh with an active // mesh message delivery penalty. // The weight of the parameter MUST be negative (or zero to disable) MeshFailurePenaltyWeight, MeshFailurePenaltyDecay float64 // P4: invalid messages // This is the number of invalid messages in the topic. // The value of the parameter is the square of the counter, decaying with // InvalidMessageDeliveriesDecay. // The weight of the parameter MUST be negative (or zero to disable). InvalidMessageDeliveriesWeight, InvalidMessageDeliveriesDecay float64 } type TopicScoreSnapshot ¶ added in v0.3.3 type TopicScoreSnapshot struct { TimeInMesh time. Duration FirstMessageDeliveries float64 MeshMessageDeliveries float64 InvalidMessageDeliveries float64 } type ValidationError ¶ added in v0.5.0 type ValidationError struct { Reason string } ValidationError is an error that may be signalled from message publication when the message fails validation func ( ValidationError) Error ¶ added in v0.5.0 func (e ValidationError) Error() string type ValidationResult ¶ added in v0.3.0 type ValidationResult int ValidationResult represents the decision of an extended validator type Validator ¶ type Validator func(context. Context, peer. ID, *Message) bool Validator is a function that validates a message with a binary decision: accept or reject. type ValidatorEx ¶ added in v0.3.0 type ValidatorEx func(context. Context, peer. ID, *Message) ValidationResult ValidatorEx is an extended validation function that validates a message with an enumerated decision func NewBasicSeqnoValidator ¶ added in v0.9.2 func NewBasicSeqnoValidator(meta PeerMetadataStore) ValidatorEx NewBasicSeqnoValidator constructs a BasicSeqnoValidator using the givven PeerMetadataStore. type ValidatorOpt ¶ type ValidatorOpt func(addVal *addValReq) error ValidatorOpt is an option for RegisterTopicValidator. func WithValidatorConcurrency ¶ func WithValidatorConcurrency(n int) ValidatorOpt WithValidatorConcurrency is an option that sets the topic validator throttle. This controls the number of active validation goroutines for the topic; the default is 1024. func WithValidatorInline ¶ added in v0.0.3 func WithValidatorInline(inline bool) ValidatorOpt WithValidatorInline is an option that sets the validation disposition to synchronous: it will be executed inline in validation front-end, without spawning a new goroutine. This is suitable for simple or cpu-bound validators that do not block. func WithValidatorTimeout ¶ func WithValidatorTimeout(timeout time. Duration) ValidatorOpt WithValidatorTimeout is an option that sets a timeout for an (asynchronous) topic validator. By default there is no timeout in asynchronous validators. Source Files ¶ View all Source files backoff.go blacklist.go comm.go discovery.go doc.go floodsub.go gossip_tracer.go gossipsub.go gossipsub_feat.go mcache.go midgen.go notify.go peer_gater.go pubsub.go randomsub.go score.go score_params.go sign.go subscription.go subscription_filter.go tag_tracer.go topic.go trace.go tracer.go validation.go validation_builtin.go Directories ¶ Show internal Collapse all Path Synopsis compat pb timecache Click to show internal directories. Click to hide internal directories. Why Go Use Cases Case Studies Get Started Playground Tour Stack Overflow Help Packages Standard Library Sub-repositories About Go Packages About Download Blog Issue Tracker Release Notes Brand Guidelines Code of Conduct Connect Twitter GitHub Slack r/golang Meetup Golang Weekly Copyright Terms of Service Privacy Policy Report an Issue Theme Toggle Shortcuts Modal Jump to Close Keyboard shortcuts ? : This menu / : Search site f or F : Jump to y or Y : Canonical URL Close go.dev uses cookies from Google to deliver and enhance the quality of its services and to analyze traffic. Learn more. Okay"],"chunk_summaries":["The text provides information about the go-libp2p-pubsub package, which is used for messaging in peer-to-peer infrastructure. It explains how to enable message publishing functionality in Go using the package and describes the available options for message routing. The text also mentions the support for tracing the message flow and system state. It provides constants and protocol IDs related to libp2p PubSub, as well as default values for certain parameters.","providing information about the constants, variables, functions, and types related to libp2p PubSub in Go. It discusses various features and options for creating message publishing functionality, including message caching, gossiping, and configuring the PubSub router. It suggests using out-of-band retrieval for large messages and using the pubsub layer as a signalling system. The text also mentions options for setting message author and ID, customizing message ID computation, and enabling or disabling message signing.","providing information about the libp2p PubSub package in Go, including various options and functions for customizing and creating message publishing functionality. It covers topics such as joining and subscribing to topics, publishing messages, managing peers, and customizing the behavior of the PubSub system. Additionally, it discusses functions and types related to message publishing functionality, such as setting score parameters, obtaining topic representations, managing topic-specific events, and setting custom message ID generation rules.","The text provides information about various types and functions related to message publishing functionality in Go using libp2p PubSub. It includes details about topic options, topic score parameters, topic score snapshots, validation errors, validation results, validators, and validator options."],"e_summary":[0.017445512115955353,0.011022820137441158,-0.013154750689864159,0.005306287202984095,-0.014338409528136253,0.012643625028431416,-0.007424767129123211,0.013316158205270767,0.007720681838691235,-0.018292903900146484,0.0111506013199687,0.008117476478219032,-0.031716667115688324,0.007841737940907478,0.01593903824687004,0.007458393927663565,0.0022361730225384235,-0.021534515544772148,0.007270084694027901,0.00925405789166689,0.0037560982163995504,0.010847961530089378,0.0016662011621519923,-0.004206695593893528,0.004408455453813076,0.007229732349514961,0.019759027287364006,-0.0007582812686450779,0.009852612391114235,-0.008285610005259514,0.03914143517613411,-0.01826600357890129,-0.029268646612763405,-0.009112825617194176,-0.04126664251089096,-0.015333758667111397,0.021480713039636612,-0.00872948206961155,-0.005195319652557373,-0.0035812396090477705,0.01997423730790615,-0.006994345691055059,0.009496169164776802,-0.020337406545877457,-0.017082344740629196,0.013235454447567463,0.016557767987251282,-0.036478202790021896,0.011143876239657402,-0.012105599045753479,-0.008278883993625641,-0.010767257772386074,-0.03747355192899704,-0.0032029396388679743,0.01150031853467226,-0.00041570962639525533,0.010504969395697117,0.011984542943537235,-0.0008146059117279947,-0.01954381726682186,0.018857832998037338,-0.0013122805394232273,-0.006900191307067871,-0.000519111636094749,-0.02431880310177803,-0.014715027995407581,-0.01487643551081419,0.020740926265716553,-0.025811826810240746,-0.009576873853802681,0.020687123760581017,0.01651741750538349,-0.010000569745898247,-0.01780868135392666,0.01753966696560383,-0.015333758667111397,-0.028945831581950188,-0.021157896146178246,-0.02390183135867119,0.002540494315326214,0.0009726512362249196,-0.004277311731129885,0.017041992396116257,0.035509757697582245,-0.00612005265429616,0.011204403825104237,0.024547463282942772,0.016382910311222076,-0.014015593566000462,-0.010081273503601551,0.012361161410808563,0.0016552724409848452,0.003826714353635907,0.011681903153657913,0.006126778200268745,0.035160038620233536,-0.026053939014673233,0.03166286647319794,0.004243684932589531,0.005067538004368544,0.0018847744213417172,0.021171346306800842,-0.014123198576271534,-0.006315087433904409,-0.01165500096976757,-0.003374435706064105,0.007041423115879297,-0.02843470685184002,0.023646268993616104,0.014715027995407581,-0.015468264929950237,0.05611617490649223,-0.007290260400623083,-0.01593903824687004,-0.01413664873689413,0.02622879669070244,0.00487922877073288,0.01099591888487339,0.005723258014768362,-0.03187807649374008,0.014997491613030434,-0.006829575169831514,0.014230803586542606,0.022946834564208984,0.003080202266573906,-0.013403587974607944,-0.023794226348400116,-0.010020745918154716,0.008312511257827282,-0.007687055040150881,0.0004388279630802572,0.028246397152543068,0.009993844665586948,0.025421757251024246,0.002666594460606575,0.020041491836309433,-0.020391209051012993,0.010713455267250538,-0.026201896369457245,-0.03421849384903908,-0.004048650152981281,0.02765456773340702,-0.03930284455418587,0.018144946545362473,-0.022946834564208984,0.003103740978986025,0.0325775109231472,0.012630174867808819,0.03432609885931015,0.016356008127331734,0.020808178931474686,0.0009440685389563441,-0.012388062663376331,0.013739854097366333,-0.010390639305114746,0.03486412391066551,-0.010054372251033783,0.018884733319282532,0.025300702080130577,0.0015165625372901559,0.021050291135907173,0.024103591218590736,0.014822633005678654,-0.022973736748099327,0.010753806680440903,0.028192594647407532,0.02889202907681465,0.004539599642157555,-0.01095556654036045,0.006042711436748505,-0.004431994166225195,7.079988790792413e-6,-0.04029819369316101,0.013396862894296646,-0.021534515544772148,0.026040486991405487,0.0219111330807209,0.02571767196059227,-0.001958753215149045,-0.00882363598793745,0.02351176179945469,0.0007860232726670802,-0.0011945872101932764,0.04799197241663933,-0.026322951540350914,-0.0012534338748082519,-0.0033525782637298107,0.005447519477456808,0.009348212741315365,0.00959705002605915,0.013921438716351986,0.04132044315338135,0.0038031756412237883,0.0002408509753877297,-0.6193762421607971,-0.007290260400623083,0.021588318049907684,-0.04089002311229706,0.006197393871843815,-0.00008748186519369483,0.010424265637993813,0.014862985350191593,0.0068363007158041,0.027372103184461594,0.004203333053737879,0.006563924718648195,0.022946834564208984,-0.021386558189988136,0.007465119007974863,-0.01152049470692873,0.014984041452407837,-0.02746625803411007,0.0007839215686544776,-0.012388062663376331,-0.0011012732284143567,0.018750227987766266,-0.011177502572536469,-0.02261056751012802,0.009623951278626919,-0.01026285719126463,0.023713523522019386,-0.030775122344493866,0.0040654633194208145,0.005669455509632826,-0.042961426079273224,-0.00391750643029809,0.010652926750481129,-0.007001071237027645,0.037339046597480774,0.0033777982462197542,-0.020350856706500053,0.0036552182864397764,0.0025455383583903313,0.04618958383798599,-0.018830930814146996,-0.0265650637447834,0.006160404533147812,0.016315657645463943,0.015817983075976372,-0.009301135316491127,0.04952535033226013,-0.008756383322179317,-0.004115903750061989,0.0022428983356803656,0.016746077686548233,-0.0062041194178164005,0.004922943655401468,-0.016934387385845184,0.010309934616088867,-0.009186804294586182,0.026363303884863853,-0.014055944979190826,-0.0019116757903248072,-0.008097300305962563,-0.0065807378850877285,-0.009691203944385052,-0.026982033625245094,-0.01632910780608654,-0.021736275404691696,0.02021634951233864,-0.014163549989461899,0.008191455155611038,0.021130995824933052,-0.0034282382111996412,0.027600765228271484,0.015468264929950237,-0.017364809289574623,-0.003357622306793928,0.00252704368904233,0.03510623425245285,0.01326908078044653,0.010982467792928219,0.011204403825104237,-0.004008298274129629,-0.010478068143129349,0.007115401793271303,-0.03139385208487511,-0.02032395452260971,0.020512264221906662,0.004899404942989349,-0.0387917198240757,-0.01787593401968479,0.025004787370562553,0.01103627122938633,0.004055375698953867,0.014540169388055801,-0.029806673526763916,-0.017405161634087563,-0.007471844553947449,0.01078070793300867,0.017082344740629196,0.010000569745898247,0.0025320877321064472,-0.0026094289496541023,-0.016961289569735527,-0.003941044677048922,0.013356510549783707,0.005988908465951681,0.06117362529039383,0.005998996552079916,-0.03642440214753151,0.004690919537097216,0.02052571438252926,-0.030694417655467987,0.024695420637726784,0.012865561060607433,-0.009314585477113724,-0.01505129411816597,0.0038166262675076723,-0.03319624066352844,0.031097937375307083,-0.005511410068720579,0.0345144085586071,-0.029080338776111603,0.008830361999571323,-0.005323100835084915,-0.01242841500788927,-0.011796233244240284,0.0062545593827962875,0.030909627676010132,0.011749155819416046,0.0012862198054790497,0.0009701292146928608,0.01571037620306015,-0.0022967010736465454,-0.0048893168568611145,0.01690748520195484,-0.0016947838012129068,0.024695420637726784,-0.01869642548263073,0.04097072780132294,0.0027657931204885244,0.002076446544378996,-0.02932245098054409,-0.019059592857956886,0.013894537463784218,0.014997491613030434,-0.01850811578333378,0.0049397568218410015,-0.01169535331428051,-0.020471911877393723,-0.020539166405797005,0.01152049470692873,0.00681612454354763,0.009280959144234657,-0.020619869232177734,-0.01138598844408989,0.0024866918101906776,-0.02699548564851284,-0.021588318049907684,0.008447017520666122,-0.0014888205332681537,0.0034164688549935818,0.008050222881138325,0.006086425855755806,0.014365310780704021,-0.039006929844617844,0.022247400134801865,-0.019987689331173897,-0.02532760240137577,-0.017136147245764732,0.004542962182313204,0.01636946015059948,-0.012710878625512123,0.006953993812203407,0.011164052411913872,-0.018104596063494682,-0.00594519404694438,0.010518420487642288,0.028192594647407532,-0.017324456945061684,-0.013316158205270767,-0.026053939014673233,-0.007740858010947704,0.011728979647159576,0.014782280661165714,-0.017284104600548744,0.007875364273786545,0.01134563609957695,0.012791582383215427,0.008198180235922337,0.024251548573374748,-0.023404156789183617,0.006940543185919523,-0.0062780980952084064,0.04134734347462654,-0.009354937821626663,0.019839731976389885,-0.010061097331345081,-0.01369277760386467,-0.0010205692378804088,-0.009845887310802937,-0.0040015727281570435,-0.004795162007212639,0.03677411749958992,-0.02409014105796814,0.008568073622882366,-0.028838226571679115,-0.007740858010947704,-0.016692275181412697,-0.0022328104823827744,-0.023861480876803398,0.004633754026144743,0.023135144263505936,0.024762675166130066,0.007236457895487547,-0.019422760233283043,0.0023942184634506702,0.018548468127846718,0.0457591637969017,-0.026134641841053963,0.013988691382110119,-0.028811324387788773,-0.015562419779598713,-0.0028935743030160666,-0.011473417282104492,0.02606738917529583,-0.004818700719624758,-0.014472915790975094,0.01896543800830841,0.01826600357890129,-0.010309934616088867,0.008346137590706348,-0.01557586994022131,-0.01293953973799944,0.01974557712674141,0.0029675529804080725,0.01908649317920208,0.010457891970872879,0.011688628233969212,-0.008520996198058128,-0.01614079810678959,0.03187807649374008,-0.02544865757226944,-0.0034870849922299385,0.01982627995312214,0.0026649129576981068,-0.015387561172246933,0.029376253485679626,0.0039006927981972694,0.009502895176410675,-0.014109747484326363,-0.015616222284734249,-0.004754810128360987,-0.03505243360996246,0.0031777196563780308,-0.0054307058453559875,-0.00835958868265152,0.01729755476117134,-0.0069069163873791695,0.02277197688817978,-0.001469485112465918,0.027170343324542046,0.0023236023262143135,0.0036316795740276575,-0.0026918144430965185,0.03421849384903908,-0.008178004063665867,0.0076803299598395824,-0.0023740422911942005,-0.010599124245345592,-0.026780273765325546,-0.03333074972033501,-0.007101951166987419,0.027708370238542557,-0.007713956292718649,0.006802673917263746,-0.02497788518667221,0.02199183776974678,0.014782280661165714,0.0066311778500676155,0.0036484929732978344,-0.0018276091432198882,-0.00014743189967703074,-0.029860476031899452,-0.007478569634258747,0.015535518527030945,0.03368046507239342,-0.01345739047974348,-0.021816978231072426,0.007687055040150881,0.00886398833245039,-0.014244254678487778,-0.017714526504278183,-0.0008217516005970538,-0.003083565039560199,-0.003974671475589275,-0.008574798703193665,-0.005269297864288092,-0.009684478864073753,0.027129990980029106,-0.0069203670136630535,-0.007048148661851883,-0.04134734347462654,0.002046182518824935,0.013053870759904385,-0.021009938791394234,-0.009469267912209034,0.02254331484436989,0.025435207411646843,-0.009220430627465248,-0.011950915679335594,-0.006456319242715836,0.023188946768641472,0.0012147631496191025,0.009671028703451157,-0.0132825318723917,-0.049363940954208374,0.021736275404691696,-0.004260498099029064,-0.015737278386950493,-0.008937967009842396,0.008063673973083496,-0.0031457743607461452,-0.016705725342035294,-0.031743571162223816,0.010464617051184177,0.01291936356574297,0.03978706896305084,-0.0010937071638181806,0.00531301274895668,-0.0008751339046284556,-0.015844883397221565,-0.006113327108323574,-0.036558907479047775,-0.0017788504483178258,0.021588318049907684,0.0021991836838424206,-0.012630174867808819,0.022745074704289436,-0.01277813222259283,0.002379086334258318,0.02517964504659176,0.0069069163873791695,-0.01610044576227665,-0.03785017132759094,0.012771406210958958,-0.020579516887664795,0.028945831581950188,-0.010504969395697117,-0.023054439574480057,0.015723828226327896,0.016961289569735527,0.022973736748099327,0.02715689316391945,-0.007512196432799101,0.016571220010519028,-0.02676682360470295,0.0010441078338772058,0.015643123537302017,0.0018427411559969187,0.006123415194451809,-0.0368548221886158,0.05423308163881302,0.014849534258246422,-0.0033761169761419296,-0.00919352937489748,0.01830635592341423,0.01651741750538349,0.012562921270728111,0.003073476953431964,-0.01386763621121645,-0.00006935499550309032,-0.02932245098054409,-0.0519733689725399,-0.005033911671489477,0.0030213557183742523,0.012038345448672771,0.01382728386670351,0.004959932994097471,-0.014123198576271534,-0.008178004063665867,0.0372314415872097,0.004304212983697653,0.017485864460468292,0.028138792142271996,-0.0027691556606441736,-0.028999634087085724,-0.026322951540350914,-0.0031709943432360888,-0.010632750578224659,-0.019099945202469826,-0.0024799664970487356,-0.019637970253825188,-0.02676682360470295,0.014029043726623058,-0.021588318049907684,-0.007942617870867252,0.007626526989042759,-0.010888313874602318,-0.017176499590277672,-0.01386763621121645,0.01912684552371502,0.014459464699029922,0.0372314415872097,0.0005430706078186631,-0.00548787135630846,-0.0035038983915001154,0.001935214502736926,-0.02614809386432171,0.00477162329480052,-0.022328104823827744,0.019759027287364006,0.026860978454351425,-0.018494663760066032,0.000701115932315588,-0.005888028535991907,0.011392713524401188,-0.03478341922163963,0.017943186685442924,-0.020377757027745247,-0.01208542287349701,-0.002612791722640395,0.018871283158659935,-0.004458895418792963,0.034729618579149246,0.01597939059138298,-0.011661726981401443,-0.004395004827529192,0.0007259155972860754,-0.022624019533395767,-0.035859473049640656,-0.0031138290651142597,0.024224648252129555,-0.012885737232863903,0.0048893168568611145,-0.020256701856851578,-0.009812260046601295,0.02322929911315441,-0.025462109595537186,0.01752621680498123,0.03080202266573906,0.024345703423023224,0.04818028211593628,-0.006570649798959494,-0.0065168472938239574,0.005847676657140255,-0.007639977615326643,-0.007888815365731716,-0.0329810306429863,0.00515833031386137,0.002811189042404294,-0.04740014299750328,0.016477065160870552,-0.026860978454351425,-0.023457959294319153,-0.025260349735617638,0.01295299082994461,-0.0029776410665363073,0.026672668755054474,0.006365527398884296,-0.007216281723231077,-0.014055944979190826,-0.0011138832196593285,0.004640479572117329,0.015064745210111141,-0.018871283158659935,-0.008292335085570812,0.0007914875750429928,-0.010235955938696861,-0.0158986859023571,0.008716030977666378,0.022987186908721924,-0.030048785731196404,-0.0341377891600132,0.013262355700135231,0.00559547683224082,0.00781483668833971,-0.009159903042018414,0.0023471410386264324,-0.007861914113163948,-0.0213327556848526,0.00032134479261003435,-0.03903383016586304,0.006940543185919523,-0.019947336986660957,0.015548968687653542,0.01297316700220108,0.013907987624406815,-0.00007886503590270877,0.014634323306381702,0.015158900059759617,-0.015737278386950493,-0.0048254262655973434,0.009509620256721973,-0.004253773018717766,-0.021615218371152878,-0.0209426861256361,0.00938856415450573,0.021709373220801353,0.005222220905125141,-0.0005716532468795776,-0.0008860625675879419,0.013645700179040432,-0.004089002031832933,0.008030046708881855,-0.01579108089208603,-0.03618228808045387,-0.01121112983673811,0.02168247289955616,-0.022946834564208984,0.022220497950911522,-0.03201258182525635,-0.017432061955332756,0.001385418465360999,0.0019184011034667492,0.008198180235922337,0.00818473007529974,0.01714959740638733,-0.02409014105796814,0.022704722359776497,0.016786430031061172,0.012825209647417068,0.005975457839667797,-0.003123916918411851,-0.038146086037158966,0.00627473508939147,0.007007796783000231,0.02254331484436989,0.021776627749204636,-0.00212352373637259,-0.0024547462817281485,-0.012536020018160343,0.021009938791394234,-0.034352999180555344,-0.011110248975455761,0.031555261462926865,-0.005080988630652428,-0.03741975128650665,-0.008816910907626152,-0.0016989870928227901,0.008399940095841885,0.024184295907616615,-0.006234383210539818,-0.00459676468744874,0.001709075178951025,-0.005161692854017019,-0.02215324528515339,0.015172350220382214,-0.021736275404691696,0.022435709834098816,0.016261853277683258,-0.00026186765171587467,0.0005876259529031813,-0.023915283381938934,0.02583872713148594,-0.0029574648942798376,-0.008171278983354568,0.015548968687653542,0.007135577965527773,0.02448021061718464,0.018561918288469315,-0.017364809289574623,-0.006183943245559931,0.0064428686164319515,-0.019799379631876945,-0.014082846231758595,0.012536020018160343,0.037177637219429016,0.007364239078015089,-0.002409350359812379,0.010888313874602318,-0.014553619548678398,0.034622013568878174,-0.005565212573856115,-0.0027657931204885244,0.0025135930627584457,0.01624840311706066,-0.010430990718305111,0.023175496608018875,-0.00550804752856493,0.03327694535255432,-0.02001458965241909,0.005067538004368544,-0.016503965482115746,-0.0020175997633486986,-0.007075049914419651,-0.0018124771304428577,0.005239034071564674,0.009092649444937706,-0.0261884443461895,-0.00252704368904233,0.016382910311222076,0.01130528375506401,-0.011399438604712486,-0.011459967121481895,-0.004250410012900829,0.032173991203308105,-0.013248905539512634,-0.007344063371419907,0.005814049858599901,-0.013551545329391956,0.018319806084036827,-0.028111889958381653,0.01349774282425642,-0.030963432043790817,0.005356727633625269,-0.020431559532880783,0.026780273765325546,0.002337053185328841,-0.010982467792928219,-0.014472915790975094,0.022866129875183105,-0.03206638619303703,-0.012320809066295624,-0.010054372251033783,0.00020669889636337757,-0.01047134306281805,-0.02707618847489357,-0.03521384298801422,-0.034352999180555344,0.01049151923507452,0.015024392865598202,-0.03494482859969139,0.009341486729681492,0.05334533751010895,-0.040244389325380325,0.00849409494549036,0.008090575225651264,-0.022408807650208473,-0.033922579139471054,0.006792585831135511,-0.016423262655735016,-0.027237597852945328,0.009697929956018925,-0.01815839856863022,0.0006389066111296415,-0.022126344963908195,0.0060527995228767395,-0.0003444631292950362,0.0028834864497184753,0.006792585831135511,0.01974557712674141,-0.022624019533395767,0.0032332036644220352,-0.02207254245877266,0.006735420785844326,0.005619015544652939,0.005282748956233263,-0.010868137702345848,0.012125774286687374,-0.0027775622438639402,0.023915283381938934,-0.007041423115879297,0.021669020876288414,-0.005608927458524704,-0.007310436572879553,-0.02808498963713646,-0.004610215313732624,-0.02921484410762787,-0.030559910461306572,-0.006167130079120398,0.010558771900832653,-0.01326908078044653,-0.008796734735369682,-0.00026817264733836055,0.042692411690950394,0.041562557220458984,0.02808498963713646,0.014862985350191593,0.02291993424296379,-0.014244254678487778,-0.029349351301789284,-0.014661225490272045,-0.030909627676010132,-0.0007801385945640504,-0.029860476031899452,-0.015562419779598713,-0.00672869523987174,0.046297188848257065,0.0061906687915325165,-0.0022832504473626614,-0.04922943562269211,-0.01010817475616932,-0.033492155373096466,-0.007357513997703791,0.021238600835204124,-0.004243684932589531,-0.01659812033176422,0.016772979870438576,0.0004041504580527544,-0.010074548423290253,0.00975845754146576,0.026618866249918938,0.0012021531583741307,-0.013188377022743225,0.009818985126912594,-0.014378760941326618,0.0003619069466367364,-0.00583758857101202,-0.04239649698138237,-0.0021352930925786495,0.036289893090724945,-0.01632910780608654,-0.007465119007974863,0.01167517714202404,-0.014190452173352242,-0.013840734027326107,-0.02001458965241909,-0.013188377022743225,0.004089002031832933,-0.017472414299845695,0.01526650507003069,-0.027977382764220238,-0.010363737121224403,0.02374042384326458,-0.0023437784984707832,-0.009496169164776802,-0.01618115045130253,0.00864877738058567,0.017902836203575134,0.021628670394420624,-0.004502610303461552,-0.008635327219963074,-0.0033845235593616962,-0.004132716916501522,0.016584670171141624,-0.011217854917049408,0.00009730715828482062,0.031124839559197426,-0.026470908895134926,0.019611069932579994,-0.0038031756412237883,0.028918929398059845,-0.04341874644160271,-0.030586812645196915,0.008917790837585926,-0.00954324658960104,-0.008231807500123978,-0.013289256952702999,-0.02361936867237091,0.006843025796115398,-0.018682973459362984,-0.007162479218095541,0.002643055748194456,-0.012112324126064777,0.013430489227175713,-0.014378760941326618,-0.056923214346170425,-0.021615218371152878,-0.008265433833003044,0.014930238015949726,-0.016571220010519028,-0.009919865988194942,-0.004314301069825888,-0.0066446284763514996,0.017230302095413208,-0.018642621114850044,0.009462542831897736,-0.011937465518712997,-0.010457891970872879,0.017472414299845695,0.0020260063465684652,-0.00833941251039505,0.18163777887821198,-0.001152553828433156,0.025112392380833626,0.019382407888770103,-0.015199251472949982,0.00971810519695282,0.003431600984185934,0.0051650553941726685,0.0036115036346018314,0.01365242525935173,-0.01815839856863022,-0.009435641579329967,-0.008157828822731972,-0.0029305636417120695,0.012757956050336361,-0.0032601049169898033,-0.025260349735617638,-0.047534652054309845,-0.03238920122385025,-0.004993559326976538,0.009731556288897991,-0.01113042514771223,-0.018561918288469315,-0.018602270632982254,0.011809684336185455,0.008003145456314087,-0.020337406545877457,0.009516345337033272,0.032685115933418274,0.00657401280477643,-0.011164052411913872,-0.004690919537097216,0.021036840975284576,-0.004916218109428883,0.0067690471187233925,0.011957641690969467,0.037769466638565063,-0.024022888392210007,0.02156141586601734,0.010235955938696861,0.01749931462109089,-0.010619300417602062,0.02316204458475113,-0.02219359762966633,0.008272158913314342,0.002039457205682993,-0.008790009655058384,0.022556765004992485,-0.0013534731697291136,-0.0034938103053718805,-0.016584670171141624,0.006483220495283604,-0.00812420155853033,0.006674892734736204,-0.02071402408182621,0.0012147631496191025,-0.0025673958007246256,-0.0026211983058601618,0.013773481361567974,0.0026144729927182198,-0.01671917736530304,0.002757386304438114,-0.00452951155602932,0.014190452173352242,-0.013719678856432438,0.021117543801665306,-0.012300632894039154,-0.017553117126226425,0.010538595728576183,-0.02940315380692482,-0.018212201073765755,-0.014082846231758595,-0.0036787569988518953,0.008951418101787567,-0.007007796783000231,-0.01663847267627716,-0.0025825276970863342,0.04347255080938339,0.007169204764068127,0.03548285365104675,-0.015777630731463432,0.02106374129652977,-0.02750661037862301,0.007223007269203663,0.004233596846461296,-0.03505243360996246,0.02924174629151821,-0.022906482219696045,0.009106100536882877,-0.019839731976389885,0.01784903183579445,0.009839161299169064,0.0012248512357473373,-0.013504467904567719,0.0013030332047492266,0.005975457839667797,-0.019328605383634567,-0.01509164646267891,-0.005491233896464109,0.01900579035282135,-0.02730485051870346,0.10330110788345337,0.038576506078243256,-0.013295982964336872,-0.0106663778424263,-0.030613714829087257,0.009973668493330479,0.004307575523853302,0.0053029246628284454,-0.018911635503172874,-0.007337337825447321,-0.020821629092097282,0.007081774994730949,-0.018131496384739876,0.015508617274463177,0.009529796428978443,0.016127347946166992,0.0017670810921117663,-0.010881587862968445,-0.0007877046009525657,-0.006792585831135511,-0.010881587862968445,-0.015495166182518005,0.016261853277683258,-0.024412957951426506,0.02396908588707447,-0.02579837664961815,-0.0005010372842662036,-0.013195102103054523,-0.04048650339245796,0.04132044315338135,0.002015918493270874,-0.015683475881814957,-0.014150099828839302,0.015844883397221565,-0.00012420848361216486,0.021521063521504402,-0.019920434802770615,-0.02199183776974678,0.034541308879852295,0.012791582383215427,-0.004892679397016764,0.005070900544524193,-0.000014698529412271455,0.02497788518667221,-0.023605916649103165,0.00847391877323389,0.002173963701352477,0.01386763621121645,-0.016436712816357613,-0.010827785357832909,-0.012562921270728111,-0.008951418101787567,0.024372605606913567,0.002577483654022217,-0.026982033625245094,-0.01702854223549366,-0.04522113502025604,0.02211289294064045,-0.02703583613038063,-0.04844929650425911,0.009200255386531353,0.011224579997360706,-0.009348212741315365,-0.03246990591287613,0.004371466115117073,-0.16958598792552948,-0.002120161196216941,0.02458781562745571,-0.007512196432799101,0.008937967009842396,-0.030506107956171036,0.03432609885931015,-0.007734132464975119,-0.0013887811219319701,0.011554121039807796,0.0063924286514520645,-0.008527721278369427,-0.011224579997360706,-0.0372314415872097,-0.0054172552190721035,-0.009159903042018414,0.0201759971678257,0.002173963701352477,0.020108744502067566,0.017136147245764732,0.04070171341300011,-0.015656573697924614,0.02614809386432171,-0.004556412808597088,-0.0024278450291603804,0.0064428686164319515,-0.013134574517607689,-0.004996922332793474,-0.023188946768641472,-0.0304523054510355,-0.0055046845227479935,0.009906414896249771,0.019947336986660957,-0.007404590956866741,0.010081273503601551,0.015212702564895153,-0.003097015665844083,-0.015804531052708626,0.025852179154753685,0.035429053008556366,0.01601974293589592,0.025462109595537186,-0.018360158428549767,0.011244756169617176,0.008285610005259514,0.009872788563370705,0.008675678633153439,0.009523071348667145,-0.015199251472949982,-0.015858333557844162,0.03263131529092789,0.009536521509289742,-0.01698818989098072,0.0006906075868755579,0.01807769387960434,-0.0054172552190721035,0.014069396071135998,0.004620303399860859,0.009637401439249516,-0.0012971485266461968,0.008231807500123978,-0.004835514351725578,-0.004176431335508823,0.007821561768651009,-0.013087497092783451,-0.03327694535255432,-0.01908649317920208,-0.0252065472304821,-0.020619869232177734,0.013074046932160854,-0.0002578744606580585,-0.0018898184644058347,-0.0017973451176658273,-0.026941683143377304,0.05000957474112511,0.013907987624406815,0.0015762498369440436,0.010202329605817795,-0.007391140330582857,0.012011444196105003,-0.0001898855553008616,0.01989353448152542,0.000025193727196892723,0.00994676724076271,0.027977382764220238,0.007411316502839327,-0.01597939059138298,0.002881804946810007,0.0017082344274967909,-0.0015939038712531328,0.0047144582495093346,-0.01904614269733429,0.017553117126226425,-0.0033693916629999876,-0.0008490732288919389,0.005363452713936567,0.016315657645463943,-0.007821561768651009,0.02234155498445034,-0.022798877209424973,0.0028431343380361795,-0.005057449918240309,-0.014580520801246166,-0.019812829792499542,0.03895312547683716,-0.022758524864912033,0.023955633863806725,-0.0033845235593616962,0.020740926265716553,-0.006281460635364056,-0.016315657645463943,0.020956136286258698,0.03131314739584923,0.022489512339234352,0.00028561646468006074,0.04659310355782509,-0.005457607563585043,-0.018535016104578972,-0.010040921159088612,0.005729983560740948,0.05660039931535721,-0.014661225490272045,0.0063924286514520645,0.010168703272938728,0.006318449974060059,-0.017795229330658913,-0.10087998956441879,-0.026874428614974022,0.021695923060178757,0.013618798926472664,-0.023874931037425995,-0.004912855569273233,-0.007101951166987419,0.016086995601654053,0.002417757175862789,0.017741426825523376,-0.010343561880290508,-0.023995986208319664,-0.01173570565879345,0.0034769969061017036,0.0010592398466542363,-0.03483722358942032,-0.009657577611505985,-0.02536795474588871,-0.004973383620381355,0.01966487243771553,0.0033458529505878687,-0.03362666442990303,-0.013934888876974583,-0.0077946605160832405,-0.03992157429456711,-0.01861572079360485,-0.002490054350346327,0.023753874003887177,0.02382112853229046,-0.010350286960601807,0.0010138439247384667,-0.01311439834535122,0.015024392865598202,-0.01509164646267891,0.01799698919057846,-0.005888028535991907,-0.0038670662324875593,-0.022005287930369377,0.012293907813727856,-0.0018007077742367983,0.011574297212064266,0.014338409528136253,0.0345144085586071,-0.014284606091678143,-0.010350286960601807,-0.008897614665329456,-0.031635966151952744,0.03739285096526146,0.007687055040150881,-0.010895038954913616,-0.0064664073288440704,0.015992840752005577,-0.017351357266306877,-0.019073043018579483,0.03080202266573906,-0.01684023253619671,-0.009072473272681236,0.006980895064771175,-0.006799311377108097,-0.0036955701652914286,0.011466692201793194,-0.0032735555432736874,0.004290762357413769,0.03992157429456711,0.007451668381690979,-0.018494663760066032,-0.016463615000247955,-0.00681612454354763,0.02575802430510521,-0.015010942704975605,-0.021978387609124184,0.007451668381690979,-0.009301135316491127,0.020418109372258186,-0.017701074481010437,0.004358015488833189,0.016046643257141113,-0.013511192984879017,0.005144879221916199,0.008070399053394794,-0.006994345691055059,-0.02312169410288334,-0.00017139090050477535,-0.025072040036320686,0.018494663760066032,0.011103523895144463,0.018992338329553604,0.0035408874973654747,0.012273731641471386,-0.008850537240505219,0.017593469470739365,0.03505243360996246,-0.008897614665329456,0.02781597524881363,0.009825711138546467,-0.0020243250764906406,-0.005202044732868671,-0.014513268135488033,-0.018682973459362984,0.000738105271011591,-0.03099033236503601,0.0004236959503032267,-0.06606967002153397,0.022597117349505424,0.030909627676010132,-0.007061599288135767,-0.010572222992777824,0.00905902311205864,0.007021247409284115,-0.04670070856809616,-0.01616770029067993,-0.0030179929453879595,-0.02862301468849182,0.0170688945800066,0.00648658350110054,-0.008097300305962563,-0.004458895418792963,-0.018642621114850044,0.012152675539255142,-0.016934387385845184,-0.007223007269203663,0.014809181913733482,0.010605849325656891,0.007902265526354313,0.016557767987251282,0.01544136367738247,-0.02497788518667221,-0.010155252180993557,-0.020808178931474686,0.020189449191093445,-0.005464332643896341,0.010148527100682259,0.01947656273841858,-0.024453308433294296,-0.012495667673647404,0.013154750689864159,0.01912684552371502,-0.004764898214489222,-0.008951418101787567,0.025152744725346565,0.0034467328805476427,0.041454948484897614,-0.00291879428550601,-0.011547395959496498,0.026470908895134926,-0.0395718552172184,0.04000227898359299,-0.006035985890775919,-0.012186302803456783,0.015965940430760384,0.027008935809135437,-0.01152049470692873,0.03284652531147003,0.006106602028012276,-0.00956342276185751,-0.048933520913124084,-0.008440292440354824,-0.023605916649103165,0.018292903900146484,-0.0037594609893858433,-0.025865629315376282,-0.014055944979190826,0.03626299276947975,0.003130642231553793,0.021736275404691696,-0.025704221799969673,0.01947656273841858,-0.0008343615918420255,-0.03195878118276596,-0.004428631626069546,0.012825209647417068,-0.04411818087100983,-0.017351357266306877,-0.008265433833003044,0.01225355640053749,0.001709075178951025,0.018588818609714508,-0.013504467904567719,-0.007942617870867252,0.02207254245877266,-0.006577375344932079,0.021588318049907684,0.032604411244392395,0.008776558563113213,-0.009166628122329712,0.03319624066352844,0.005545036867260933,0.008716030977666378,0.017929736524820328,-0.011634825728833675,-0.00496665807440877,0.0013408631784841418,-0.030936529859900475,0.015374110080301762,0.018144946545362473,0.021171346306800842,0.0008057788945734501,0.005070900544524193,-0.0018545105122029781,0.01819874905049801,0.011702078394591808,0.00013471681450027972,0.010235955938696861,0.02983357571065426,0.0065437485463917255,-0.01571037620306015,-0.006624452769756317,0.008608425967395306,-0.04785746708512306,-0.02625569887459278,-0.004290762357413769,0.015925588086247444,-0.021816978231072426,-0.01119095366448164,-0.011244756169617176,0.02672647126019001,0.0037661863025277853,0.03187807649374008,0.002496779663488269,0.026363303884863853,-0.021211698651313782,0.025825276970863342,0.006331900600343943,0.022758524864912033,0.00958359893411398,-0.0027220784686505795,0.004129354376345873,0.0031440930906683207,0.009812260046601295,-0.013013518415391445,-0.000042190953536191955,-0.015306857414543629,0.01686713472008705,-0.006096513941884041,-0.022099442780017853,-0.007935892790555954,-0.0106663778424263,-0.0111506013199687,-0.016934387385845184,0.021830430254340172,-0.017163049429655075,0.0767764002084732,0.032173991203308105,-0.009112825617194176,-0.012172851711511612,-0.00648658350110054,0.024265000596642494,0.005582026205956936,0.011069897562265396,-0.00496329553425312,-0.031904976814985275,0.007404590956866741,0.026322951540350914,-0.0047010076232254505,-0.028380904346704483,-0.006738783325999975,0.01099591888487339,-0.025341052561998367,0.029645266011357307,-0.0033105448819696903,0.006654716562479734,0.01760692149400711,0.02098303847014904,0.0009020352154038846,-0.009186804294586182,-0.0236597191542387,-0.013813832774758339,0.035940177738666534,-0.001234098570421338,-0.005151604767888784,-0.031824272125959396,0.0219111330807209,0.003049938241019845,-0.03494482859969139,-0.03844200074672699,-0.012462041340768337,0.009032121859490871,-0.007411316502839327,-0.024022888392210007,0.026053939014673233,0.02339070662856102,0.03898002579808235,-0.007175929844379425,-0.021924585103988647,-0.0345144085586071,-0.005551761947572231,0.002861629007384181,-0.030855825170874596,-0.002453065011650324,-0.046835217624902725],"e_chunks":[[0.01655752956867218,0.008124775253236294,0.005319967865943909,-0.0018377904780209064,-0.017085492610931396,0.016029566526412964,0.0009990980615839362,0.01300110761076212,0.0035490896552801132,-0.03417098522186279,0.012590468861162663,-0.004740674514323473,-0.01520828902721405,0.006738870404660702,0.013455742970108986,0.009694000706076622,0.010874586179852486,-0.01790677011013031,0.01358773373067379,-0.0003618293267209083,0.0030192926060408354,0.02069324627518654,-0.00904137920588255,0.005125647876411676,0.0017021331004798412,0.003556422423571348,0.02978595532476902,-0.0024803297128528357,-0.004967992193996906,0.006808532401919365,0.048514001071453094,-0.02318640798330307,-0.04610883444547653,-0.002099022502079606,-0.017672119662165642,-0.02468230575323105,0.014108364470303059,-0.001673718448728323,-0.001138421823270619,-0.003941396251320839,0.019607987254858017,-0.009437352418899536,0.003882733406499028,-0.015017635188996792,-0.0024216671008616686,0.016278881579637527,0.004729675129055977,-0.04129849746823311,0.001151254284195602,-0.014826982282102108,-0.02108921855688095,0.015545599162578583,-0.0044290293008089066,0.029169997200369835,0.004216377157717943,-0.01646953634917736,0.01997462846338749,0.000598542217630893,0.0037837401032447815,-0.012744458392262459,0.010339289903640747,-0.011087238788604736,-0.01195251289755106,0.005019322037696838,-0.01733480952680111,-0.02270244061946869,-0.026852821931242943,0.02444765530526638,-0.04279439523816109,-0.021529188379645348,0.009847990237176418,0.026867488399147987,-0.007318164221942425,-0.004311704076826572,0.02321573905646801,-0.033848341554403305,-0.01361706480383873,0.007816796191036701,-0.007024851161986589,-0.006797533016651869,0.0033071062061935663,0.004249374847859144,-0.0026526511646807194,0.041855793446302414,-0.0028946346137672663,0.024169007316231728,0.016968168318271637,0.025239599868655205,-0.02909666858613491,0.0026123207062482834,0.013595066033303738,-0.019549325108528137,-0.002830472309142351,0.006742537021636963,0.020179947838187218,0.015032300725579262,-0.025664905086159706,0.028774024918675423,-0.009503347799181938,0.02180783636868,-0.013749055564403534,0.005327300634235144,-0.0035417568869888783,-0.01282511930912733,0.005448292475193739,0.006023919675499201,0.008902055211365223,-0.025327594950795174,0.00852074846625328,0.002080690348520875,-0.007714136969298124,0.054966893047094345,0.001408819924108684,0.007831462658941746,-0.012003842741250992,0.017613457515835762,0.030885878950357437,-0.008271432481706142,0.006823197938501835,-0.03408299386501312,0.007875459268689156,0.0028781357686966658,0.01578024961054325,0.023201074451208115,-0.008755398914217949,0.0007525316323153675,-0.022130480036139488,-0.0028946346137672663,0.01908002234995365,-0.01997462846338749,0.02645684964954853,0.004385032225400209,0.009606007486581802,0.017437469214200974,0.010397952981293201,0.035197582095861435,-0.018830707296729088,-0.0011521709384396672,-0.014628995209932327,-0.010001979768276215,-0.009364023804664612,0.03323238343000412,-0.027131469920277596,0.015589595772325993,-0.01874271221458912,-0.0018634553998708725,0.0116958636790514,0.02807007171213627,0.021499857306480408,-0.005880929529666901,0.0164988674223423,0.001357490080408752,-0.016264216974377632,0.021631848067045212,-0.003484927350655198,0.016058897599577904,-0.01994529739022255,0.018640052527189255,0.017980098724365234,0.005576617084443569,0.003923064097762108,0.049833912402391434,-0.015061632730066776,-0.00045394798507913947,-0.0009404354495927691,0.026442185044288635,0.02042926475405693,-0.009562009945511818,-0.001745213521644473,-0.006793866865336895,0.001016513560898602,0.004868999123573303,-0.037837401032447815,0.03434697538614273,0.014020370319485664,0.032411105930805206,0.03047524020075798,0.022951757535338402,-0.014687658287584782,-0.003970727324485779,0.012773789465427399,-0.012436479330062866,0.006053251214325428,0.04549287632107735,-0.02192516066133976,0.0016893006395548582,-0.007648141589015722,0.0003778698737733066,0.013147763907909393,0.00929802842438221,0.010896584950387478,0.02906733751296997,0.023582380264997482,0.010141303762793541,-0.564099907875061,-0.0038754006382077932,-0.008777397684752941,-0.029419314116239548,0.019300008192658424,-0.022027820348739624,0.022863762453198433,0.03827737271785736,0.003517925040796399,0.028935346752405167,0.005019322037696838,-0.003074288833886385,0.023963687941432,-0.003780073719099164,-0.011453879997134209,-0.00935669057071209,0.018977362662553787,-0.019182682037353516,-0.008828727528452873,0.002091689733788371,-0.016806846484541893,0.009210034273564816,-0.003915731329470873,-0.019124019891023636,0.04631415382027626,-0.00732549699023366,0.006137578748166561,-0.04737007990479469,0.005686609540134668,-0.00761147728189826,-0.03713345155119896,-0.014394344761967659,0.008572078309953213,0.00464168144389987,0.0640009418129921,-0.009935984387993813,-0.00032906074193306267,-0.004487691912800074,0.02006262168288231,0.05446825921535492,-0.005059652496129274,-0.02258511632680893,0.0072301700711250305,0.00015788499149493873,0.02606087736785412,-0.0027241462375968695,0.03437630459666252,-0.0030376247595995665,-0.02120654471218586,0.014870978891849518,0.01778944581747055,-0.010097306221723557,0.023890359327197075,-0.015105629339814186,-0.0025591575540602207,-0.010243963450193405,0.03560822084546089,-0.010500612668693066,0.004495024681091309,-0.02060525119304657,-0.010735263116657734,-0.005818600300699472,-0.0256795696914196,-0.0034299311228096485,-0.03194180503487587,0.02915533073246479,-0.040330562740564346,0.007200838997960091,0.02525426633656025,0.015325614251196384,0.027102138847112656,0.008652739226818085,-0.005939592141658068,-0.01874271221458912,0.013008439913392067,0.05042053759098053,0.002033027121797204,-0.00759681174531579,0.010126638226211071,0.01281045377254486,-0.0037434096448123455,0.0017992930952459574,0.004766339436173439,-0.02717546746134758,0.023714371025562286,-0.008660072460770607,-0.020913230255246162,-0.011211897246539593,0.04071187227964401,-0.010581273585557938,-0.004707676824182272,-0.006196241360157728,-0.033907003700733185,-0.013111099600791931,0.011908515356481075,0.023685039952397346,0.008916720747947693,0.023171741515398026,-0.006485887803137302,0.004572019446641207,-0.014541001059114933,0.0021815169602632523,-0.0008249433594755828,0.014541001059114933,0.039186641573905945,0.009085375815629959,-0.009606007486581802,-0.01575091853737831,0.022819766774773598,-0.005074318032711744,0.004121050238609314,-0.0013895712327212095,-0.015560264699161053,-0.0142036909237504,-0.013382414355874062,-0.03678147494792938,0.026046210899949074,-0.012957110069692135,0.041885122656822205,-0.017320144921541214,0.0005692109116353095,-0.008872724138200283,-0.02204248681664467,-0.005781936459243298,0.033965665847063065,0.001821291632950306,0.006467556115239859,0.018728047609329224,0.0036792473401874304,-0.0051659788005054,0.011299890466034412,-0.007024851161986589,0.014255020767450333,-0.011527208611369133,0.041533149778842926,0.014423675835132599,0.044495612382888794,-0.0049973237328231335,0.008447419852018356,-0.03208846226334572,-0.0022713439539074898,0.013485074043273926,0.030093934386968613,-0.02330373227596283,-0.01151987537741661,-0.014064367860555649,-0.0421784371137619,-0.03437630459666252,0.022086482495069504,0.007728802505880594,-0.008014783263206482,-0.0008185271290130913,0.014101032167673111,0.009048712439835072,-0.013947042636573315,-0.028128735721111298,-0.002203515265136957,-0.004143049009144306,-0.0036480827257037163,0.01968131586909294,0.029023339971899986,0.021602516993880272,-0.0276887658983469,0.0004949659924022853,-0.04622615873813629,-0.006031252443790436,-0.032528433948755264,0.00519530987367034,-0.005657278001308441,-0.016366876661777496,0.0000613551601418294,0.011776524595916271,-0.015149625949561596,-0.01778944581747055,0.0037452427204698324,0.03962661325931549,-0.02048792690038681,-0.0015408109175041318,-0.009092709049582481,0.007076180540025234,0.017114825546741486,-0.016806846484541893,-0.013727057725191116,0.0004903830122202635,0.02330373227596283,0.027468780055642128,0.01937333680689335,0.010742595419287682,-0.0015481436857953668,0.00259765493683517,-0.003798405872657895,0.009488681331276894,-0.022834431380033493,0.02837805077433586,-0.013213759288191795,0.023083748295903206,-0.003681080648675561,-0.003176948521286249,0.0031622827518731356,0.01905069127678871,0.024125009775161743,-0.025532914325594902,0.005968923680484295,-0.03285107761621475,0.010441949591040611,-0.015090963803231716,0.012964443303644657,-0.016806846484541893,0.000877648068126291,0.02210114896297455,0.033819012343883514,0.015574930235743523,-0.02666216902434826,0.012649131007492542,0.018185418099164963,0.04484758898615837,-0.020649248734116554,0.022027820348739624,0.002392335794866085,0.0038460693322122097,-0.01171052921563387,0.006075249519199133,0.017686786130070686,-0.006320899352431297,-0.009796660393476486,0.02471163682639599,0.020165281370282173,0.006848862860351801,-0.0008872724138200283,-0.03349636495113373,-0.01770145073533058,0.03308572992682457,0.01493697427213192,0.0051513127982616425,0.016894839704036713,0.01116056740283966,0.02792341634631157,-0.020179947838187218,0.0070981793105602264,-0.03141384199261665,-0.0072301700711250305,-0.0017232149839401245,-0.010507944971323013,-0.011798523366451263,0.02045859582722187,-0.017452135682106018,0.009459350258111954,0.015296283178031445,-0.032469771802425385,-0.010786592960357666,-0.01661619171500206,0.015134960412979126,0.0030632896814495325,-0.010339289903640747,0.023567715659737587,0.004766339436173439,0.016997499391436577,0.015648258849978447,0.016997499391436577,0.007039516698569059,0.005957924295216799,-0.020619917660951614,0.03141384199261665,0.0013547403505071998,0.011651866137981415,-0.010463948361575603,-0.030240589752793312,-0.032645758241415024,-0.014760985970497131,-0.008447419852018356,0.017892105504870415,0.004986324347555637,-0.02321573905646801,0.002790141850709915,0.014409010298550129,0.014592330902814865,0.004058721475303173,0.0401839055120945,0.016909506171941757,-0.007079847157001495,-0.026324858888983727,-0.018860038369894028,-0.007347495295107365,0.03684013709425926,-0.0245356485247612,-0.02387569472193718,-0.00005751688513555564,-0.003433597506955266,-0.01704149693250656,-0.009591341018676758,-0.03554955869913101,0.008960718289017677,-0.03839469701051712,0.02378769963979721,-0.014064367860555649,0.015090963803231716,0.027366120368242264,-0.01490764319896698,-0.032381776720285416,-0.03364302217960358,0.01303043868392706,0.010999244637787342,-0.024872958660125732,-0.012744458392262459,0.01286911591887474,0.010786592960357666,-0.016425538808107376,-0.000467467907583341,0.0013996538473293185,0.014071700163185596,0.010639935731887817,-0.010009313002228737,0.007010185159742832,-0.033789679408073425,0.018992029130458832,-0.03346703574061394,-0.0018157919403165579,-0.008557412773370743,0.005305302329361439,0.002170517574995756,-0.00759681174531579,-0.015032300725579262,0.00614857766777277,0.013089100830256939,0.03182448074221611,0.02777675911784172,0.003589420113712549,-0.008689403533935547,-0.005253972485661507,-0.011138568632304668,-0.04781005159020424,-0.0003668706340249628,0.0058515979908406734,0.015824247151613235,-0.0044766925275325775,0.017584126442670822,-0.03059256635606289,-0.01682151108980179,0.028172731399536133,0.009957983158528805,0.0004259915731381625,-0.02834871970117092,0.011651866137981415,-0.0006439140997827053,0.027278127148747444,-0.016718851402401924,-0.01661619171500206,0.0180827584117651,0.02051725797355175,0.023743702098727226,0.01493697427213192,0.0058039347641170025,-0.0004908412811346352,-0.024491650983691216,-0.005950591526925564,0.013983706012368202,0.01382971741259098,0.006669208873063326,-0.04778071865439415,0.041855793446302414,0.019549325108528137,0.008740733377635479,0.011637200601398945,0.018904035910964012,0.02588488906621933,-0.012326487340033054,0.005000989884138107,0.01222382765263319,0.008792063221335411,-0.013323752209544182,-0.03164849430322647,-0.000030477074687951244,-0.0019047025125473738,0.008682070299983025,0.015824247151613235,0.0031989470589905977,-0.007831462658941746,-0.005642612464725971,0.0473407506942749,-0.012018508277833462,0.007846128195524216,0.015824247151613235,-0.0030192926060408354,-0.04640214890241623,-0.009092709049582481,-0.03141384199261665,-0.015824247151613235,-0.020135950297117233,-0.0019431998953223228,-0.02834871970117092,-0.03002060577273369,-0.005396962631493807,-0.03572554513812065,-0.004425362683832645,-0.00047663392615504563,-0.006364896427839994,-0.007332829758524895,-0.014790317974984646,0.009195368736982346,0.012693128548562527,0.011754525825381279,0.00935669057071209,-0.009921318851411343,0.01117523293942213,0.009752663783729076,-0.029169997200369835,0.0015774749917909503,-0.014555667527019978,-0.003334604436531663,0.009606007486581802,0.0005462958361022174,0.006111913826316595,0.004190712235867977,0.00761147728189826,-0.01910935528576374,0.021074552088975906,-0.019813306629657745,-0.021367866545915604,0.0018588723614811897,0.032411105930805206,0.0006924940971657634,0.0008015699568204582,0.015545599162578583,-0.006760869175195694,0.0008771897410042584,-0.0011063406709581614,-0.02999127469956875,-0.01811208948493004,-0.02075190842151642,0.02829005755484104,0.011805855669081211,-0.009672002866864204,-0.005008322652429342,-0.021646514534950256,0.005950591526925564,-0.031208524480462074,0.02507827803492546,0.00859407614916563,0.017804110422730446,0.022937091067433357,0.009701333940029144,0.0057709370739758015,-0.0002843762922566384,-0.03417098522186279,-0.008410755544900894,-0.009620673023164272,0.021426528692245483,0.016924170777201653,-0.023567715659737587,0.026735497638583183,-0.028480710461735725,-0.021221209317445755,-0.03147250413894653,0.011387884616851807,-0.004836001433432102,0.014328349381685257,-0.004788337741047144,-0.02774742804467678,-0.014628995209932327,-0.020282607525587082,0.006676541641354561,0.009158704429864883,-0.030093934386968613,0.01096258033066988,-0.011893849819898605,0.012128500267863274,0.006636211182922125,-0.008784729987382889,0.0057489387691020966,-0.03537357226014137,-0.042941052466630936,0.0030302919913083315,0.006097247824072838,-0.0021411862690001726,-0.026647504419088364,0.006229239050298929,0.003110953141003847,-0.016484200954437256,-0.014702323824167252,-0.017804110422730446,0.01598556898534298,-0.014064367860555649,0.017114825546741486,0.014467673376202583,0.018581390380859375,0.0027883085422217846,0.013954374939203262,0.031091198325157166,-0.0034739281982183456,-0.011094571091234684,0.002824972616508603,-0.019930630922317505,-0.019475996494293213,-0.008476750925183296,0.014005704782903194,0.02594355121254921,-0.006126579362899065,-0.013184428215026855,-0.012341152876615524,0.02636885643005371,0.004381365608423948,0.0225264523178339,-0.023743702098727226,-0.061830420047044754,-0.008396090008318424,0.01199650950729847,-0.04250108078122139,0.010852588340640068,-0.03311505913734436,-0.012451144866645336,0.004198045004159212,-0.02303975075483322,0.015010302886366844,0.02051725797355175,0.025723567232489586,-0.024858292192220688,0.016938837245106697,0.02999127469956875,0.011622535064816475,-0.01195251289755106,-0.01667485572397709,-0.0321471244096756,0.004751673899590969,0.013895712792873383,0.016293548047542572,0.041679803282022476,0.00624757120385766,-0.00758214620873332,-0.014504337683320045,-0.009268696419894695,-0.04660746455192566,-0.00346476212143898,0.035197582095861435,-0.010478613898158073,-0.024608977138996124,-0.04141582176089287,-0.025958217680454254,0.0023776700254529715,-0.005682942923158407,-0.006089915055781603,-0.005858931224793196,0.017481466755270958,-0.016748182475566864,-0.03147250413894653,0.01871338114142418,-0.018816040828824043,0.03689879924058914,0.008872724138200283,0.016645522788167,0.0029789621476083994,-0.025958217680454254,0.013961708173155785,0.0011915848590433598,0.011879184283316135,0.013697725720703602,0.009847990237176418,0.004953326657414436,0.01971064694225788,-0.01670418679714203,-0.004308037459850311,-0.0003247068671043962,-0.025987548753619194,-0.01151987537741661,0.031032536178827286,0.022262470796704292,0.017173487693071365,-0.02594355121254921,0.014108364470303059,-0.0032337780576199293,0.009811325930058956,-0.013837049715220928,-0.01285445038229227,0.0192266795784235,-0.007816796191036701,0.0035545893479138613,0.022027820348739624,0.01337508112192154,0.02249712124466896,-0.0020385265816003084,0.003360269358381629,-0.015882909297943115,0.001882704091258347,0.01773078180849552,-0.00028368885978125036,0.0009431852377019823,0.01638154126703739,-0.020077288150787354,0.004810336511582136,0.015296283178031445,0.004982657730579376,-0.025004949420690536,0.000040531071135774255,-0.01432101707905531,0.039127979427576065,-0.008542746305465698,0.00036893298965878785,-0.014555667527019978,-0.012443812564015388,0.014218357391655445,-0.021631848067045212,-0.00532363448292017,-0.035197582095861435,0.0024363326374441385,-0.022790435701608658,0.020326605066657066,-0.008176105096936226,-0.017628122121095657,-0.025635572150349617,0.009415353648364544,-0.023523718118667603,-0.0002733770525082946,-0.02588488906621933,0.02660350687801838,-0.027732761576771736,-0.0213825311511755,-0.02645684964954853,-0.016850842162966728,0.002405168255791068,0.019593320786952972,-0.043175701051950455,0.008176105096936226,0.05402829125523567,-0.01773078180849552,-0.006335564889013767,-0.008902055211365223,-0.0065298848785459995,-0.035050924867391586,0.0045023574493825436,-0.026676835492253304,-0.023259736597537994,0.007307164836674929,-0.003316272282972932,0.011776524595916271,-0.042941052466630936,-0.0071495091542601585,0.014423675835132599,-0.0011109237093478441,0.020737241953611374,-0.004557353910058737,0.009019380435347557,0.0003918480942957103,0.00028483461937867105,0.032381776720285416,0.02906733751296997,0.022130480036139488,-0.019475996494293213,0.0212358757853508,0.017598791047930717,0.03337904065847397,-0.011153234168887138,0.0030889546032994986,-0.03569621592760086,-0.02240912802517414,-0.02103055641055107,0.023450389504432678,-0.020121285691857338,-0.006566549185663462,-0.01387371402233839,-0.005268638022243977,-0.028876684606075287,-0.0080367811024189,-0.0192266795784235,0.02433032914996147,0.02166117914021015,0.020737241953611374,0.019959961995482445,0.006401560269296169,-0.003941396251320839,-0.015970902517437935,0.009437352418899536,-0.008608742617070675,0.012935112230479717,-0.02990327961742878,-0.0024344995617866516,0.00991398561745882,0.03871734067797661,0.012729792855679989,-0.005928592756390572,-0.02714613638818264,-0.00018927866767626256,-0.04555153846740723,-0.004597684368491173,-0.016029566526412964,0.011871851049363613,-0.016689520329236984,0.011849853210151196,-0.008608742617070675,0.018860038369894028,-0.004524356219917536,0.0213825311511755,-0.051036495715379715,0.003556422423571348,0.014628995209932327,0.000867565453518182,0.015765585005283356,-0.006104580592364073,-0.03068055957555771,-0.01523762010037899,0.040565215051174164,-0.013455742970108986,-0.0031384511385113,0.015882909297943115,-0.019578656181693077,-0.006709539331495762,-0.03161916136741638,-0.01580958068370819,-0.024638308212161064,-0.01496630534529686,0.002617820166051388,-0.03211779519915581,-0.03150183707475662,0.022086482495069504,0.007376826833933592,0.007501484826207161,-0.00796345341950655,0.028480710461735725,0.031296517699956894,0.008902055211365223,0.0011952512431889772,-0.008528080768883228,0.007846128195524216,0.016982832923531532,0.0245356485247612,-0.010317291133105755,0.025092944502830505,0.05429227277636528,-0.009540011174976826,0.017290811985731125,-0.006837863940745592,0.018229415640234947,-0.04399697855114937,-0.012194495648145676,-0.013881047256290913,-0.011211897246539593,-0.011079905554652214,-0.02301041968166828,-0.012561137787997723,0.009422685950994492,-0.03235244378447533,-0.005330967251211405,-0.016322879120707512,-0.020047957077622414,0.013932377099990845,0.00005969381891191006,-0.04528755694627762,0.003156783292070031,0.005576617084443569,0.02915533073246479,-0.0035399235785007477,-0.020854568108916283,-0.008330094628036022,0.00011858560901600868,-0.005026654805988073,-0.018302742391824722,0.008183438330888748,-0.012663797475397587,-0.010654601268470287,0.03197113797068596,-0.009862655773758888,-0.03340837359428406,0.19182683527469635,0.012047839350998402,0.024726301431655884,0.02837805077433586,-0.024770298972725868,0.022599780932068825,-0.0016113893361762166,-0.01781877689063549,0.0014913142658770084,0.016660189256072044,-0.0032191122882068157,-0.005147646646946669,-0.009019380435347557,-0.009180703200399876,0.028759358450770378,0.014372345991432667,-0.028994008898735046,-0.05053786188364029,-0.025298262014985085,0.01357306819409132,0.025547578930854797,-0.020267941057682037,-0.028964677825570107,-0.0282607264816761,0.014343014918267727,0.0017901271348819137,-0.01773078180849552,0.010485946200788021,0.04021323844790459,0.02777675911784172,-0.01742280274629593,-0.02642751857638359,0.016997499391436577,0.010119304992258549,-0.002850637538358569,0.01463632844388485,0.045932844281196594,-0.02789408527314663,-0.004190712235867977,0.00042805392877198756,0.010060642845928669,-0.018845371901988983,0.01121922954916954,-0.012157832272350788,0.0000910302042029798,-0.007780132349580526,-0.009019380435347557,0.039245303720235825,0.024154340848326683,-0.0013382413890212774,-0.020443929359316826,0.024608977138996124,-0.0014977304963395,-0.002830472309142351,-0.01661619171500206,-0.003798405872657895,-0.014211024157702923,-0.007567480206489563,0.01414502877742052,-0.0028689696919173002,0.009239365346729755,0.004847000353038311,0.00205869204364717,0.026926150545477867,-0.02798207849264145,0.027278127148747444,-0.006614212412387133,0.004726008977741003,0.017628122121095657,-0.02207181788980961,-0.010500612668693066,-0.009166037663817406,-0.014057034626603127,-0.018640052527189255,-0.003996392246335745,-0.019505327567458153,-0.00626223674044013,0.032704420387744904,0.01361706480383873,0.030093934386968613,-0.00799278449267149,0.015633592382073402,-0.030181927606463432,-0.004564686678349972,0.003668248187750578,-0.017114825546741486,0.030093934386968613,-0.017290811985731125,0.0030889546032994986,-0.004209044389426708,-0.01354373712092638,0.010082640685141087,0.012062504887580872,-0.010119304992258549,0.03854135423898697,-0.009994647465646267,-0.013529070653021336,-0.010214632377028465,-0.019124019891023636,-0.0022676775697618723,-0.027674099430441856,0.06517419219017029,0.047106098383665085,0.006922191474586725,-0.021646514534950256,-0.02804074063897133,0.005598615389317274,0.02606087736785412,-0.0019431998953223228,-0.017232149839401245,-0.015105629339814186,-0.01994529739022255,0.00007991638995008543,-0.00045738526387140155,0.015648258849978447,0.02198382467031479,0.02402235008776188,0.011468545533716679,-0.02562090754508972,-0.006126579362899065,-0.02312774583697319,-0.01415969431400299,-0.017290811985731125,0.011365885846316814,-0.03411232307553291,-0.008227434940636158,-0.007677472662180662,-0.0007204505382105708,-0.002392335794866085,-0.04109317809343338,0.0395972803235054,0.0024363326374441385,0.004454694222658873,-0.03983193263411522,0.007241169456392527,-0.004854333121329546,0.0398905947804451,-0.028862018138170242,-0.017686786130070686,0.029404647648334503,0.014687658287584782,0.01117523293942213,0.02132386900484562,0.004986324347555637,0.0036462496500462294,-0.009078043513000011,-0.010111972689628601,0.005407962016761303,0.012436479330062866,0.006885527167469263,-0.008117442950606346,-0.016425538808107376,-0.016058897599577904,0.017290811985731125,-0.01971064694225788,-0.013221092522144318,-0.007633476052433252,-0.04631415382027626,0.014914975501596928,-0.023641042411327362,-0.04731141775846481,0.01281045377254486,0.027644768357276917,0.01991596631705761,-0.029624631628394127,-0.02723412960767746,-0.18760311603546143,0.014123030006885529,0.010119304992258549,-0.005499622318893671,0.02720479853451252,-0.009114707820117474,0.028832687065005302,0.0018625387456268072,0.010537276044487953,-0.014277019537985325,0.020649248734116554,-0.022937091067433357,0.011945179663598537,-0.013235758058726788,-0.006214573048055172,-0.02201315574347973,0.01225315872579813,0.014599664136767387,0.05179911106824875,0.015310948714613914,0.04493558034300804,-0.02504894696176052,0.024638308212161064,-0.004586684983223677,-0.006980854086577892,-0.0057379393838346004,-0.011292558163404465,0.004674679134041071,-0.0056976089254021645,-0.04540488123893738,-0.017613457515835762,-0.012832452543079853,0.0007199922110885382,-0.024037016555666924,-0.002412501024082303,0.016630858182907104,0.0008698569145053625,-0.0037250774912536144,0.008799395523965359,0.032323114573955536,0.012062504887580872,0.048572663217782974,-0.005532620009034872,-0.0026508180890232325,0.01517895795404911,0.005253972485661507,0.02573823183774948,-0.012722459621727467,-0.00449869129806757,-0.006452890112996101,0.04267707094550133,0.0004406572552397847,0.0016663855640217662,0.010456615127623081,0.013756388798356056,0.014541001059114933,0.014379679225385189,0.01066193450242281,0.0031549499835819006,0.011879184283316135,0.001869871630333364,-0.025532914325594902,-0.0006810365593992174,-0.010295293293893337,-0.015545599162578583,-0.018860038369894028,-0.011277892626821995,-0.014049702323973179,-0.024843627586960793,-0.007846128195524216,0.00106509355828166,-0.005627946928143501,0.01199650950729847,-0.023450389504432678,0.05974789708852768,0.03830670192837715,-0.0033914337400346994,0.009847990237176418,0.00991398561745882,-0.0012951610842719674,-0.019930630922317505,0.01796543225646019,-0.002000029431656003,0.018816040828824043,0.0011567538604140282,0.0003682455571833998,-0.02141186222434044,-0.013037770986557007,-0.002110021887347102,-0.004113717470318079,-0.012370483949780464,-0.010793925262987614,0.018845371901988983,-0.009789328090846539,0.006427225191146135,0.002203515265136957,0.0036187514197081327,-0.01466565951704979,0.022218475118279457,-0.016542864963412285,-0.0072301700711250305,-0.020135950297117233,-0.005635279696434736,-0.0072375028394162655,0.04810336232185364,-0.0007195339421741664,0.02117721177637577,-0.011153234168887138,0.0122678242623806,-0.0007186173461377621,-0.037866733968257904,0.016308212652802467,0.04232509434223175,0.020253276452422142,-0.01902136020362377,0.044554274529218674,0.0003398308181203902,-0.01250980794429779,0.008425421081483364,-0.0018176251323893666,0.056228138506412506,-0.016630858182907104,0.009158704429864883,-0.0006022086599841714,0.006324565503746271,-0.02078123949468136,-0.08118908852338791,-0.026618171483278275,0.011351220309734344,0.008953385055065155,-0.036546822637319565,-0.00680119963362813,-0.022922426462173462,0.018757378682494164,0.007516150362789631,0.029404647648334503,-0.014760985970497131,-0.007868126034736633,-0.02969796024262905,0.017525462433695793,-0.01168119814246893,-0.024799630045890808,-0.015090963803231716,-0.026075541973114014,-0.02210114896297455,0.02900867536664009,0.01202584058046341,-0.027043476700782776,-0.014423675835132599,-0.007545481901615858,-0.040418557822704315,-0.01910935528576374,0.0064235590398311615,0.007299832068383694,0.0018478730926290154,0.011453879997134209,0.0050303214229643345,-0.01661619171500206,-0.005785602610558271,-0.015604262240231037,0.009987314231693745,-0.0002481704577803612,-0.0002518368710298091,-0.008557412773370743,0.028803355991840363,-0.010779259726405144,0.010023978538811207,0.0068158651702106,0.03804272040724754,-0.008110109716653824,-0.014482338912785053,-0.007024851161986589,-0.021162547171115875,0.04816202446818352,0.0071825068444013596,0.0034885937348008156,-0.009503347799181938,-0.007919455878436565,-0.020561255514621735,-0.012993774376809597,0.01776011288166046,-0.013199093751609325,0.002412501024082303,-0.003418931970372796,-0.005785602610558271,-0.023406391963362694,0.0016517199110239744,-0.012289823032915592,0.01940266788005829,0.05077251419425011,0.023509051650762558,-0.010896584950387478,-0.029140666127204895,0.003277774900197983,0.010588605888187885,-0.027512777596712112,-0.040565215051174164,0.02513694018125534,-0.005572950467467308,0.022057151421904564,-0.008110109716653824,0.0016508032567799091,0.026735497638583183,-0.005418961402028799,0.024814296513795853,0.008205436170101166,-0.006427225191146135,-0.018698716536164284,0.004975324962288141,-0.02459431067109108,-0.002381336409598589,0.0373094379901886,0.024374326691031456,0.009452017955482006,-0.0032942737452685833,-0.0395972803235054,0.027483446523547173,0.016366876661777496,0.0005531703354790807,0.004887331277132034,0.01796543225646019,0.013793053105473518,0.005477624014019966,-0.011057907715439796,-0.011857185512781143,0.01096258033066988,-0.035109590739011765,-0.009481349028646946,-0.07362160831689835,0.022819766774773598,0.02642751857638359,-0.005488622933626175,-0.030093934386968613,0.005407962016761303,-0.015325614251196384,-0.024726301431655884,-0.017232149839401245,0.009635338559746742,-0.04267707094550133,0.014453007839620113,-0.019989294931292534,-0.01850806176662445,-0.004073387011885643,-0.0272634606808424,0.002764476928859949,-0.007252168841660023,0.008161439560353756,0.03062189742922783,-0.005371297709643841,0.010485946200788021,-0.012091835960745811,0.02771809697151184,-0.025063611567020416,-0.014005704782903194,-0.028994008898735046,-0.001357490080408752,8.356848411494866e-6,-0.005268638022243977,0.029169997200369835,-0.005814934149384499,-0.0026783160865306854,0.0065225521102547646,0.014247688464820385,-0.002264011185616255,0.009334692731499672,0.006328232120722532,0.03050457127392292,0.011549207381904125,-0.009408020414412022,-0.009737998247146606,0.02303975075483322,-0.03851202130317688,0.009906653314828873,-0.018786709755659103,-0.03188314288854599,0.018126755952835083,0.03458162397146225,-0.003505092579871416,0.010427284054458141,-0.0032191122882068157,-0.015560264699161053,-0.025547578930854797,-0.01202584058046341,-0.00992865115404129,-0.0032649424392729998,0.001549060340039432,0.0015142293414101005,-0.00899738259613514,0.028730027377605438,0.019505327567458153,0.021587850525975227,-0.02801140956580639,0.012084503658115864,0.0028469711542129517,-0.04470093175768852,0.004062387626618147,0.013793053105473518,-0.04079986363649368,-0.007985451258718967,-0.012744458392262459,0.007120177615433931,0.023890359327197075,-0.003303439822047949,-0.022966422140598297,-0.02699947915971279,0.027366120368242264,-0.017056161537766457,0.00019569489813875407,0.0007245752494782209,-0.017540128901600838,-0.0018918700516223907,0.019813306629657745,-0.007068847771733999,-0.009752663783729076,-0.0011980010895058513,-0.01919734850525856,-0.011783857829868793,-0.012407148256897926,-0.040418557822704315,0.015604262240231037,0.007120177615433931,0.016630858182907104,0.014027703553438187,0.005360298790037632,-0.0003049998776987195,0.01060327235609293,0.009532678872346878,-0.009254030883312225,0.009151371195912361,0.008711401373147964,0.0017342142527922988,-0.009386022575199604,-0.004124716855585575,0.02774742804467678,-0.03596019744873047,-0.008968050591647625,0.006269569508731365,0.00013554278120864183,-0.016572196036577225,-0.010955248028039932,-0.012458478100597858,0.03153117001056671,-0.005741605535149574,0.02993261069059372,0.0050559863448143005,0.006185241974890232,-0.03364302217960358,0.03229378163814545,-0.03343770280480385,0.008066113106906414,0.030005939304828644,-0.011974510736763477,0.0035014261957257986,0.004608683753758669,-0.012128500267863274,-0.01859605684876442,0.011541874147951603,-0.026383521035313606,0.005704941693693399,0.00823476817458868,-0.016777515411376953,-0.011094571091234684,-0.00800745002925396,0.004176046699285507,-0.008894722908735275,0.0070578488521277905,-0.022203808650374413,0.09779062122106552,0.039274636656045914,-0.0256795696914196,-0.010133970528841019,5.886314738745568e-6,0.026618171483278275,-0.020385267212986946,-0.0032117795199155807,0.0036792473401874304,-0.057636041194200516,-0.0265448447316885,0.00822010263800621,-0.0032411108259111643,-0.02938998118042946,-0.009796660393476486,-0.00802211556583643,-0.043263696134090424,0.05068451911211014,-0.008396090008318424,0.0009642671211622655,0.03223511949181557,0.00626223674044013,0.01126322615891695,0.01522295456379652,-0.012803120538592339,-0.01519362349063158,0.036517493426799774,0.016997499391436577,-0.016836177557706833,-0.026764828711748123,0.029448645189404488,0.013521738350391388,-0.03484560549259186,-0.03458162397146225,-0.00532363448292017,0.020986558869481087,-0.0002527534670662135,-0.03610685467720032,0.014167027547955513,0.004407030530273914,0.017496131360530853,-0.04628482088446617,-0.022541118785738945,-0.019959961995482445,-0.005198976490646601,0.006621545180678368,-0.03684013709425926,0.004920328967273235,-0.05388163402676582],[-0.008795825764536858,0.01228096429258585,-0.009358642622828484,0.019900646060705185,-0.01411372795701027,0.009466877207159996,-0.007028001826256514,0.008824688382446766,-0.003932506311684847,-0.036337800323963165,0.03760774806141853,0.00800210889428854,-0.016985539346933365,0.016754640266299248,0.013327226974070072,0.00498237693682313,0.009481308050453663,-0.007067687809467316,0.04465017840266228,0.010477062314748764,0.018948186188936234,0.016624759882688522,-0.016552602872252464,-0.006190991494804621,0.00372325349599123,0.03183526173233986,0.03304748237133026,0.008499985560774803,-0.0126706063747406,0.014561096206307411,0.05631060153245926,-0.00006702623068122193,-0.029843753203749657,0.00738517427816987,-0.02319096215069294,-0.012627312913537025,-0.008182498626410961,0.007922736927866936,0.021185023710131645,-0.020145976915955544,0.017865844070911407,0.0003492805117275566,0.0011689284583553672,-0.005281824618577957,-0.0028880469035357237,0.012201592326164246,-0.008831903338432312,-0.05048039183020592,-0.014185884036123753,0.0018462935695424676,-0.0005876210634596646,-0.0035392555873841047,-0.020982986316084862,0.030103513970971107,0.004235561471432447,-0.0023306412622332573,0.01831321232020855,0.017923569306731224,0.0029565952718257904,0.016119666397571564,0.01642272248864174,-0.019467709586024284,-0.007691837847232819,-0.0014791995054110885,-0.024085698649287224,-0.014950739219784737,-0.01502289529889822,0.024677377194166183,-0.05795576050877571,-0.017505064606666565,0.005667859688401222,0.015037326142191887,0.005180806387215853,0.005029278341680765,0.016971109434962273,-0.026149362325668335,-0.010332750156521797,-0.00036574111436493695,-0.02626481093466282,-0.013031386770308018,0.01584547385573387,0.01642272248864174,-0.020578913390636444,0.0588504932820797,0.01368800736963749,0.019020341336727142,0.012786056846380234,0.01027502492070198,-0.028544943779706955,-0.006093580741435289,0.028054282069206238,-0.001995115540921688,0.0026914216578006744,0.005440568085759878,0.01437349058687687,-0.001217633718624711,-0.008803041651844978,0.01335608959197998,-0.01262009795755148,0.03910859301686287,-0.012872643768787384,-0.011790302582085133,0.00006285470590228215,-0.012100573629140854,-0.00044015207095071673,0.0020420169457793236,-0.013002525083720684,-0.021935446187853813,0.008471122942864895,0.013630283065140247,-0.000811304897069931,0.029641715809702873,-0.00821857713162899,-0.004513362422585487,-0.01874614879488945,0.0190924983471632,0.023638330399990082,0.026683317497372627,-0.003566314000636339,-0.040176503360271454,0.01951100304722786,0.002927732653915882,0.0380118191242218,0.005988954100757837,0.009264839813113213,0.008795825764536858,-0.018948186188936234,-0.006750200875103474,0.004304110072553158,-0.0033606691285967827,0.021690115332603455,0.015167207457125187,-0.011097604408860207,0.02593289315700531,0.019958371296525,0.0359337255358696,-0.043524544686079025,0.007313018199056387,-0.02876141108572483,-0.005429744720458984,-0.019828489050269127,0.04716121032834053,-0.03526988998055458,0.019496571272611618,-0.021286042407155037,-0.009654482826590538,0.016364997252821922,0.033769045025110245,0.03206615895032883,-0.02285904437303543,0.005029278341680765,0.022555988281965256,-0.018601836636662483,0.02293120138347149,-0.006963061168789864,0.040176503360271454,-0.02825631946325302,0.006277578417211771,0.020261425524950027,0.02902117371559143,-0.007857796736061573,0.043178196996450424,-0.019713040441274643,-0.015787748619914055,0.02096855640411377,0.023652762174606323,0.013110758736729622,-0.013464323244988918,-0.007349096238613129,-0.016364997252821922,-0.007370742969214916,0.0015748064033687115,-0.049845416098833084,0.037203673273324966,0.011184191331267357,0.03893541917204857,0.03157549723982811,-0.002417228417471051,-0.011840811930596828,-0.0060683260671794415,0.0062559316866099834,0.003458079881966114,-0.0059745232574641705,0.04107123985886574,-0.025009294971823692,-0.005981738679111004,-0.004123719874769449,-0.016494879499077797,0.015802180394530296,0.019987232983112335,0.014185884036123753,0.012295395135879517,0.01687009073793888,-0.010419337078928947,-0.5495406985282898,-0.016668053343892097,-0.009596757590770721,-0.017562787979841232,0.031460050493478775,-0.017476201057434082,0.030507588759064674,0.04499652981758118,-0.0016171979950740933,0.042572084814310074,-0.004863319452852011,0.009315349161624908,0.01772153191268444,-0.011977908201515675,0.001982488203793764,-0.01702883467078209,-0.0012221435317769647,-0.010845057666301727,0.01838536746799946,-0.014387921430170536,-0.01754835806787014,0.006371381226927042,-0.0076774065382778645,-0.028213026002049446,0.013803456909954548,-0.019395552575588226,-0.0002301102358615026,-0.030421001836657524,-0.004387089516967535,-0.027202840894460678,-0.02294563129544258,-0.012035633437335491,-0.006082757376134396,-0.006346127018332481,0.057811446487903595,-0.021762272343039513,0.001558571239002049,-0.004372658208012581,0.02421557903289795,0.036078039556741714,0.0009488523937761784,-0.02197873964905739,0.0018471955554559827,-0.008564925752580166,0.03183526173233986,-0.002613853896036744,0.008658729493618011,0.0037196457851678133,-0.0044628530740737915,-0.015802180394530296,-0.0019265671726316214,0.004015485756099224,0.031286872923374176,0.006779063493013382,0.0030684371013194323,-0.012742762453854084,0.04020536690950394,-0.010816195979714394,0.0014710819814354181,-0.01039769034832716,-0.01815446838736534,0.018876029178500175,-0.038040682673454285,-0.010974938981235027,-0.003611411666497588,0.04161962494254112,-0.019395552575588226,0.01065023709088564,0.027505895122885704,0.0031911025289446115,0.01805344969034195,0.020131545141339302,-0.0016190019669011235,-0.04234118387103081,-0.003559098346158862,0.04262980818748474,0.015542418695986271,-0.01433019619435072,0.013247855007648468,0.015614574775099754,-0.016884522512555122,-0.0028736155945807695,0.00009335192589787766,-0.016408290714025497,0.005141120404005051,-0.01994393952190876,-0.025225764140486717,-0.01754835806787014,0.03948380425572395,-0.013233424164354801,0.01129242591559887,0.0062559316866099834,-0.012468569912016392,-0.026827629655599594,-0.0008816570625640452,0.008240223862230778,0.01108317356556654,-0.00008715101284906268,0.003490550210699439,0.006198206916451454,-0.014994032680988312,-0.0065481639467179775,0.004314933437854052,0.001425984431989491,0.049527931958436966,-0.0002563795424066484,-0.011054310947656631,-0.013536479324102402,0.021011849865317345,0.00018151762196794152,0.023652762174606323,-0.004502539057284594,-0.01424360927194357,-0.02053561992943287,-0.027751225978136063,-0.03501012921333313,0.04040740057826042,-0.0015414342051371932,0.04776732251048088,0.011609912849962711,0.0030197317246347666,0.0031478088349103928,-0.007951599545776844,-0.02036244422197342,0.03275885805487633,0.014221962541341782,0.0018977047875523567,0.031892985105514526,0.009120527654886246,-0.004607165232300758,0.00386395794339478,0.0035609023179858923,0.03122914955019951,9.280229278374463e-6,0.02275802567601204,0.017086558043956757,0.04179279878735542,-0.0016550800064578652,0.0014692781260237098,-0.006840395741164684,-0.009488523937761784,0.015600143931806087,0.023941386491060257,-0.028804704546928406,-0.017331888899207115,-0.02036244422197342,-0.03226819634437561,-0.02987261489033699,0.002336052944883704,0.007655759807676077,-0.004719007294625044,0.0051266890950500965,-0.004167013335973024,0.004387089516967535,-0.03160436078906059,-0.03177753463387489,-0.015398106537759304,-0.01411372795701027,0.010765686631202698,0.022368382662534714,0.02978602796792984,0.035125575959682465,-0.010794549249112606,-0.02355174347758293,-0.027938831597566605,-0.012013986706733704,-0.0056317816488444805,-0.004841672722250223,0.005083395633846521,-0.014409568160772324,-0.035471927374601364,0.01557128131389618,-0.0005132100777700543,-0.0343751534819603,-0.0008451280300505459,0.025875167921185493,-0.012872643768787384,-0.007255293428897858,-0.015167207457125187,0.014474508352577686,0.04167734831571579,-0.002864596201106906,-0.03587600216269493,0.01593206077814102,0.0177936889231205,0.02695751003921032,0.020651068538427353,-0.003824271960183978,-0.010599727742373943,-0.0013601420214399695,-0.02635139785706997,0.02619265578687191,-0.0033173756673932076,0.0076124658808112144,0.0032343959901481867,0.019568728283047676,-0.01116254460066557,-0.03526988998055458,-0.004293286707252264,0.02858823724091053,0.01762051321566105,-0.00950295478105545,0.03143118694424629,-0.03339383006095886,0.00232162163592875,-0.014755917713046074,0.004852496087551117,-0.02105514332652092,-0.011530540883541107,0.045314013957977295,0.009892597794532776,0.005061748903244734,-0.00399744650349021,0.033076345920562744,0.016393860802054405,0.03371131792664528,-0.01369522325694561,0.02892015501856804,-0.0004852496203966439,-0.008196930401027203,-0.010938861407339573,-0.012648959644138813,0.02301778830587864,0.008146421052515507,-0.025803012773394585,0.019756333902478218,0.019496571272611618,-0.005018454976379871,-0.006154913455247879,-0.01685565896332264,0.0006674436735920608,0.010109066031873226,0.021892152726650238,-0.006562595255672932,-0.010253378190100193,0.011696499772369862,0.0042752474546432495,-0.0022729162592440844,0.02352287992835045,-0.028775842860341072,-0.0012510059168562293,-0.008348457515239716,-0.006010601297020912,0.0017146087484434247,0.0172741636633873,-0.03215274587273598,0.01147281564772129,0.015152775682508945,-0.009899813681840897,-0.003596980357542634,-0.008175283670425415,0.026899784803390503,-0.001293397624976933,-0.012259317561984062,0.01891932263970375,-0.004737046547234058,0.01215108297765255,0.004094857256859541,0.016061943024396896,0.013558126986026764,0.006779063493013382,-0.011451168917119503,0.015181638300418854,-0.020766519010066986,0.035818275064229965,0.011371797882020473,-0.027087390422821045,-0.02892015501856804,-0.010238947346806526,-0.009041156619787216,0.012728331610560417,-0.0097194230183959,-0.018760578706860542,0.004679321311414242,0.0028988702688366175,0.010549218393862247,0.004188660066574812,0.018255487084388733,0.003079260466620326,-0.01712985150516033,-0.002000527223572135,-0.010130712762475014,0.021632391959428787,0.03879110515117645,-0.019727470353245735,-0.028213026002049446,0.0018345682183280587,-0.0009470484801568091,-0.008954568766057491,-0.004960730206221342,-0.02737601473927498,-0.008918491192162037,-0.03518330305814743,0.001973468577489257,-0.015629006549715996,0.02147364802658558,0.008233007974922657,-0.02397024817764759,-0.021286042407155037,-0.016567034646868706,-0.002397385658696294,0.02181999757885933,-0.026928646489977837,-0.017144283279776573,0.004935475531965494,0.02157466672360897,-0.027173977345228195,0.005209668539464474,-0.00498598488047719,0.0013484166702255607,0.0027599697932600975,-0.000990342115983367,0.000713443208951503,-0.04058057814836502,0.022830182686448097,-0.006479615345597267,0.001861626747995615,-0.0022242111153900623,-0.012425276450812817,0.0032398076727986336,-0.012338688597083092,-0.025904031470417976,0.001836372073739767,0.002417228417471051,0.04225459694862366,0.04765187203884125,0.0036691364366561174,0.006259539630264044,-0.01464046724140644,-0.006061110179871321,-0.0195254348218441,-0.00129880930762738,0.0008406182751059532,0.000933519215323031,-0.005577664822340012,0.0019049204420298338,-0.026149362325668335,0.012908722274005413,0.015484693460166454,0.0005339549388736486,0.00787222757935524,-0.025312351062893867,0.004628812428563833,0.0030594177078455687,0.012331473641097546,-0.015960924327373505,-0.017072128131985664,0.023984679952263832,0.012259317561984062,0.029468541964888573,-0.0003684469556901604,-0.015629006549715996,0.009438014589250088,-0.010195653885602951,-0.01545583177357912,0.006685260217636824,0.012822134420275688,-0.0038387032691389322,-0.041388723999261856,0.03356700763106346,0.01832764223217964,-0.0030648293904960155,0.0016884522046893835,-0.0020780949853360653,0.033509280532598495,0.006569810677319765,0.008932922035455704,0.013464323244988918,-0.0024334636982530355,-0.025817444548010826,-0.04003218933939934,-0.00458191055804491,0.002397385658696294,-0.007352704182267189,0.028645962476730347,-0.008095911704003811,-0.0025416978169232607,-0.015556849539279938,0.04519856721162796,-0.021257180720567703,0.01262009795755148,0.003122554160654545,-0.00520245311781764,-0.027953263372182846,-0.025038158521056175,-0.04081147536635399,-0.009813225828111172,-0.0054694307036697865,0.0052204919047653675,-0.02062220685184002,-0.02900674194097519,-0.004603557754307985,-0.026769904419779778,0.007504231762140989,-0.012728331610560417,0.01609080471098423,-0.01480642706155777,-0.007345488294959068,0.002536286134272814,0.024922708049416542,-0.0008180695003829896,0.009928676299750805,-0.003616823349148035,0.022224070504307747,-0.008131989277899265,-0.010376043617725372,-0.0005222295876592398,-0.0089834313839674,0.002500208094716072,0.02089639939367771,0.012858212925493717,0.01890489086508751,-0.011970693245530128,0.019207946956157684,-0.019900646060705185,0.034779228270053864,0.007316626142710447,-0.02414342202246189,-0.004960730206221342,0.0023144062142819166,0.0039036436937749386,0.003122554160654545,0.01694224588572979,-0.0008924804860725999,0.025442231446504593,0.002442483091726899,-0.03925290331244469,-0.012165514752268791,-0.020651068538427353,0.014633252285420895,0.005408097989857197,-0.0005808564019389451,-0.0034346291795372963,-0.01477034855633974,-0.010044125840067863,-0.015282656997442245,0.020679932087659836,-0.0002626932109706104,0.012605666182935238,0.027866676449775696,0.010051341727375984,0.0008415202028118074,-0.010671883821487427,-0.03740571066737175,0.008579357527196407,-0.012295395135879517,0.031200287863612175,0.012410844676196575,-0.013074681162834167,0.0175339262932539,-0.018977047875523567,-0.019236810505390167,-0.02601948007941246,0.03004579059779644,-0.016307273879647255,0.02036244422197342,0.004809202626347542,-0.037030499428510666,-0.023854797706007957,0.014142590574920177,0.014258040115237236,-0.006714122835546732,-0.0030431824270635843,0.013074681162834167,-0.003943329676985741,0.02027585729956627,-0.00042369146831333637,-0.018587404862046242,0.0179668627679348,-0.03526988998055458,-0.0512019507586956,0.004470068961381912,0.0067069074138998985,0.011949046514928341,-0.04433269426226616,0.010794549249112606,0.008269086480140686,-0.006292009726166725,-0.0032957287039607763,-0.0046215965412557125,-0.003483334556221962,-0.014135375618934631,0.016552602872252464,-0.003440040862187743,0.005859073251485825,0.0010065772803500295,0.038127269595861435,0.040263090282678604,-0.004560263827443123,0.000779736612457782,0.021776704117655754,-0.016711346805095673,-0.011985124088823795,-0.017909137532114983,0.0032596506644040346,0.004271639510989189,-0.00017362555081490427,-0.019915075972676277,0.004242777358740568,0.0077712093479931355,0.03515443950891495,0.01762051321566105,-0.026221517473459244,-0.06349734961986542,0.0027960478328168392,0.01951100304722786,-0.014820857904851437,0.015412537381052971,-0.02301778830587864,-0.014193099923431873,0.0004784849879797548,-0.02310437522828579,0.008759747259318829,0.019727470353245735,0.036337800323963165,-0.031286872923374176,0.020694361999630928,0.017404045909643173,0.016754640266299248,0.015095051378011703,-0.014294118620455265,-0.018183330073952675,0.008413398638367653,0.005418921355158091,0.004931867588311434,0.04000332951545715,0.015542418695986271,-0.003342630108818412,-0.013586988672614098,-0.020665500313043594,-0.05264507234096527,-0.010621374472975731,0.004729830659925938,-0.013991063460707664,-0.008319595828652382,-0.020694361999630928,-0.027274996042251587,0.00006601153290830553,0.018544111400842667,-0.02799655683338642,-0.03177753463387489,0.015773318707942963,-0.009531817398965359,-0.04623761400580406,0.017331888899207115,-0.006439929828047752,0.045660365372896194,-0.007843364961445332,-0.00011714088032022119,-0.012764410115778446,-0.008831903338432312,0.005519939586520195,0.014423999935388565,0.0053503732196986675,0.012179945595562458,0.02404240518808365,0.004614381119608879,0.012230454944074154,0.006623927503824234,0.014164237305521965,-0.012612882070243359,-0.021286042407155037,-0.022180777043104172,0.02355174347758293,0.024518635123968124,0.01468376163393259,-0.012749978341162205,0.006317264400422573,-0.01961202174425125,-0.0019265671726316214,-0.01789470762014389,-0.025038158521056175,0.021286042407155037,-0.012093358673155308,0.0032758857123553753,0.015686729922890663,0.035298753529787064,0.02489384636282921,0.004856104031205177,-0.0015125717036426067,-0.019034773111343384,-0.0054044900462031364,0.018717285245656967,0.01489301398396492,-0.00029809479019604623,0.038819968700408936,-0.0254278015345335,0.014438430778682232,-0.02174784056842327,0.0037881939206272364,-0.009221546351909637,0.002592206932604313,-0.02003052644431591,0.04089806228876114,-0.024576358497142792,0.011054310947656631,-0.0013971220469102263,-0.027433739975094795,0.011912968009710312,-0.0037845862098038197,-0.003824271960183978,-0.03653983771800995,-0.024836121127009392,-0.019049203023314476,0.044448141008615494,0.004069602582603693,-0.021690115332603455,-0.01695667766034603,0.006504870019853115,-0.018212193623185158,0.0038062329404056072,-0.02902117371559143,0.03792523220181465,-0.026293674483895302,-0.00640024384483695,-0.03221047297120094,-0.018183330073952675,0.023984679952263832,0.01052035577595234,-0.0362800732254982,0.017505064606666565,0.0498165562748909,-0.023912522941827774,0.005094218999147415,-0.00787222757935524,-0.023479586467146873,-0.03619348630309105,-0.007226430810987949,-0.01762051321566105,-0.021776704117655754,0.00047036740579642355,0.004603557754307985,0.007792856078594923,-0.040436264127492905,-0.004361834842711687,0.005830211099237204,0.00821136124432087,0.025615407153964043,-0.009654482826590538,0.0008550494676455855,-0.00031996710458770394,-0.00996475387364626,0.03521216660737991,0.04124441370368004,0.02617822401225567,-0.0249948650598526,0.03122914955019951,0.010354396887123585,0.03806954622268677,-0.019958371296525,-0.002695029368624091,-0.01977076381444931,-0.010895567014813423,-0.02961285412311554,0.006793494336307049,0.0012897897977381945,-0.025961756706237793,-0.006259539630264044,0.003705214476212859,-0.03460605442523956,0.002657147590070963,-0.019150221720337868,0.02078094892203808,0.00042414243216626346,0.03682846203446388,0.02115616202354431,-0.0016135902842506766,-0.004484500270336866,-0.009567895904183388,0.004563871771097183,0.006338911131024361,0.008254654705524445,-0.0097194230183959,-0.016408290714025497,0.003072044812142849,0.04921044409275055,0.022397246211767197,0.0008875197381712496,-0.01780811883509159,0.0002269534015795216,-0.01173257827758789,-0.018096743151545525,-0.018039019778370857,0.011660422198474407,-0.01737518236041069,-0.005779701750725508,-0.00916382111608982,0.01668248511850834,0.005105042364448309,0.013954984955489635,-0.037347983568906784,0.0022801319137215614,0.0024641300551593304,0.005256569944322109,0.02746260166168213,0.004675713833421469,-0.022743595764040947,0.0010074791498482227,0.034028805792331696,-0.025023726746439934,-0.022786889225244522,0.01841423101723194,-0.017591651529073715,-0.02848721854388714,-0.025701994076371193,0.013103542849421501,0.0019049204420298338,-0.03183526173233986,0.0029223209712654352,-0.02954069711267948,-0.01899147965013981,0.009481308050453663,0.010426552966237068,-0.013067465275526047,0.013731300830841064,0.02490827813744545,0.03183526173233986,0.016653621569275856,-0.0005380137590691447,-0.0010146948043256998,0.012634528800845146,0.0009831265779212117,0.031460050493478775,-0.0014088473981246352,0.008355673402547836,0.03287430852651596,-0.00852163229137659,0.01881830394268036,0.002707656705752015,0.012973662465810776,-0.03391335532069206,-0.012591235339641571,0.0011499874526634812,-0.010772902518510818,0.016162961721420288,-0.010195653885602951,-0.022151915356516838,0.009120527654886246,-0.012389197945594788,0.00855771079659462,-0.025716425850987434,-0.022642577067017555,0.009769932366907597,0.023840367794036865,-0.06303554773330688,0.007504231762140989,-0.008413398638367653,0.020982986316084862,0.0002843400288838893,-0.014344627968966961,-0.01687009073793888,0.0059781307354569435,0.002839341526851058,-0.02122831717133522,0.00889684446156025,-0.016047511249780655,0.010325534269213676,0.007619681768119335,0.010123497806489468,-0.012237670831382275,0.1958027333021164,-0.02130047418177128,0.01838536746799946,0.025211332365870476,-0.020679932087659836,0.02405683510005474,0.01039769034832716,-0.002996281022205949,0.01864513009786606,0.03177753463387489,0.012807703576982021,-0.011537756770849228,-0.03284544497728348,0.004239169415086508,0.010657452046871185,0.01730302721261978,-0.03206615895032883,-0.0496433787047863,-0.014878583140671253,0.010845057666301727,0.017331888899207115,-0.003248827299103141,-0.037030499428510666,-0.02765020728111267,0.03824272006750107,-0.009870951063930988,-0.018529679626226425,-0.0017155107343569398,0.01300974003970623,0.022729163989424706,-0.012317041866481304,-0.03143118694424629,0.00554158678278327,-0.002213387517258525,0.004257208667695522,-0.0004884064546786249,0.03174867480993271,-0.024951571598649025,-0.00016144922119565308,0.016466015949845314,0.026928646489977837,-0.010592511855065823,0.00855771079659462,-0.008940137922763824,0.004257208667695522,-0.012829350307583809,0.005105042364448309,0.045400600880384445,0.0062306770123541355,-0.0017687258077785373,-0.025269057601690292,0.01356534194201231,0.0012573195854201913,0.009690561331808567,-0.008730885572731495,-0.01292315311729908,-0.02447534166276455,-0.010505924932658672,0.010354396887123585,-0.02173341065645218,-0.015152775682508945,-0.01335608959197998,-0.014005494304001331,0.007929952815175056,-0.02508145198225975,0.034028805792331696,-0.045314013957977295,-0.02037687599658966,0.019063634797930717,-0.039079729467630386,-0.007132628001272678,-0.008694807067513466,-0.021329335868358612,-0.010145144537091255,-0.022036464884877205,-0.013630283065140247,-0.011155329644680023,0.03313406929373741,0.013810672797262669,0.03936835378408432,-0.011075957678258419,0.012093358673155308,-0.019453277811408043,-0.003131573786959052,0.004877750761806965,-0.013586988672614098,0.032643407583236694,0.0015820219414308667,-0.000621895189397037,-0.006869258359074593,-0.008204145357012749,-0.007814503274857998,0.009589542634785175,0.009560680016875267,0.014835288748145103,-0.01642272248864174,-0.0177071001380682,-0.020925261080265045,-0.03694390878081322,-0.008947353810071945,-0.029338659718632698,0.05939888209104538,0.041302137076854706,-0.0064832232892513275,-0.019193515181541443,-0.02474953420460224,0.009019509889185429,0.007533094380050898,0.02029028907418251,-0.04101351276040077,-0.033336106687784195,-0.016061943024396896,0.003358865389600396,0.003337218426167965,0.015311519615352154,0.026466848328709602,-0.009156606160104275,0.03088279999792576,-0.007143451366573572,-0.014077650383114815,-0.0003350747865624726,-0.029555128887295723,-0.020997418090701103,0.002990869339555502,-0.02942524664103985,-0.009596757590770721,-0.004159797914326191,-0.013918907381594181,0.009098880924284458,-0.031719811260700226,0.0393972173333168,0.015369243919849396,-0.0017804511589929461,-0.02216634713113308,-0.0009109704406000674,-0.013983847573399544,0.04124441370368004,-0.04072488844394684,-0.025629837065935135,0.01390447560697794,0.011783086694777012,0.006039463449269533,0.03737684711813927,-0.012273748405277729,0.00751144764944911,-0.009560680016875267,-0.005602919030934572,0.018255487084388733,0.007475369609892368,0.024677377194166183,-0.020679932087659836,-0.0037773705553263426,-0.007489800453186035,0.007886659353971481,-0.018775010481476784,-0.01917908526957035,-0.016797933727502823,-0.06921210885047913,-0.013146837241947651,-0.008175283670425415,-0.03977242857217789,0.020492324605584145,-0.021949877962470055,0.009235977195203304,-0.03584713861346245,0.00039911328349262476,-0.18252600729465485,0.01039769034832716,0.005390058737248182,-0.012345904484391212,0.022382814437150955,-0.011905752122402191,0.023825936019420624,0.011126467026770115,-0.00309188780374825,0.0059745232574641705,0.031633224338293076,-0.010722393169999123,0.013413814827799797,-0.019554296508431435,0.0013547303387895226,-0.015297087840735912,0.004390696994960308,0.005794133059680462,0.04303388297557831,0.011422306299209595,0.039599254727363586,-0.026062773540616035,0.02935309149324894,-0.01510948222130537,-0.0038062329404056072,0.004282462876290083,-0.001527002896182239,-0.005797740537673235,-0.006880081724375486,-0.037117086350917816,-0.02978602796792984,-0.019063634797930717,0.019987232983112335,-0.014820857904851437,0.001917547662742436,0.0099791856482625,-0.0024406793527305126,-0.014207531698048115,0.007067687809467316,0.017606083303689957,0.009510170668363571,0.04782504588365555,-0.0038531343452632427,0.007893874309957027,0.00744650699198246,0.012216023169457912,0.004679321311414242,-0.005332333967089653,0.0010985762346535921,-0.00010327338532079011,0.029641715809702873,0.0041165039874613285,-0.011054310947656631,0.007605250459164381,0.01685565896332264,0.004199483431875706,0.016812365502119064,-0.0016686092130839825,0.006252323742955923,0.0030810644384473562,-0.00020519383542705327,-0.017591651529073715,0.01873171702027321,-0.011905752122402191,-0.0017119029071182013,-0.014907444827258587,-0.025745287537574768,-0.008586573414504528,-0.02594732493162155,-0.018096743151545525,-0.016494879499077797,-0.006494046654552221,0.0035807453095912933,-0.025629837065935135,0.051490575075149536,0.03362473100423813,-0.014921876601874828,0.015629006549715996,-0.013060249388217926,0.011537756770849228,-0.017865844070911407,0.02627924270927906,-0.006108011584728956,0.02679876610636711,0.007323841564357281,-0.008940137922763824,-0.024547496810555458,-0.0002737421018537134,0.009387505240738392,-0.008586573414504528,-0.029136622324585915,-0.0017245302442461252,0.021848859265446663,-0.011328503489494324,-0.008586573414504528,0.009481308050453663,0.015903199091553688,-0.005772485863417387,0.010801764205098152,-0.019323397427797318,-0.009142174385488033,-0.011306856758892536,-0.012894290499389172,-0.014445646665990353,0.00919989962130785,0.003238003933802247,0.018673991784453392,-0.0014286902733147144,0.004791163373738527,-0.024518635123968124,-0.023724917322397232,0.009582326747477055,0.03587600216269493,0.025543250143527985,-0.013276717625558376,0.02003052644431591,0.007309410255402327,-0.0004471421707421541,0.030507588759064674,-0.013457108289003372,0.06205422431230545,-0.009293702431023121,0.012771625071763992,0.01848638616502285,0.000552444951608777,-0.01519606914371252,-0.09461104869842529,-0.03414425626397133,0.004852496087551117,0.020651068538427353,-0.03244137018918991,-0.008478338830173016,-0.018601836636662483,-0.0022043681237846613,0.001293397624976933,0.03319179639220238,-0.012894290499389172,-0.021531373262405396,-0.03824272006750107,0.02431659772992134,-0.00716870604082942,-0.029988065361976624,-0.031055975705385208,-0.01583104208111763,-0.02080981247127056,0.034028805792331696,-0.0015288068680092692,-0.04508311673998833,-0.015701161697506905,-0.004455637652426958,-0.02824188768863678,-0.025629837065935135,-0.002063663676381111,0.021185023710131645,-0.00246052211150527,0.014568311162292957,-0.011075957678258419,-0.013529264368116856,-0.008824688382446766,-0.0007923638913780451,-0.002859184518456459,-0.007215607445687056,0.012980878353118896,-0.027794519439339638,0.02892015501856804,-0.011213053949177265,0.02482168935239315,0.020867537707090378,0.024172285571694374,0.0021791134495288134,-0.021502509713172913,-0.0035482749808579683,-0.013218993321061134,0.049094993621110916,-0.007042433135211468,0.0036691364366561174,-0.017822550609707832,-0.01610523648560047,-0.017331888899207115,0.00024871298228390515,0.006292009726166725,-0.03169094771146774,0.0020420169457793236,0.0238692294806242,-0.017649376764893532,-0.007215607445687056,-0.011364581994712353,0.007345488294959068,-0.004455637652426958,0.023075513541698456,0.003741292515769601,-0.02352287992835045,-0.020593343302607536,0.010368827730417252,0.00458191055804491,-0.030825074762105942,-0.04312046989798546,0.025095883756875992,0.004055171273648739,0.01292315311729908,-0.002442483091726899,0.017230870202183723,0.016408290714025497,-0.006277578417211771,0.03518330305814743,-0.0055920956656336784,-0.01780811883509159,-0.014294118620455265,0.012952015735208988,-0.043264783918857574,-0.0018165291985496879,0.021805565804243088,0.01600421778857708,0.011155329644680023,-0.0006841297727078199,-0.03677073493599892,0.039426080882549286,0.028299612924456596,-0.01018843799829483,0.013363305479288101,0.0007855992880649865,0.00919989962130785,0.011537756770849228,0.000449848041171208,0.003358865389600396,-0.013276717625558376,-0.03169094771146774,-0.00476951664313674,-0.07129020243883133,0.03913745656609535,0.023984679952263832,-0.01040490623563528,-0.030161239206790924,0.0026860099751502275,-0.016061943024396896,-0.02431659772992134,-0.00766297522932291,0.015614574775099754,-0.028631530702114105,0.0031911025289446115,-0.02336413785815239,-0.041965972632169724,-0.010549218393862247,-0.039830151945352554,0.004358226899057627,-0.017952430993318558,0.021791134029626846,0.032383646816015244,0.001982488203793764,0.010462630540132523,-0.011277994140982628,0.01391169149428606,0.01065023709088564,-0.01942441612482071,-0.020651068538427353,0.016494879499077797,0.013168483972549438,0.02591846138238907,0.03169094771146774,0.007655759807676077,-0.0003889663494192064,0.016494879499077797,-0.010051341727375984,0.008117558434605598,-0.008997862227261066,0.003918075002729893,0.020853105932474136,-0.00751144764944911,-0.0007346390630118549,-0.011682068929076195,-0.003609607694670558,-0.015556849539279938,0.025572113692760468,0.009524601511657238,-0.04159076139330864,0.018962616100907326,0.014597173780202866,0.0008302458445541561,0.02336413785815239,0.0003037319693248719,-0.019222378730773926,-0.011631559580564499,-0.04297615960240364,-0.0129303690046072,-0.0032217686530202627,-0.001950017991475761,0.0008482848643325269,-0.010361612774431705,0.038387030363082886,0.04239891096949577,0.02902117371559143,-0.03858906775712967,-0.006537340581417084,-0.011148113757371902,-0.04750756174325943,-0.007814503274857998,0.004289678763598204,-0.04066716507077217,-0.010628590360283852,0.01027502492070198,0.008406182751059532,0.02138706110417843,0.0088535500690341,-0.013890044763684273,-0.010080203413963318,0.030709626153111458,-0.00751144764944911,0.02121388539671898,0.019366690889000893,-0.01985735259950161,-0.009712208062410355,0.014503370970487595,0.001242888392880559,0.00037340770359151065,-0.01642272248864174,-0.005931229330599308,-0.017317458987236023,-0.023263119161128998,-0.04003218933939934,0.011797518469393253,0.018876029178500175,-0.0009060096926987171,0.011992339976131916,0.0004045249952469021,0.006562595255672932,0.024576358497142792,0.022137483581900597,0.0015946492785587907,0.001836372073739767,0.01104709506034851,-0.005458606872707605,0.014705408364534378,0.0190059095621109,0.030161239206790924,-0.04320705682039261,-0.00667443685233593,0.010787333361804485,0.007482585031539202,-0.020477894693613052,0.0032217686530202627,-0.018457524478435516,0.034028805792331696,-0.02431659772992134,0.020420169457793236,-0.012230454944074154,0.022382814437150955,-0.030796213075518608,0.025615407153964043,-0.016134098172187805,-0.013897259719669819,0.03345155715942383,-0.017230870202183723,0.002366719301789999,0.00019797822460532188,-0.022397246211767197,-0.033942218869924545,0.02926650457084179,-0.02421557903289795,0.030825074762105942,0.005292647983878851,-0.0003224474494345486,-0.015138344839215279,-0.011234700679779053,0.010801764205098152,0.008175283670425415,0.025543250143527985,-0.02593289315700531,0.09311019629240036,0.031719811260700226,-0.008528848178684711,-0.0006133266142569482,-0.009127743542194366,0.03313406929373741,-0.013435461558401585,-0.015556849539279938,0.014654899016022682,-0.03910859301686287,-0.015181638300418854,-0.00421752268448472,-0.009149390272796154,-0.0357605516910553,-0.010109066031873226,-0.0024641300551593304,-0.030536450445652008,0.04768073558807373,-0.012728331610560417,-0.008095911704003811,0.03936835378408432,0.005942052695900202,0.02225293405354023,0.014503370970487595,-0.008723669685423374,-0.026322536170482635,0.03148891031742096,0.019020341336727142,-0.015556849539279938,-0.008687591180205345,0.017836982384324074,0.024864982813596725,-0.03275885805487633,-0.023421861231327057,-0.009863735176622868,0.01730302721261978,-0.018284348770976067,-0.005014847032725811,-0.01502289529889822,0.008586573414504528,0.0029259289149194956,-0.029050035402178764,-0.01890489086508751,-0.03249909728765488,0.0074537224136292934,-0.0014936308143660426,-0.023234255611896515,0.0069486298598349094,-0.03550079092383385],[-0.0263771191239357,0.00044942510430701077,-0.003767126938328147,0.014923895709216595,-0.004045503679662943,0.016312165185809135,0.0006141465273685753,0.011814750730991364,-0.02401995286345482,-0.00627251947298646,0.03375229984521866,0.01966715045273304,-0.019088704138994217,0.005741072352975607,0.007259491831064224,-0.0046239495277404785,0.0037635115440934896,-0.011879825964570045,0.030223781242966652,-0.003051300533115864,0.004595027305185795,0.0224581491202116,-0.03386798873543739,0.0027638853061944246,-0.014439447782933712,0.008069315925240517,0.02678203023970127,-0.009804653003811836,-0.0019052551360800862,0.0007117592031136155,0.05041153356432915,0.014048997312784195,-0.03999951109290123,0.016572466120123863,-0.020216673612594604,-0.023441506549715996,-0.001957676839083433,-0.0041720387525856495,0.04014412313699722,-0.011315841227769852,0.011865365318953991,-0.0031471054535359144,-0.008503150194883347,0.0026156585663557053,-0.0011098925024271011,0.02400549128651619,-0.0023354741279035807,-0.05940636247396469,-0.01091815996915102,-0.015430036000907421,0.004938479047268629,-0.011778597719967365,-0.01900193654000759,0.00819946639239788,-0.0019811762031167746,-0.012349813245236874,0.031901273876428604,0.0166158489882946,-0.02571190521121025,0.009992646984755993,0.01706414483487606,-0.01942131109535694,-0.0006042044842615724,0.007584867533296347,-0.017555823549628258,-0.002868728479370475,-0.030744383111596107,0.021561559289693832,-0.03158313035964966,-0.00294645712710917,0.00773670943453908,0.013347631320357323,-0.00971788540482521,-0.02056374028325081,0.01774381846189499,-0.04500306770205498,-0.007548714987933636,0.013658545911312103,-0.037512194365262985,-0.015299885533750057,0.02310890145599842,-0.004504644777625799,-0.020910806953907013,0.04665163531899452,0.021489253267645836,0.01167737040668726,0.02764969877898693,0.015892792493104935,-0.0032194112427532673,-0.013376554474234581,0.048936497420072556,0.0009869728237390518,-0.010737395845353603,0.019103165715932846,0.015545724891126156,0.008980367332696915,-0.018756097182631493,0.0034363283775746822,-0.0067750439047813416,0.04127209261059761,-0.012776416726410389,-0.0031597591005265713,-0.01093262154608965,-0.011619525961577892,0.0035140567924827337,0.018900709226727486,-0.01524204108864069,-0.02572636678814888,0.016051864251494408,0.014634673483669758,-0.007371565792709589,0.031062528491020203,-0.025827595964074135,-0.017613667994737625,-0.020809579640626907,0.003248333465307951,0.014634673483669758,0.029341652989387512,-0.005618152674287558,-0.03592146933078766,0.017613667994737625,-0.013904385268688202,0.03441751375794411,0.013448859564960003,0.022790756076574326,0.001371096819639206,-0.02141694724559784,0.013159637339413166,0.006247212179005146,-0.020231133326888084,0.027056792750954628,0.011829212307929993,0.005694073624908924,0.032132651656866074,0.013615163043141365,0.03979705646634102,-0.021792937070131302,-0.006214674562215805,-0.020824041217565536,-0.018336724489927292,-0.019970834255218506,0.04951494187116623,-0.04040442407131195,0.021214492619037628,-0.03739650547504425,-0.004685409367084503,0.029124734923243523,0.03109144978225231,0.04277605190873146,-0.006695507559925318,0.012516116723418236,0.02828598953783512,-0.02310890145599842,0.013665776699781418,-0.003031416330486536,0.03508272394537926,-0.027562931180000305,0.011706292629241943,0.029905635863542557,0.01904532127082348,0.01230642944574356,0.040925025939941406,0.0012210624990984797,-0.009811882860958576,0.017555823549628258,0.01988406665623188,0.0033116010017693043,0.00432749604806304,-0.006402669474482536,-0.02766416035592556,0.014735900796949863,0.021720631048083305,-0.04882080852985382,0.038177408277988434,0.011185691691935062,0.03395475447177887,0.000526023970451206,0.009855266660451889,0.005375928711146116,0.006008603610098362,0.007816245779395103,0.011460453271865845,-0.00995649490505457,0.030339470133185387,-0.028849974274635315,0.007498100865632296,-0.010534940287470818,-0.01230642944574356,0.017136450856924057,0.012537808157503605,-0.004598642233759165,0.027317091822624207,0.035805780440568924,-0.0042768819257617,-0.5284678936004639,-0.026015590876340866,-0.011973823420703411,-0.027360476553440094,0.04714331403374672,-0.04326773062348366,0.017613667994737625,0.0531013049185276,0.0030079169664531946,0.032740019261837006,-0.006514743436127901,0.011062772013247013,0.006753352005034685,-0.018090885132551193,0.007541484199464321,-0.0053831590339541435,0.003091068472713232,-0.02507561631500721,0.021026497706770897,-0.009826344437897205,-0.014714209362864494,0.00025894478312693536,0.0011252574622631073,-0.028372755274176598,0.018192114308476448,-0.015849409624934196,0.01522757951170206,-0.03433074429631233,0.015458958223462105,-0.05321699380874634,-0.027129096910357475,0.0077150180004537106,-0.011185691691935062,-0.014020075090229511,0.05798916891217232,-0.00863330066204071,-0.0064207459799945354,0.00048806346603669226,0.020708352327346802,0.030599771067500114,0.020144367590546608,-0.030223781242966652,-0.005361467599868774,0.010831393301486969,0.0367312952876091,0.005574769340455532,0.021489253267645836,-0.001735336729325354,0.003347753779962659,-0.010072183795273304,-0.01882840320467949,0.013152406550943851,0.019334543496370316,0.007592098321765661,-0.008770680986344814,-0.0017787201795727015,0.02893674001097679,0.00002588600546005182,-0.01992744952440262,-0.004515490960329771,-0.020375745370984077,0.012848722748458385,-0.026102356612682343,-0.02358611859381199,0.000979742151685059,0.03068653866648674,-0.013289786875247955,0.007852398790419102,0.04066472500562668,-0.0005187933566048741,0.011366455815732479,0.02292090654373169,0.009558813646435738,-0.034880269318819046,0.0028452291153371334,0.05145273357629776,0.03783034160733223,0.004146731924265623,0.006905193906277418,0.019508076831698418,-0.013246404007077217,-0.0021619403269141912,0.004819174762815237,-0.013477781787514687,0.009211746044456959,-0.02548052743077278,-0.03519841283559799,-0.014236992225050926,0.029471801593899727,-0.013094562105834484,0.014381603337824345,0.020404668524861336,-0.023499350994825363,-0.013875463046133518,-0.00734987435862422,-0.010744626633822918,0.012205202132463455,0.0026970026083290577,0.009544352069497108,-0.011843672953546047,-0.008495919406414032,0.003123606089502573,0.0030603385530412197,-0.004114194307476282,0.046391334384679794,0.006735275965183973,-0.01751244068145752,-0.043325573205947876,0.011612295173108578,-0.017252139747142792,0.04775068163871765,0.0018031233921647072,-0.017657050862908363,-0.016731537878513336,-0.022226771339774132,-0.032335106283426285,0.05671658739447594,0.007982549257576466,0.02378857508301735,-0.01349947415292263,0.0024638166651129723,-0.01122184470295906,-0.006630432326346636,-0.018958553671836853,0.027331553399562836,0.03378122299909592,-0.002131210407242179,0.01839456893503666,0.0070281135849654675,0.0023643963504582644,0.012892105616629124,-0.015155274420976639,0.035111647099256516,-0.002984417602419853,0.019797300919890404,0.015415574423968792,0.023716269060969353,0.00971065554767847,0.008235619403421879,-0.021937549114227295,0.00691604008898139,0.01791735179722309,0.015010662376880646,-0.016066325828433037,-0.012639036402106285,-0.028372755274176598,-0.023036595433950424,-0.028141377493739128,0.0012373313074931502,0.004110578913241625,0.00025419972371309996,0.010867546312510967,0.004150346852838993,0.022183388471603394,-0.03979705646634102,-0.031004684045910835,0.004175654146820307,-0.010824162513017654,-0.009211746044456959,0.040520112961530685,0.029037967324256897,0.04694085940718651,-0.008134391158819199,-0.005929067265242338,-0.034475356340408325,-0.014490061439573765,-0.012602883391082287,0.004490183666348457,0.020838502794504166,-0.01167737040668726,-0.02010098472237587,0.005889298859983683,-0.017121989279985428,-0.02899458445608616,-0.00021239799389149994,0.012660727836191654,-0.009218976832926273,-0.004967401269823313,0.002610235707834363,0.01751244068145752,0.020838502794504166,0.0069702691398561,-0.02682541310787201,0.0011993707157671452,0.017671512439846992,0.020057599991559982,0.013203020207583904,0.0157771036028862,-0.029876714572310448,0.014772053807973862,-0.015372191555798054,0.030426237732172012,-0.01178582850843668,0.014461139217019081,0.015415574423968792,0.016977377235889435,0.0031254137866199017,-0.010650629177689552,-0.00121654337272048,0.024251330643892288,0.024468248710036278,-0.006464129313826561,0.02036128379404545,-0.029934559017419815,0.015054046176373959,-0.017873968929052353,-0.010216794908046722,-0.021127725020051003,-0.0014497291995212436,0.03201696276664734,0.011973823420703411,-0.011286919005215168,-0.01514081284403801,0.028647517785429955,0.0012879451969638467,0.018929632380604744,-0.03349199891090393,0.012704110704362392,0.004529952071607113,-0.03690482676029205,-0.01641339249908924,-0.03178558498620987,0.010968774557113647,0.013810387812554836,-0.024323636665940285,0.02031790092587471,0.02205323800444603,0.00399489002302289,-0.009457585401833057,-0.02529253251850605,-0.0031398748978972435,0.028011227026581764,0.024352559819817543,-0.0015021509025245905,-0.017613667994737625,0.021257875487208366,-0.00048128480557352304,-0.003418251872062683,0.032537564635276794,-0.034706734120845795,0.0007474601734429598,0.0031217983923852444,-0.015458958223462105,0.00386835471726954,0.014244222082197666,-0.027736466377973557,-0.003951506223529577,0.007201647385954857,0.0007474601734429598,-0.01112061645835638,0.005169857293367386,0.02574082836508751,0.014837129041552544,-0.0019630996976047754,0.027736466377973557,0.005307238083332777,0.015111890621483326,-0.0035465944092720747,0.002939226571470499,0.015111890621483326,-0.01079524029046297,-0.009660040959715843,0.016109708696603775,-0.008691145107150078,0.024150103330612183,-0.004294958431273699,-0.006511128041893244,-0.031178217381238937,-0.022096620872616768,0.007100419607013464,0.01058555394411087,-0.024294713512063026,-0.0022179773077368736,-0.011641217395663261,0.008054854348301888,-0.00471071619540453,0.012725803069770336,0.020910806953907013,-0.0014678057050332427,-0.009103287011384964,-0.020795118063688278,-0.0112290745601058,0.02075173519551754,0.05278315767645836,-0.021474791690707207,-0.02786661498248577,-0.014302067458629608,0.012357044033706188,-0.018712714314460754,0.004974632058292627,-0.007975318469107151,-0.019291160628199577,-0.02743278257548809,0.005820608697831631,0.005159011576324701,0.01687614992260933,0.03415721282362938,-0.026261430233716965,-0.001597955939359963,-0.023224590346217155,-0.014461139217019081,0.019377926364541054,-0.017020761966705322,-0.01859702542424202,-0.015097429975867271,0.020274518057703972,-0.024034414440393448,-0.01211120467633009,0.008828525431454182,-0.0025397376157343388,0.019320081919431686,-0.010527709499001503,0.0029482648242264986,-0.0410696379840374,0.0106000155210495,-0.010093875229358673,-0.00740410340949893,0.017454596236348152,-0.003620707895606756,-0.0070787277072668076,-0.022125544026494026,-0.0209541916847229,0.009739577770233154,0.0005251201218925416,0.03936322033405304,0.04604426771402359,0.0015645145904272795,0.006764198187738657,-0.012248585000634193,0.010997696779668331,-0.02552391216158867,0.010672320611774921,-0.0001746634516166523,0.008250080049037933,-0.012436579912900925,0.008033162914216518,-0.006330363918095827,0.009081595577299595,0.005119243171066046,-0.007440256420522928,-0.03109144978225231,-0.037541117519140244,0.014721440151333809,-0.011648448184132576,0.02764969877898693,-0.0052638547495007515,-0.023470429703593254,0.0019088704138994217,0.035776861011981964,0.02439594268798828,-0.002839806256815791,-0.011373686604201794,0.0017082220874726772,-0.030397314578294754,-0.02163386531174183,0.012024437077343464,0.013976691290736198,-0.00294645712710917,-0.032971397042274475,0.0427471287548542,0.02422240935266018,0.022877521812915802,0.007686095777899027,-0.018249958753585815,0.021547097712755203,0.011323072016239166,0.01687614992260933,-0.002834383398294449,-0.016745999455451965,-0.027982305735349655,-0.03415721282362938,-0.0172810610383749,-0.00648220581933856,-0.002275821752846241,0.015198657289147377,-0.01965268887579441,-0.010072183795273304,-0.008372999727725983,0.041792694479227066,-0.006214674562215805,0.014222530648112297,0.01618201471865177,-0.00545546505600214,-0.02504669316112995,-0.017526900395751,-0.02699894830584526,-0.032942477613687515,-0.007129341829568148,-0.009623887948691845,-0.02856075018644333,-0.035516560077667236,-0.0005648882361128926,-0.023600580170750618,0.0026608495973050594,-0.001939600333571434,0.04187946021556854,-0.005647074896842241,0.0028705361764878035,0.0218652430921793,0.02010098472237587,0.005885683931410313,0.0012743879342451692,-0.011279689148068428,0.031901273876428604,-0.01078801043331623,-0.01663031056523323,-0.006106215994805098,-0.01684722676873207,-0.013137944974005222,-0.005292776972055435,-0.00599775742739439,0.015256502665579319,-0.011424300260841846,0.015936175361275673,-0.017902890220284462,0.00863330066204071,0.016095248982310295,-0.0016178400255739689,-0.011727984063327312,-0.01362239383161068,-0.00014822668163105845,0.01690507121384144,0.02532145567238331,-0.00799700990319252,0.021474791690707207,-0.011380916461348534,-0.033839065581560135,-0.00745471753180027,-0.01524204108864069,0.012516116723418236,0.01524204108864069,0.00409973319619894,-0.01360793225467205,-0.026102356612682343,-0.009327434934675694,-0.0024547784123569727,0.016717078164219856,-0.00724864611402154,0.01881394162774086,0.021474791690707207,-0.0080982381477952,0.007924704812467098,-0.021677248179912567,-0.03956567868590355,0.009602196514606476,-0.0036514378152787685,0.040982868522405624,-0.0047432538121938705,-0.030599771067500114,0.0285462886095047,-0.01580602489411831,-0.028633056208491325,-0.03282678499817848,0.0384087860584259,-0.006124292500317097,0.014468370005488396,0.013969460502266884,-0.035140570253133774,-0.021200031042099,-0.01490943506360054,0.006380978040397167,0.003505018772557378,-0.022848600521683693,0.018423492088913918,0.0018510258523747325,0.013304248452186584,0.006818427238613367,-0.025682983919978142,0.021677248179912567,-0.034880269318819046,-0.05662982165813446,-0.010650629177689552,0.004269651602953672,0.00019386965141166002,-0.02007206156849861,0.013181328773498535,0.02856075018644333,-0.010968774557113647,-0.020202212035655975,-0.02443932555615902,0.0024692395236343145,-0.014020075090229511,0.01468528714030981,-0.003537556156516075,0.0021547097712755203,-0.004714331589639187,0.03091791644692421,0.03071545995771885,-0.009725116193294525,-0.007931934669613838,0.012573961168527603,-0.00017918256344273686,-0.0007569502922706306,-0.008560994639992714,0.019956372678279877,-0.0015129967359825969,-0.025147922337055206,-0.019146548584103584,0.005628998391330242,0.005187933798879385,0.009667271748185158,0.015401113778352737,-0.022342460229992867,-0.05469202995300293,0.010650629177689552,0.0014316528104245663,-0.013694698922336102,0.009811882860958576,-0.008539303205907345,0.004435954615473747,-0.021778475493192673,-0.01232089102268219,0.014764823019504547,0.010462634265422821,0.025451606139540672,-0.025654060766100883,0.0224581491202116,0.01991298981010914,0.004414262715727091,0.0038213562220335007,-0.0014524407451972365,-0.021214492619037628,0.00917559303343296,0.013550087809562683,0.0010610860772430897,0.04187946021556854,0.003400175366550684,0.0008387460839003325,-0.03068653866648674,-0.000927320565097034,-0.042457904666662216,0.005918221548199654,0.01968161016702652,-0.009761269204318523,-0.013636854477226734,-0.026246968656778336,-0.023051057010889053,0.0013240980915725231,0.006279749795794487,-0.032508641481399536,-0.005289161577820778,0.014258683659136295,0.012226893566548824,-0.04523444548249245,0.021720631048083305,-0.02375965192914009,0.051568422466516495,-0.009132209233939648,0.004262420814484358,-0.007555945310741663,0.00415396224707365,0.011706292629241943,-0.0014244222547858953,-0.0012436580145731568,0.029500724747776985,0.007375181186944246,-0.011424300260841846,0.013550087809562683,0.010296331718564034,-0.0004772176034748554,-0.00865499209612608,-0.04260251671075821,-0.03346307575702667,0.0028849972877651453,0.03632638230919838,0.021286796778440475,-0.014208070002496243,0.003170604817569256,0.0005526866880245507,0.024569476023316383,-0.018929632380604744,-0.01600848138332367,0.021026497706770897,-0.0026265045162290335,0.00940697081387043,0.0320458859205246,0.0380617193877697,0.02639157883822918,-0.0027241171337664127,0.00038728737854398787,-0.005802532192319632,-0.01135199423879385,0.014114072546362877,-0.00928405113518238,-0.005159011576324701,0.033636610954999924,-0.015863869339227676,0.006919655483216047,-0.0008708317182026803,0.017526900395751,0.014851590618491173,0.0021004804875701666,-0.015386652201414108,0.03765680640935898,0.0018202959327027202,0.012566730380058289,0.009059904143214226,-0.0075125619769096375,0.007852398790419102,-0.008372999727725983,-0.0060845245607197285,-0.02529253251850605,-0.016109708696603775,-0.025842055678367615,0.024714088067412376,-0.010014339350163937,-0.02422240935266018,-0.017194295302033424,0.011706292629241943,0.004428723827004433,-0.00007320952136069536,-0.02790999971330166,0.025379300117492676,-0.02442486397922039,-0.015936175361275673,-0.03109144978225231,-0.0008382941596210003,0.022819677367806435,-0.0015889176866039634,-0.029876714572310448,0.010759088210761547,0.024959927424788475,-0.03583470359444618,-0.0064207459799945354,-0.01244381070137024,-0.03595039248466492,-0.01813426986336708,0.007064266595989466,-0.02548052743077278,-0.009768499992787838,0.012212431989610195,-0.008510380983352661,0.013542857021093369,-0.021012036129832268,-0.006044756155461073,0.003542979247868061,-0.003839432494714856,0.022197850048542023,-0.020260056480765343,-0.004851712379604578,0.004110578913241625,-0.022400304675102234,0.03300032019615173,0.033173855394124985,0.0008663126500323415,-0.02640604041516781,0.029934559017419815,0.006460513919591904,0.02485869824886322,0.0019377927528694272,0.011084463447332382,-0.014880512841045856,-0.006612355820834637,-0.03184342756867409,0.006286980584263802,-0.002131210407242179,-0.017772739753127098,-0.022183388471603394,0.008466997183859348,-0.03262433037161827,-0.0022432843688875437,-0.0012581191258504987,0.018221035599708557,0.017873968929052353,0.027519548311829567,0.026651879772543907,-0.003591785440221429,-0.0209541916847229,-0.014981740154325962,0.0028596902266144753,0.014381603337824345,0.013239173218607903,-0.024338098242878914,-0.011279689148068428,0.027794310823082924,0.04514767602086067,0.022631682455539703,-0.006211059633642435,-0.014490061439573765,-0.003864739555865526,-0.019406849518418312,-0.0005879356758669019,-0.031264983117580414,0.009891419671475887,-0.015372191555798054,-0.01557464711368084,-0.007335413247346878,0.018047502264380455,0.010780779644846916,0.0006751544424332678,-0.01070847362279892,-0.011793059296905994,0.0026644649915397167,0.01920439302921295,0.039045076817274094,0.0040201968513429165,-0.04300742968916893,0.005979681387543678,0.020476972684264183,-0.024902082979679108,-0.013824849389493465,0.010238486342132092,-0.012190740555524826,-0.028473984450101852,-0.034041523933410645,-0.007367950398474932,-0.002839806256815791,-0.012277507223188877,0.011858134530484676,-0.038582321256399155,-0.024063335731625557,0.01275472529232502,0.004479337949305773,-0.026478346437215805,0.004707100801169872,0.021561559289693832,0.016066325828433037,0.037917107343673706,-0.010093875229358673,-0.0008333231671713293,0.009255128912627697,0.002552391029894352,0.03326062113046646,-0.011004927568137646,0.008879140019416809,0.046969782561063766,-0.019392387941479683,0.01016618125140667,0.0007809015223756433,0.021069880574941635,-0.043354496359825134,-0.014099610969424248,0.00507585983723402,-0.013311479240655899,0.013434398919343948,0.0023698192089796066,-0.02185078151524067,0.021792937070131302,0.010238486342132092,0.02011544443666935,-0.01726660132408142,-0.0027855769731104374,-0.00022098429326433688,0.025654060766100883,-0.05084536597132683,-0.0010872968705371022,0.00886467844247818,0.02052035741508007,-0.0021745937410742044,-0.008958675898611546,-0.0038358173333108425,-0.0019829836674034595,0.02355719543993473,-0.008647761307656765,0.0006019449210725725,-0.033607687801122665,-0.0027855769731104374,-0.015936175361275673,0.00786686036735773,-0.0229498278349638,0.19609305262565613,-0.014518983662128448,-0.010209564119577408,0.005397620145231485,-0.01167737040668726,0.017873968929052353,0.006341209635138512,0.019623765721917152,0.005206010304391384,0.009009289555251598,0.009038211777806282,-0.007772862445563078,-0.03392583504319191,0.004830020479857922,0.007118496112525463,0.00064080924494192,-0.027519548311829567,-0.0362396165728569,-0.011583372950553894,0.009334665723145008,0.00994203332811594,0.004486568737775087,-0.044395700097084045,-0.021764015778899193,0.04514767602086067,-0.015285424888134003,-0.0032646022737026215,0.008163313381373882,0.005954374093562365,0.023889802396297455,-0.005209625698626041,-0.026319274678826332,0.02050589583814144,-0.001498535624705255,-0.00047857334720902145,0.003933430183678865,0.018495798110961914,-0.01362239383161068,0.0018383723217993975,0.020419128239154816,0.022877521812915802,-0.018322262912988663,0.038148485124111176,-0.01166290882974863,0.0007036247989162803,-0.006456898991018534,0.0021655557211488485,0.05917498469352722,-0.03563224896788597,0.011192921549081802,-0.03739650547504425,0.020824041217565536,-0.00874175876379013,0.0028831895906478167,-0.01945023238658905,-0.0035014033783227205,-0.008821295574307442,0.001633204985409975,0.001775104901753366,0.006764198187738657,-0.005925451871007681,0.001074643456377089,-0.01395499985665083,0.0042371139861643314,-0.0172810610383749,0.05229147896170616,-0.027346014976501465,-0.0035863625817000866,0.03181450814008713,-0.027374936267733574,-0.003353176638484001,-0.01406345795840025,-0.027924461290240288,-0.002669887850061059,-0.00896590668708086,-0.027779849246144295,0.010079414583742619,0.025899900123476982,0.007367950398474932,0.017526900395751,-0.002964533632621169,0.003806894877925515,-0.01112061645835638,-0.004989093169569969,0.01093262154608965,-0.01707860641181469,0.025654060766100883,-0.011735214851796627,0.001627782010473311,-0.016572466120123863,0.010122797451913357,0.003505018772557378,0.003260986879467964,0.007801784668117762,0.003642399562522769,-0.019609306007623672,-0.01145322248339653,-0.0367312952876091,-0.04404862970113754,-0.002131210407242179,-0.036210693418979645,0.04543690010905266,0.021879704669117928,-0.0276352372020483,-0.02640604041516781,-0.01534326933324337,-0.006113446783274412,0.011308611370623112,0.011445991694927216,-0.04020196944475174,-0.030599771067500114,-0.004070810973644257,0.0028596902266144753,0.011612295173108578,0.035516560077667236,0.01470697857439518,-0.023846419528126717,0.018033040687441826,-0.006966653745621443,0.0011577949626371264,-0.001154179684817791,-0.009370818734169006,-0.01275472529232502,0.019999755546450615,-0.03305816650390625,0.0013132522581145167,-0.007830707356333733,-0.02358611859381199,0.004855327773839235,-0.030079171061515808,0.046131033450365067,0.00599414249882102,-0.006919655483216047,-0.02597220614552498,0.00896590668708086,-0.0075993286445736885,0.04196622595191002,-0.030108092352747917,-0.004555258899927139,0.005860376637428999,0.014511753804981709,-0.019103165715932846,0.02335474081337452,-0.004584181122481823,0.014967279508709908,-0.01395499985665083,0.0025740829296410084,-0.0040201968513429165,0.013058409094810486,0.0044721076264977455,-0.017454596236348152,-0.007946396246552467,-0.014417756348848343,0.021474791690707207,-0.013579010032117367,-0.019536999985575676,-0.017570285126566887,-0.06461237370967865,-0.009594965726137161,0.004746869206428528,-0.043759409338235855,0.0065075126476585865,-0.0016747807385399938,-0.007751171011477709,-0.023933185264468193,-0.026290351524949074,-0.18174760043621063,0.002004675567150116,0.0036152848042547703,-0.0007248645997606218,0.038177408277988434,-0.018033040687441826,0.05211794748902321,-0.0035881702788174152,-0.018033040687441826,0.0139405382797122,0.0207806583493948,-0.008163313381373882,0.01468528714030981,-0.015401113778352737,-0.001700087683275342,-0.013933307491242886,0.0050252461805939674,0.014453909359872341,0.03259540721774101,0.014367141760885715,0.034475356340408325,-0.019189931452274323,0.04144562408328056,-0.008618839085102081,-0.002669887850061059,0.018495798110961914,0.0007045286474749446,-0.020636046305298805,-0.01642785407602787,-0.05798916891217232,-0.017121989279985428,-0.007960856892168522,0.021720631048083305,-0.006767813116312027,0.00799700990319252,0.019551461562514305,-0.010643398389220238,-0.021359102800488472,0.027042331174016,0.025133460760116577,0.010296331718564034,0.02634819597005844,-0.01114230789244175,0.006160445511341095,0.01621093787252903,-0.004945709835737944,0.0012608305551111698,0.00422626780346036,-0.011699061840772629,-0.005798916798084974,0.03415721282362938,-0.008054854348301888,-0.016095248982310295,0.019088704138994217,0.0038249713834375143,-0.016080787405371666,0.023036595433950424,0.007910243235528469,0.005769994575530291,-0.00981911364942789,0.004768560640513897,0.0063556707464158535,0.0037779726553708315,-0.024338098242878914,-0.0057519180700182915,-0.009182823821902275,-0.015632491558790207,-0.005672382190823555,-0.025437144562602043,-0.019594844430685043,-0.021489253267645836,0.015545724891126156,0.025234688073396683,-0.019710533320903778,0.045089833438396454,0.025639601051807404,-0.007527023088186979,0.011301380582153797,0.009667271748185158,0.017367828637361526,-0.021214492619037628,0.02225569449365139,-0.014670826494693756,0.029963480308651924,0.0064713601022958755,-0.00211313390173018,-0.01308733131736517,0.006944962311536074,0.006720814388245344,-0.006905193906277418,-0.02895120158791542,-0.019536999985575676,0.0016729730414226651,-0.014547906816005707,-0.014923895709216595,0.02247261069715023,0.004407032392919064,-0.020158829167485237,0.013340401463210583,-0.00453356746584177,-0.011879825964570045,-0.001725394744426012,0.007765632122755051,-0.029992403462529182,0.017859507352113724,0.0036912057548761368,0.011930440552532673,0.0022848600056022406,0.011308611370623112,-0.014352681115269661,-0.03985489904880524,0.011648448184132576,0.03898723050951958,0.02851736731827259,-0.0016169361770153046,0.001682915142737329,0.018756097182631493,0.0020607123151421547,0.030513005331158638,0.006174906622618437,0.05662982165813446,0.013217481784522533,0.028893357142806053,0.030657615512609482,-0.008423613384366035,-0.017367828637361526,-0.09127870947122574,-0.02727370895445347,-0.0077150180004537106,0.026203583925962448,-0.042400062084198,-0.021055418998003006,-0.03354984521865845,-0.0051951645873487,-0.008177774026989937,0.04193730279803276,-0.013976691290736198,-0.013810387812554836,-0.03696267306804657,0.027360476553440094,-0.0016521852230653167,-0.03768572956323624,-0.03302924335002899,-0.0267964918166399,-0.014894973486661911,0.03892938792705536,-0.0030151475220918655,-0.03444643318653107,-0.006803966127336025,-0.01814872957766056,-0.03302924335002899,-0.023007672280073166,0.006189367733895779,0.03193019703030586,0.011821981519460678,0.00798978004604578,-0.02030343934893608,-0.0037888186052441597,0.01797519624233246,-0.016355548053979874,0.0035610555205494165,-0.00039858516538515687,0.015213118866086006,-0.012942720204591751,0.02981887012720108,-0.014894973486661911,0.014468370005488396,0.00267711840569973,0.03169881924986839,-0.018090885132551193,-0.019840683788061142,-0.022212309762835503,-0.029789946973323822,0.06027403101325035,0.01016618125140667,0.009985417127609253,-0.03132282942533493,-0.006829272955656052,-0.005253009032458067,-0.026319274678826332,0.009696193970739841,-0.01817765273153782,-0.004855327773839235,0.023716269060969353,-0.00609898567199707,-0.009688963182270527,-0.009052673354744911,0.0058676074258983135,0.00919005461037159,0.02960195206105709,-0.014302067458629608,-0.025986667722463608,-0.014302067458629608,0.026868797838687897,0.004450415726751089,-0.02921150252223015,-0.03647099435329437,0.02682541310787201,0.0026861566584557295,0.01968161016702652,0.005791686475276947,0.003148913150653243,0.029703181236982346,0.0026463884860277176,0.0332316979765892,0.007331797853112221,-0.026290351524949074,-0.016745999455451965,-0.0008306116797029972,-0.04436677694320679,-0.011973823420703411,0.039247531443834305,0.016529083251953125,-0.003627938451245427,0.017121989279985428,-0.03716512769460678,0.01900193654000759,0.03441751375794411,-0.01861148700118065,0.027823232114315033,-0.01112061645835638,0.005889298859983683,0.015198657289147377,0.005885683931410313,0.0011885248823091388,-0.031872350722551346,-0.01574818044900894,-0.005921836476773024,-0.08057747036218643,0.026651879772543907,0.012971642427146435,-0.00864053051918745,-0.02510453760623932,0.0046239495277404785,-0.013441628776490688,-0.030165936797857285,-0.008466997183859348,0.004999938886612654,-0.031236061826348305,0.016529083251953125,-0.011836443096399307,-0.02874874509871006,0.014670826494693756,-0.01114230789244175,0.03378122299909592,-0.02227015420794487,0.027288170531392097,0.0462467260658741,0.005321699194610119,0.017555823549628258,0.023195667192339897,0.00399850495159626,-0.0027403859421610832,-0.0405779592692852,-0.01813426986336708,-0.0022920905612409115,0.01639893278479576,0.01942131109535694,0.04014412313699722,0.004038273356854916,-0.00399850495159626,0.008734527975320816,0.023875340819358826,0.009240668267011642,-0.005795301869511604,0.013824849389493465,0.00211313390173018,-0.008597147651016712,-0.0036405918654054403,-0.01774381846189499,0.015545724891126156,-0.008662222884595394,0.0005441003595478833,0.0059001450426876545,-0.03592146933078766,0.015849409624934196,0.013882693834602833,-0.008669452741742134,0.016268782317638397,0.0012978872982785106,0.009999877773225307,-0.014511753804981709,-0.029327191412448883,-0.00896590668708086,-0.007519792765378952,-0.005184318404644728,0.012335351668298244,-0.016471238806843758,0.02896566316485405,0.038379862904548645,-0.006644893437623978,-0.029963480308651924,-0.010744626633822918,-0.013022256083786488,-0.04847373813390732,-0.012957180850207806,0.009211746044456959,-0.03759896382689476,-0.02030343934893608,0.00561092235147953,0.001141526154242456,0.012046129442751408,-0.009652810171246529,0.003163374261930585,-0.0014596713008359075,0.015863869339227676,-0.01796073466539383,0.027765387669205666,0.006239981856197119,-0.021243413910269737,0.002234246116131544,0.037309739738702774,-0.013962230645120144,-0.0026463884860277176,-0.008669452741742134,-0.013289786875247955,-0.008156082592904568,-0.028387216851115227,-0.05512586236000061,0.008770680986344814,-0.01286318339407444,0.0132753262296319,0.010997696779668331,0.00453356746584177,0.003096491564065218,0.03245079889893532,0.034880269318819046,0.007252261508256197,0.017121989279985428,0.009811882860958576,0.011380916461348534,0.025466065853834152,-0.006673815660178661,0.03268217667937279,-0.05581999942660332,-0.001071931910701096,-0.016341088339686394,0.008611608296632767,-0.007169109769165516,-0.021286796778440475,-0.017989657819271088,0.028604134917259216,-0.014316528104245663,0.017801662907004356,0.006767813116312027,0.008213927038013935,-0.027722004801034927,0.029515186324715614,-0.008604378439486027,-0.02076619677245617,0.020896347239613533,-0.00995649490505457,0.008777911774814129,-0.0056000761687755585,-0.02769308164715767,-0.04344126209616661,0.023846419528126717,-0.02527807280421257,0.03774357587099075,0.003340523224323988,-0.002787384670227766,-0.015198657289147377,-0.010874777100980282,0.013217481784522533,-0.009291281923651695,0.017237678170204163,-0.018264418467879295,0.10047599673271179,0.023065516725182533,0.004725177306681871,-0.0026337350718677044,-0.003044069977477193,0.02467070333659649,-0.005618152674287558,-0.012284738011658192,0.00367493717931211,-0.039449989795684814,-0.01490943506360054,0.015155274420976639,0.00013534723257180303,-0.021662786602973938,-0.01112061645835638,0.0015527649084106088,-0.012783647514879704,0.03268217667937279,-0.004041888285428286,-0.006113446783274412,0.04173484817147255,-0.009305743500590324,0.02617466263473034,-0.007067881990224123,-0.023600580170750618,-0.015907254070043564,0.0315542072057724,0.007946396246552467,-0.0224581491202116,-0.01991298981010914,0.012704110704362392,0.011062772013247013,-0.03699159622192383,-0.026651879772543907,-0.02033236250281334,0.0007872282876633108,-0.004121424630284309,-0.00874175876379013,-0.0024873160291463137,0.03476458042860031,-0.011026619002223015,-0.03702051565051079,-0.020607123151421547,-0.024931004270911217,0.0023427046835422516,-0.018249958753585815,-0.03265325352549553,0.016153093427419662,-0.03800387308001518],[-0.013613251969218254,-0.015606150031089783,-0.014653662219643593,-0.01019894890487194,-0.023958737030625343,0.018976492807269096,-0.0006759001407772303,-0.02431042492389679,-0.01567941904067993,-0.028603948652744293,0.04144055396318436,0.025512024760246277,-0.024735381826758385,-0.010426080785691738,0.001572521054185927,-0.028735831379890442,0.012675417587161064,-0.004044410772621632,0.03232597932219505,0.00010858592577278614,0.009004674851894379,-0.0050005619414150715,-0.03162260353565216,0.006850586738437414,-0.008682294748723507,0.030948534607887268,0.027841957286000252,-0.021174540743231773,0.005539084319025278,-0.004410752095282078,0.03856843709945679,-0.002851968863978982,-0.03297073766589165,-0.002157751703634858,-0.03660484775900841,-0.0016293040243908763,0.006125230807811022,-0.010118353180587292,0.012045309878885746,-0.01869807206094265,0.0022896346636116505,0.008726255968213081,0.00255889561958611,-0.011034207418560982,0.00564532307907939,0.018903223797678947,-0.005517103709280491,-0.047096870839595795,0.006645435467362404,-0.0014278162270784378,0.012265115045011044,0.004110352136194706,-0.033967189490795135,0.03065546043217182,0.011056187562644482,0.005011552479118109,0.018185194581747055,0.01689567230641842,0.0024270126596093178,0.019108375534415245,0.007169303949922323,-0.010367466136813164,0.006945835892111063,-0.0012647941475734115,-0.00793495774269104,-0.0040151034481823444,-0.01210392452776432,0.02419319562613964,-0.020353935658931732,-0.006696723401546478,-0.0053229425102472305,0.015107925049960613,-0.001765766297467053,-0.00929042138159275,0.03229667246341705,-0.04469366744160652,-0.01871272549033165,-0.0027603835333138704,-0.0035223739687353373,-0.015225154347717762,0.009173192083835602,-0.014470490626990795,-0.013862363994121552,0.031153684481978416,-0.013459388166666031,0.003421630011871457,0.01978244259953499,0.01787746697664261,-0.009839934296905994,-0.009700723923742771,0.018888570368289948,-0.005495123099535704,0.007132669910788536,0.009869241155683994,0.0053156157955527306,0.002152256667613983,-0.018991146236658096,0.019811751320958138,-0.010865690186619759,0.02801780216395855,-0.011913427151739597,0.012785320170223713,-0.007154650520533323,-0.01762835495173931,-0.000010145943633688148,-0.012023329734802246,-0.001422321074642241,-0.0093929972499609,0.0034069763496518135,0.00010228942846879363,-0.009773992002010345,0.017349936068058014,-0.007348811253905296,-0.01783350668847561,-0.017071515321731567,0.018361037597060204,0.019797097891569138,0.0017318796599283814,0.012961164116859436,-0.04466436058282852,0.021013351157307625,-0.007392772473394871,0.02439834736287594,0.012961164116859436,-0.0021742370445281267,-0.013063739985227585,-0.000712076376657933,0.011488471180200577,0.007854362949728966,-0.013789095915853977,0.014221378602087498,0.02510172314941883,-0.008096148259937763,0.02530687488615513,-0.0011493966449052095,0.03373273089528084,-0.01866876520216465,-0.014060188084840775,-0.01491010095924139,0.00037183667882345617,-0.026655010879039764,0.05023275315761566,-0.04378513991832733,0.015591496601700783,-0.03513948246836662,-0.008286645635962486,0.031036455184221268,0.02614213339984417,0.04138194024562836,-0.010125679895281792,-0.002020373707637191,0.0018106431234627962,0.0019196297507733107,0.032120827585458755,-0.0075246552005410194,0.008176743052899837,-0.024032006040215492,0.010689846239984035,0.03171052411198616,0.0030516250990331173,0.023914776742458344,0.035901471972465515,-0.0012190014822408557,0.0019013126147910953,-0.007759113796055317,0.02328466810286045,0.024999147281050682,-0.017320629209280014,-0.0038465862162411213,-0.017144784331321716,0.005480469670146704,0.020998697727918625,-0.052635952830314636,0.04076648876070976,-0.0005920995026826859,0.02977624163031578,0.02051512710750103,0.007986245676875114,-0.014800198376178741,0.019943634048104286,-0.006209489423781633,-0.001511158887296915,0.007345147896558046,0.04302315041422844,-0.01207461766898632,-0.017496472224593163,0.023665664717555046,-0.013664539903402328,0.02618609368801117,0.0035535129718482494,0.022200297564268112,-0.0022584956604987383,0.006304738111793995,0.03443610668182373,-0.5514466166496277,-0.03663415461778641,0.006106913555413485,-0.010426080785691738,0.021306423470377922,-0.03639969602227211,0.008110801689326763,0.05404270440340042,0.0008966209134086967,0.03798229247331619,-0.002560727298259735,-0.0033337080385535955,-0.003982132766395807,-0.007136333268135786,-0.00605562562122941,-0.011532431468367577,0.014851486310362816,-0.006802962627261877,-0.005363240372389555,0.005224030464887619,-0.02974693290889263,-0.01532773021608591,-0.005700274370610714,-0.004081044811755419,0.010887670330703259,-0.0053156157955527306,-0.00024750950979068875,-0.030421001836657524,0.022903673350811005,-0.025512024760246277,-0.031095070764422417,-0.005059176590293646,-0.008535757660865784,0.009466265328228474,0.051668811589479446,-0.01786281354725361,-0.02236148715019226,0.003857576521113515,0.02990812435746193,0.038714975118637085,-0.016382794827222824,-0.0048100645653903484,0.010638558305799961,-0.009092597290873528,0.033000048249959946,-0.018214501440525055,-0.002150424988940358,0.010667866095900536,0.014096822589635849,-0.006931181997060776,-0.010807075537741184,-0.00928309466689825,0.027387693524360657,0.0007111605373211205,-0.017393896356225014,-0.0029289007652550936,0.047946780920028687,-0.009121904149651527,-0.004571942612528801,-0.013312852010130882,-0.024530230090022087,0.004850361961871386,-0.01545961294323206,-0.020940082147717476,-0.022200297564268112,0.022845059633255005,-0.0059200795367360115,0.012756012380123138,0.020075516775250435,-0.0070410845801234245,0.012887896038591862,0.028647908940911293,0.004319166764616966,-0.048064012080430984,-0.011517778038978577,0.053749632090330124,0.02810572274029255,0.01978244259953499,0.013737807981669903,0.029190095141530037,0.005084820557385683,-0.0017978211399167776,-0.011781544424593449,-0.025746483355760574,0.019943634048104286,-0.04284730553627014,-0.04396098479628563,0.015107925049960613,0.04129401966929436,-0.01208927109837532,0.023592395707964897,0.023914776742458344,-0.021057311445474625,-0.027299772948026657,-0.006004338152706623,-0.020881468430161476,0.011503124609589577,0.008132782764732838,0.03182775527238846,-0.020998697727918625,-0.026684317737817764,-0.012770666740834713,0.023006249219179153,0.009246460162103176,0.03519809618592262,0.006125230807811022,-0.002051512710750103,-0.007308513857424259,0.007352474611252546,-0.006429294124245644,0.008389221504330635,-0.014192071743309498,-0.028516026213765144,-0.014639007858932018,-0.02165811136364937,-0.028340181335806847,0.04780024662613869,-0.00039473301148973405,-0.0019654224161058664,-0.003068110439926386,0.004352137446403503,0.003681732574477792,0.019298871979117393,0.003342866664752364,0.00929774809628725,0.018331730738282204,-0.003212815383449197,0.027431655675172806,0.012902549467980862,-0.021277116611599922,0.008674968034029007,-0.011781544424593449,0.04316968843340874,-0.022156337276101112,0.016294872388243675,0.0036487618926912546,0.03229667246341705,-0.019885018467903137,0.011312627233564854,-0.01978244259953499,-0.00789832416921854,-0.00245815166272223,0.01768697053194046,-0.026523128151893616,-0.02510172314941883,-0.01872737891972065,-0.034025803208351135,-0.026728279888629913,-0.00104224169626832,-0.005997010972350836,-0.006744347978383303,0.014719603583216667,0.004359464626759291,0.009568841196596622,-0.03062615357339382,-0.029204748570919037,-0.003883220488205552,-0.03361549973487854,0.0019892347045242786,0.0020954736974090338,0.0067150406539440155,0.012909876182675362,-0.03467056527733803,-0.003458264283835888,-0.010631231591105461,-0.01534238364547491,-0.02507241629064083,-0.004612240009009838,-0.007956938818097115,-0.013180969282984734,-0.0013087551342323422,-0.01767231710255146,-0.021145233884453773,-0.009935182519257069,0.0026816201861947775,0.014008901081979275,-0.005359577015042305,-0.03522740304470062,-0.016353486105799675,0.005476806312799454,0.02048581838607788,-0.007978918962180614,-0.027592845261096954,-0.0017923259874805808,0.022786444053053856,0.02433973178267479,0.026537781581282616,0.048210546374320984,-0.004212928004562855,0.015371691435575485,0.002883107867091894,0.010477367788553238,-0.01956263929605484,0.025629254058003426,0.01211125124245882,0.0116643151268363,-0.011810851283371449,-0.013217602856457233,-0.008220704272389412,-0.001958095468580723,0.025512024760246277,-0.01569407247006893,0.007136333268135786,-0.01588456891477108,0.015488920733332634,-0.027563538402318954,-0.01021360233426094,-0.0116936219856143,-0.016558637842535973,0.025013800710439682,0.0233579371124506,-0.007088708691298962,-0.022991595789790154,0.014316627755761147,-0.004586596041917801,0.03229667246341705,-0.02609817124903202,0.019386794418096542,-0.01767231710255146,-0.00719494791701436,-0.00772247975692153,-0.0279738400131464,0.021159887313842773,0.02416388876736164,-0.005495123099535704,0.023607049137353897,0.014038207940757275,0.012880568392574787,-0.013063739985227585,-0.03513948246836662,0.0005879781674593687,0.011591046117246151,0.029278015717864037,-0.000058786368754226714,0.0012831112835556269,0.002155920024961233,0.02603955753147602,-0.008506450802087784,0.01219917368143797,-0.01126133929938078,0.009839934296905994,-0.005224030464887619,-0.01781885325908661,-0.013796422630548477,0.026684317737817764,-0.03985796123743057,0.010462714359164238,0.015195847488939762,-0.008565065450966358,-0.04076648876070976,-0.020353935658931732,-0.020119477063417435,0.016265565529465675,-0.01114411000162363,0.03417234122753143,-0.0038685668259859085,0.019049759954214096,0.02050047367811203,0.010785095393657684,0.014595047570765018,0.0015404662117362022,0.011415202170610428,0.015371691435575485,-0.007978918962180614,0.01667586714029312,-0.01582595519721508,-0.03663415461778641,-0.025893021374940872,0.0075100017711520195,0.00034687964944168925,0.0029746934305876493,-0.017511125653982162,-0.01663190685212612,0.006000674329698086,-0.011092822067439556,0.008000899106264114,-0.00043869399814866483,0.029102172702550888,-0.00019931269343942404,0.008674968034029007,-0.012660764157772064,-0.0185515359044075,0.009752011857926846,0.03247251361608505,-0.02143830806016922,-0.029380591586232185,0.0007899239426478744,-0.002311615040525794,-0.02710927464067936,0.021687420085072517,-0.00604097219184041,-0.0037238618824630976,-0.028178991749882698,-0.00925378780812025,-0.018361037597060204,0.017950735986232758,0.017305973917245865,-0.02904355712234974,-0.009143885225057602,-0.011034207418560982,0.00510313780978322,0.020060863345861435,-0.014301974326372147,-0.008711601607501507,0.03279489651322365,0.003813615534454584,-0.03426026180386543,-0.024515576660633087,0.01966521330177784,0.009883894585072994,0.016382794827222824,-0.011649660766124725,-0.008513777516782284,-0.0468037948012352,0.009173192083835602,-0.026757586747407913,0.0001737832644721493,-0.025497371330857277,0.002351912669837475,-0.007825055159628391,-0.006106913555413485,-0.020236706361174583,0.00789832416921854,-0.0005788196576759219,0.02148226834833622,0.0648864135146141,0.0003274177433922887,0.009524879977107048,0.0027329078875482082,-0.0013774442486464977,-0.010550636798143387,0.011884119361639023,0.0042056008242070675,0.0014800198841840029,-0.003097417764365673,0.017100824043154716,-0.006737021263688803,0.005971367005258799,0.003941834904253483,0.007172967307269573,-0.008418528363108635,-0.014587719924747944,0.0233139768242836,-0.002018542028963566,0.005180069245398045,-0.024119926616549492,0.009224480018019676,0.03373273089528084,0.03569632023572922,0.019137682393193245,-0.009605475701391697,0.012770666740834713,0.0019928980618715286,-0.033087968826293945,-0.04513327777385712,0.025980941951274872,0.004429069347679615,0.0062534501776099205,-0.034084416925907135,0.04176293686032295,0.030127929523587227,0.0053156157955527306,0.007854362949728966,-0.007326831109821796,-0.006319391541182995,-0.008286645635962486,0.019049759954214096,0.021013351157307625,-0.013877017423510551,-0.022815750911831856,-0.023856161162257195,-0.008264665491878986,0.012946510687470436,0.004359464626759291,0.003386827651411295,0.008074168115854263,-0.012770666740834713,-0.02322605438530445,0.02255198545753956,-0.019855711609125137,-0.007066728547215462,0.00010251839557895437,0.003643266623839736,-0.042407698929309845,-0.03458264097571373,-0.03326381370425224,-0.021833956241607666,-0.0012336551444604993,-0.006290084216743708,-0.03147606551647186,-0.03071407601237297,-0.010440734215080738,-0.05111197382211685,0.009876567870378494,-0.0016989089781418443,0.025365488603711128,-0.009466265328228474,-0.012851261533796787,0.014573066495358944,0.022156337276101112,-0.021277116611599922,0.0077004991471767426,0.010294197127223015,0.023152785375714302,0.011100148782134056,-0.011510451324284077,-0.014470490626990795,-0.003934508189558983,-0.001263878308236599,0.012499573640525341,-0.008301299065351486,0.04595388472080231,0.015063964761793613,0.008118128404021263,-0.017291320487856865,0.02324070781469345,-0.021877916529774666,-0.027534229680895805,0.012440958991646767,0.018888570368289948,0.0008673135889694095,0.018185194581747055,0.027680767700076103,-0.032150134444236755,0.031182993203401566,-0.013312852010130882,-0.028662562370300293,-0.024750035256147385,-0.020339282229542732,0.030098620802164078,0.024046659469604492,-0.006546523422002792,0.0062461234629154205,-0.023870814591646194,0.011070841923356056,-0.011920753866434097,0.002489290898665786,0.00604829890653491,0.01773093082010746,0.032091520726680756,0.00563066964969039,-0.006341372150927782,-0.008154762908816338,-0.04003380239009857,-0.009026655927300453,-0.0018958174623548985,0.023782894015312195,-0.02054443396627903,0.0031560324132442474,0.02521895244717598,-0.014148110523819923,-0.005198386497795582,-0.02716788835823536,0.043550681322813034,-0.004575605969876051,0.0037586642429232597,-0.00127395277377218,-0.036868613213300705,-0.007238909136503935,-0.014221378602087498,-0.016309525817632675,0.0006864324677735567,-0.03900804743170738,0.014030881226062775,0.007971592247486115,0.0018655942985787988,0.008499124087393284,-0.013239583931863308,0.0117082754150033,-0.03660484775900841,-0.04454713314771652,0.004264215473085642,0.01207461766898632,0.032208748161792755,-0.01969452202320099,0.024544883519411087,-0.0018637626199051738,-0.029204748570919037,0.0033813323825597763,-0.017203399911522865,-0.0018811638001352549,-0.02806176245212555,0.026508474722504616,0.014294646680355072,0.011613027192652225,0.016265565529465675,0.033146582543849945,0.036018699407577515,0.008902099914848804,0.017056861892342567,0.03956488519906998,-0.01259482279419899,-0.020353935658931732,-0.0010019441833719611,0.01076311431825161,0.012953837402164936,-0.008799524046480656,-0.005293635185807943,0.005355913192033768,0.025731829926371574,0.014133457094430923,0.021130580455064774,-0.03346896544098854,-0.051756732165813446,0.0001479103957535699,0.02442765422165394,-0.02347516641020775,0.01679309643805027,-0.03384995833039284,0.005084820557385683,-0.03238459303975105,0.0005806513363495469,0.012660764157772064,0.0279298797249794,0.02707996778190136,-0.01948937028646469,0.024090619757771492,-0.002699937205761671,0.009649435989558697,0.004436396062374115,-0.023856161162257195,-0.011737583205103874,0.002881276188418269,0.004773430526256561,-0.010960939340293407,0.04856223613023758,-0.0014507125597447157,0.0046928352676332,-0.03258974477648735,-0.00833060685545206,-0.04460574686527252,-0.0003294784401077777,-0.0028940981719642878,-0.010147660970687866,-0.005300962366163731,-0.013686520047485828,-0.03179844468832016,-0.0014278162270784378,-0.00024888329789973795,0.01582595519721508,-0.03282420337200165,0.008997348137199879,0.0070410845801234245,-0.023167438805103302,0.028384143486618996,-0.01764300838112831,0.029307324439287186,-0.007641884498298168,0.009063289500772953,-0.006147210951894522,0.007619904354214668,-0.0007207769667729735,0.01966521330177784,0.012147885747253895,0.02905821055173874,0.024955186992883682,0.020192746073007584,0.003386827651411295,-0.007249899208545685,0.016529330983757973,-0.02788591757416725,-0.022859713062644005,-0.033205196261405945,0.02319674752652645,0.03080199658870697,0.029541783034801483,-0.012250461615622044,0.009356362745165825,-0.024559536948800087,0.017335282638669014,-0.009041309356689453,-0.019386794418096542,0.03625315800309181,-0.015606150031089783,-0.008022880181670189,0.024530230090022087,0.028633255511522293,0.019093722105026245,-0.010982919484376907,0.009180518798530102,0.004099362064152956,-0.010821728967130184,0.014690295793116093,0.013935632072389126,0.009949835948646069,0.036956533789634705,-0.0374547578394413,0.005311952438205481,0.00677365530282259,0.01219184696674347,-0.0116936219856143,0.02977624163031578,-0.012301749549806118,0.04481089860200882,-0.029190095141530037,0.0021485930774360895,0.016250910237431526,-0.01260947622358799,0.019137682393193245,-0.00846981629729271,-0.007139996625483036,-0.026376591995358467,-0.007433069869875908,-0.036868613213300705,0.03537394106388092,0.008235357701778412,-0.012536208145320415,-0.03188636898994446,0.013224929571151733,-0.006447611376643181,-0.014682969078421593,-0.032120827585458755,0.01567941904067993,-0.045338429510593414,-0.024588843807578087,-0.014441183768212795,-0.004092034883797169,0.02157019078731537,0.008411201648414135,-0.04551427438855171,-0.0008888361626304686,0.039799343794584274,-0.02703600563108921,0.012235807254910469,-0.0042056008242070675,-0.011334607377648354,-0.044283367693424225,0.0010733806993812323,-0.03894943371415138,-0.020222052931785583,0.005953050218522549,-0.01586991548538208,-0.0021046320907771587,-0.02719719707965851,-0.008894773200154305,0.021716726943850517,-0.0022218613885343075,0.02231752686202526,-0.0008714349241927266,-0.009092597290873528,0.004275206010788679,-0.029585743322968483,0.024662112817168236,0.024061312898993492,0.01353265717625618,-0.020324628800153732,0.020016901195049286,0.0050005619414150715,0.029409898445010185,-0.004637883976101875,0.006286420859396458,-0.02039789780974388,-0.04390237107872963,-0.021804649382829666,0.023182092234492302,-0.01356196403503418,-0.00417263014242053,0.0010587270371615887,0.005751562304794788,-0.03338104113936424,-0.003146873787045479,-0.022918326780200005,0.006073942873626947,-0.009620129130780697,0.020309975370764732,0.011810851283371449,0.014866139739751816,0.01947471685707569,-0.02225891314446926,-0.01354731060564518,-0.008293972350656986,0.0029362274799495935,-0.021965838968753815,-0.035960085690021515,0.012059963308274746,0.023724278435111046,0.028486719354987144,-0.008491797372698784,-0.00022426970826927572,0.009048636071383953,-0.009898548945784569,0.0020423540845513344,-0.010836383327841759,-0.008924080058932304,0.0025424102786928415,0.018097272142767906,-0.001443385728634894,0.02623005397617817,-0.008169416338205338,0.03552047535777092,-0.042407698929309845,-0.005333933047950268,-0.009583494625985622,0.0035773252602666616,0.019079066812992096,-0.00770782632753253,-0.03376203775405884,0.004223918076604605,0.03452402725815773,-0.0018994809361174703,0.015005350112915039,0.018009349703788757,0.00489432318136096,-0.030596846714615822,-0.03469987213611603,0.007161977235227823,-0.021892569959163666,-0.013737807981669903,-0.001333483261987567,-0.03156398609280586,-0.002384883351624012,0.014976042322814465,-0.009092597290873528,0.003749505616724491,0.01956263929605484,0.004121342208236456,0.02044185809791088,0.024779342114925385,-0.009121904149651527,-0.007803075015544891,0.007458713836967945,0.009129231795668602,0.03481709957122803,-0.0017236369894817472,0.01532773021608591,0.03065546043217182,0.0029289007652550936,0.01677844300866127,-0.019328180700540543,0.022801097482442856,-0.03933042660355568,-0.01592853106558323,0.0009135642321780324,-0.006520879454910755,-0.0023390906862914562,0.013356813229620457,-0.001549624721519649,0.014111476019024849,0.016397448256611824,0.003317222697660327,-0.018082618713378906,-0.024837957695126534,0.007861689664423466,0.011224704794585705,-0.04012172669172287,0.0002859753731172532,-0.0026834518648684025,0.02253733202815056,-0.005414527840912342,-0.013071066699922085,-0.015254462137818336,0.012279768474400043,0.009129231795668602,-0.02143830806016922,-0.004440059419721365,-0.009649435989558697,-0.0022823079489171505,0.011341934092342854,-0.0015990808606147766,-0.02242010273039341,0.19249050319194794,-0.004506001248955727,-0.0025424102786928415,0.03921319916844368,0.021907225251197815,-0.007004450540989637,0.010704499669373035,0.011473816819489002,-0.010704499669373035,0.02050047367811203,0.020954735577106476,0.021877916529774666,-0.007301187142729759,-0.008403874933719635,0.017906775698065758,0.019269565120339394,-0.021086620166897774,-0.028135031461715698,0.010250236839056015,0.0005687452503480017,0.014617027714848518,-0.00927576795220375,-0.0140015734359622,-0.02608351781964302,0.0464228019118309,-0.008821504190564156,-0.007751787081360817,-0.005938396323472261,0.01438989583402872,0.008374568074941635,0.001497421064414084,-0.03645830973982811,0.017027555033564568,-0.005905425641685724,0.010902324691414833,0.017276667058467865,0.006641772110015154,-0.013774442486464977,-0.006429294124245644,0.013239583931863308,-0.0015047478955239058,-0.01491010095924139,0.03150537237524986,-0.017437858507037163,-0.026611050590872765,-0.004110352136194706,-0.0016989089781418443,0.05331002175807953,-0.010909651406109333,0.009920529089868069,-0.02527756616473198,0.04577803984284401,0.007216928526759148,-0.007319503929466009,-0.025599947199225426,0.011818177998065948,0.0005682873306795955,-0.007429406512528658,0.0029582080896943808,-0.015181194059550762,-0.017305973917245865,0.009671417064964771,-0.01020627561956644,-0.00656484067440033,-0.021115927025675774,0.012448285706341267,-0.025570640340447426,0.02606886439025402,0.020353935658931732,-0.01778954640030861,-0.01781885325908661,0.004780757240951061,-0.010990246199071407,0.021203849464654922,-0.01764300838112831,-0.012660764157772064,0.005799186881631613,0.04557288810610771,0.012492246925830841,-0.0031322201248258352,-0.008228030987083912,0.011063514277338982,0.016324179247021675,-0.008543085306882858,-0.014646334573626518,-0.02697739191353321,0.037161685526371,-0.0012565514771267772,-0.007022767327725887,-0.001237318618223071,-0.017423203215003014,-0.008250012062489986,0.0024636469315737486,0.01582595519721508,0.019899671897292137,-0.013386120088398457,-0.020075516775250435,-0.01531307678669691,-0.031065763905644417,-0.004952937830239534,-0.0469503328204155,0.060959234833717346,0.03933042660355568,0.0030864274594932795,-0.015576842240989208,0.001373780774883926,-0.012125905603170395,0.012338383123278618,-0.01020627561956644,-0.02162880450487137,-0.035051558166742325,-0.0032860836945474148,0.016177643090486526,0.02051512710750103,0.023050209507346153,0.011334607377648354,-0.005502449814230204,0.00490897661074996,-0.016250910237431526,-0.012023329734802246,0.020163439214229584,-0.03956488519906998,0.008660314604640007,0.0008453330956399441,-0.0187566876411438,-0.024647459387779236,-0.017042208462953568,-0.0023903786204755306,0.0022218613885343075,-0.03077268972992897,0.03631177544593811,0.009693397209048271,0.007422079797834158,-0.03560839965939522,0.02624470926821232,-0.03241389989852905,0.04604180529713631,-0.018170541152358055,-0.014983369037508965,-0.0001213506402564235,0.003919854760169983,-0.0033263813238590956,0.04035618528723717,0.0030131591483950615,0.0009753843769431114,-0.006608801428228617,0.004132332745939493,-0.0022200297098606825,0.015576842240989208,0.0023317639715969563,-0.038832202553749084,-0.014697622507810593,0.004106688778847456,-0.009341709315776825,0.007107025943696499,-0.011825504712760448,-0.009898548945784569,-0.03437748923897743,-0.004117678850889206,-0.0016503686783835292,-0.024603499099612236,0.018932530656456947,-0.009935182519257069,0.016587944701313972,-0.023973390460014343,-0.02980554848909378,-0.1865118145942688,0.01677844300866127,0.005491459742188454,-0.030245158821344376,0.030157236382365227,-0.005077493842691183,0.021760687232017517,-0.0024911225773394108,-0.005758889019489288,-0.0013115027686581016,0.016426755115389824,-0.008784870617091656,0.014866139739751816,-0.033058661967515945,0.013759788125753403,-0.005410864483565092,0.0004297644190955907,-0.0014671979006379843,0.03900804743170738,0.013195622712373734,0.034875717014074326,-0.023108825087547302,0.032179441303014755,-0.0023171103093773127,-0.013906325213611126,0.0010514002060517669,-0.011100148782134056,-0.002742066513746977,0.006066616158932447,-0.03537394106388092,-0.017393896356225014,-0.006623455323278904,0.003744010580703616,0.00835991371423006,-0.002483795629814267,-0.012008676305413246,-0.001403088099323213,-0.02810572274029255,0.012294421903789043,0.01664656028151512,0.023123478516936302,0.022039107978343964,-0.013173641636967659,0.017100824043154716,0.015562188811600208,0.007308513857424259,-0.0008155678515322506,-0.001784999156370759,-0.007304850500077009,-0.016206949949264526,0.025643907487392426,-0.019093722105026245,0.010924304835498333,-0.0041982741095125675,0.022610601037740707,-0.007641884498298168,0.0031047447118908167,-0.00014035460480954498,0.00884348526597023,0.008096148259937763,-0.0186101496219635,-0.008389221504330635,0.009033982641994953,-0.02329932153224945,-0.005275318399071693,0.0007748123607598245,-0.02602490410208702,0.0021779004018753767,-0.018419653177261353,-0.037220299243927,-0.015547535382211208,0.0036487618926912546,-0.0024709736462682486,-0.0015587832313030958,0.06359688937664032,0.016500024124979973,-0.03563770651817322,0.02047116495668888,-0.006671079434454441,0.009517553262412548,-0.016045760363340378,0.027710074558854103,-0.009019329212605953,0.008118128404021263,0.013254237361252308,0.0015890065114945173,-0.02253733202815056,-0.004139659460633993,0.023680318146944046,-0.029395245015621185,-0.037044458091259,-0.008565065450966358,0.0038429228588938713,-0.020866815000772476,-0.01781885325908661,0.018287770450115204,0.0069128647446632385,-0.003471086034551263,0.015151886269450188,-0.01260214950889349,-0.012536208145320415,-0.004132332745939493,-0.02058839425444603,-0.00023857993073761463,-0.003908864222466946,0.014873466454446316,0.016294872388243675,0.009605475701391697,0.02064700983464718,0.008367241360247135,-0.020925428718328476,0.01570872589945793,0.01663190685212612,0.024779342114925385,-0.016529330983757973,0.024676766246557236,0.02057374082505703,-0.00789832416921854,0.029219402000308037,0.005539084319025278,0.07180294394493103,-0.021115927025675774,0.00491263996809721,0.006817616056650877,-0.003813615534454584,-0.005399874411523342,-0.09132161736488342,-0.007301187142729759,0.0005069251055829227,0.04416613653302193,-0.043492067605257034,-0.01663190685212612,-0.03291212394833565,0.011862139217555523,-0.0093856705352664,0.037103071808815,-0.012734032236039639,-0.03862705081701279,-0.028618602082133293,0.02902890369296074,-0.03956488519906998,-0.023929430171847343,-0.009429631754755974,-0.03900804743170738,-0.023607049137353897,0.051668811589479446,0.0041982741095125675,-0.03900804743170738,-0.031212300062179565,-0.0059164161793887615,-0.025614600628614426,0.015664763748645782,-0.017525779083371162,0.022932980209589005,-0.00925378780812025,-0.0025149346329271793,-0.005542747676372528,-0.012909876182675362,0.011803524568676949,-0.002520429901778698,0.010894997976720333,0.003667078912258148,-0.0046928352676332,-0.013906325213611126,0.017467165365815163,-0.015034656971693039,0.006235132925212383,0.010382119566202164,0.025805098935961723,-0.0027530568186193705,-0.019035106524825096,0.007971592247486115,-0.029102172702550888,0.030948534607887268,0.026288669556379318,0.011012227274477482,-0.0013087551342323422,-0.006235132925212383,-0.012294421903789043,-0.01869807206094265,0.03335173428058624,-0.026611050590872765,0.027548884972929955,0.033058661967515945,0.0008224367629736662,0.015254462137818336,0.0043411473743617535,0.03352757915854454,0.005949386861175299,0.02709462121129036,0.00656850403174758,-0.01689567230641842,-0.037103071808815,0.015606150031089783,0.014140783809125423,-0.013620578683912754,-0.030391694977879524,0.006268104072660208,-0.009488246403634548,0.01691032573580742,-0.01023558247834444,0.013356813229620457,-0.006594147998839617,-0.03194498270750046,0.02146761491894722,-0.008162089623510838,-0.01956263929605484,-0.00929042138159275,-0.021921878680586815,-0.019298871979117393,-0.005037196446210146,0.054453007876873016,0.0017456174828112125,-0.007832381874322891,0.02904355712234974,-0.04047341272234917,0.01975313574075699,0.015239808708429337,-0.007004450540989637,0.01491742767393589,0.015518227592110634,0.019284218549728394,-0.008748236112296581,-0.008044860325753689,-0.010557963512837887,-0.0009927855571731925,-0.019240258261561394,-0.012023329734802246,-0.05972832441329956,0.018214501440525055,0.009502899833023548,-0.011063514277338982,-0.03845120966434479,0.010374792851507664,0.008147436194121838,-0.01312235463410616,-0.010396772995591164,-0.0030314764007925987,-0.007161977235227823,0.01976778917014599,0.0023537443485111,-0.03417234122753143,-0.01764300838112831,-0.009246460162103176,0.03091922588646412,-0.010140334255993366,0.015063964761793613,0.04454713314771652,-0.011092822067439556,0.003813615534454584,-0.002381219994276762,0.023563088849186897,0.0050042252987623215,-0.023988043889403343,-0.000901200226508081,0.002013046760112047,0.0016274723457172513,0.005088483914732933,0.035872165113687515,0.0051324451342225075,-0.004092034883797169,0.013635232113301754,0.0001988547737710178,0.013430081307888031,0.0012070953380316496,0.011063514277338982,0.01534238364547491,-0.009224480018019676,-0.003720198292285204,-0.02520429901778698,0.017218053340911865,-0.02140899933874607,0.010579943656921387,0.006363352760672569,-0.04879669472575188,0.010499348863959312,0.018155887722969055,-0.00846248958259821,0.02970297262072563,-0.01866876520216465,0.0034967300016433,-0.010111026465892792,-0.020969390869140625,0.002531419973820448,0.0019599273800849915,0.02242010273039341,0.011122128926217556,0.007176630664616823,0.03607731685042381,0.02898494340479374,0.010499348863959312,-0.04111817479133606,-0.003416134975850582,0.009891221299767494,-0.03569632023572922,0.0005458489176817238,0.013847710564732552,-0.06072477623820305,-0.02137969247996807,0.006627118680626154,0.010924304835498333,0.026772240176796913,-0.023094171658158302,0.0012675417819991708,-0.006341372150927782,0.01954798400402069,-0.0037550008855760098,0.021189194172620773,0.017921429127454758,0.005912752356380224,0.013386120088398457,0.007627231068909168,-0.001860099146142602,0.0010953611927106977,-0.016294872388243675,-0.001873836969025433,-0.008667641319334507,-0.006890884600579739,-0.02155553735792637,0.005612352397292852,0.016543984413146973,0.0031596957705914974,0.022903673350811005,-0.01778954640030861,-0.018903223797678947,0.0027109275106340647,0.03648761659860611,0.009634782560169697,-0.006890884600579739,0.011569065973162651,-0.0010724648600444198,-0.002853800542652607,-0.012037983164191246,0.004945610649883747,-0.029219402000308037,-0.017437858507037163,-0.0027988494839519262,0.015269115567207336,0.004641547333449125,0.0033282130025327206,-0.02801780216395855,0.0373668372631073,0.0019910663831979036,0.021203849464654922,0.013158988207578659,0.018976492807269096,-0.04410752281546593,0.031124377623200417,-0.012360364198684692,-0.0279152262955904,0.046364184468984604,-0.006879894062876701,0.0187859944999218,-0.0015624467050656676,-0.010799748823046684,-0.026405898854136467,0.0075173284858465195,-0.0185808427631855,0.020148785784840584,-0.007004450540989637,0.002694442169740796,-0.018038658425211906,-0.005077493842691183,-0.004974917974323034,-0.0093929972499609,0.022112375125288963,-0.02249337173998356,0.09255252778530121,0.035989392548799515,-0.02157019078731537,-0.012821953743696213,-0.012682744301855564,0.032238055020570755,-0.017100824043154716,0.0031853397376835346,-0.011034207418560982,-0.05143435299396515,-0.01948937028646469,0.006458601448684931,-0.02165811136364937,-0.006674742791801691,-0.034143030643463135,-0.01570872589945793,-0.00031757232500240207,0.03543255478143692,-0.018126579001545906,-0.010067065246403217,0.040678564459085464,0.0005989684141241014,-0.00328058865852654,0.01582595519721508,-0.000025472185370745137,-0.008594372309744358,0.027431655675172806,0.011876792646944523,-0.01588456891477108,-0.008799524046480656,0.019064413383603096,-0.0013591271126642823,-0.034055110067129135,-0.009480918757617474,-0.01789212040603161,0.01491742767393589,0.003245786065235734,-0.014345934614539146,0.005762552376836538,0.0279298797249794,0.010133007541298866,-0.0374840684235096,-0.030977841466665268,-0.029321977868676186,-0.024706073105335236,0.010543310083448887,-0.009158538654446602,-0.015591496601700783,-0.02809106931090355]],"metadata":{"location":"https://pkg.go.dev/github.com/libp2p/go-libp2p-pubsub","source_type":"webpage"}},{"raw_content":"Open in appSign upSign inWriteSign upSign inMember-only storyBuild Command Line Interfaces (CLI) using GoA quick introduction on how to develop Command Line Interfaces (CLI) using GoBijesh O S·FollowPublished inThe Startup·10 min read·May 6, 2020--SharePhoto by Yingchih on UnsplashIntroductionWhen we think of designing ways to interact with users, Graphical User Interface (GUI) is the de-facto choice. In cases where our area of focus is cloud/infrastructure tools and users are programmers themselves, Command Line Interface (CLI) becomes a preferred choice. Though CLIs are text based, its simplicity and automation abilities make them a popular option among power-users. Ability to chain with other command line tools improves overall usability as well.Most of the popular cloud platforms, such as AWS, Azure and Google Cloud, provide CLIs to interact with their underlying services. Some of the well known cloud-native softwares such as Kubernetes, Docker, Hugo, Istio, and Helm, provide easy to use CLIs as well.Designing Command Line Interface is often an under appreciated process. Ever wondered how we can create intuitive and easy to use CLIs for our tools? No worries 😃. In this article, let's explore how to develop such a CLI using Go.Why use Go?A lot has been written about the pros and cons about Go. Let's pick top 3 advantages relevant to our context.Output of the build process is a single self contained binary; in other words, no separate dependencies/runtimes/libraries are needed to execute the binary. This is a huge gain since dependency and runtime management is a headache in most cases.We can build binaries for multiple Operating Systems (Mac, Linux or Windows) and architectures (amd64, arm, x386 etc ) from a single machine. This simplifies the build process significantly.Time needed to compile a Go application is quite less compared to its peers. That's a productivity boost when we have a relatively large code base.LibrariesThough we can start from scratch, it is always wise to take a look around and see if any frameworks/libraries are…----FollowWritten by Bijesh O S65 Followers·Writer for The StartupSenior Principal Software Engineer at ShellFollowHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams","summary":"a quick introduction on how to develop command line interfaces (CLI) using Go. It explains the advantages of using Go for building CLIs, such as the ability to create a single self-contained binary, the ability to build binaries for multiple operating systems and architectures, and the faster compilation time compared to other languages. The text also mentions that there are frameworks and libraries available for building CLIs in Go.","chunks":["Open in appSign upSign inWriteSign upSign inMember-only storyBuild Command Line Interfaces (CLI) using GoA quick introduction on how to develop Command Line Interfaces (CLI) using GoBijesh O S·FollowPublished inThe Startup·10 min read·May 6, 2020--SharePhoto by Yingchih on UnsplashIntroductionWhen we think of designing ways to interact with users, Graphical User Interface (GUI) is the de-facto choice. In cases where our area of focus is cloud/infrastructure tools and users are programmers themselves, Command Line Interface (CLI) becomes a preferred choice. Though CLIs are text based, its simplicity and automation abilities make them a popular option among power-users. Ability to chain with other command line tools improves overall usability as well.Most of the popular cloud platforms, such as AWS, Azure and Google Cloud, provide CLIs to interact with their underlying services. Some of the well known cloud-native softwares such as Kubernetes, Docker, Hugo, Istio, and Helm, provide easy to use CLIs as well.Designing Command Line Interface is often an under appreciated process. Ever wondered how we can create intuitive and easy to use CLIs for our tools? No worries 😃. In this article, let's explore how to develop such a CLI using Go.Why use Go?A lot has been written about the pros and cons about Go. Let's pick top 3 advantages relevant to our context.Output of the build process is a single self contained binary; in other words, no separate dependencies/runtimes/libraries are needed to execute the binary. This is a huge gain since dependency and runtime management is a headache in most cases.We can build binaries for multiple Operating Systems (Mac, Linux or Windows) and architectures (amd64, arm, x386 etc ) from a single machine. This simplifies the build process significantly.Time needed to compile a Go application is quite less compared to its peers. That's a productivity boost when we have a relatively large code base.LibrariesThough we can start from scratch, it is always wise to take a look around and see if any frameworks/libraries are…----FollowWritten by Bijesh O S65 Followers·Writer for The StartupSenior Principal Software Engineer at ShellFollowHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams"],"chunk_summaries":["a quick introduction on how to develop command line interfaces (CLI) using Go. It explains the advantages of using Go for building CLIs, such as the ability to create a single self-contained binary, the ability to build binaries for multiple operating systems and architectures, and the faster compilation time compared to other languages. The text also mentions that there are frameworks and libraries available for building CLIs in Go."],"e_summary":[0.005968277808278799,0.0032845670357346535,0.0069014509208500385,-0.035715680569410324,0.004504740703850985,0.017267053946852684,-0.01621975190937519,-0.0128965824842453,-0.015521550551056862,-0.04124758020043373,0.02364485338330269,0.007505663670599461,-0.020073285326361656,0.014433967880904675,-0.011822426691651344,0.0020526445005089045,0.005038462113589048,0.0013687093742191792,-0.006955158431082964,0.02377912402153015,-0.00995608139783144,0.02023440971970558,0.02418193221092224,-0.021254858002066612,-0.002687067724764347,-0.002833085833117366,-0.008485830388963223,0.0012814343208447099,0.011788859963417053,0.010412597097456455,0.012319223955273628,-0.010291755199432373,-0.021966485306620598,0.003957592882215977,-0.010983242653310299,0.006085763685405254,0.01013734471052885,-0.005441270302981138,-0.0177235696464777,0.00021860748529434204,0.02443704381585121,0.004383898340165615,0.0029975660145282745,0.011567315086722374,-0.015803515911102295,0.03423871472477913,0.021026598289608955,-0.023027215152978897,-0.0042932662181556225,-0.013084559701383114,-0.0001501090737292543,0.026692770421504974,-0.029431868344545364,-0.016488291323184967,-0.014863630756735802,-0.009304874576628208,-0.012997284531593323,0.008331420831382275,0.002163416938856244,-0.0004766566271428019,0.016904527321457863,0.014098294079303741,0.007512377109378576,-0.01423256378620863,-0.004994824528694153,-0.004367114510387182,-0.011151080019772053,0.024960694834589958,-0.008445549756288528,-0.013910316862165928,0.0020895686466246843,0.050109367817640305,0.003188899951055646,0.016541998833417892,0.029109621420502663,-0.009976222179830074,-0.033782199025154114,0.0026232898235321045,-0.00577358715236187,0.018206940963864326,0.0007758258143439889,-0.01589750498533249,0.014098294079303741,0.026464512571692467,-0.00884164497256279,-0.01468908041715622,0.013883463107049465,0.014930765144526958,-0.036118488758802414,-0.011043664067983627,-0.005048532038927078,-0.015978066250681877,0.01311812736093998,0.02937816083431244,-0.0164480097591877,0.002754202578216791,0.008707375265657902,0.004947829991579056,-0.0034641523379832506,-0.007848050445318222,0.008707375265657902,0.025296367704868317,-0.0033919825218617916,-0.009184031747281551,-0.015910932794213295,-0.0035346439108252525,0.01017762627452612,-0.028894789516925812,0.023537438362836838,0.00827771332114935,-0.007035720162093639,0.020798340439796448,0.0043973252177238464,-0.025336649268865585,0.013473941013216972,-0.011104085482656956,0.0054345568642020226,-0.021147441118955612,0.022423001006245613,-0.02349715679883957,0.012292370200157166,0.00816358346492052,0.03603792563080788,0.011016810312867165,-0.01399087905883789,0.009365295991301537,-0.033379390835762024,-0.010546866804361343,0.01028504129499197,-0.033486805856227875,0.039582639932632446,0.005478194449096918,-0.001982153160497546,0.014729361049830914,-0.00004725655890069902,0.005004894454032183,-0.00893563311547041,0.012728746049106121,-0.015051607973873615,0.008036027662456036,0.018462052568793297,0.0073713939636945724,-0.0032812103163450956,0.010869113728404045,-0.011305489577353,0.020959464833140373,0.03080141730606556,0.012977144680917263,0.005031748209148645,-0.0003585414378903806,0.01800553686916828,0.005135807208716869,0.01129206269979477,0.008982627652585506,0.00898934155702591,0.024947267025709152,-0.009459284134209156,0.011372623965144157,-0.00014276620640885085,-0.004786706529557705,0.009815098717808723,-0.005521832033991814,0.008183724246919155,-0.0006071497919037938,0.008552965708076954,0.029754115268588066,0.01914682611823082,-0.018435198813676834,0.013561216183006763,0.0018999130697920918,0.014098294079303741,0.03883073106408119,-0.037434328347444534,0.03445354476571083,-0.004467816557735205,0.017159638926386833,0.017884694039821625,0.038750167936086655,0.002970712026581168,-0.010452878661453724,0.001431648270227015,-0.009754677303135395,0.010164199396967888,0.027350692078471184,-0.007666786666959524,0.003967662807554007,0.0031452623661607504,0.03517860174179077,0.010036642663180828,0.0074385288171470165,0.0027525241021066904,0.011553888209164143,0.004981397185474634,-0.007237124722450972,-0.6328926086425781,0.009667402133345604,-0.0067302570678293705,-0.018153231590986252,0.022329013794660568,0.009069902822375298,0.009090043604373932,0.011506893672049046,0.008069595322012901,0.030559731647372246,0.0017824271926656365,0.0020022934768348932,0.018180087208747864,-0.026840467005968094,-0.004847127944231033,-0.02057008258998394,0.003277853364124894,-0.03050602413713932,-0.03678983449935913,0.009888947010040283,-0.01918710768222809,0.017441604286432266,0.0021802005358040333,-0.012292370200157166,0.012191668152809143,-0.00876779668033123,-0.0004951186710968614,-0.014595091342926025,-0.018475478515028954,0.041301287710666656,-0.04194578155875206,0.004014657344669104,0.0021063522435724735,0.018153231590986252,0.0492500402033329,-0.017079077661037445,-0.014474249444901943,-0.005202942062169313,0.012278943322598934,0.04460432007908821,-0.0360916331410408,-0.021066879853606224,-0.007498949766159058,-0.00691487779840827,-0.018314355984330177,-0.011970123276114464,0.023443449288606644,-0.0026535005308687687,-0.003722621127963066,0.00030881978454999626,0.012278943322598934,-0.013708912767469883,0.0005836525815539062,-0.02112058736383915,-0.027162713930010796,-0.017965255305171013,0.03252006694674492,-0.024490751326084137,-0.008761082775890827,-0.005666171666234732,-0.005115666892379522,0.011124225333333015,-0.03939466178417206,-0.03120422549545765,-0.01944221928715706,0.02948557585477829,-0.03152647241950035,-0.01564239338040352,-0.00611933134496212,-0.015145596116781235,0.012487060390412807,0.02192620374262333,-0.01859632134437561,-0.015803515911102295,0.0047329990193247795,0.050216782838106155,0.021107161417603493,0.009190745651721954,0.001846205210313201,0.011057090945541859,0.006196536123752594,0.00783462356775999,-0.01280930731445551,-0.014836777001619339,0.024504179134964943,-0.0037293345667421818,0.015024754218757153,-0.02334946021437645,-0.00038749328814446926,-0.007008866406977177,0.01706564985215664,0.01874401792883873,-0.026115411892533302,-0.02718956768512726,-0.0059044999070465565,0.040119718760252,0.003635345958173275,0.0007984837866388261,-0.011741865426301956,-0.01621975190937519,-0.02404766157269478,-0.002864974783733487,0.00205935793928802,0.020664071664214134,0.022409575060009956,0.004471173509955406,-0.007653359789401293,0.017253626137971878,0.030855124816298485,-0.02696130983531475,-0.013292677700519562,0.01423256378620863,-0.0019049481488764286,0.006223389878869057,0.008358274586498737,-0.03149961680173874,0.00011024782725144178,0.002400066703557968,0.024316200986504555,-0.0532781258225441,0.010694563388824463,0.00019185848941560835,-0.004125429317355156,-0.007069287821650505,-0.006001845467835665,0.007807769812643528,-0.003964306320995092,0.0029153258074074984,-0.018770871683955193,-0.013964025303721428,-0.01914682611823082,0.005400989670306444,0.020301543176174164,-0.014501103200018406,0.02071777917444706,0.02024783566594124,0.033083997666835785,-0.010768411681056023,-0.014783068560063839,-0.03058658540248871,-0.007472096011042595,0.00805616844445467,0.0007905114907771349,-0.00734454020857811,0.0026216113474220037,-0.008928920142352581,-0.03880387544631958,-0.014608518220484257,0.02381940372288227,-0.010466305539011955,0.0116210225969553,-0.018475478515028954,-0.002458809642121196,0.00043679538066498935,0.009372008964419365,-0.016528571024537086,-0.019334804266691208,-0.01647486351430416,-0.0015994850546121597,-0.02316148392856121,-0.011251782067120075,0.0032023268286138773,-0.01604520156979561,-0.016676267609000206,-0.006179752293974161,-0.006431507878005505,-0.0003505692002363503,0.02371198870241642,-0.00009629638952901587,-0.0268538948148489,0.020086713135242462,-0.0019955800380557775,-0.002381604630500078,-0.0021768438164144754,0.021496541798114777,0.00029119692044332623,-0.028706813231110573,0.00044812436681240797,-0.0064751454629004,-0.01083554606884718,0.021241430193185806,0.013010711409151554,0.008969200775027275,0.0010380708845332265,0.0154946967959404,0.009768104180693626,0.007357967086136341,0.03335253521800041,-0.0011513606877997518,-0.010634141974151134,0.014729361049830914,0.020852049812674522,-0.009016195312142372,-0.004454389680176973,-0.010083637200295925,0.03829365223646164,-0.018475478515028954,0.04863240197300911,-0.0003125961229670793,-0.0028011968825012445,0.024504179134964943,0.006226746831089258,0.02181878872215748,-0.024275921285152435,-0.006589274387806654,-0.0041287862695753574,0.020073285326361656,-0.008156870491802692,-0.000600016675889492,0.01201711781322956,0.01033874973654747,-0.02024783566594124,-0.008774509653449059,-0.02488013356924057,0.03386276215314865,0.000833309895824641,-0.027162713930010796,0.01266161072999239,-0.013071132823824883,-0.010204480029642582,0.02524266019463539,0.009559986181557178,0.006314022000879049,-0.029243890196084976,-0.023067494854331017,0.026424232870340347,-0.012681751511991024,0.002509160665795207,-0.011815713718533516,-0.019012557342648506,-0.0021046740002930164,0.019724184647202492,-0.005330497864633799,-0.010895967483520508,0.02897535264492035,0.03018377721309662,-0.01160088274627924,-0.034185007214546204,0.03415815532207489,-0.021657666191458702,-0.024692155420780182,0.006599344313144684,0.024249065667390823,-0.025363503023982048,0.032063551247119904,0.03284231200814247,0.020046431571245193,0.01202383078634739,-0.030130069702863693,-0.002614897908642888,-0.016971660777926445,0.018542613834142685,-0.015145596116781235,0.013057705946266651,0.018864860758185387,0.0007531678420491517,0.027270128950476646,0.013688772916793823,0.02806231938302517,0.016689695417881012,0.005008251406252384,-0.009700968861579895,0.0015474556712433696,0.0007644967990927398,0.0007531678420491517,0.007968893274664879,0.009707682766020298,-0.010452878661453724,-0.02539035677909851,-0.01464879885315895,-0.006226746831089258,0.003494363045319915,0.007841337472200394,-0.004451033193618059,0.006609414704144001,0.02118772268295288,-0.010875827632844448,0.012621330097317696,0.016689695417881012,0.006545636802911758,-0.024544458836317062,-0.025296367704868317,0.008868498727679253,0.0008513523498550057,0.0054916213266551495,-0.015736382454633713,-0.03345995396375656,0.005914570298045874,-0.0012470277724787593,0.011036950163543224,-0.02349715679883957,-0.0001094086401280947,-0.0036084919702261686,0.01797868311405182,0.0036991238594055176,0.019428793340921402,0.021684519946575165,-0.0292975977063179,-0.009848665446043015,-0.013581356965005398,0.015467843040823936,0.0034675090573728085,-0.011003383435308933,-0.01961676962673664,0.046457238495349884,-0.0002431536267977208,-0.01749531179666519,-0.0154946967959404,0.019093118607997894,-0.02594086155295372,0.0077272080816328526,-0.016541998833417892,0.009801671840250492,-0.03759545087814331,0.04194578155875206,-0.014205710031092167,-0.01423256378620863,-0.004326833877712488,0.024249065667390823,0.021872496232390404,-0.007357967086136341,-0.032573774456977844,0.00454837828874588,0.014299699105322361,0.054164305329322815,-0.005458054132759571,0.001988866599276662,0.013460514135658741,-0.02488013356924057,-0.013406806625425816,-0.035930510610342026,-0.011077231727540493,0.01800553686916828,-0.006122687831521034,0.012507201172411442,0.00033672264544293284,-0.028250297531485558,-0.014205710031092167,0.014259417541325092,0.015628965571522713,0.006068980321288109,-0.024490751326084137,-0.005075385794043541,-0.022570697590708733,0.021335419267416,0.022382721304893494,-0.0041925641708076,0.010754984803497791,0.010882540605962276,-0.000690648565068841,0.022557271644473076,0.01889171451330185,0.012225235812366009,-0.015011327341198921,-0.004212704487144947,-0.0006818371475674212,0.013789474964141846,0.021751655265688896,-0.017884694039821625,0.03536657989025116,-0.005169374868273735,0.001057372079230845,0.008499257266521454,-0.013245683163404465,0.0443626344203949,-0.00893563311547041,0.005911213345825672,-0.003049595281481743,0.014313125982880592,-0.006666479166597128,-0.005891073029488325,0.012936863116919994,-0.020341824740171432,0.0020492877811193466,0.012084252201020718,0.015521550551056862,-0.0128965824842453,-0.0008454780909232795,0.013480654917657375,0.004447676241397858,-0.00813001673668623,0.009781531058251858,0.012829448096454144,-0.02795490436255932,-0.01010377798229456,-0.023537438362836838,-0.013198688626289368,-0.021765081211924553,0.0006868722848594189,-0.0537077896296978,-0.012547481805086136,-0.006159611977636814,-0.030237484723329544,0.017105931416153908,0.03260062634944916,-0.025229234248399734,-0.030049508437514305,-0.00980838481336832,0.008244145661592484,0.01589750498533249,0.006955158431082964,-0.00014203193131834269,0.0030361684039235115,-0.0021080307196825743,-0.004065008368343115,-0.03458781540393829,-0.00383675005286932,-0.02290637232363224,0.0178309865295887,0.011808999814093113,0.0012050685472786427,0.01107051782310009,0.005377492401748896,0.027793779969215393,-0.011741865426301956,0.010318608954548836,0.02144283428788185,-0.011325630359351635,0.016206325963139534,0.015736382454633713,0.008069595322012901,-0.006065623369067907,0.024786144495010376,-0.018945422023534775,0.006176395807415247,-0.0046860044822096825,-0.013332958333194256,-0.04062994197010994,-0.0022456569131463766,-0.0008307923562824726,0.027632657438516617,-0.002505803946405649,-0.0010162520920857787,0.0012763991253450513,0.014219136908650398,-0.01114436611533165,0.007116281893104315,0.022235024720430374,-0.004618869628757238,0.022221596911549568,-0.012628044001758099,0.024893559515476227,0.023295752704143524,-0.01954963430762291,0.01855604164302349,-0.042214322835206985,0.015199304558336735,0.012614617124199867,-0.019079692661762238,0.01382975559681654,0.00010227557504549623,-0.01129206269979477,-0.02798175811767578,-0.0031721163541078568,-0.019012557342648506,0.00822400487959385,0.00035077898064628243,-0.020946037024259567,0.016488291323184967,-0.017361043021082878,-0.013326245360076427,-0.0029455365147441626,-0.058004412800073624,-0.01742817647755146,0.014890484511852264,-0.008734229020774364,0.016461437568068504,0.0009625442908145487,-0.013037566095590591,-0.02568574994802475,-0.02031497098505497,0.010157485492527485,0.008338133804500103,-0.0034641523379832506,-0.002866653259843588,0.010278328321874142,-0.042321737855672836,-0.02385968528687954,-0.0020711065735667944,-0.02787434309720993,-0.000011597788216022309,-0.006545636802911758,0.035527702420949936,0.025336649268865585,0.00815015658736229,0.008270999416708946,0.01630031317472458,0.003974376246333122,-0.019885309040546417,-0.019093118607997894,-0.017199918627738953,-0.017226772382855415,-0.015951212495565414,0.002203697804361582,-0.018838007003068924,0.020033005625009537,-0.005330497864633799,-0.00798232015222311,-0.004739712458103895,0.002886793576180935,0.0005949815968051553,0.008371701464056969,-0.009841952472925186,-0.041086457669734955,-0.021791934967041016,0.009768104180693626,0.006888024043291807,0.03252006694674492,-0.008727516047656536,-0.015279865823686123,0.02326889894902706,0.013400093652307987,0.016568852588534355,-0.0059716347604990005,0.017186492681503296,0.0023732129484415054,0.012930150143802166,0.010311895050108433,0.01921396143734455,0.0003612687869463116,0.01848890632390976,-0.03716579079627991,0.01059386134147644,0.02126828394830227,0.02729698270559311,0.01721334643661976,0.025269513949751854,-0.008210578002035618,-0.019791319966316223,0.001701865578070283,-0.014447394758462906,-0.009821811690926552,0.012198381125926971,-0.005629247520118952,-0.003116730134934187,-0.03853533789515495,0.020878903567790985,0.02835771255195141,-0.018032390624284744,0.004226131830364466,-0.0048773386515676975,0.0021080307196825743,0.005891073029488325,0.002932109637185931,0.02207390032708645,-0.007539230864495039,0.0310968104749918,0.005629247520118952,-0.000442669668700546,-0.0009113540290854871,-0.01297043077647686,-0.0006004362949170172,0.008539538830518723,0.02024783566594124,0.0052700769156217575,0.008103162981569767,0.041408706456422806,-0.0022792243398725986,-0.005934710614383221,-0.004058294929563999,0.015682674944400787,-0.02443704381585121,-0.029754115268588066,0.016273459419608116,0.03233208879828453,0.012070825323462486,-0.037541743367910385,0.003351701656356454,-0.015776662155985832,0.018368063494563103,-0.019495926797389984,0.013379952870309353,-0.01768328994512558,-0.02075806073844433,-0.007398247718811035,0.036736126989126205,-0.031580179929733276,0.012131246738135815,-0.009888947010040283,0.025000976398587227,0.0004753978573717177,-0.009271306917071342,-0.01329939067363739,0.013084559701383114,-0.009761390276253223,-0.0015642393846064806,-0.01012391783297062,-0.00869394838809967,0.009613693691790104,0.025417210534214973,0.007035720162093639,-0.004662507213652134,0.015830371528863907,0.024356482550501823,-0.029431868344545364,0.0027642727363854647,0.007720494642853737,0.002144954865798354,0.00755265774205327,0.0030177063308656216,-0.004739712458103895,-0.013171834871172905,0.0056158206425607204,-0.005968277808278799,0.03576938807964325,0.00684102950617671,0.0027441324200481176,-0.00048085255548357964,0.008123302832245827,-0.00898934155702591,-0.019321376457810402,0.004518167581409216,0.02927074395120144,-0.01706564985215664,-0.009231026284396648,-0.011762005276978016,-0.012634756974875927,-0.010546866804361343,0.01011720485985279,-0.038669608533382416,0.0026065062265843153,0.062462158501148224,-0.02681361325085163,0.017092503607273102,0.008740942925214767,-0.010956388898193836,-0.03818623721599579,0.00822400487959385,-0.009224312379956245,-0.021321991458535194,0.03327197581529617,-0.03260062634944916,-0.0008085539448074996,-0.014581664465367794,0.0008488348103128374,0.010573720559477806,0.0030697358306497335,-0.0013603175757452846,-0.0017320761689916253,0.013218829408288002,0.00034070879337377846,-0.013084559701383114,-0.026075132191181183,-0.0015600434271618724,-0.007290832232683897,0.00012231110304128379,0.026249682530760765,-0.014809922315180302,-0.0022305515594780445,0.0033013506326824427,0.01632716692984104,-0.013312818482518196,-0.007962179370224476,-0.04366443306207657,0.0008677164441905916,-0.028411420062184334,-0.006535566411912441,-0.012554195709526539,-0.005854148883372545,-0.009439144283533096,-0.015910932794213295,0.0035547842271625996,0.02867995947599411,0.015118742361664772,0.015951212495565414,0.017374468967318535,0.02560518868267536,0.016568852588534355,-0.00047497826744802296,-0.007216983940452337,-0.019240815192461014,-0.016528571024537086,-0.052929025143384933,-0.01534700021147728,-0.02104002609848976,0.028035465627908707,0.014554810710251331,-0.010614002123475075,-0.019012557342648506,-0.000716663314960897,-0.037058375775814056,0.013776048086583614,0.016394302248954773,0.006263670977205038,0.00012755599163938314,0.014608518220484257,0.027713218703866005,0.03211725875735283,-0.00924445316195488,0.016743402928113937,-0.03061343915760517,-0.008626813068985939,-0.010607288219034672,-0.008492544293403625,-0.007163276430219412,-0.010412597097456455,-0.029539283365011215,0.005152591038495302,0.003652129555121064,-0.0037528318352997303,-0.01840834505856037,0.013870036229491234,0.007740634959191084,-0.005729949567466974,-0.007968893274664879,-0.005525188520550728,0.0032023268286138773,0.010036642663180828,-0.00048588766367174685,-0.012547481805086136,-0.004635653458535671,0.02286609075963497,-0.008250858634710312,0.019173679873347282,0.007505663670599461,-0.019898734986782074,-0.006552350241690874,0.003297993913292885,0.0024957337882369757,-0.02046266756951809,-0.013554503209888935,0.0013292677467688918,0.010419311001896858,-0.007975606247782707,0.031150517985224724,0.03697781264781952,-0.030076362192630768,-0.012285656295716763,-0.007478809449821711,0.007841337472200394,-0.023765696212649345,0.00486726826056838,-0.021939631551504135,-0.01946907304227352,-0.01881115324795246,-0.029834676533937454,0.013856609351933002,-0.019133400171995163,-0.00853282492607832,-0.015481269918382168,-0.0028951854910701513,-0.02042238600552082,0.0031922566704452038,0.0036957671400159597,0.0029102908447384834,-0.01844862475991249,0.009298160672187805,-0.01006349641829729,0.008821504190564156,-0.028760520741343498,-0.007364680524915457,-0.018717164173722267,0.03214411064982414,-0.009116897359490395,-0.0007531678420491517,-0.00924445316195488,0.01013734471052885,0.008734229020774364,-0.02082519419491291,0.00827771332114935,0.20247836410999298,0.010170912370085716,0.023148056119680405,0.05096869170665741,-0.008358274586498737,0.002436990849673748,0.021174294874072075,-0.014917338266968727,-0.019536208361387253,0.02275867573916912,-0.01717306487262249,0.0016607454745098948,0.0034842928871512413,-0.009083329699933529,0.022114181891083717,-0.010479732416570187,-0.03222467377781868,-0.03292287513613701,-0.024705583229660988,0.005209655500948429,0.02118772268295288,-0.007304259110242128,-0.03303029015660286,-0.010513299144804478,0.021617384627461433,0.010244760662317276,-0.007780916057527065,0.04334218427538872,0.03383590653538704,0.01687767170369625,0.001772357034496963,-0.011735151521861553,0.007989033125340939,0.00957341305911541,0.004363758023828268,0.00604548305273056,0.03837421536445618,-0.02458474040031433,-0.011533747427165508,-0.004467816557735205,0.010426024906337261,0.008136729709804058,0.004568518605083227,-0.03458781540393829,0.015790089964866638,0.005525188520550728,-0.01550812367349863,-0.0042932662181556225,0.015427562408149242,0.01540070865303278,-0.022557271644473076,0.03039860911667347,0.021577104926109314,0.022852664813399315,0.008613386191427708,-0.004333547316491604,0.0030529520008713007,-0.02144283428788185,0.023430023342370987,0.011715011671185493,0.0014551454223692417,0.020033005625009537,-0.009996362030506134,0.03018377721309662,-0.010983242653310299,-0.009640548378229141,-0.0025662253610789776,0.03536657989025116,0.007881618104875088,-0.0011521999258548021,-0.022879518568515778,0.02063721790909767,-0.015132169239223003,0.010842259973287582,0.004125429317355156,-0.03058658540248871,0.018878288567066193,0.009976222179830074,0.030076362192630768,0.0352323092520237,-0.022423001006245613,0.023295752704143524,-0.01600492186844349,-0.01540070865303278,-0.020368678495287895,-0.022060474380850792,0.015279865823686123,-0.025766311213374138,-0.007049147039651871,-0.005572183057665825,-0.00411871587857604,-0.01534700021147728,0.00909675657749176,-0.011285348795354366,0.008492544293403625,0.019563062116503716,-0.020999744534492493,0.0007766649941913784,-0.0029841389041393995,0.0011379338102415204,-0.02927074395120144,0.06546979397535324,0.02337631583213806,0.01626003347337246,-0.010647568851709366,-0.00540770310908556,-0.01399087905883789,0.019093118607997894,0.015373854897916317,-0.011231641285121441,0.0034339416306465864,0.002727348590269685,0.006535566411912441,-0.016031775623559952,-0.007928612641990185,0.012299083173274994,0.023738842457532883,-0.01160088274627924,-0.00046155130257830024,-0.017763851210474968,0.006361016072332859,-0.011654590256512165,-0.0021214575972408056,0.006387870293110609,-0.01366191916167736,-0.0048974789679050446,-0.045141395181417465,0.001513049122877419,-0.014501103200018406,-0.010929535143077374,0.019630197435617447,-0.025954289361834526,0.020086713135242462,-0.003259391523897648,-0.0016506753163412213,0.004800133407115936,0.016823964193463326,-0.017334189265966415,-0.015696100890636444,-0.0011320594931021333,-0.0013108056737110019,0.015910932794213295,0.0035245735198259354,-0.002081176731735468,0.03638702630996704,-0.009566700085997581,0.0020022934768348932,0.01903941109776497,-0.003866960760205984,0.0029606418684124947,-0.02224845066666603,-0.0267464779317379,-0.017696715891361237,-0.005253293085843325,0.005397632718086243,-0.0018227080581709743,-0.03294972702860832,-0.013749193400144577,0.019240815192461014,0.005864219274371862,-0.01921396143734455,-0.0005270076799206436,0.031472764909267426,-0.007263978477567434,-0.006894737482070923,-0.02608855813741684,-0.16950178146362305,0.020395532250404358,0.012782453559339046,-0.02192620374262333,0.03499062359333038,0.008740942925214767,0.03160703182220459,-0.014111721888184547,0.0003950459649786353,-0.009620407596230507,-0.006800748873502016,0.01470250729471445,-0.03423871472477913,-0.0011177933774888515,0.01658228039741516,0.008680521510541439,-0.005756803788244724,0.009358582086861134,0.05166689306497574,0.03303029015660286,0.03203669562935829,-0.023805977776646614,0.0042932662181556225,-0.014353406615555286,0.015843797475099564,0.00458530243486166,0.006179752293974161,-0.018354637548327446,-0.024974120780825615,-0.04476544260978699,-0.009445857256650925,0.010553580708801746,-0.011083944700658321,-0.007794342935085297,0.04062994197010994,0.000985202263109386,-0.006253600586205721,0.023846257477998734,-0.008794650435447693,0.02129513770341873,0.014581664465367794,0.023577719926834106,0.0013460514601320028,-0.008358274586498737,0.01870373822748661,0.015239585191011429,-0.00924445316195488,-0.04315420985221863,0.011788859963417053,0.005357352085411549,0.028653105720877647,-0.020153848454356194,-0.013453801162540913,-0.008304567076265812,0.02148311585187912,-0.004222774878144264,0.01621975190937519,0.026518220081925392,-0.025403784587979317,-0.019012557342648506,0.02835771255195141,-0.02649136632680893,-0.0064617181196808815,0.012030544690787792,-0.007653359789401293,-0.016998514533042908,-0.021429408341646194,0.002955606672912836,-0.0022993646562099457,0.02320176549255848,0.0005458893137983978,-0.018663456663489342,-0.0002937144599854946,-0.02239614725112915,0.02604827657341957,-0.00782119669020176,0.008653667755424976,0.03893814608454704,0.020664071664214134,-0.000922263425309211,0.012782453559339046,0.00893563311547041,0.007398247718811035,0.0038401067722588778,-0.004158996976912022,0.0038636040408164263,-0.02243642881512642,0.026759905740618706,-0.014890484511852264,0.006525496486574411,0.01021119300276041,-0.027713218703866005,-0.03477579355239868,-0.0006612771539948881,-0.017656436190009117,0.01812637783586979,0.04831015691161156,-0.015736382454633713,0.006307308562099934,-0.02126828394830227,0.02867995947599411,-0.002020755549892783,0.0026350384578108788,0.005501691717654467,0.03171445056796074,0.01194998249411583,0.0066899764351546764,0.004645723849534988,0.014339979737997055,-0.007512377109378576,-0.04049567133188248,0.02598114311695099,0.01068784948438406,0.01423256378620863,-0.023430023342370987,0.02681361325085163,0.0025141958612948656,-0.026625636965036392,-0.03504433110356331,0.0034507254604250193,0.023362888023257256,-0.004296623170375824,-0.012587763369083405,-0.021939631551504135,-0.004400681704282761,-0.017924973741173744,-0.12707263231277466,-0.02583344653248787,0.0027508458588272333,0.028116026893258095,-0.019388511776924133,0.0267464779317379,0.000496377469971776,0.028116026893258095,-0.0056359609588980675,0.03649444133043289,0.002530979458242655,0.004722928628325462,0.008955773897469044,0.009747963398694992,-0.011869421228766441,0.003631989238783717,-0.00245209620334208,-0.028438273817300797,-0.03214411064982414,0.020073285326361656,0.026759905740618706,-0.020999744534492493,-0.015145596116781235,-0.00942571647465229,-0.029754115268588066,-0.00415564002469182,-0.0022859377786517143,0.005844078958034515,0.008358274586498737,0.012910009361803532,0.010728131048381329,-0.007237124722450972,0.0013754229294136167,-0.006058909930288792,0.03832050785422325,-0.01834120973944664,-0.0203821063041687,-0.013561216183006763,0.017199918627738953,0.00012556293222587556,-0.025927435606718063,-0.008049454540014267,0.026733051985502243,-0.014313125982880592,0.0053472816944122314,0.0029807821847498417,-0.013346385210752487,-0.0036823402624577284,-0.0007061734795570374,-0.0135343624278903,-0.031150517985224724,-0.003913955297321081,-0.04030769690871239,0.0019838314037770033,0.021026598289608955,-0.011433045379817486,0.01574980840086937,0.012245375663042068,-0.020852049812674522,0.02301378734409809,0.003960949368774891,-0.013648491352796555,0.006397940218448639,0.030371753498911858,0.018770871683955193,0.013379952870309353,-0.01800553686916828,0.016246605664491653,-0.00900948140770197,0.011520320549607277,-0.006334162317216396,0.025444064289331436,-0.0354471392929554,-0.004054937977343798,-0.017361043021082878,-0.005783657543361187,0.0006579204346053302,-0.011171219870448112,-0.010385743342339993,-0.002205376047641039,-0.03960949555039406,-0.026880748569965363,0.010130631737411022,-0.00696187186986208,0.0023581075947731733,0.019079692661762238,0.02670619823038578,-0.01357464399188757,-0.002688746200874448,-0.036225903779268265,-0.0004292427038308233,0.0038233231753110886,-0.01721334643661976,-0.0074116745963692665,0.0022322300355881453,-0.009190745651721954,-0.009278020821511745,-0.00891549326479435,-0.012869728729128838,0.03246635943651199,-0.020999744534492493,-0.012359504587948322,-0.048981502652168274,0.015910932794213295,-0.008519398048520088,-0.036521296948194504,0.006451648194342852,-0.0032442861702293158,0.012977144680917263,-0.045463643968105316,-0.019898734986782074,0.005568826105445623,-0.017146211117506027,0.015615539625287056,-0.033997029066085815,-0.007801056373864412,-0.010842259973287582,-0.03928724676370621,0.01564239338040352,-0.011808999814093113,0.040173426270484924,0.018542613834142685,-0.009365295991301537,-0.02407451532781124,0.015266438946127892,0.016971660777926445,-0.03595736622810364,-0.0026350384578108788,-0.02057008258998394,0.029915237799286842,-0.003746118163689971,-0.02488013356924057,0.01059386134147644,-0.009774817153811455,-0.006706760264933109,-0.012540768831968307,-0.006005201954394579,-0.0015256368787959218,0.022114181891083717,0.027820633724331856,-0.002024112269282341,0.04519510269165039,-0.014487676322460175,0.008465690538287163,0.018394917249679565,-0.009123610332608223,-0.006602701265364885,-0.022476710379123688,-0.00247055827639997,0.01170829776674509,0.041005898267030716,-0.007163276430219412,0.023805977776646614,-0.009801671840250492,-0.00894905999302864,-0.03200984373688698,0.01241992600262165,-0.02827715128660202,-0.0019418721785768867,0.0061159743927419186,-0.013218829408288002,0.008640240877866745,0.04395982623100281,0.0018210296984761953,0.019751038402318954,-0.022664686664938927,0.03762230649590492,0.0068343160673975945,-0.05080756917595863,0.010627429001033306,0.023483730852603912,-0.035527702420949936,-0.02598114311695099,-0.005639317911118269,0.022785529494285583,-0.017777277156710625,0.023483730852603912,-0.016595706343650818,-0.015481269918382168,0.011036950163543224,0.008083022199571133,0.02046266756951809,-0.005790370982140303,0.010076924227178097,-0.008244145661592484,0.014568237587809563,-0.003850177163258195,-0.005740019958466291,0.01274888589978218,-0.00767350010573864,-0.001298217917792499,-0.005219725891947746,-0.010654282756149769,0.006696689873933792,-0.00580044137313962,0.020959464833140373,0.009600266814231873,0.01178214605897665,0.003917311783879995,0.02082519419491291,0.0004879856132902205,-0.023524010553956032,0.011520320549607277,-0.01218495424836874,-0.006270384415984154,-0.020368678495287895,-0.0011379338102415204,0.009915800765156746,-0.024504179134964943,-0.025564907118678093,-0.0009163891663774848,0.01052001304924488,-0.010130631737411022,0.007720494642853737,0.005484907887876034,0.013003998436033726,-0.023174909874796867,0.017669862136244774,0.009291447699069977,-0.004239558707922697,-0.019965870305895805,0.012393072247505188,-0.0004766566271428019,0.030371753498911858,0.009150464087724686,-0.010459591634571552,-0.000742678006645292,0.005266719963401556,0.00580044137313962,-0.020180702209472656,0.0129502909258008,0.0007472935249097645,0.024719009175896645,-0.013151695020496845,-0.025484345853328705,-0.030532877892255783,-0.007163276430219412,-0.013843182474374771,-0.013326245360076427,-0.00032854059827513993,-0.014286271296441555,0.07379449903964996,0.01918710768222809,-0.010278328321874142,0.0033584150951355696,0.0037897557485848665,0.025632042437791824,-0.0008601638255640864,0.006908164359629154,-0.001993901561945677,-0.03499062359333038,0.004068364854902029,-0.004424178972840309,-0.014903911389410496,-0.0267464779317379,-0.007478809449821711,-0.009237739257514477,-0.026545073837041855,0.005209655500948429,-0.005743376445025206,-0.015910932794213295,0.016501717269420624,0.010674422606825829,-0.004689361434429884,0.002883436856791377,-0.021335419267416,0.0013418555026873946,0.0290827676653862,-0.0015508123906329274,-0.029217036440968513,-0.022973505780100822,0.009036335162818432,0.018059244379401207,-0.01350079569965601,-0.022114181891083717,-0.012842874974012375,0.0032023268286138773,0.0038031828589737415,-0.02612883970141411,0.023846257477998734,0.029539283365011215,-0.011110798455774784,-0.030452316626906395,-0.020999744534492493,-0.029834676533937454,-0.015199304558336735,0.018139805644750595,-0.025699175894260406,-0.006982012651860714,-0.02645108662545681],"e_chunks":[[0.013117803260684013,-0.003913636319339275,-0.0001717938866931945,-0.027809200808405876,0.008369890972971916,0.012887191027402878,-0.013565463945269585,-0.009590783156454563,0.0020534719806164503,-0.044603243470191956,0.028948700055480003,-0.0036592839751392603,-0.022505104541778564,0.009448345750570297,-0.013456939719617367,0.011503512971103191,0.019480006769299507,-0.009448345750570297,-0.000984343932941556,0.012961801141500473,-0.025503072887659073,0.026873184368014336,0.022789979353547096,-0.0016498995246365666,-0.020809421315789223,-0.0016651606420055032,0.006172285880893469,-0.011306813918054104,0.006026457529515028,0.014433653093874454,0.01740448921918869,-0.008295280858874321,-0.019168000668287277,0.007623790763318539,-0.014718527905642986,0.00978748220950365,0.014827052131295204,-0.006562293041497469,-0.014799920842051506,-0.0036389357410371304,0.025815077126026154,0.011754474602639675,-0.0017431620508432388,0.008356325328350067,-0.01865251362323761,0.04061499983072281,0.006701339036226273,-0.02254580147564411,-0.016495604068040848,-0.009082078002393246,-0.0032336674630641937,0.016061509028077126,-0.021107861772179604,0.0011844345135614276,-0.014664266258478165,-0.004561387002468109,-0.009699306450784206,0.009699306450784206,0.0078408382833004,-0.006911603733897209,0.012914321385324001,0.007942578755319118,0.013633291237056255,-0.019357917830348015,0.0019008605740964413,-0.005928107537329197,-0.024187222123146057,0.005344792734831572,-0.005222703795880079,-0.0203753262758255,0.014582873322069645,0.0533394031226635,-0.0038458090275526047,0.004151031840592623,0.030468031764030457,-0.008464849554002285,-0.036626752465963364,-0.017350228503346443,-0.0141216479241848,0.022165967151522636,-0.004524082411080599,-0.013111020438373089,0.013267023488879204,0.025787947699427605,-0.0044935597106814384,-0.007135434076189995,0.01691613346338272,0.017974238842725754,-0.03871583566069603,-0.023915912955999374,-0.010282621718943119,-0.014922009781002998,0.01631925255060196,0.0203753262758255,-0.010343666188418865,-0.0019517311593517661,0.007135434076189995,-0.0033761048689484596,-0.0028843567706644535,-0.014732093550264835,0.0004239207482896745,0.02570655383169651,-0.003564325626939535,-0.0057924529537558556,-0.01867964304983616,-0.0006481748423539102,0.015315408818423748,-0.023603906854987144,0.03703371807932854,-0.006033239886164665,-0.003438845044001937,0.027090230956673622,-0.005663581192493439,-0.019941231235861778,0.00877685472369194,-0.02003619074821472,0.00725074065849185,-0.023020591586828232,0.01425730250775814,-0.00868867989629507,0.012670143507421017,0.014297998510301113,0.030929258093237877,-0.0020026015117764473,-0.008892161771655083,0.023237640038132668,-0.027225885540246964,-0.014732093550264835,0.004703824408352375,-0.046339623630046844,0.04330096021294594,0.0013955470640212297,-0.014596438966691494,0.004863218870013952,-0.00311496970243752,0.0074067432433366776,-0.006094284821301699,0.0075491806492209435,-0.009109209291636944,0.0032421457581222057,0.017811454832553864,0.0243228767067194,0.01566811092197895,-0.0036694579757750034,-0.020931510254740715,0.011781604960560799,0.018842428922653198,0.010920198634266853,0.0076644872315227985,0.0036287615075707436,0.0242957454174757,0.0016965308459475636,0.001372655387967825,-0.0005379554349929094,-0.0026283087208867073,0.013931731693446636,-0.01404025498777628,0.03307260200381279,0.00276565901003778,0.002317998558282852,0.014718527905642986,0.01617003232240677,0.0006240113289095461,0.0027639633044600487,0.02867739088833332,0.029816890135407448,0.01756727509200573,-0.0006494465633295476,0.008641200140118599,-0.004642779938876629,0.011089766398072243,0.040832046419382095,-0.04058786854147911,0.02462131716310978,-0.0027080057188868523,0.025815077126026154,0.008749724365770817,0.03657248988747597,-0.009373735636472702,-0.020158279687166214,0.0026876574847847223,-0.001030975254252553,0.011028721928596497,0.027307279407978058,-0.01692969910800457,0.009509390220046043,0.010194445960223675,0.016889002174139023,0.011320379562675953,-0.011937608011066914,0.0062706358730793,0.017323097214102745,-0.0019330786308273673,-0.015057665295898914,-0.6142442226409912,0.019235827028751373,0.0006803927826695144,-0.02649335004389286,0.026113517582416534,0.004089987371116877,0.015573152340948582,0.011442468501627445,0.0056737554259598255,0.02837895043194294,0.005042961332947016,0.004544430412352085,0.0282161645591259,-0.005585579667240381,-0.006450377870351076,-0.022383015602827072,0.012202134355902672,-0.039882462471723557,-0.016414212062954903,-0.0016075074672698975,-0.026927445083856583,0.015003402717411518,0.0032913207542151213,-0.014203040860593319,0.008831117302179337,-0.013307720422744751,0.005900976713746786,-0.01617003232240677,-0.019059477373957634,0.039719678461551666,-0.042568426579236984,0.013538332656025887,0.0009173644939437509,0.015912288799881935,0.0517115481197834,-0.01694326475262642,-0.0067420355044305325,0.015003402717411518,0.013002497144043446,0.03977394104003906,-0.015885157510638237,-0.002797876950353384,-0.004673302173614502,-0.0031522747594863176,-0.017323097214102745,-0.01199865248054266,0.018123459070920944,-0.018123459070920944,-0.017933543771505356,0.009590783156454563,0.012487009167671204,-0.011876563541591167,0.0030573164112865925,-0.012649795040488243,-0.020592374727129936,0.00043833404197357595,0.029355663806200027,-0.018421899527311325,0.0014684614725410938,-0.006379159167408943,-0.001695682993158698,0.010954111814498901,-0.048510096967220306,-0.022193098440766335,-0.020483849570155144,0.02177256904542446,-0.025828642770648003,-0.03073934093117714,-0.012439530342817307,-0.003092925762757659,0.026913879439234734,-0.0030844472348690033,-0.00893964059650898,-0.015478194691240788,-0.0004090835282113403,0.0454714335501194,0.020755160599946976,0.009360169991850853,0.01309067290276289,0.0105810621753335,0.0025469157844781876,0.004286686424165964,-0.008417370729148388,-0.01206647977232933,0.024336442351341248,-0.00006947001384105533,0.006362202577292919,-0.019493572413921356,-0.007461004890501499,-0.015152622945606709,0.019507136195898056,0.02681892178952694,-0.022844241932034492,-0.01988697052001953,0.003215014934539795,0.033913660794496536,-0.0016168337315320969,0.005568623077124357,0.009902788326144218,-0.02104003354907036,-0.02835181914269924,-0.013775728642940521,-0.0047648693434894085,0.026927445083856583,0.02162334881722927,0.015125492587685585,-0.025326721370220184,0.008634417317807674,0.040370821952819824,-0.0234953835606575,-0.01629212126135826,0.0015023751184344292,0.007583094295114279,-0.0035304119810462,0.02696814201772213,-0.028894437476992607,-0.00673864409327507,-0.008118930272758007,0.025747250765562057,-0.03798329830169678,0.009434780105948448,-0.007847621105611324,-0.008410587906837463,-0.012914321385324001,0.001805902342312038,0.008105364628136158,0.0010386058129370213,-0.01326024066656828,-0.0051107886247336864,-0.0005218464648351073,-0.015546021983027458,-0.0013997863279655576,0.015030534006655216,-0.013131368905305862,0.015152622945606709,0.031878840178251266,0.02603212557733059,-0.003379496280103922,-0.002141647506505251,-0.02148769423365593,-0.0038220693822950125,0.010302970185875893,0.006660642568022013,0.0029369229450821877,0.0020958641543984413,-0.019547833129763603,-0.03616552799940109,-0.005087048746645451,0.012744753621518612,-0.01252770610153675,-0.0021280820947140455,-0.00995026808232069,0.018082763999700546,0.013999558985233307,-0.008132495917379856,-0.01756727509200573,-0.018693208694458008,-0.012168221175670624,0.0014082647394388914,-0.021094296127557755,-0.007603442296385765,0.008885378949344158,-0.02886730618774891,-0.020280368626117706,-0.01153064426034689,-0.0043206000700592995,-0.002847051713615656,0.019561398774385452,0.004788608755916357,-0.020022625103592873,0.02287137135863304,-0.012744753621518612,-0.005148093681782484,0.005826366599649191,0.011503512971103191,-0.006314723286777735,-0.0328826829791069,0.008302063681185246,-0.0067556011490523815,-0.005534709431231022,0.02162334881722927,0.010804891586303711,0.016590561717748642,-0.0029589668847620487,0.009563651867210865,0.006914995145052671,0.019981928169727325,0.02666970156133175,-0.01536967046558857,-0.0021179080940783024,0.0035168465692549944,0.01739092543721199,-0.002085690153762698,0.009821395389735699,-0.013450157828629017,0.027863463386893272,-0.02463488280773163,0.0422971174120903,-0.006263853050768375,-0.0007766227936372161,0.012093611061573029,0.019968362525105476,0.011381424032151699,-0.009333038702607155,0.006514814216643572,-0.008932857774198055,0.02600499428808689,-0.016183597967028618,0.004456254653632641,0.014664266258478165,0.015722373500466347,-0.016387080773711205,-0.002195909386500716,-0.014691397547721863,0.024485662579536438,0.001586311380378902,-0.020578809082508087,0.01435226108878851,-0.00947547610849142,-0.00663012033328414,0.01851685903966427,0.007074389606714249,0.010194445960223675,-0.02493332326412201,-0.013314502313733101,0.040832046419382095,0.0028419645968824625,0.009712872095406055,-0.016807610169053078,-0.021094296127557755,0.0031285351142287254,0.017906412482261658,-0.017336662858724594,-0.021080730482935905,0.02681892178952694,0.04441332817077637,-0.008003623224794865,-0.022464407607913017,0.03209588676691055,-0.03540585935115814,-0.022450841963291168,0.002507915021851659,0.015057665295898914,-0.026913879439234734,0.03982820361852646,0.04479316249489784,0.025286024436354637,0.011340728029608727,-0.02521819807589054,-0.003554151626303792,-0.027714243158698082,0.012222482822835445,-0.01615646667778492,0.0018398159882053733,0.02118925377726555,-0.008200323209166527,0.024811232462525368,0.021121427416801453,0.013748597353696823,0.028623128309845924,-0.004018768668174744,-0.013816424645483494,-0.013361982069909573,-0.006056979764252901,0.004775043111294508,0.005439750850200653,-0.017811454832553864,0.0021755611523985863,-0.020605940371751785,-0.016997525468468666,-0.0005180311272852123,0.00023336836602538824,0.009590783156454563,-0.0004334589757490903,0.003683023387566209,0.0059484560042619705,-0.014094516634941101,0.02789059281349182,0.01569524221122265,0.0172417052090168,-0.003340495517477393,-0.02021254040300846,0.014080951921641827,-0.0022942591458559036,0.007854403927922249,0.0007973948959261179,-0.03822747617959976,0.0024417834356427193,-0.0010750630171969533,0.006769166328012943,-0.03263850510120392,0.00845806673169136,-0.003050533588975668,0.020334631204605103,0.00012272506137378514,0.026995273306965828,0.017648668959736824,-0.024580620229244232,-0.01119829062372446,0.0011751082492992282,0.01973775029182434,0.016739781945943832,-0.017797889187932014,-0.014989838004112244,0.037684857845306396,-0.0023824346717447042,-0.03649109601974487,-0.01663125865161419,0.020510980859398842,-0.03646396845579147,0.007691618055105209,-0.007623790763318539,0.004208685364574194,-0.025611596181988716,0.036301180720329285,-0.007223609369248152,-0.014610004611313343,-0.009183819405734539,0.012704056687653065,0.026683267205953598,-0.011713777668774128,-0.02745649963617325,0.00412050960585475,0.028568867594003677,0.06402898579835892,-0.009434780105948448,-0.01675334759056568,0.025353852659463882,-0.028297558426856995,0.0032217977568507195,-0.04888993129134178,-0.019100172445178032,0.011347510851919651,0.012988931499421597,0.0013853729469701648,-0.0021246906835585833,-0.010140184313058853,-0.018747471272945404,0.015234015882015228,0.004395210184156895,0.0004552908940240741,-0.02992541342973709,-0.009502607397735119,-0.012181786820292473,0.0077526625245809555,0.03228580579161644,-0.0023960000835359097,0.006233330816030502,0.01942574419081211,0.01161203719675541,0.018584685400128365,0.02036176063120365,0.0051277452148497105,-0.011727343313395977,0.0035948478616774082,0.025462375953793526,0.0031488833483308554,0.017906412482261658,-0.006731861270964146,0.031716056168079376,0.0027503978926688433,0.0025960905477404594,-0.006986213847994804,-0.013565463945269585,0.04498307779431343,-0.0013913079164922237,0.004056073725223541,-0.0047106072306632996,0.013714684173464775,-0.014474350027740002,-0.002979314886033535,0.02181326597929001,-0.0258557740598917,-0.002451957669109106,-0.004137466661632061,0.008959989063441753,-0.013891034759581089,0.0008270693942904472,0.006586032919585705,0.005253226030617952,-0.00931947398930788,0.0016677042003720999,0.0031098825857043266,-0.04718068242073059,-0.01663125865161419,-0.021433433517813683,-0.02789059281349182,-0.017648668959736824,0.013056758791208267,-0.056052494794130325,-0.012832928448915482,-0.012758318334817886,-0.015057665295898914,0.005144702270627022,0.02634413167834282,-0.03404931351542473,-0.040045250207185745,-0.006168894469738007,0.0068437764421105385,0.01975131593644619,0.0071015204302966595,0.013443375006318092,0.0006002718000672758,0.006385941989719868,-0.005429577082395554,-0.031878840178251266,0.017445186153054237,-0.03624691814184189,0.002033123979344964,0.01558671798557043,-0.003808503970503807,0.013036410324275494,-0.005436359439045191,0.031064912676811218,-0.012887191027402878,0.014935575425624847,0.020185410976409912,-0.016264991834759712,0.03198736533522606,0.01417590957134962,0.012324224226176739,-0.00971965491771698,0.024377139285206795,-0.024227919057011604,0.001449808944016695,-0.010316534899175167,-0.005683929193764925,-0.03649109601974487,0.001045388518832624,0.003849200438708067,0.019981928169727325,-0.01847616210579872,-0.002897922182455659,-0.003784764325246215,0.0033557566348463297,-0.014433653093874454,0.006623337510973215,0.013463722541928291,-0.016902567818760872,0.01896451786160469,0.00002454766035953071,0.021094296127557755,0.023454686626791954,-0.009434780105948448,0.006487682927399874,-0.03353382647037506,0.032692767679691315,0.005544883199036121,-0.0098010478541255,0.010194445960223675,0.0009733220213092864,-0.013497636653482914,-0.033940792083740234,0.0019517311593517661,-0.006691165268421173,0.0010547147830948234,-0.00782727263867855,-0.018259113654494286,0.00792223121970892,-0.017770757898688316,-0.006680991034954786,0.005924716126173735,-0.04753338545560837,-0.015790199860930443,-0.004646171350032091,0.006830211263149977,0.030630817636847496,-0.0046800849959254265,-0.013972427695989609,-0.032068755477666855,-0.008051102980971336,0.015912288799881935,0.007732314523309469,-0.005215920973569155,-0.00971965491771698,0.008363108150660992,-0.04245990142226219,-0.027809200808405876,-0.011021939106285572,-0.025747250765562057,0.00003465552072157152,-0.008464849554002285,0.028595997020602226,0.021379170939326286,0.014433653093874454,-0.00029738040757365525,0.02666970156133175,-0.0013836773578077555,-0.015749502927064896,-0.012914321385324001,-0.009299125522375107,-0.03038663975894451,-0.01743162050843239,0.0009258429054170847,-0.01317206583917141,0.02808050997555256,-0.0030556207057088614,0.0011971521889790893,-0.0068742986768484116,0.003379496280103922,-0.012086828239262104,-0.007596659939736128,-0.01752658002078533,-0.047560516744852066,-0.02635769546031952,0.013511202298104763,-0.009821395389735699,0.020890815183520317,-0.023468252271413803,-0.0014659179141744971,0.029057223349809647,0.005636450368911028,0.029247140511870384,-0.015179754234850407,0.016264991834759712,0.00761022511869669,0.026561178267002106,0.021582653746008873,0.01663125865161419,-0.022355884313583374,0.010214794427156448,-0.029545580968260765,0.009095643647015095,0.017621537670493126,0.025611596181988716,0.01992766559123993,0.020009059458971024,-0.011700212955474854,-0.016346383839845657,-0.0027944855391979218,-0.019642790779471397,-0.010642106644809246,0.010357231833040714,-0.011096549220383167,-0.013999558985233307,-0.03977394104003906,0.0077526625245809555,0.00822745356708765,-0.02680535614490509,0.009624696336686611,0.00931947398930788,0.016875436529517174,-0.0022399972658604383,-0.0009733220213092864,0.029518449679017067,-0.009862092323601246,0.03562290966510773,0.007243957836180925,0.013341633602976799,-0.00036881104460917413,0.006006109062582254,0.0025893079582601786,0.012507357634603977,0.01633281819522381,0.005992543883621693,0.004164597485214472,0.041645973920822144,0.005907759536057711,-0.01543749775737524,-0.005738191306591034,0.007515267003327608,-0.002011080039665103,-0.022193098440766335,0.02962697297334671,0.015763068571686745,0.008580155670642853,-0.02619491145014763,0.0056601897813379765,-0.008607286959886551,0.01847616210579872,-0.017472317442297935,0.008417370729148388,-0.02367173507809639,-0.017594406381249428,0.0006358810933306813,0.024241484701633453,-0.022667890414595604,0.011103332042694092,0.0017151833744719625,0.02179970033466816,-0.007386395242065191,-0.011238986626267433,-0.005548274610191584,0.006813254207372665,-0.0009071903768926859,0.0036185875069350004,-0.011286466382443905,0.0004446928505785763,0.009394084103405476,0.024553488940000534,0.0141216479241848,-0.0021670828573405743,-0.0012107176007702947,0.0289758313447237,-0.01551889069378376,-0.003666066564619541,0.00559914531186223,-0.0010589540470391512,0.022179532796144485,-0.005066700745373964,0.00630794046446681,-0.00663012033328414,0.0013938513584434986,-0.01926295831799507,0.03234006464481354,-0.003767807502299547,-0.006385941989719868,-0.011673081666231155,0.0020687333308160305,-0.008491979911923409,-0.01661769300699234,0.022518670186400414,0.03147187456488609,-0.029355663806200027,-0.0007448287215083838,-0.002358695026487112,-0.02494688890874386,-0.009889223612844944,0.015057665295898914,-0.03117343597114086,-0.0011903694830834866,0.046990767121315,-0.043490875512361526,0.00771874887868762,0.016414212062954903,-0.012914321385324001,-0.029247140511870384,0.010133401490747929,-0.011944390833377838,-0.012887191027402878,0.02680535614490509,-0.02085011824965477,-0.012317441403865814,-0.01144925132393837,0.00044723637984134257,0.011082983575761318,-0.002316302852705121,0.00505991792306304,-0.017594406381249428,0.009929919615387917,0.0009368648752570152,-0.011652733199298382,-0.013300937600433826,-0.009434780105948448,-0.011266117915511131,0.0051006143912673,0.02369886450469494,-0.0005413467879407108,0.0072032613679766655,-0.007447439711540937,0.020497415214776993,-0.008675114251673222,-0.010343666188418865,-0.048211660236120224,0.006372376810759306,-0.0211349930614233,0.003145491937175393,-0.01756727509200573,-0.007223609369248152,-0.019045911729335785,-0.03304547071456909,-0.008919292129576206,0.0258829053491354,0.018245548009872437,0.023549646139144897,0.020728029310703278,0.022193098440766335,0.02007688581943512,-0.0057924529537558556,-0.01976488158106804,-0.031010650098323822,-0.0065826415084302425,-0.06408324837684631,-0.007237175013870001,-0.006677599623799324,0.0439249724149704,0.010370797477662563,-0.020009059458971024,-0.02337329462170601,-0.011388206854462624,-0.03657248988747597,0.00455121323466301,0.014881313778460026,0.005802627187222242,0.007711966056376696,0.008566590026021004,0.02070089802145958,0.02652048133313656,-0.003798329969868064,0.02224736101925373,-0.033126864582300186,-0.007271088659763336,-0.00690142996609211,-0.012215700000524521,0.004530864767730236,-0.023603906854987144,-0.033018339425325394,0.003564325626939535,-0.0032726682256907225,-0.005938281770795584,-0.005382097791880369,0.01378929428756237,0.0009546694927848876,-0.006155329290777445,-0.009414431639015675,-0.01835407316684723,0.007508484181016684,0.028324687853455544,0.009841743856668472,-0.02399730496108532,-0.012995714321732521,0.02319694310426712,-0.008654765784740448,0.015790199860930443,0.006518205162137747,-0.013368764892220497,-0.022939199581742287,-0.005378706380724907,0.005083657801151276,-0.019086606800556183,-0.024702709168195724,0.011245769448578358,0.01513905730098486,-0.009814613498747349,0.034890372306108475,0.043518006801605225,-0.027714243158698082,-0.010954111814498901,-0.00978748220950365,0.009604348801076412,-0.0156545452773571,-0.0009343213168904185,-0.01899164915084839,-0.045362912118434906,-0.00031772861257195473,-0.023902347311377525,0.015871591866016388,-0.01600724644958973,-0.01660412736237049,-0.016644824296236038,-0.0073931775987148285,-0.014284433797001839,0.006491074338555336,0.0035032809246331453,0.013049975968897343,-0.004171380307525396,0.021080730482935905,-0.011740908958017826,0.000022573780370294116,-0.02365816943347454,-0.007427091244608164,-0.025150369852781296,0.016414212062954903,-0.01418947521597147,-0.011496731080114841,-0.0040289429016411304,0.020185410976409912,0.03635544329881668,-0.0038831140846014023,0.00917025376111269,0.22638046741485596,0.0007388938684016466,0.021365605294704437,0.03806469216942787,0.0019568181596696377,0.003277755109593272,0.03277416154742241,0.008661548607051373,-0.02021254040300846,0.019520701840519905,-0.016821175813674927,-0.008932857774198055,0.007976492866873741,-0.004452863708138466,0.02398373931646347,-0.013653639703989029,-0.03697945550084114,-0.029572710394859314,-0.022003183141350746,0.015763068571686745,0.03247572109103203,-0.012968583032488823,-0.028297558426856995,-0.002735136542469263,0.012364920228719711,0.01332806795835495,-0.01364007405936718,0.03117343597114086,0.032231543213129044,0.013314502313733101,-0.01182908471673727,0.013348416425287724,0.004513908177614212,-0.005951847415417433,0.010553930886089802,0.0030539250001311302,0.03415783867239952,-0.025001149624586105,-0.016183597967028618,0.019602095708251,0.015912288799881935,0.0028012683615088463,0.014325129799544811,-0.026235606521368027,0.016739781945943832,0.002112820977345109,-0.012995714321732521,-0.0056737554259598255,0.025665856897830963,0.022640759125351906,-0.02163691446185112,0.030983518809080124,0.010723499581217766,0.024404268711805344,0.01011983584612608,-0.014786355197429657,-0.014216606505215168,-0.019208697602152824,0.01239205151796341,0.01535610482096672,0.0036423271521925926,0.01551889069378376,-0.00947547610849142,0.020822986960411072,-0.023481817916035652,-0.006168894469738007,-0.014542177319526672,0.041917283087968826,-0.006012891884893179,0.00908886082470417,-0.02666970156133175,0.020633069798350334,-0.016739781945943832,0.0036423271521925926,-0.0008563199080526829,-0.03513455018401146,0.020253237336874008,0.029681235551834106,0.03904140368103981,0.03594847768545151,-0.012113959528505802,0.02380738966166973,-0.01945287548005581,-0.019846273586153984,-0.01992766559123993,-0.01694326475262642,0.024024436250329018,-0.007135434076189995,-0.011957956477999687,-0.0164549071341753,-0.010085922665894032,-0.010160532779991627,0.008953206241130829,-0.01302284561097622,0.006664033979177475,-0.0007863729842938483,-0.015423932112753391,0.0047648693434894085,-0.007962927222251892,0.005076874978840351,-0.007074389606714249,0.06359489262104034,0.029735496267676353,0.02036176063120365,-0.020646635442972183,0.0019042519852519035,-0.008030754514038563,0.014148779213428497,0.0015125492354854941,-0.005514360964298248,-0.003482932923361659,-0.0022942591458559036,-0.006267244461923838,-0.015030534006655216,-0.0009775612270459533,0.023454686626791954,0.009041381999850273,-0.0014811790315434337,-0.0015812243800610304,-0.013823207467794418,0.005582188256084919,-0.01433869544416666,-0.01166629884392023,0.014297998510301113,-0.0013980906223878264,-0.010391145013272762,-0.021284213289618492,0.0033523652236908674,-0.02694101072847843,-0.011462816968560219,0.02163691446185112,-0.027008838951587677,0.018055632710456848,-0.005090440157800913,-0.00917025376111269,0.014677831903100014,0.014203040860593319,-0.026113517582416534,-0.011544209904968739,-0.005066700745373964,-0.009441562928259373,0.014637135900557041,0.0018550772219896317,-0.011781604960560799,0.02913861721754074,-0.020741594955325127,0.007867968641221523,0.010465755127370358,-0.0019330786308273673,-0.01417590957134962,-0.01930365525186062,-0.009136339649558067,-0.021528391167521477,-0.0027944855391979218,0.01560028363019228,-0.00009925044287228957,-0.023007025942206383,-0.018435465171933174,0.02572011947631836,0.011578123085200787,-0.014840617775917053,-0.006134980823844671,0.04750625416636467,0.002085690153762698,-0.009509390220046043,-0.023902347311377525,-0.17201007902622223,0.02337329462170601,0.00822745356708765,-0.03255711495876312,0.03858017921447754,0.013205979019403458,0.008349543437361717,-0.021908223628997803,0.0011818910716101527,-0.0007028605905361474,0.0008673418196849525,-0.0003794090589508414,-0.03152613714337349,-0.0056601897813379765,0.016821175813674927,0.009807830676436424,-0.00105725834146142,0.027863463386893272,0.049758121371269226,0.021107861772179604,0.035188812762498856,-0.023766692727804184,0.0015320496167987585,-0.0028097466565668583,0.02444496564567089,0.006426638457924128,-0.005680537782609463,-0.016590561717748642,-0.02211170643568039,-0.030061068013310432,-0.010533582419157028,0.006572467274963856,-0.009712872095406055,0.00026325476937927306,0.03562290966510773,-0.005134528037160635,-0.0036728493869304657,0.014365825802087784,-0.015722373500466347,0.023549646139144897,0.013450157828629017,0.025665856897830963,0.00702012749388814,-0.009862092323601246,0.008512328378856182,0.008905727416276932,0.011632385663688183,-0.0235225148499012,0.016563432291150093,0.00879042036831379,0.017838584259152412,-0.02835181914269924,-0.013423026539385319,-0.00978748220950365,0.01317206583917141,0.0027385279536247253,0.021053599193692207,0.0423785075545311,-0.02930140122771263,-0.030522294342517853,0.02570655383169651,-0.02413295954465866,-0.013267023488879204,0.0018126851646229625,-0.005148093681782484,-0.009997746907174587,-0.012500574812293053,0.005582188256084919,-0.005751756485551596,0.011252552270889282,0.011713777668774128,-0.017323097214102745,0.011164376512169838,-0.011347510851919651,0.028297558426856995,-0.0041306838393211365,-0.003101404057815671,0.03616552799940109,0.030359508469700813,0.0043511223047971725,0.008593721315264702,0.008519111201167107,-0.007494919002056122,0.0035032809246331453,-0.018042067065835,0.005789061542600393,-0.026601875200867653,0.008566590026021004,-0.026886750012636185,0.0061383722350001335,0.007969710044562817,-0.019602095708251,-0.015152622945606709,-0.0023502164985984564,-0.013375547714531422,0.01404025498777628,0.03969254717230797,-0.02728014811873436,0.0035270205698907375,-0.014406522735953331,0.0282161645591259,-0.0027605718933045864,-0.00965182762593031,0.01340946089476347,0.033805135637521744,0.014379391446709633,0.002212866209447384,0.0005506730522029102,0.01958853006362915,-0.004300252068787813,-0.04840157553553581,0.01551889069378376,0.02102646976709366,0.018259113654494286,-0.02650691568851471,0.03182457759976387,-0.011890129186213017,-0.01010627020150423,-0.02635769546031952,-0.00250961072742939,0.0250825434923172,-0.00947547610849142,-0.006287592463195324,-0.005256617441773415,-0.013049975968897343,-0.019222261384129524,-0.10895780473947525,-0.021528391167521477,0.004802174400538206,0.02761928364634514,-0.025340287014842033,0.029057223349809647,-0.007820489816367626,0.037250764667987823,0.0007672965293750167,0.04015377163887024,-0.007006561849266291,-0.010404710657894611,-0.007929014042019844,0.006803079973906279,-0.007501701358705759,-0.003591456450521946,-0.010316534899175167,-0.033181123435497284,-0.005256617441773415,0.02350894920527935,0.024865495041012764,-0.02647978626191616,-0.009834961034357548,-0.012412399053573608,-0.02337329462170601,-0.014867748133838177,-0.010153749957680702,0.0053278361447155476,0.0012904147151857615,0.003316755872219801,0.011713777668774128,-0.01237848587334156,0.005524535197764635,-0.0053142705000936985,0.02664257027208805,-0.01850329339504242,-0.02009045146405697,-0.018774602562189102,0.03716937080025673,-0.011686647310853004,-0.016902567818760872,-0.015546021983027458,0.01896451786160469,-0.025299590080976486,-0.002182343974709511,0.01834050752222538,-0.0019161218078806996,0.010411493480205536,0.004096770193427801,-0.02555733360350132,-0.023902347311377525,-0.01435226108878851,-0.04031655937433243,-0.0031811012886464596,0.021433433517813683,0.0027130928356200457,0.00575853930786252,0.018245548009872437,-0.036925192922353745,-0.0008249497623182833,-0.006087501998990774,-0.015627413988113403,-0.00009628300176700577,0.02729371376335621,0.006887864321470261,0.013280589133501053,-0.02930140122771263,0.013436592184007168,-0.000984343932941556,0.019669922068715096,-0.014718527905642986,0.014094516634941101,-0.02976262755692005,0.007332133129239082,-0.027524325996637344,-0.010072357021272182,-0.0034558018669486046,-0.01010627020150423,-0.012514140456914902,-0.003655892563983798,-0.01912730373442173,-0.027944855391979218,0.019832707941532135,-0.0009851917857304215,0.0023010417353361845,0.01726883463561535,0.018611816689372063,-0.021094296127557755,-0.0008105364395305514,-0.05108753591775894,0.006012891884893179,0.006406290456652641,-0.01802850142121315,-0.00917025376111269,0.01208004541695118,-0.011076201684772968,-0.0036084132734686136,-0.002630004193633795,-0.005029395688325167,0.02586933970451355,-0.015261147171258926,-0.008810768835246563,-0.05374636873602867,0.025503072887659073,0.0105810621753335,-0.0211349930614233,0.010506452061235905,-0.010309752076864243,-0.0024773927871137857,-0.03744067996740341,-0.016685521230101585,0.018001370131969452,-0.02009045146405697,0.025638727471232414,-0.035026028752326965,-0.012432747520506382,-0.006179068703204393,-0.032502852380275726,0.01896451786160469,-0.0071015204302966595,0.026059256866574287,0.016251426190137863,-0.005907759536057711,-0.02616778016090393,0.014623570255935192,0.00965182762593031,-0.03841739520430565,0.0070472583174705505,-0.015559586696326733,0.030603686347603798,-0.005076874978840351,-0.038308870047330856,0.006433421280235052,-0.009624696336686611,-0.0010072357254102826,-0.0022806935012340546,-0.015383236110210419,-0.0022823892068117857,0.020619504153728485,0.038498785346746445,0.0012090220116078854,0.03646396845579147,-0.025448810309171677,-0.009014250710606575,0.013680770061910152,-0.00008107484609354287,-0.008559808135032654,-0.03231293335556984,-0.0022705195005983114,-0.003971289377659559,0.027090230956673622,0.00043133937288075686,0.018910257145762444,-0.00598915247246623,-0.016224294900894165,-0.035487253218889236,0.013592595234513283,-0.03166179358959198,-0.010696368291974068,0.025598030537366867,-0.005456707905977964,0.005782279185950756,0.05865706503391266,-0.0013692639768123627,0.008498762734234333,-0.0227357167750597,0.0376034639775753,0.009875657968223095,-0.04479316249489784,0.01043184194713831,0.023875216022133827,-0.052281297743320465,-0.027782069519162178,-0.012866842560470104,0.012154655531048775,-0.010608192533254623,0.01926295831799507,-0.013599377125501633,-0.011286466382443905,0.01362650841474533,-0.003533803392201662,0.02022610604763031,-0.01442008838057518,0.004483385942876339,-0.014610004611313343,0.005978978238999844,-0.00017688093066681176,-0.006402899045497179,0.01866607740521431,-0.024553488940000534,-0.013205979019403458,0.0017397707561030984,-0.026737529784440994,0.0002492654020898044,-0.00677934056147933,0.02808050997555256,0.013735031709074974,0.022857805714011192,-0.0023010417353361845,0.01660412736237049,-0.00020856900664512068,-0.011591688729822636,0.008973554708063602,0.0007927318220026791,-0.012731187976896763,-0.01317206583917141,0.002317998558282852,0.017119616270065308,-0.019697053357958794,-0.03744067996740341,-0.0019229045137763023,0.010770978406071663,-0.013538332656025887,0.005578796844929457,0.009896005503833294,0.013660422526299953,-0.021569088101387024,0.01771649532020092,0.013701118528842926,-0.018883125856518745,-0.03339817374944687,0.024241484701633453,-0.0008919292595237494,0.0289758313447237,0.009000685065984726,-0.014704963192343712,0.011734126135706902,0.012670143507421017,0.011856215074658394,-0.031878840178251266,0.01357224676758051,-0.010458972305059433,0.011781604960560799,-0.011015156283974648,-0.020592374727129936,-0.015030534006655216,0.004374862182885408,-0.002328172791749239,-0.0037745903246104717,-0.0071489992551505566,-0.0203753262758255,0.09419858455657959,0.02962697297334671,-0.007725531700998545,0.016970396041870117,0.0021094295661896467,0.026086386293172836,-0.0058806287124753,0.014718527905642986,0.009550086222589016,-0.028758782893419266,-0.001055562635883689,-0.0031895795837044716,-0.01973775029182434,-0.006965865846723318,-0.0035507602151483297,-0.019344352185726166,-0.027239451184868813,0.008125713095068932,-0.013104238547384739,-0.02004975639283657,0.011951173655688763,0.011754474602639675,0.0075491806492209435,0.006626728922128677,-0.03546012192964554,-0.0041476404294371605,0.017472317442297935,0.008865030482411385,-0.019832707941532135,-0.02805337868630886,0.009075295180082321,0.008803986012935638,-0.01865251362323761,-0.01599368266761303,0.006009500473737717,0.0074067432433366776,-0.0001200755505124107,-0.030603686347603798,0.011320379562675953,0.014216606505215168,0.0006761535769328475,-0.025163935497403145,-0.025150369852781296,-0.040045250207185745,-0.0005375315085984766,0.02053811214864254,-0.010913415811955929,0.004452863708138466,-0.017621537670493126]],"metadata":{"location":"https://medium.com/swlh/building-command-line-interfaces-using-go-ce6a75d60bf5","source_type":"webpage"}},{"raw_content":"Skip to content\nToggle navigation\nSign up\nProduct\nActions\nAutomate any workflow\nPackages\nHost and manage packages\nSecurity\nFind and fix vulnerabilities\nCodespaces\nInstant dev environments\nCopilot\nWrite better code with AI\nCode review\nManage code changes\nIssues\nPlan and track work\nDiscussions\nCollaborate outside of code\nExplore\nAll features\nDocumentation\nGitHub Skills\nBlog\nSolutions\nFor\nEnterprise\nTeams\nStartups\nEducation\nBy Solution\nCI/CD & Automation\nDevOps\nDevSecOps\nResources\nLearning Pathways\nWhite papers, Ebooks, Webinars\nCustomer Stories\nPartners\nOpen Source\nGitHub Sponsors\nFund open source developers\nThe ReadME Project\nGitHub community articles\nRepositories\nTopics\nTrending\nCollections\nPricing\nSearch or jump to...\nSearch code, repositories, users, issues, pull requests...\nSearch\nClear\nSearch syntax tips\nProvide feedback\nWe read every piece of feedback, and take your input very seriously.\nInclude my email address so I can be contacted\nCancel\nSubmit feedback\nSaved searches\nUse saved searches to filter your results more quickly\nName\nQuery\nTo see all available qualifiers, see our documentation.\nCancel\nCreate saved search\nSign in\nSign up\nYou signed in with another tab or window. Reload to refresh your session.\nYou signed out in another tab or window. Reload to refresh your session.\nYou switched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\nlibp2p\n/\ngo-libp2p\nPublic\nNotifications\nFork\n1k\nStar\n5.5k\nCode\nIssues\n237\nPull requests\n38\nDiscussions\nActions\nProjects\n0\nSecurity\n3\nInsights\nAdditional navigation options\nCode\nIssues\nPull requests\nDiscussions\nActions\nProjects\nSecurity\nInsights\nFiles master Blame Breadcrumbsgo-libp2p/examples/chat-with-mdns/mdns.goFiles masterBreadcrumbsgo-libp2p/examples/chat-with-mdns/mdns.go Blame\nLatest commit HistoryHistory31 lines (25 loc) · 816 Bytes masterBreadcrumbsgo-libp2p/examples/chat-with-mdns/mdns.goTopFile metadata and controlsCodeBlame31 lines (25 loc) · 816 BytesRawpackage main\nimport (\n\"github.com/libp2p/go-libp2p/core/host\"\n\"github.com/libp2p/go-libp2p/core/peer\"\n\"github.com/libp2p/go-libp2p/p2p/discovery/mdns\"\n)\ntype discoveryNotifee struct {\nPeerChan chan peer.AddrInfo\n}\n// interface to be called when new\npeer is found\nfunc (n *discoveryNotifee) HandlePeerFound(pi peer.AddrInfo) {\nn.PeerChan <- pi\n}\n// Initialize the MDNS service\nfunc initMDNS(peerhost host.Host, rendezvous string) chan peer.AddrInfo {\n// register with service so that we get notified about peer discovery\nn := &discoveryNotifee{}\nn.PeerChan = make(chan peer.AddrInfo)\n// An hour might be a long long period in practical applications. But this is fine for us\nser := mdns.NewMdnsService(peerhost, rendezvous, n)\nif err := ser.Start(); err != nil {\npanic(err)\n}\nreturn n.PeerChan\n}12345678910111213141516171819202122232425262728293031\nFooter\n© 2023 GitHub, Inc.\nFooter navigation\nTerms\nPrivacy\nSecurity\nStatus\nDocs\nContact\nManage cookiesDo not share my personal information\nYou can't perform that action at this time.","summary":"The text is a code snippet written in Go that demonstrates how to integrate peer discovery using mDNS in the Go libp2p library. It includes the necessary imports and code to initialize the mDNS service and handle the discovery of new peers.","chunks":["Skip to content Toggle navigation Sign up Product Actions Automate any workflow Packages Host and manage packages Security Find and fix vulnerabilities Codespaces Instant dev environments Copilot Write better code with AI Code review Manage code changes Issues Plan and track work Discussions Collaborate outside of code Explore All features Documentation GitHub Skills Blog Solutions For Enterprise Teams Startups Education By Solution CI/CD & Automation DevOps DevSecOps Resources Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation. Cancel Create saved search Sign in Sign up You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert libp2p / go-libp2p Public Notifications Fork 1k Star 5.5k Code Issues 237 Pull requests 38 Discussions Actions Projects 0 Security 3 Insights Additional navigation options Code Issues Pull requests Discussions Actions Projects Security Insights Files master Blame Breadcrumbsgo-libp2p/examples/chat-with-mdns/mdns.goFiles masterBreadcrumbsgo-libp2p/examples/chat-with-mdns/mdns.go Blame Latest commit HistoryHistory31 lines (25 loc) · 816 Bytes masterBreadcrumbsgo-libp2p/examples/chat-with-mdns/mdns.goTopFile metadata and controlsCodeBlame31 lines (25 loc) · 816 BytesRawpackage main import ( \"github.com/libp2p/go-libp2p/core/host\" \"github.com/libp2p/go-libp2p/core/peer\" \"github.com/libp2p/go-libp2p/p2p/discovery/mdns\" ) type discoveryNotifee struct { PeerChan chan peer.AddrInfo } // interface to be called when new peer is found func (n *discoveryNotifee) HandlePeerFound(pi peer.AddrInfo) { n.PeerChan <- pi } // Initialize the MDNS service func initMDNS(peerhost host.Host, rendezvous string) chan peer.AddrInfo { // register with service so that we get notified about peer discovery n := &discoveryNotifee{} n.PeerChan = make(chan peer.AddrInfo) // An hour might be a long long period in practical applications. But this is fine for us ser := mdns.NewMdnsService(peerhost, rendezvous, n) if err := ser.Start(); err != nil { panic(err) } return n.PeerChan }12345678910111213141516171819202122232425262728293031 Footer © 2023 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookiesDo not share my personal information You can't perform that action at this time."],"chunk_summaries":["The text is a code snippet written in Go that demonstrates how to integrate peer discovery using mDNS in the Go libp2p library. It includes the necessary imports and code to initialize the mDNS service and handle the discovery of new peers."],"e_summary":[0.013154234737157822,0.02738793194293976,-0.004622319247573614,-0.015181688591837883,0.008441959507763386,0.03169194981455803,-0.006390287075191736,0.007431692443788052,-0.02593480795621872,-0.02324998751282692,0.012572984211146832,0.024329451844096184,-0.015167849138379097,0.013313385657966137,-0.017299098894000053,-0.002255802508443594,0.0007460236083716154,-0.020025435835123062,0.010379458777606487,0.0019305793102830648,0.004906024318188429,0.0018112155376002192,0.012054011225700378,-0.023333024233579636,0.010061156004667282,-0.002901058876886964,0.011631913483142853,-0.007528567686676979,0.006241514813154936,0.0044078100472688675,0.03603748232126236,-0.032024089246988297,-0.01727141998708248,-0.0033473754301667213,-0.00997812021523714,0.0029045185074210167,0.029865162447094917,-0.011244413442909718,-0.007016514427959919,-0.022641059011220932,0.011528119444847107,-0.008428120985627174,-0.008781022392213345,-0.014392849989235401,-0.011825663968920708,0.005525331944227219,0.02504909411072731,-0.035566944628953934,0.0026433023158460855,-0.012531466782093048,0.023692844435572624,-0.012365395203232765,-0.019167400896549225,-0.0046776761300861835,-0.018558472394943237,-0.006238054949790239,0.00008633331162855029,0.015513831749558449,-0.007376335561275482,0.007459371350705624,0.0032574201468378305,-0.006096202414482832,-0.0009791289921849966,0.0012481299927458167,0.007369415834546089,-0.015444634482264519,-0.018101776018738747,0.014711152762174606,-0.021049542352557182,0.00008887411968316883,0.023803560063242912,0.005207028705626726,0.0014816677430644631,-0.00920312013477087,0.02784462831914425,-0.004210600629448891,-0.02413570135831833,-0.007120308931916952,-0.000646121334284544,0.0015006967587396502,-0.0012464000610634685,-0.02056516893208027,-0.00715490709990263,0.04937854781746864,-0.01091919094324112,-0.013002002611756325,0.01482186745852232,0.013825438916683197,-0.010628566145896912,0.0008139225537888706,-0.00326779973693192,0.02017766796052456,0.0017160705756396055,0.004449327941983938,-0.025173647329211235,0.0029114382341504097,-0.008151334710419178,0.011611154302954674,0.007459371350705624,0.003933814819902182,-0.017824990674853325,0.040936585515737534,0.005123992916196585,-0.01749284751713276,-0.006649773567914963,-0.009611379355192184,0.01070468220859766,-0.03230087459087372,0.004438948817551136,0.010047316551208496,-0.002523938426747918,0.039940159767866135,0.00019666911975946277,-0.012282359413802624,-0.03147051855921745,0.02975444868206978,-0.004653457552194595,-0.026349985972046852,0.024744629859924316,-0.009002450853586197,0.013064279220998287,0.026626771315932274,-0.0044078100472688675,0.004587721079587936,-0.0019824765622615814,-0.007653120905160904,-0.03434909135103226,-0.010981467552483082,0.008095977827906609,-0.020966507494449615,0.027152664959430695,0.023333024233579636,0.010427896864712238,0.020855793729424477,-0.02165847085416317,0.01854463294148445,-0.022973202168941498,-0.010241066105663776,-0.03479194641113281,-0.005123992916196585,-0.011029904708266258,0.021354006603360176,-0.011756467632949352,0.009140843525528908,-0.024329451844096184,0.015403117053210735,0.009113164618611336,0.020509811118245125,-0.005307363346219063,-0.008760263212025166,0.022447310388088226,-0.0005565984756685793,-0.03052944876253605,0.010870753787457943,-0.02900712750852108,0.034681230783462524,-0.006878121290355921,0.00788146909326315,0.009313834831118584,0.010524771176278591,0.00370546686463058,0.025658022612333298,0.011839502491056919,-0.03542855381965637,0.011202896013855934,0.050291936844587326,0.013970751315355301,-0.008808701299130917,0.008704906329512596,0.00018174864817410707,0.0035117168445140123,0.026626771315932274,-0.04553122818470001,0.010794637724757195,0.0035030674189329147,0.011029904708266258,0.016551777720451355,0.02557498775422573,-0.0034909581299871206,0.0043489933013916016,0.008974771946668625,-0.003359484951943159,0.005746760405600071,0.03996783494949341,0.00303426175378263,-0.006300331559032202,0.002222934039309621,0.017146866768598557,0.000493889267090708,0.003760823979973793,0.019582578912377357,0.012379234656691551,0.014088385738432407,0.0028993289452046156,-0.6199997067451477,-0.01918124035000801,0.006874661426991224,-0.0275955218821764,0.012517627328634262,0.014669635333120823,0.01374240405857563,0.023485256358981133,0.018060259521007538,0.032273199409246445,0.006895420607179403,0.010939950123429298,-0.0013450048863887787,-0.011168297380208969,-0.0013493297155946493,-0.0050928546115756035,0.0031553555745631456,-0.031221412122249603,0.016620973125100136,0.017395973205566406,-0.013728564605116844,0.016122760251164436,0.02939462848007679,-0.023540612310171127,0.008836379274725914,-0.010344861075282097,-0.006238054949790239,-0.012206243351101875,0.01100222673267126,0.02848123572766781,-0.05070711672306061,-0.02395579218864441,0.00008930659532779828,0.019416507333517075,0.047607120126485825,-0.027332575991749763,0.0038023418746888638,0.010483253747224808,-0.007487049791961908,0.022018292918801308,-0.033435698598623276,-0.005642965901643038,0.024537041783332825,-0.0018907914636656642,-0.0008247345103882253,-0.010102673433721066,0.04101962223649025,-0.005009818822145462,0.000780621834564954,0.014136822894215584,0.005518412217497826,-0.0010950329015031457,0.011797985062003136,-0.022059809416532516,-0.0024599318858236074,0.013811600394546986,0.04442408308386803,-0.01972097158432007,0.02543659321963787,-0.010808476246893406,-0.014918742701411247,-0.003122487338259816,-0.00003443601599428803,-0.034321412444114685,-0.012150886468589306,0.016261152923107147,-0.016413385048508644,0.020855793729424477,0.012164725922048092,0.007805353030562401,0.029173199087381363,0.019707132130861282,-0.021990614011883736,-0.007833031937479973,0.01393615361303091,0.036480337381362915,0.026585254818201065,0.015403117053210735,0.0026121637783944607,0.024744629859924316,-0.008988611400127411,-0.005597988143563271,-0.025879450142383575,-0.025339718908071518,0.03755980357527733,-0.02095266804099083,-0.03080623410642147,0.0073348176665604115,0.029283912852406502,-0.007404014002531767,0.011223655194044113,0.0005570309585891664,-0.011548877693712711,-0.020800435915589333,0.003594752633944154,0.013977671042084694,0.0019478785106912255,0.013555573299527168,0.0280937347561121,-0.014697314240038395,-0.027609361335635185,-0.0038196409586817026,0.01393615361303091,-0.026862040162086487,0.043649084866046906,-0.008912495337426662,-0.018876776099205017,0.015499992296099663,0.022807130590081215,-0.0150156170129776,-0.010614726692438126,-0.017935704439878464,-0.01064932532608509,-0.007943745702505112,-0.011541957966983318,-0.02604552172124386,0.02200445346534252,0.015250884927809238,0.03811337426304817,-0.014932581223547459,0.009127004072070122,0.006462943274527788,0.005175890401005745,0.00303426175378263,0.004746872466057539,0.009791289456188679,-0.0018388940952718258,-0.013361823745071888,-0.006767407059669495,0.001743749133311212,-0.025325879454612732,-0.0027349875308573246,0.01377700176090002,-0.014489724300801754,0.053751759231090546,0.014337493106722832,0.048133011907339096,-0.002238503424450755,-0.00804062094539404,-0.01592900976538658,-0.010234146378934383,0.02427409403026104,0.007487049791961908,0.01585981249809265,0.0041725425980985165,0.014489724300801754,-0.04694283381104469,-0.027761593461036682,0.006137719843536615,0.000451073981821537,0.0062761129811406136,0.010171869769692421,-0.00007179125532275066,0.003253960283473134,-0.016261152923107147,-0.02324998751282692,0.0014107414754107594,0.00664285384118557,0.009050888009369373,-0.015596866607666016,0.0035636143293231726,0.009182360954582691,-0.02462007664144039,-0.020606685429811478,-0.0010500552598387003,-0.012393074110150337,-0.005646425765007734,0.025879450142383575,0.010552450083196163,-0.033269625157117844,-0.005200108978897333,0.009514504112303257,-0.03780891001224518,-0.011362047865986824,0.01624731346964836,0.021492399275302887,-0.024855343624949455,-0.019527222961187363,-0.006725889630615711,-0.008947093971073627,-0.0003167897230014205,-0.025450432673096657,-0.003250500652939081,0.010296422988176346,0.018918294459581375,0.021146418526768684,0.03285444900393486,0.008933254517614841,0.00012617529137060046,-0.01727141998708248,-0.011818744242191315,0.027194183319807053,-0.006307251285761595,-0.0018804119899868965,-0.005366180092096329,-0.005130912642925978,-0.01981784775853157,0.002840511966496706,0.0041068061254918575,0.012974323704838753,0.01851695403456688,-0.022018292918801308,0.020897310227155685,-0.045918725430965424,-0.0010561099043115973,-0.02042677439749241,-0.002930467249825597,-0.014738831669092178,-0.0009298265213146806,0.018420079723000526,0.017672758549451828,-0.009528343565762043,-0.005296983756124973,0.0014825327089056373,-0.006317630875855684,0.04680443927645683,-0.034432124346494675,-0.005504573229700327,-0.02095266804099083,0.0035809134133160114,-0.010400217957794666,0.011998654343187809,0.015403117053210735,-0.013278787955641747,-0.021755345165729523,-0.002809373661875725,0.0302803423255682,0.000993833178654313,-0.01720222271978855,-0.015749098733067513,-0.006829684134572744,0.0009229069110006094,0.005338501650840044,0.021146418526768684,0.02024686522781849,0.0036466498859226704,-0.006718969903886318,0.005781358573585749,0.011825663968920708,-0.027720075100660324,-0.010081914253532887,0.014891063794493675,0.00684698298573494,-0.0027073088567703962,0.02914552018046379,0.0048368279822170734,0.018876776099205017,-0.008677227422595024,-0.021215613931417465,0.01981784775853157,-0.02864730730652809,0.01886293664574623,-0.007639281917363405,0.017479008063673973,0.017188383266329765,-0.010005798190832138,-0.0002419711381662637,0.0062830327078700066,0.006096202414482832,0.014060706831514835,0.0011616344563663006,0.014517403207719326,0.0281906109303236,0.005494193639606237,0.004816068802028894,-0.027941502630710602,0.008524995297193527,-0.014974099583923817,-0.015666063874959946,-0.01717454567551613,-0.004539283458143473,0.0021969855297356844,0.010946869850158691,-0.013327225111424923,0.012206243351101875,0.017395973205566406,-0.004182922188192606,0.0035393955186009407,0.006369527895003557,-0.017465170472860336,-0.028425877913832664,-0.006961157079786062,0.024855343624949455,0.021118739619851112,-0.014081466011703014,-0.02190757729113102,-0.009341512806713581,0.016330348327755928,-0.011846422217786312,-0.012635261751711369,-0.017686598002910614,-0.005885153077542782,-0.011756467632949352,0.014088385738432407,0.0018250548746436834,-0.010524771176278591,0.01583213545382023,-0.01307119894772768,-0.02388659492135048,0.00012833769142162055,-0.010995307005941868,0.03974640741944313,-0.023734362795948982,-0.025879450142383575,0.05009818822145462,-0.013313385657966137,0.0028076437301933765,0.006777786649763584,-0.013382581993937492,-0.006812384817749262,-0.0150156170129776,0.026931235566735268,0.000828626798465848,-0.039940159767866135,0.012406913563609123,-0.008974771946668625,-0.028979448601603508,-0.0014297704910859466,0.011562717147171497,0.0041725425980985165,-0.009396870620548725,-0.049655333161354065,0.0101926289498806,0.004542743321508169,0.029173199087381363,0.029339270666241646,0.029809806495904922,-0.0047710915096104145,-0.011438163928687572,0.010414057411253452,-0.032024089246988297,0.005615287460386753,0.002712498651817441,-0.0007304543978534639,0.005625666584819555,0.020399097353219986,-0.027692396193742752,0.011486601084470749,0.021810702979564667,0.0032920183148235083,0.002601784421131015,-0.010877672582864761,-0.0023457577917724848,-0.006646313704550266,0.012005574069917202,0.00416908273473382,-0.01358325220644474,0.001535294926725328,0.01194329746067524,-0.017091508954763412,0.007480130065232515,-0.004632698372006416,-0.00028305649175308645,-0.038528550416231155,-0.013181912712752819,0.002994474023580551,0.020606685429811478,0.004245198797434568,-0.029228556901216507,0.05466515198349953,0.003406192408874631,0.002797264140099287,0.020648203790187836,0.01592900976538658,0.026197753846645355,-0.019056687131524086,-0.0023734362330287695,0.015070974826812744,0.016164276748895645,-0.012489949353039265,-0.023803560063242912,0.008441959507763386,-0.011119860224425793,-0.006784706376492977,0.022101327776908875,-0.019845524802803993,-0.007708478253334761,-0.0033664044458419085,0.02331918478012085,0.01174954790621996,0.007265621330589056,0.009196200408041477,0.005037497263401747,-0.04680443927645683,-0.020399097353219986,-0.03684015944600105,-0.012185485102236271,-0.01642722450196743,-0.009597539901733398,-0.030584806576371193,0.004881805740296841,-0.008877897635102272,-0.02391427382826805,0.005957809276878834,0.000405447615776211,-0.016980795189738274,-0.02695891447365284,0.007355576381087303,0.002041293540969491,0.025630343705415726,0.025851773098111153,0.0008078679093159735,0.0034183019306510687,0.011230574920773506,0.01653793826699257,0.009313834831118584,0.021644631400704384,-0.021879900246858597,0.012517627328634262,0.035594623535871506,0.009922762401401997,0.016385706141591072,0.0027695856988430023,0.015361599624156952,-0.009133923798799515,0.014987939037382603,-0.0011919079115614295,-0.006653232965618372,0.004660377278923988,0.02031606063246727,-0.0018129454692825675,0.012019413523375988,-0.0014920472167432308,-0.0033733241725713015,0.016773205250501633,-0.00922387931495905,-0.019582578912377357,-0.013970751315355301,0.0034667393192648888,0.020191507413983345,-0.0041656228713691235,-0.00008568459452362731,-0.03160891309380531,-0.004518524277955294,0.01872454397380352,-0.0032695296686142683,0.009113164618611336,0.019347311928868294,0.030833913013339043,0.017921864986419678,-0.010261825285851955,0.0030757796484977007,-0.023692844435572624,-0.02059284597635269,0.015181688591837883,-0.016704009845852852,0.007244862150400877,0.0035982124973088503,-0.0163580272346735,0.02600400522351265,-0.02388659492135048,-0.013915394432842731,-0.02081427536904812,0.0041517834179103374,-0.01095378864556551,0.02850891463458538,0.0003042478929273784,-0.03235623240470886,-0.009749772027134895,-0.007085710763931274,0.011832582764327526,-0.00664285384118557,-0.03207944706082344,0.0026433023158460855,-0.010690842755138874,-0.01146584190428257,0.005528791807591915,0.004847207106649876,-0.006964616943150759,-0.02434329129755497,-0.04331694170832634,0.004293636418879032,-0.002686549909412861,0.023540612310171127,0.013880796730518341,0.021713828667998314,0.02345757745206356,-0.023028559982776642,-0.012856690213084221,-0.027706235647201538,0.015444634482264519,0.0022886707447469234,0.022059809416532516,0.005770978983491659,0.0014955070801079273,-0.003729685675352812,0.005213948432356119,0.020800435915589333,-0.0037539042532444,-0.012745975516736507,-0.00973593257367611,0.0025429674424231052,-0.0028733802028000355,-0.02134016714990139,0.011929458007216454,0.01851695403456688,0.010185709223151207,0.00045972352381795645,-0.017285259440541267,-0.0075078085064888,0.010621646419167519,0.00018358668603468686,-0.002731527667492628,-0.06720353662967682,-0.0214785598218441,0.011541957966983318,-0.014226778410375118,0.025782575830817223,-0.025325879454612732,-0.003522096434608102,0.0417669415473938,-0.009182360954582691,0.026972753927111626,0.0150156170129776,0.03376783803105354,-0.020149989053606987,0.02784462831914425,0.015804456546902657,-0.0025931347627192736,-0.003743524895980954,-0.006113501265645027,-0.030612483620643616,0.004463167395442724,0.02670980803668499,0.014199099503457546,0.012310038320720196,0.028730342164635658,-0.0018060258589684963,0.00946606695652008,0.007929906249046326,0.010289503261446953,-0.011472761631011963,0.0001143902845797129,-0.019554900005459785,-0.014531242661178112,-0.031027663499116898,-0.028924092650413513,0.005937050562351942,0.005878233816474676,-0.0025741057470440865,-0.01717454567551613,0.0003116000152658671,0.007743076421320438,-0.009652896784245968,0.01981784775853157,0.010552450083196163,0.012870528735220432,-0.007106469478458166,0.0028924092184752226,-0.005082475021481514,-0.03127676993608475,0.001225641113705933,0.018710704520344734,-0.003323156852275133,-0.00025018819724209607,0.029283912852406502,0.028135253116488457,-0.005888612940907478,-0.01307119894772768,0.004355913028120995,-0.003736605169251561,-0.0088502187281847,-0.009583700448274612,0.009092406369745731,0.03119373321533203,-0.008296647109091282,-0.018849097192287445,0.0034356010146439075,-0.02484150603413582,0.04190533608198166,-0.025284362956881523,-0.0026623313315212727,-0.012489949353039265,0.014081466011703014,-0.015555349178612232,0.00010828154336195439,-0.035705339163541794,0.01837856136262417,-0.016911597922444344,0.01985936425626278,-0.0013398152077570558,0.015513831749558449,0.011016066186130047,0.009175442159175873,0.0011304960353299975,0.011631913483142853,-0.030889268964529037,-0.0031467059161514044,0.013597091659903526,0.02020534686744213,0.00280418386682868,0.003608591854572296,0.0016174656338989735,0.03614819422364235,-0.03576069697737694,-0.003115567611530423,-0.016399545595049858,-0.0029097083024680614,0.0011988275218755007,-0.013195752166211605,-0.0017022312385961413,-0.001140010543167591,-0.021852221339941025,-0.004449327941983938,0.030114270746707916,-0.0262531116604805,0.002023994456976652,-0.014026109129190445,0.0031536256428807974,-0.029477663338184357,-0.02518748678267002,0.0018129454692825675,0.012157806195318699,-0.01815713383257389,-0.009133923798799515,-0.01621963456273079,-0.02066204324364662,0.02850891463458538,0.025339718908071518,-0.024896861985325813,0.004653457552194595,0.04450711980462074,-0.015915170311927795,0.0002765693352557719,-0.011797985062003136,-0.010635485872626305,-0.030612483620643616,0.007286380045115948,-0.007203344721347094,-0.045808013528585434,0.009244638495147228,-0.006480242125689983,-0.007078791037201881,-0.0065978760831058025,-0.012877448461949825,-0.00015115087444428355,0.007355576381087303,0.007992183789610863,-0.011182136833667755,-0.006435264367610216,0.010275664739310741,0.0014816677430644631,0.010870753787457943,0.03133212774991989,0.01137588731944561,0.006189617328345776,0.004013390745967627,-0.007673880085349083,0.002402844838798046,0.015444634482264519,0.00185273343231529,-0.01496026013046503,-0.03592676669359207,-0.013659368269145489,-0.02420489862561226,-0.0069196391850709915,-0.016842402517795563,-0.0012291009770706296,0.0026640610303729773,0.00238900538533926,0.008649549447000027,-0.010746199637651443,0.04359372705221176,0.018101776018738747,0.018959810957312584,0.009396870620548725,0.005258925724774599,-0.012074770405888557,0.0010336211416870356,-0.00863570999354124,-0.015541509725153446,-0.00091425736900419,-0.04793925955891609,-0.021879900246858597,-0.014835706911981106,0.03880533576011658,-0.006815844681113958,-0.009106244891881943,-0.023166952654719353,0.0010431356495246291,-0.02830132469534874,0.0011348208645358682,-0.002613893710076809,-0.014379010535776615,-0.0015084813348948956,0.026792842894792557,0.009895084425807,0.01822632923722267,0.004528903868049383,0.027263378724455833,-0.027360253036022186,-0.0026657909620553255,0.011867181397974491,0.000890038616489619,-0.011154458858072758,-0.010282584466040134,-0.03791962191462517,-0.005276225041598082,0.03155355527997017,0.011562717147171497,-0.03886069357395172,0.03119373321533203,0.000962694815825671,-0.03462587669491768,-0.02218436449766159,-0.006853902712464333,-0.02102186344563961,-0.014697314240038395,0.0003833912778645754,-0.023485256358981133,-0.0196379367262125,0.0052450867369771,0.003304127836599946,-0.007694638799875975,-0.0006725024431943893,0.023540612310171127,0.012572984211146832,0.018032580614089966,-0.009957361035048962,-0.013292627409100533,0.009507584385573864,-0.00011168730270583183,0.02730489708483219,-0.022724095731973648,-0.0066117155365645885,0.06509996950626373,-0.0039026765152812004,0.000457128684502095,-0.015749098733067513,0.031387485563755035,-0.03949730098247528,-0.03780891001224518,0.014475885778665543,0.00447700684890151,-0.019319633021950722,-0.0025464273057878017,-0.013652448542416096,0.0010215117363259196,-0.00814441591501236,-0.029588377103209496,-0.020731238648295403,-0.009549101814627647,0.01035178080201149,0.013597091659903526,-0.0300312340259552,-0.029837485402822495,-0.010587047785520554,0.006687831599265337,-0.004874886013567448,-0.007812272757291794,-0.0012074770638719201,-0.00741093372926116,0.019333472475409508,0.0031345966272056103,-0.015223206020891666,-0.012503787875175476,0.017409812659025192,0.0008026781724765897,0.011970976367592812,-0.006431804969906807,0.1982891857624054,-0.006231135223060846,0.010303342714905739,0.03160891309380531,-0.02134016714990139,0.01430981419980526,-0.0019720972049981356,-0.013763162307441235,0.0235682912170887,0.020080793648958206,-0.019651776179671288,0.010552450083196163,-0.009445307776331902,-0.005369639955461025,0.02402498759329319,0.01851695403456688,-0.015347760170698166,-0.026294630020856857,-0.016274992376565933,-0.026308469474315643,-0.0006132530397735536,0.00621729576960206,-0.023651327937841415,-0.017797311767935753,0.0020499431993812323,-0.0015560538740828633,-0.013659368269145489,0.017645079642534256,0.014323653653264046,0.030058912932872772,-0.010891512036323547,-0.015250884927809238,0.012995082885026932,0.0050063589587807655,-0.020869631320238113,0.024647755548357964,0.0177004374563694,-0.018212489783763885,0.024398649111390114,0.025145968422293663,0.039054445922374725,-0.019970079883933067,-0.008511156775057316,-0.0057433005422353745,0.021464720368385315,0.004833368118852377,-0.007895308546721935,0.00576751958578825,0.01642722450196743,-0.0037954221479594707,-0.03196873515844345,0.01054553035646677,0.005324662663042545,0.0018907914636656642,-0.022765614092350006,-0.014891063794493675,-0.0038680783472955227,0.017921864986419678,0.005217407830059528,-0.009729012846946716,0.00029343596543185413,0.003996091894805431,-0.023014720529317856,0.02056516893208027,0.0016200605314224958,0.03407230228185654,-0.011168297380208969,0.0009289615554735065,-0.006462943274527788,-0.005968188866972923,-0.0104901734739542,-0.020025435835123062,0.006781246513128281,0.0047434126026928425,0.003857698990032077,-0.02197677455842495,0.01178414560854435,0.005134372506290674,0.015237045474350452,0.05508032813668251,-0.03429373353719711,0.017409812659025192,-0.01858615130186081,0.00725178187713027,-0.036092840135097504,-0.03695087507367134,0.0101926289498806,-0.02720802091062069,-0.006110041402280331,0.015223206020891666,0.0027384471613913774,-0.009002450853586197,0.012552225962281227,0.006936938501894474,0.002309429692104459,0.027180343866348267,-0.0007486185058951378,-0.005770978983491659,-0.018890615552663803,-0.007542406674474478,-0.04104730114340782,0.06958389282226562,0.02823212929069996,0.005525331944227219,-0.014074546284973621,-0.030058912932872772,0.011147539131343365,0.02165847085416317,0.01727141998708248,-0.011209815740585327,-0.02070356160402298,0.007514728233218193,0.008843299001455307,-0.01981784775853157,-0.011521199718117714,0.027332575991749763,0.01060088723897934,0.0028457017615437508,-0.02600400522351265,-0.009403789415955544,-0.03080623410642147,-0.01583213545382023,-0.022627221420407295,0.0017402892699465156,-0.040078550577163696,0.003809261368587613,-0.016122760251164436,-0.017977222800254822,-0.007016514427959919,-0.04918479546904564,0.017188383266329765,-0.01192253828048706,0.0157629381865263,-0.007549326401203871,0.0038127212319523096,0.020233025774359703,0.037366051226854324,-0.004220979753881693,-0.03910980001091957,0.002229853766039014,0.01837856136262417,0.006407585926353931,0.016482580453157425,0.004490845836699009,-0.014697314240038395,-0.028342843055725098,0.004214060492813587,-0.001883871853351593,0.0007520783110521734,-0.005030578002333641,-0.030058912932872772,-0.03169194981455803,-0.011362047865986824,0.011133699677884579,-0.011991734616458416,-0.025132130831480026,0.00427633710205555,-0.01702231355011463,0.0012654290767386556,-0.026239272207021713,-0.04472854733467102,0.013029680587351322,0.004705354571342468,-0.01328570768237114,-0.0005215678247623146,0.004387051332741976,-0.17614634335041046,-0.01603972353041172,0.02766471728682518,0.003937274683266878,0.028702663257718086,-0.0028560811188071966,0.02122945338487625,0.012164725922048092,0.0071756658144295216,-0.0027003891300410032,0.005040957126766443,0.01444820687174797,0.004324774723500013,0.0005440566455945373,-0.029339270666241646,0.01310579665005207,0.00021699556964449584,-0.007082250900566578,0.03473658859729767,0.006725889630615711,0.03191337734460831,-0.0006712049944326282,0.017188383266329765,-0.007929906249046326,-0.007272541057318449,0.009832807816565037,-0.014808028005063534,-0.035068731755018234,-0.03493034094572067,-0.025741057470440865,0.0005315148155204952,0.017008474096655846,0.00766696035861969,-0.0033300763461738825,0.03335266187787056,0.006701670587062836,0.035345517098903656,0.0009895084658637643,0.006234595086425543,0.015541509725153446,0.023083915933966637,0.03310355544090271,0.016053562983870506,-0.012337717227637768,-0.0005418942309916019,0.007922987453639507,-0.019970079883933067,-0.017368294298648834,-0.007493969518691301,0.022198202088475227,0.025395076721906662,0.000056654545915080234,0.006113501265645027,0.0027263378724455833,0.017299098894000053,-0.00042945012683048844,-0.008248209953308105,0.0151401711627841,-0.006853902712464333,0.014891063794493675,0.0062484340742230415,-0.010794637724757195,-0.011666512116789818,-0.0010673543438315392,-0.0021053003147244453,-0.010061156004667282,0.0014652336249127984,-0.0027834249194711447,-0.027470968663692474,-0.00576751958578825,0.009618299081921577,-0.02261338196694851,0.007639281917363405,-0.012815171852707863,0.03401694819331169,0.01476651057600975,-0.019527222961187363,0.028315164148807526,0.008642629720270634,-0.005390399135649204,-0.011770306155085564,0.020924989134073257,0.0012360205873847008,0.025132130831480026,0.011230574920773506,0.01430981419980526,-0.02875802107155323,0.0030394515488296747,0.005106693599373102,0.006878121290355921,-0.00839352235198021,-0.0100680748000741,0.020786596462130547,-0.023582130670547485,-0.0004943217500112951,0.029809806495904922,0.025353558361530304,-0.009383031167089939,0.011368967592716217,-0.009936601854860783,-0.0028630008455365896,-0.0171053484082222,-0.010414057411253452,0.021962935104966164,0.028204450383782387,-0.0004865371447522193,0.01649641990661621,-0.00983972754329443,0.007833031937479973,-0.015209367498755455,-0.022724095731973648,0.004746872466057539,0.032660696655511856,0.03667408972978592,0.004210600629448891,0.031110698357224464,0.01064932532608509,-0.0171053484082222,-0.013347984291613102,0.021699989214539528,0.05751604214310646,0.0053281220607459545,0.00997812021523714,-0.02084195427596569,0.007535487413406372,-0.013451779261231422,-0.11320529878139496,-0.0124553507193923,0.018350884318351746,0.018143294379115105,-0.026516057550907135,0.007355576381087303,-0.003350835293531418,0.009535263292491436,-0.00890557561069727,0.02229507826268673,0.010559369809925556,-0.007902228273451328,-0.01070468220859766,-0.013590171933174133,-0.026405343785881996,-0.033048197627067566,0.0016062213107943535,-0.03232855349779129,-0.02462007664144039,0.025104451924562454,-0.00043463983456604183,-0.014019189402461052,-0.0024599318858236074,-0.021395524963736534,-0.004819528665393591,-0.010130352340638638,-0.014199099503457546,0.015707580372691154,-0.0029114382341504097,0.012054011225700378,-0.0038749980740249157,-0.02042677439749241,0.0009972930420190096,0.0005570309585891664,0.0019530681893229485,-0.009922762401401997,-0.010780798271298409,-0.0073417373932898045,0.028841055929660797,0.006504461169242859,-0.006123880855739117,0.012974323704838753,0.022904006764292717,-0.018821418285369873,-0.015749098733067513,0.0022333136294037104,-0.006116961129009724,0.037753552198410034,0.0007049382547847927,-0.00597164873033762,-0.033020518720149994,0.024315612390637398,-0.03409998118877411,-0.011493520811200142,0.01167343184351921,-0.02723569981753826,-0.010926110669970512,0.0019167400896549225,-0.03398926928639412,-0.027041951194405556,0.021450882777571678,0.002449552295729518,0.008614950813353062,0.016385706141591072,-0.0002917060337495059,-0.0035099871456623077,-0.03805801644921303,0.020689722150564194,-0.005103234201669693,-0.011638833209872246,-0.010690842755138874,0.014683474786579609,-0.011265172623097897,0.008345085196197033,-0.029975878074765205,0.006314171012490988,0.004847207106649876,-0.032522305846214294,0.011714949272572994,0.007500888779759407,-0.022627221420407295,-0.01294664479792118,-0.00520356884226203,-0.03166427090764046,0.027886146679520607,0.0008160849683918059,0.011541957966983318,0.01940266788005829,-0.0043420735746622086,-0.01943034678697586,-0.006805465091019869,0.014295974746346474,0.0032695296686142683,0.019831685349345207,0.0035566946025937796,-0.006743188481777906,-0.010877672582864761,-0.01567990332841873,-0.02670980803668499,0.014517403207719326,-0.029865162447094917,0.00034771187347359955,-0.0712999626994133,-0.006196537055075169,-0.017603563144803047,-0.03014194965362549,0.007307139225304127,-0.006767407059669495,-0.006456023547798395,-0.013873877003788948,0.003570533823221922,-0.00004546419222606346,-0.02730489708483219,0.007099549751728773,-0.010663163848221302,-0.0064214253798127174,0.010497093200683594,-0.02084195427596569,0.034321412444114685,-0.026170074939727783,0.015001777559518814,0.015804456546902657,0.004082587081938982,-0.007009594701230526,0.023720523342490196,0.015707580372691154,-0.018849097192287445,-0.020094633102416992,-0.03999551385641098,0.0011927728774026036,-0.0005955214728601277,-0.007798433303833008,0.01374240405857563,-0.019056687131524086,0.010289503261446953,0.007999102585017681,0.0004357210418675095,-0.0009549102396704257,0.02311159484088421,0.022267399355769157,0.005881693214178085,0.025408916175365448,-0.016704009845852852,-0.04168390855193138,0.012503787875175476,-0.036120519042015076,0.01608124189078808,0.000365659681847319,-0.022627221420407295,0.0018077557906508446,0.014600438997149467,0.011735708452761173,0.04328926280140877,-0.0055841486901044846,-0.03631426766514778,-0.031110698357224464,-0.016385706141591072,-0.023222308605909348,0.018489276990294456,-0.007777674589306116,-0.004705354571342468,-0.01812945492565632,0.038777656853199005,0.011853341944515705,0.040050871670246124,-0.015361599624156952,0.025076773017644882,0.002942576538771391,-0.030889268964529037,0.013866957277059555,0.015873651951551437,-0.045171406120061874,-0.01383235864341259,-0.009479905478656292,0.004034149926155806,0.0009505854686722159,0.026156237348914146,-0.029366949573159218,-0.004404350649565458,0.022239720448851585,-0.009334593079984188,0.027083467692136765,0.014212938956916332,0.004262497648596764,0.004383591469377279,0.02470311149954796,0.008815620094537735,0.02395579218864441,-0.0025187486317008734,-0.002139898482710123,0.0007412663544528186,-0.008960932493209839,-0.032024089246988297,0.007805353030562401,0.03130444884300232,0.030252663418650627,-0.004255578387528658,-0.026626771315932274,0.015845974907279015,0.00941762886941433,0.022654898464679718,0.0041068061254918575,0.010587047785520554,0.006930018775165081,-0.000536704552359879,-0.02992052026093006,0.00871182605624199,0.021990614011883736,-0.022641059011220932,-0.0241633802652359,0.0066705322824418545,0.0025395075790584087,-0.026170074939727783,0.00008006238931557164,-0.04220980033278465,0.033269625157117844,0.01702231355011463,0.021284811198711395,0.007888388819992542,0.012905127368867397,-0.016067402437329292,0.03960801661014557,0.005321202799677849,0.021437043324112892,0.03620355203747749,-0.004438948817551136,0.013569412752985954,-0.0028716502711176872,-0.01462811790406704,-0.012365395203232765,0.016454901546239853,-0.026446862146258354,0.013604010455310345,-0.0029823645018041134,-0.016025884076952934,-0.01345869805663824,-0.010241066105663776,0.0019461485790088773,0.004587721079587936,0.019236598163843155,-0.03335266187787056,0.07650353014469147,0.01822632923722267,-0.020163828507065773,-0.016842402517795563,-0.014904903247952461,0.038251765072345734,0.007639281917363405,0.0047434126026928425,-0.01925043575465679,-0.03664641082286835,0.011500440537929535,0.005234707146883011,-0.0009921032469719648,-0.013258028775453568,0.011452003382146358,0.002449552295729518,-0.029062485322356224,0.03041873499751091,-0.021381685510277748,0.010241066105663776,0.027152664959430695,0.021381685510277748,0.005681023932993412,-0.0027021190617233515,-0.02211516723036766,0.0008563053561374545,0.036729443818330765,-0.011389725841581821,-0.000664717867039144,-0.022170525044202805,0.03902676701545715,-0.0054215374402701855,-0.06094818189740181,-0.028425877913832664,-0.007161826826632023,0.0036743285600095987,0.0007490509306080639,-0.02122945338487625,0.021257132291793823,0.042375870048999786,0.006961157079786062,-0.027291057631373405,-0.02225355990231037,-0.0016736877150833607,0.017340615391731262,0.007383255288004875,-0.04353836923837662,-0.030003555119037628,-0.02211516723036766],"e_chunks":[[0.00639386149123311,0.005356261041015387,0.018186047673225403,-0.007070404943078756,-0.011644960381090641,0.026556959375739098,-0.014919009990990162,0.0012785970466211438,-0.022406557574868202,-0.027762819081544876,0.0267532616853714,0.0013416942674666643,-0.00862330012023449,0.002145308768376708,0.000894316821359098,-0.005177485290914774,-0.0013820064486935735,-0.022084061056375504,0.011329473927617073,-0.00409782025963068,-0.00700730737298727,0.0037297524977475405,0.005570090841501951,-0.004241541959345341,-0.010971922427415848,-0.006187042221426964,0.012738646939396858,-0.012836798094213009,-0.0048865363933146,0.006474485620856285,0.048683084547519684,-0.02938932739198208,-0.01531161554157734,-0.0006235241889953613,0.002416977658867836,-0.007704883348196745,0.029277155175805092,-0.015774328261613846,0.014295047149062157,-0.004823439288884401,0.010782630182802677,-0.012955982238054276,-0.00008352726581506431,-0.016138890758156776,-0.025827834382653236,0.024692082777619362,0.014484339393675327,-0.025603488087654114,-0.010775619186460972,-0.007908197119832039,0.006803994067013264,-0.01884506456553936,-0.004861998837441206,0.01727464236319065,-0.007564667146652937,-0.0055665853433310986,0.010607359930872917,0.017667248845100403,0.010922846384346485,0.006761929020285606,0.013937495648860931,-0.010950889438390732,-0.017148448154330254,-0.007641786243766546,0.0021680938079953194,-0.01083170622587204,-0.01144164614379406,0.007417439948767424,-0.025463271886110306,-0.015031183138489723,0.022462643682956696,-0.010635402984917164,0.005166969262063503,-0.022476665675640106,0.046776141971349716,-0.012871852144598961,-0.023121660575270653,-0.003705214709043503,-0.01640530303120613,-0.005226560868322849,0.01057931687682867,-0.015774328261613846,-0.007999337278306484,0.044813115149736404,-0.007487548049539328,-0.012353052385151386,0.021200697869062424,0.00722814816981554,-0.019237671047449112,-0.0195461455732584,0.006839048117399216,0.003603557823225856,0.015031183138489723,0.00017855664191301912,-0.007105458993464708,0.01691007986664772,-0.010670457035303116,0.023303942754864693,0.0036280956119298935,0.0011629186337813735,-0.013986571691930294,0.015101291239261627,-0.00396461458876729,-0.013811301440000534,-0.012892885133624077,0.009934321977198124,0.0074034184217453,-0.01550791785120964,0.0010700252605602145,0.0007799529121257365,0.0018403383437544107,0.03592340648174286,-0.007557656150311232,0.004073282238095999,-0.01514335535466671,0.02023320645093918,-0.014989118091762066,-0.022448623552918434,0.011301429942250252,-0.023738611489534378,0.023219812661409378,0.020569724962115288,-0.009808126837015152,0.0016326430486515164,0.015788350254297256,0.017190512269735336,-0.028099337592720985,0.003160123946145177,0.005251098889857531,-0.023878827691078186,0.011042030528187752,0.005920631345361471,0.015914544463157654,0.017358772456645966,-0.007466515526175499,0.028323683887720108,-0.021929822862148285,-0.003810376860201359,-0.03365190327167511,-0.014750749804079533,-0.004977677017450333,0.03261430189013481,-0.013054133392870426,0.011413603089749813,-0.022658947855234146,0.0165595393627882,0.010495186783373356,0.021242763847112656,0.02448175847530365,-0.0060152774676680565,0.014372166246175766,0.003067230572924018,-0.015760308131575584,-0.005966201890259981,-0.016503453254699707,0.026711197569966316,-0.005433380138128996,0.008419985882937908,0.015199442394077778,-0.011953435838222504,-0.0013101455988362432,0.0401298925280571,0.003862957935780287,-0.027356192469596863,0.022126125171780586,0.037634044885635376,0.009906278923153877,-0.001375872059725225,0.001833327580243349,0.003810376860201359,0.005037269089370966,0.034072551876306534,-0.039737287908792496,0.01884506456553936,-0.0024204831570386887,0.013629020191729069,0.007866132073104382,0.009184164926409721,-0.0141898849979043,0.01302609033882618,-0.0020418991334736347,-0.015802372246980667,0.016517475247383118,0.060517337173223495,-0.023149704560637474,-0.007739937398582697,0.002131287008523941,0.010130624286830425,-0.0009683685493655503,-0.007080920971930027,0.013446738943457603,0.026318591088056564,0.017751378938555717,-0.006779456045478582,-0.6245793104171753,-0.00541585311293602,0.016839971765875816,-0.02763662487268448,-0.004076787736266851,-0.00642541004344821,-0.00748053751885891,0.03384820371866226,-0.002742980606853962,0.023121660575270653,0.0058400072157382965,0.01864876225590706,0.010635402984917164,0.0005783920641988516,-0.021621346473693848,-0.015549982897937298,0.009036937728524208,-0.02835172787308693,0.03752186894416809,0.026164352893829346,-0.016461389139294624,0.023023510351777077,0.019980816170573235,-0.012640495784580708,0.009920299984514713,-0.021789606660604477,0.02254677377641201,-0.010032473132014275,0.0002872242475859821,0.024187304079532623,-0.04408399015665054,-0.018438437953591347,0.008412975817918777,0.0141898849979043,0.058049529790878296,-0.02995019219815731,0.010607359930872917,0.022462643682956696,0.0040312171913683414,0.03185713291168213,-0.025617510080337524,-0.00712649105116725,0.011778165586292744,0.010985943488776684,0.0014564964221790433,0.0020050925668329,0.0405224971473217,-0.006187042221426964,-0.017036275938153267,0.022140147164463997,-0.0028534007724374533,-0.000887744186911732,0.0025151290465146303,-0.0011497733648866415,0.0009341908153146505,-0.0022715034428983927,0.04495333135128021,-0.015788350254297256,0.01782148703932762,0.004062766209244728,-0.013306522741913795,0.006039815489202738,-0.01707834005355835,-0.030146494507789612,-0.031071921810507774,0.0019279735861346126,-0.029809975996613503,0.0014424747787415981,-0.005152947269380093,0.02117265574634075,0.02134091407060623,0.01692410185933113,-0.013748204335570335,-0.006183536723256111,-0.00018282885139342397,0.03841925412416458,0.011413603089749813,0.02061178907752037,-0.005054796114563942,0.020695919170975685,-0.007838089019060135,-0.00009338621748611331,0.00022215512581169605,-0.04010184854269028,0.04601897671818733,-0.007704883348196745,-0.03115605190396309,0.00019060647173319012,0.01569020003080368,-0.0002550183271523565,0.006993285845965147,0.006579647772014141,-0.01794768124818802,-0.02888454869389534,-0.005868050269782543,0.030146494507789612,-0.009990408085286617,0.02218221127986908,-0.00008686835644766688,-0.02167743258178234,-0.013600977137684822,-0.024019045755267143,0.0013609740417450666,-0.004883031360805035,0.05140328034758568,0.0010235786903649569,-0.022462643682956696,0.008041402325034142,0.016517475247383118,-0.02516881749033928,-0.007263202220201492,-0.023864807561039925,-0.008441018871963024,-0.021901778876781464,0.0269495639950037,-0.03314712271094322,0.024341542273759842,0.00926128402352333,0.02149515226483345,-0.010074538178741932,-0.0031829089857637882,0.006166009698063135,-0.031773004680871964,-0.01744290255010128,0.019153540953993797,0.0023538803216069937,0.0025396670680493116,0.0016335194231942296,0.005166969262063503,0.0024380101822316647,-0.0033073509112000465,-0.012998047284781933,0.004665696062147617,-0.010999965481460094,0.05109480395913124,0.019321801140904427,0.028477922081947327,0.0058400072157382965,-0.001028836821205914,-0.02307959645986557,-0.006488507147878408,0.03188517689704895,0.007648796774446964,-0.0008544428274035454,0.014680641703307629,-0.0204575527459383,-0.024692082777619362,-0.019069410860538483,0.007087931968271732,-0.0060152774676680565,0.006544593721628189,0.0174709465354681,0.007417439948767424,0.02992215007543564,-0.011273386888206005,-0.017905615270137787,-0.0023749128449708223,0.008847645483911037,-0.0015143356285989285,0.006358807440847158,0.01866278424859047,0.022616881877183914,-0.025477293878793716,0.0030917683616280556,-0.017134426161646843,0.00021799246314913034,0.008398953825235367,0.007326299324631691,0.006046826019883156,-0.027440320700407028,0.016082804650068283,-0.0025116237811744213,-0.04158814251422882,-0.011687025427818298,0.02222427725791931,0.015367701649665833,-0.030903663486242294,-0.0021751048043370247,-0.01727464236319065,0.01232500933110714,0.027748797088861465,-0.027258040383458138,-0.010509208776056767,0.0036631496623158455,0.021607324481010437,0.026108266785740852,0.029641717672348022,-0.0048865363933146,-0.011848273687064648,0.007978305220603943,-0.03281060606241226,0.014021625742316246,-0.000861453649122268,0.007901186123490334,-0.00933840312063694,0.017751378938555717,-0.012346041388809681,0.001147144241258502,-0.0063062263652682304,0.013811301440000534,-0.0005315072485245764,-0.0016089815180748701,0.009639867581427097,-0.031268224120140076,-0.006674293894320726,-0.02009299024939537,-0.007789012975990772,-0.03614775091409683,0.016657691448926926,0.012970004230737686,0.0037332577630877495,-0.004209992941468954,-0.015227485448122025,0.0005280018667690456,-0.0007094066240824759,0.04265378415584564,-0.023878827691078186,0.010999965481460094,-0.013264457695186138,0.00985019188374281,0.003705214709043503,-0.00016037235036492348,-0.0016317666741088033,-0.005051290616393089,-0.004732298664748669,0.0025309035554528236,0.02007896825671196,0.011343494988977909,-0.0064008720219135284,-0.013804290443658829,-0.010368992574512959,0.02521088346838951,0.013671085238456726,0.0014880449743941426,0.02978193387389183,0.007676840294152498,0.00008363680535694584,0.006632228847593069,0.020331356674432755,-0.013250436633825302,-0.01240913849323988,-0.0015178410103544593,0.010824695229530334,-0.0025379143189638853,0.020373422652482986,-0.0020296303555369377,0.006197558715939522,0.0056542204692959785,-0.03098779357969761,-0.004721782635897398,-0.015213463455438614,0.014386188238859177,0.011371538043022156,0.007459504995495081,0.020836135372519493,-0.010495186783373356,-0.0018000261625275016,-0.0026483344845473766,0.012892885133624077,0.0154237886890769,0.007014318369328976,0.009219218976795673,0.027244018390774727,-0.004427328240126371,0.01135751698166132,-0.03438102453947067,-0.013061144389212132,-0.021270805969834328,-0.01864876225590706,-0.012801744043827057,-0.0057068015448749065,-0.009001883678138256,0.007634775247424841,-0.0141898849979043,0.013579944148659706,-0.003238995559513569,-0.028996722772717476,0.012184793129563332,-0.00023880582011770457,-0.01692410185933113,-0.016517475247383118,-0.012184793129563332,0.030763447284698486,0.011813219636678696,-0.007277223747223616,-0.015353680588304996,-0.012395117431879044,0.01584443636238575,-0.011042030528187752,-0.003708719974383712,-0.020864179357886314,0.007375374902039766,0.003084757598116994,0.016853993758559227,-0.0059451693668961525,-0.018270177766680717,0.020864179357886314,-0.009976387023925781,-0.009857202880084515,-0.01081768423318863,-0.007242169696837664,0.02394893765449524,-0.02713184617459774,-0.02888454869389534,0.01381831243634224,0.002043651882559061,-0.0095136733725667,-0.020864179357886314,-0.017919637262821198,-0.02603815868496895,-0.0008150070207193494,0.020022882148623466,0.014582490548491478,-0.04548615217208862,0.00585402874276042,-0.007838089019060135,-0.003652633400633931,-0.01777942106127739,0.016503453254699707,0.019644297659397125,-0.020906243473291397,-0.026542937383055687,0.004364231135696173,0.0209763515740633,0.04495333135128021,0.027047716081142426,0.008223683573305607,0.006428915541619062,-0.009801116771996021,0.00022237421944737434,-0.038307081907987595,-0.0015748038422316313,0.026542937383055687,0.003358179470524192,-0.01170805748552084,0.006961737293750048,-0.023836763575673103,0.004402790684252977,0.03575514629483223,-0.008651343174278736,0.01585845835506916,-0.016868015751242638,-0.004851482342928648,0.009352424181997776,0.01741485856473446,-0.02536512166261673,-0.007999337278306484,0.010726544074714184,0.034969933331012726,0.026136310771107674,0.027047716081142426,0.0018473492236807942,0.01674182154238224,-0.027342170476913452,-0.006106418091803789,0.014238961040973663,0.010165678337216377,-0.007824067026376724,-0.022406557574868202,0.04010184854269028,0.017919637262821198,-0.006565626244992018,0.01240913849323988,0.022476665675640106,0.0222102552652359,-0.0022101588547229767,-0.006134461145848036,0.01470868568867445,0.021018417552113533,-0.01434412319213152,-0.01884506456553936,0.028393791988492012,-0.004833955317735672,-0.0063132368959486485,0.028267597779631615,-0.0056717474944889545,-0.024551866576075554,-0.0058995988219976425,0.02905280888080597,0.005994244944304228,-0.00008911400072975084,-0.005012731067836285,0.008434007875621319,-0.051515452563762665,-0.012493268586695194,-0.03224973753094673,-0.003288071136921644,-0.007796023972332478,0.005012731067836285,-0.016685735434293747,-0.017653226852416992,-0.03457732871174812,-0.024748168885707855,-0.001586196362040937,-0.000237272193771787,-0.027398256585001945,-0.012268922291696072,0.012093652039766312,-0.00019696002709679306,0.007277223747223616,0.006134461145848036,0.014890966936945915,-0.0009131583501584828,0.007894175127148628,0.0059171258471906185,-0.013229403644800186,0.01031290553510189,-0.029641717672348022,0.011588873341679573,0.014512382447719574,0.009079002775251865,0.0017570849740877748,-0.010761598125100136,0.022799164056777954,-0.009331392124295235,0.01887310855090618,0.0029550576582551003,-0.0022434601560235023,0.005903104320168495,0.032305825501680374,-0.00633777491748333,0.020878201350569725,0.006726874969899654,0.005825985688716173,0.0033424049615859985,-0.020822113379836082,-0.023528287187218666,-0.011792187578976154,-0.008300802670419216,0.02115863375365734,0.006541088223457336,0.00994834303855896,-0.015031183138489723,-0.008924764581024647,0.019111474975943565,-0.0025764736346900463,0.01091583538800478,0.009878234937787056,0.0059101153165102005,0.020149076357483864,0.011392571032047272,0.017162470147013664,-0.006628723349422216,-0.03466145694255829,-0.014834879897534847,-0.015788350254297256,0.019083432853221893,0.00034637798671610653,-0.01869082637131214,0.019966794177889824,-0.013355598784983158,-0.01920962706208229,-0.03275451809167862,0.0095136733725667,-0.009401500225067139,0.0008982603903859854,-0.0064183990471065044,-0.03889599069952965,-0.011651971377432346,-0.027510428801178932,0.0074034184217453,-0.000874598918017,-0.02393491566181183,0.00769787235185504,-0.023822741582989693,-0.007501569576561451,0.0192236490547657,0.018971258774399757,-0.006958231795579195,-0.032838646322488785,-0.034969933331012726,-0.011126159690320492,0.0001533615286462009,0.026809347793459892,0.00661119632422924,0.020850157365202904,0.00002112828951794654,-0.025295013561844826,-0.027622602880001068,-0.02568761818110943,0.01454042550176382,-0.014666620641946793,0.026556959375739098,0.009450575336813927,0.014764771796762943,0.005762888118624687,0.011665992438793182,0.01233201939612627,-0.008784548379480839,-0.015606069006025791,-0.0020909749437123537,-0.004437844734638929,0.005131915211677551,-0.012493268586695194,-0.008959818631410599,0.024187304079532623,0.011070073582231998,0.008637321181595325,-0.029866062104701996,-0.004613114986568689,0.009135088883340359,0.0030339292716234922,-0.004444855265319347,-0.0670233741402626,-0.016811929643154144,0.006877607200294733,-0.03292277827858925,0.005394820589572191,-0.023710569366812706,-0.0025554413441568613,0.003247759072110057,-0.005265120416879654,0.018186047673225403,-0.0006502529140561819,0.026711197569966316,-0.012346041388809681,0.024257412180304527,0.02745434269309044,0.007508580572903156,-0.007571677677333355,-0.02163536846637726,-0.02042950876057148,-0.011392571032047272,0.01401461474597454,0.0080203702673316,0.022140147164463997,0.015101291239261627,-0.004364231135696173,0.003883990226313472,0.014666620641946793,-0.02802922949194908,-0.012752668932080269,-0.0009464597096666694,-0.02854803018271923,-0.01232500933110714,-0.036175794899463654,-0.026921521872282028,0.001529233530163765,-0.010235786437988281,-0.003687687451019883,-0.0016116106417030096,0.001665944349952042,-0.011119149625301361,-0.019616253674030304,0.007087931968271732,-0.020191140472888947,0.013362609781324863,0.015381723642349243,0.019307779148221016,0.014568469487130642,-0.005836501717567444,-0.005959190893918276,0.036736659705638885,0.0028183467220515013,0.002308310242369771,0.034465156495571136,0.024173282086849213,0.0035842780489474535,-0.028968678787350655,0.009429543279111385,-0.002953304909169674,-0.013797279447317123,-0.022785142064094543,0.004802406765520573,0.010705511085689068,0.009177153930068016,-0.03166083246469498,0.002676377771422267,-0.003666655160486698,0.027917057275772095,-0.012100663036108017,-0.004858493339270353,0.0013522105291485786,0.006576142273843288,-0.029473457485437393,-0.004960149992257357,-0.02305155247449875,0.021747540682554245,0.00010828419908648357,0.004953139461576939,-0.002778034657239914,-0.001665944349952042,0.012913917191326618,0.018396373838186264,0.005528025794774294,0.023037530481815338,-0.02222427725791931,0.004059260711073875,0.02113058976829052,0.01469466369599104,0.008784548379480839,-0.003375706495717168,0.0033862225245684385,0.041672270745038986,-0.01707834005355835,-0.01762518286705017,-0.020780049264431,-0.0008575100218877196,0.007613742724061012,-0.01850854605436325,-0.013600977137684822,-0.0022960412316024303,-0.024383606389164925,-0.013271468691527843,0.028127381578087807,-0.009625846520066261,0.004118852782994509,-0.03595144674181938,0.0025151290465146303,-0.025771748274564743,-0.022630903869867325,-0.0035316969733685255,0.018732892349362373,-0.029305197298526764,-0.014610533602535725,-0.02480425499379635,-0.013236414641141891,0.009920299984514713,0.027426300570368767,-0.019321801140904427,0.0025554413441568613,0.054544124752283096,-0.02978193387389183,-0.0021418032702058554,-0.00677595054730773,0.001033218577504158,-0.026851413771510124,0.0012891131918877363,-0.028421835973858833,-0.017204534262418747,0.003326630685478449,-0.003635106375440955,-0.012612452730536461,0.0031145536340773106,0.03278256207704544,0.01496107503771782,0.005832996219396591,0.025603488087654114,0.002755249384790659,0.013411684893071651,0.00013813492842018604,-0.0015353680355474353,0.022995466366410255,0.02341611497104168,-0.007354342844337225,0.009906278923153877,0.01539574470371008,0.015718242153525352,0.016124868765473366,-0.007880154065787792,-0.01321538258343935,-0.010796652175486088,-0.027187932282686234,-0.013208371587097645,-0.0007817056612111628,-0.020555702969431877,-0.01277370098978281,-0.006039815489202738,0.005843512713909149,-0.01075458712875843,-0.006684809923171997,0.018017789348959923,0.047112662345170975,0.026556959375739098,0.03224973753094673,0.014933031052350998,0.0024678062181919813,0.010796652175486088,-0.003757795784622431,0.0017150200437754393,-0.008840635418891907,0.005072323139756918,-0.03934468328952789,-0.012451203539967537,-0.008146564476191998,0.036540355533361435,0.003543965984135866,-0.0016764606116339564,-0.020359400659799576,-0.0036771714221686125,-0.044280294328927994,-0.012766689993441105,-0.02219623327255249,-0.0018964249175041914,-0.0007124738767743111,0.016615627333521843,0.004904063418507576,0.02006494626402855,0.001687853247858584,0.04085901752114296,-0.012934950180351734,-0.019111474975943565,0.014862922951579094,0.004872514866292477,0.02041548676788807,-0.0163632370531559,-0.041139449924230576,0.0020418991334736347,0.012051586993038654,0.014000593684613705,-0.009618835523724556,0.02978193387389183,-0.020513638854026794,-0.025477293878793716,-0.020177120342850685,-0.008462050929665565,-0.01390244159847498,0.006369323469698429,0.015578025951981544,-0.025407185778021812,-0.011315451934933662,0.015255528502166271,-0.004245046991854906,-0.008083467371761799,-0.00266410899348557,0.030398884788155556,0.023360028862953186,0.010761598125100136,-0.006467475090175867,-0.020205162465572357,0.006197558715939522,0.006362312473356724,0.021957864984869957,-0.016475411131978035,0.0010744070168584585,0.04178444296121597,-0.005615660920739174,0.006818015594035387,-0.014610533602535725,0.018634740263223648,-0.038839902728796005,-0.027370212599635124,-0.003810376860201359,-0.011785176582634449,0.011939413845539093,0.009128077886998653,-0.006043320521712303,-0.0019262208370491862,-0.006281688343733549,-0.015886502340435982,-0.02572968229651451,-0.02536512166261673,0.007010812871158123,-0.0021558250300586224,-0.027398256585001945,-0.020892221480607986,-0.005205528344959021,0.023668503388762474,-0.016293128952383995,-0.018059853464365005,0.008328845724463463,-0.006134461145848036,-0.005394820589572191,-0.003743774024769664,-0.01707834005355835,-0.023836763575673103,0.030903663486242294,0.016096826642751694,-0.00783107802271843,-0.0026360657066106796,0.22894510626792908,0.006281688343733549,0.0007427079835906625,0.013600977137684822,-0.023640461266040802,0.018382351845502853,0.00017811846919357777,0.0021873735822737217,0.0018876614049077034,0.015914544463157654,-0.014288036152720451,-0.0055034882389009,-0.015283572487533092,-0.012219847179949284,0.004988193511962891,0.009128077886998653,-0.03735361248254776,-0.03858751431107521,-0.018634740263223648,-0.02236449345946312,0.02271503396332264,-0.006649755872786045,-0.015325636602938175,-0.007326299324631691,0.012121695093810558,-0.00031285753357224166,-0.025056645274162292,0.008504115976393223,0.024411650374531746,0.021607324481010437,-0.016952145844697952,-0.02007896825671196,0.0154237886890769,-0.000566999486181885,-0.008945797570049763,0.022308407351374626,0.038110777735710144,-0.020527660846710205,0.015634112060070038,0.015017161145806313,-0.00023968216555658728,-0.012037565931677818,0.010768608190119267,-0.018087897449731827,0.011098116636276245,-0.0010253314394503832,-0.0029673264361917973,-0.003845430910587311,0.030258668586611748,0.005100366193801165,-0.018957238644361496,-0.0011848274152725935,-0.006740896496921778,0.010551273822784424,-0.023135682567954063,-0.012219847179949284,-0.012934950180351734,0.012535333633422852,-0.0010875524021685123,0.016054760664701462,0.003792849835008383,0.012563376687467098,-0.027594558894634247,0.022490687668323517,-0.017176492139697075,0.03362385928630829,-0.021747540682554245,-0.008756505325436592,-0.0032635333482176065,-0.014316080138087273,-0.017022253945469856,-0.023724591359496117,0.005338734015822411,0.0004557028296403587,0.007985316216945648,-0.02023320645093918,-0.004770858213305473,0.03471754491329193,0.015381723642349243,0.056591279804706573,-0.031071921810507774,0.009969376027584076,-0.02076602727174759,-0.004125863313674927,-0.007789012975990772,-0.028968678787350655,0.023360028862953186,-0.004578060936182737,-0.016994209960103035,-0.00837091077119112,-0.00006813633808633313,-0.016335193067789078,-0.012261911295354366,0.010418067686259747,-0.0029147453606128693,0.00783107802271843,0.0023328480310738087,-0.009471608325839043,-0.033231254667043686,-0.003792849835008383,-0.03642818331718445,0.06466773897409439,0.02006494626402855,-0.006039815489202738,-0.04293421655893326,-0.022098083049058914,0.011574852280318737,0.024439694359898567,0.01029187347739935,-0.014512382447719574,-0.019504081457853317,-0.004157411865890026,0.00018874423403758556,-0.0030128967482596636,0.008230694569647312,0.02676728367805481,0.0193498432636261,0.00378934433683753,-0.02185971476137638,-0.003384470008313656,0.004753331188112497,-0.02891259267926216,-0.012843809090554714,0.005773404613137245,-0.027356192469596863,-0.009079002775251865,-0.02922106720507145,-0.022967422381043434,-0.011322462931275368,-0.03721339628100395,0.027734775096178055,-0.012752668932080269,0.017555074766278267,-0.01742888055741787,-0.00392255000770092,0.0029112400952726603,0.022308407351374626,-0.017386816442012787,-0.025393163785338402,0.006930188741534948,0.014989118091762066,0.009871224872767925,0.007175567094236612,0.016110848635435104,0.001406544353812933,-0.02041548676788807,0.016966167837381363,0.0019086938118562102,-0.02164939045906067,-0.001406544353812933,-0.012906906194984913,-0.004444855265319347,0.0035141699481755495,0.010326927527785301,-0.01214973907917738,0.00024253031006082892,-0.017162470147013664,-0.01852256804704666,0.0179897453635931,-0.03222169727087021,-0.03962511569261551,-0.01011660322546959,0.012205825187265873,0.011063062585890293,-0.012240879237651825,-0.014975096099078655,-0.18059854209423065,0.021088525652885437,0.009212207980453968,-0.01504520419985056,0.03264234587550163,-0.0003075994027312845,-0.006996791344136,0.006818015594035387,0.012689570896327496,-0.0142529821023345,0.0024152251426130533,-0.01479281485080719,0.00045833189506083727,-0.020359400659799576,0.001524851773865521,0.0036421173717826605,0.004630642011761665,0.01953212544322014,0.045514196157455444,-0.011042030528187752,0.02553337998688221,-0.017344750463962555,0.02131287194788456,-0.0023275897838175297,0.001973543781787157,0.011203278787434101,-0.03438102453947067,-0.015746286138892174,-0.024579910561442375,-0.02992215007543564,-0.013720160350203514,0.004122357815504074,0.010425078682601452,0.011518765240907669,0.024621974676847458,-0.0031583711970597506,0.016629647463560104,-0.015493896789848804,0.0039435820654034615,0.014386188238859177,0.03011845238506794,0.030735403299331665,0.005668241996318102,-0.0026097751688212156,0.004500941839069128,0.006597174797207117,0.0012540591415017843,-0.0251968614757061,-0.013544890098273754,-0.006663777399808168,0.032109521329402924,-0.009029926732182503,0.006432420574128628,-0.014049668796360493,0.013278479687869549,0.0039716255851089954,-0.0017194018000736833,-0.0003141720371786505,-0.007417439948767424,0.0029024765826761723,0.0044483607634902,-0.0060678585432469845,-0.01233201939612627,0.0011199773289263248,-0.006127450615167618,-0.0027570021338760853,0.0039260550402104855,0.003510664450004697,-0.017344750463962555,0.001234779367223382,0.01322239264845848,-0.01689605973660946,0.006502529140561819,-0.011469690129160881,0.05810561776161194,0.008693408221006393,-0.02745434269309044,0.005230066366493702,0.01320136059075594,0.004574555438011885,-0.01128039788454771,0.022672967985272408,0.007641786243766546,0.016419323161244392,-0.01883104257285595,0.012794733047485352,-0.020008860155940056,-0.0027096790727227926,0.009464597329497337,0.008441018871963024,-0.005159958265721798,0.009233240969479084,0.021705476567149162,-0.023317962884902954,-0.0069652427919209,0.02181764878332615,0.019756469875574112,-0.011602895334362984,0.005780415143817663,-0.002681636018678546,-0.009043948724865913,-0.008363899774849415,0.00034988336847163737,0.010614370927214622,0.04293421655893326,-0.0008272759150713682,0.004045239184051752,-0.00032359283068217337,0.013523858040571213,-0.023836763575673103,-0.02288329228758812,0.003708719974383712,0.033006906509399414,0.03572710230946541,0.0022627399303019047,0.040270108729600906,0.021985908970236778,-0.0013995334738865495,-0.011687025427818298,0.02359839528799057,0.04772961512207985,0.000874598918017,-0.008777537383139133,-0.003284565871581435,-0.00818161852657795,-0.006796983070671558,-0.1032552495598793,-0.025070667266845703,0.00949965137988329,0.006677799392491579,-0.023107638582587242,-0.004287112038582563,-0.009723997674882412,0.004693739116191864,-0.004423822741955519,0.028996722772717476,0.002308310242369771,-0.025140775367617607,-0.015760308131575584,-0.0008557573310099542,0.0012014780659228563,-0.01599867455661297,-0.008405964821577072,-0.03410059213638306,-0.01240913849323988,0.02429947815835476,0.0027745291590690613,-0.014722706750035286,-0.0026658615097403526,-0.013825323432683945,-0.0308475773781538,-0.014764771796762943,-0.0060152774676680565,0.013755214400589466,0.0006305350107140839,0.00003880594522343017,-0.004939117468893528,-0.02908085100352764,0.003719236236065626,-0.020036902278661728,-0.0034037495497614145,0.004809417761862278,-0.017667248845100403,-0.005079334136098623,0.03508210927248001,-0.017358772456645966,0.003331888699904084,0.0015660403296351433,0.011946424841880798,-0.01444227434694767,-0.012198814190924168,-0.006786467041820288,-0.013544890098273754,0.049945030361413956,0.004406295716762543,-0.0008456793148070574,-0.009001883678138256,0.002069942420348525,-0.03561493009328842,-0.027594558894634247,0.03628796711564064,-0.02922106720507145,-0.010516218841075897,0.009590791538357735,-0.031969305127859116,-0.016811929643154144,0.017400838434696198,-0.009036937728524208,0.0005862792022526264,0.020850157365202904,0.009135088883340359,-0.00775395892560482,-0.030370840802788734,0.011126159690320492,0.02059776894748211,0.010712522082030773,-0.0192236490547657,0.024257412180304527,-0.003240748308598995,0.010586327873170376,-0.00660068029537797,-0.0023626438342034817,0.013671085238456726,-0.02854803018271923,0.0056717474944889545,0.013944506645202637,-0.001920962706208229,-0.014330101199448109,-0.006590164266526699,-0.019279735162854195,0.018410393968224525,-0.0040136901661753654,0.0060503315180540085,0.02445371448993683,0.011553819291293621,-0.0425976999104023,-0.004231025464832783,0.011841262690722942,0.01339065283536911,0.03227778151631355,0.008349877782166004,0.009296338073909283,-0.006944210268557072,-0.012892885133624077,-0.017849529162049294,0.01974244974553585,-0.04108336195349693,-0.010453121736645699,-0.07751154899597168,0.015984652563929558,-0.0016773369861766696,-0.01688203774392605,0.004311650060117245,-0.008405964821577072,-0.010277851484715939,-0.021046459674835205,-0.006449948064982891,0.027692710980772972,-0.029641717672348022,0.02111656777560711,0.008034391328692436,0.0007926600519567728,0.02446773648262024,-0.00952068343758583,0.03564297407865524,-0.0035667510237544775,0.020008860155940056,0.007073909975588322,0.006937199272215366,0.011581863276660442,0.01953212544322014,0.017232578247785568,-0.003573761787265539,-0.0059802234172821045,-0.03729752451181412,-0.009709975682199001,0.017008231952786446,-0.007796023972332478,0.021242763847112656,-0.013383641839027405,0.00656913174316287,-0.003023413009941578,0.010263830423355103,-0.007536623626947403,0.008637321181595325,0.01972842775285244,0.012177782133221626,0.020850157365202904,-0.021018417552113533,-0.04099923372268677,-0.0007589205051772296,-0.02270101197063923,0.0007457752362824976,-0.008174607530236244,-0.022112103179097176,-0.009738018736243248,0.023346006870269775,0.014295047149062157,0.03668057173490524,0.012198814190924168,-0.037073180079460144,-0.02922106720507145,-0.004406295716762543,-0.02870226837694645,0.010165678337216377,0.010277851484715939,0.007382385898381472,-0.02062581107020378,0.04632745310664177,0.019153540953993797,0.03982141613960266,-0.01936386525630951,0.01189734973013401,0.002615033183246851,-0.03539058193564415,0.0029655739199370146,0.020667877048254013,-0.05709606036543846,-0.021551238372921944,-0.0002528274490032345,0.004416812211275101,0.00301464949734509,0.02272905595600605,-0.010418067686259747,-0.021593304350972176,0.01742888055741787,-0.01056529488414526,0.004101325757801533,0.021901778876781464,0.004651674535125494,-0.012177782133221626,0.013446738943457603,0.004900558385998011,0.01745692454278469,0.0013574686599895358,-0.011665992438793182,-0.004995204042643309,-0.0056647369638085365,-0.05070219933986664,-0.0014889213489368558,0.018031811341643333,0.03561493009328842,0.023682525381445885,-0.007024834398180246,0.00021580158500000834,0.021957864984869957,0.03611970692873001,-0.01937788724899292,0.016335193067789078,0.00376130104996264,-0.006867091171443462,-0.02693554386496544,0.013783258385956287,0.025841856375336647,-0.024257412180304527,-0.02113058976829052,0.02661304548382759,-0.010130624286830425,-0.009156121872365475,-0.007091437000781298,-0.027734775096178055,0.027580536901950836,0.005240582395344973,0.008139553479850292,0.0025834846310317516,-0.015185420401394367,-0.02714586816728115,0.04705657437443733,0.005538542289286852,0.005296668969094753,0.03502602130174637,-0.023486223071813583,0.01672779954969883,0.007368364371359348,-0.005173979792743921,-0.032502129673957825,0.023906871676445007,-0.015634112060070038,-0.004644663538783789,0.0037858388386666775,-0.014947053045034409,-0.018732892349362373,-0.015634112060070038,0.005272131413221359,0.006169515196233988,0.004483414813876152,-0.022126125171780586,0.09046752750873566,0.02361241728067398,-0.02271503396332264,-0.008398953825235367,-0.004963655490428209,0.018704848363995552,0.007943251170217991,0.015297593548893929,-0.011673003435134888,-0.04276596009731293,0.0004151715838816017,0.014933031052350998,-0.003515922697260976,-0.015339658595621586,-0.010460132732987404,-0.0040312171913683414,-0.03895207494497299,0.022280363366007805,-0.0036421173717826605,-0.011588873341679573,0.021957864984869957,0.01920962706208229,0.0020822114311158657,-0.010551273822784424,-0.023668503388762474,0.010165678337216377,0.0209763515740633,0.01550791785120964,-0.002579979132860899,-0.02148113027215004,0.023724591359496117,0.0038173876237124205,-0.04599093273282051,-0.015620090998709202,-0.02164939045906067,0.0011664240155369043,-0.0023749128449708223,0.0005700667388737202,0.01991070806980133,0.022070039063692093,0.01796170324087143,0.0005485960864461958,-0.01812996156513691,-0.006043320521712303,0.014196895994246006,0.0006493765395134687,-0.010481164790689945,-0.01240913849323988,-0.02836574800312519]],"metadata":{"location":"https://github.com/libp2p/go-libp2p/blob/master/examples/chat-with-mdns/mdns.go","source_type":"webpage"}},{"raw_content":"Home\nSign in\nContact us\nSign in\nContact us\nHome\nEnglish\nУкраїнська\nApril 14, 2023\n2 min read\nviews 188\nSasha Bondar\nEngineering\nGo\n9\nError Handling and Logging in Go\nIn this tutorial, we will explore error handling and logging methods in Go. As a software developer, understanding how to handle errors effectively is essential. By the end of this guide, you will have a solid grasp on error handling in Go, and you will be able to implement logging efficiently in your applications.\nTable of Contents\nError Handling in Go\nCreating Custom Errors\nError Wrapping\nLogging Errors in Go\nConclusion\n1. Error Handling in Go\nGo uses a unique approach to error handling, which differs from the try-catch mechanism seen in other programming languages. In Go, errors are considered as values, and functions that may produce an error often return an additional return value, typically named \"err\".\nHere is an example of a simple function that reads a file and returns its content as a string:\npackage main\nimport (\n\"fmt\"\n\"io/ioutil\"\n)\nfunc readFile(filename string) (string, error) {\ndata, err := ioutil.ReadFile(filename)\nif err != nil {\nreturn \"\", err\n}\nreturn string(data), nil\n}\nfunc main() {\ncontent, err := readFile(\"example.txt\")\nif err != nil {\nfmt.Println(\"Error:\", err)\nreturn\n}\nfmt.Println(\"File content:\", content)\n}\nGoCopy\nIn this example, the readFile function returns two values: the content of the file as a string, and an error value. If an error occurs while reading the file, it returns an empty string and the error. In the main function, we check if the error value is not nil before proceeding with the code execution.\n2. Creating Custom Errors\nGo provides a simple way to create custom errors using the errors package. This can be helpful when you want to provide more context or specific error messages.\nHere's an example of creating and using a custom error:\npackage main\nimport (\n\"errors\"\n\"fmt\"\n)\nvar ErrInvalidNumber = errors.New(\"invalid number\")\nfunc checkNumber(n int) (int, error) {\nif n < 0 {\nreturn 0, ErrInvalidNumber\n}\nreturn n * 2, nil\n}\nfunc main() {\nresult, err := checkNumber(-1)\nif err != nil {\nfmt.Println(\"Error:\", err)\nreturn\n}\nfmt.Println(\"Result:\", result)\n}\nGoCopy\nIn this example, we defined a custom error named ErrInvalidNumber using the errors.New function. Then, we used it in the checkNumber function to return an error when the input number is negative. In the main function, we checked for the error in the same way as before.\n3. Error Wrapping\nError wrapping is a technique used to add context to an error without losing the original error information. This can be useful when you want to provide more information about what caused the error or add a custom message to the error.\nGo 1.13 introduced the fmt.Errorf function, which allows you to wrap errors with additional context. Here's an example:\npackage main\nimport (\n\"errors\"\n\"fmt\"\n)\nvar ErrInvalidNumber = errors.New(\"invalid number\")\nfunc checkNumber(n int) (int, error) {\nif n < 0 {\nreturn 0, fmt.Errorf(\"checkNumber: %w\", ErrInvalidNumber)\n}\nreturn n * 2, nil\n}\nfunc main() {\nresult, err := checkNumber(-1)\nif err != nil {\nfmt.Println(\"Error:\", err)\nreturn\n}\nfmt.Println(\"Result:\", result)\n}\nGoCopy\nIn this example, we wrapped the ErrInvalidNumber error with additional context using the fmt.Errorf function. This allows us to preserve the original error information while adding more context to the error message.\n4. Logging Errors in Go\nLogging errors is an essential part of any application. Go provides the log package for simple logging functionality. Here's an example of how to use the log package to log errors:\npackage main\nimport (\n\"errors\"\n\"fmt\"\n\"log\"\n\"os\"\n)\nvar ErrInvalidNumber = errors.New(\"invalid number\")\nfunc checkNumber(n int) (int, error) {\nif n < 0 {\nreturn 0, fmt.Errorf(\"checkNumber: %w\", ErrInvalidNumber)\n}\nreturn n * 2, nil\n}\nfunc main() {\nlogFile, err := os.OpenFile(\"errors.log\", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)\nif err != nil {\nlog.Fatal(err)\n}\ndefer logFile.Close()\nlog.SetOutput(logFile)\nresult, err := checkNumber(-1)\nif err != nil {\nlog.Println(\"Error:\", err)\nreturn\n}\nfmt.Println(\"Result:\", result)\n}\nGoCopy\nIn this example, we opened a log file named \"errors.log\" and set it as the output for the log package. Then, we used log.Println to log the error message. This will write the error message to the log file, along with a timestamp.\n5. Conclusion\nIn this tutorial, we covered the basics of error handling and logging in Go. We learned how to handle errors using the Go error handling mechanism, create custom errors, wrap errors with additional context, and log errors using the log package. These skills are essential for any Go developer, and they will help you build more robust and maintainable applications. If you are planning to hire remote Go developers, make sure they are proficient in these concepts.\nReport Outdated Content\nShare:\nFacebook\nTwitter\nLinkedIn\n9\nTalk to this post (AI inside)✏️ Start conversation\nGlossary\nCreating Custom Errors\nCustom errors can be created in Go using the errors package. This can be beneficial when you need to provide more context or specific error messages. A custom error is defined and used in a function to return an error when a specific condition is met.\nError Handling in Go\nError handling in Go involves explicitly checking for errors as they are considered values in the language. When a function returns a result and an error, you check the value of the error and handle it appropriately if it's not nil. Learn more about Error Handling in Go\nError Wrapping\nError wrapping in Go is a technique used to add context to an error without losing the original error information. This can be useful when you want to provide more information about what caused the error or add a custom message to the error. The fmt.Errorf function, introduced in Go 1.13, allows for the wrapping of errors with additional context.\nLogging Errors in Go\nGo provides the log package for simple logging functionality. This is an essential part of any application as it helps in recording errors that occur during the execution of a program. It allows for tracking of errors along with their timestamps, helping developers debug and fix issues more efficiently.\nCategories\nRecruiting\nEngineering\nCareer\nManaging\nSoft Skills\nSuccess stories\nGlossary\nSocial Media\nInstagram\nFacebook\nLinkedIn\nTwitter\nApply as Developer\nApply\nContact us\nSend us a message\nEng\nEnglish\nУкраїнська\nCategories\nRecruiting\nEngineering\nCareer\nManaging\nSoft Skills\nSuccess stories\nGlossary\nSocial Media\nInstagram\nFacebook\nLinkedIn\nTwitter\nApply as Developer\nApply\nContact us\nSend us a message\nPrivacy Policy Terms\n© Reintech Ltd. is a company registered in England and Wales (No. 08418922)","summary":"This tutorial explores error handling and logging mechanisms in Go. It explains that Go uses a unique approach to error handling, where errors are considered as values and functions return an additional \"err\" value. The tutorial provides examples of error handling, creating custom errors, error wrapping, and logging errors using the log package. It emphasizes the importance of these concepts for building robust and maintainable applications in Go.","chunks":["Home Sign in Contact us Sign in Contact us Home English Українська April 14, 2023 2 min read views 188 Sasha Bondar Engineering Go 9 Error Handling and Logging in Go In this tutorial, we will explore error handling and logging methods in Go. As a software developer, understanding how to handle errors effectively is essential. By the end of this guide, you will have a solid grasp on error handling in Go, and you will be able to implement logging efficiently in your applications. Table of Contents Error Handling in Go Creating Custom Errors Error Wrapping Logging Errors in Go Conclusion 1. Error Handling in Go Go uses a unique approach to error handling, which differs from the try-catch mechanism seen in other programming languages. In Go, errors are considered as values, and functions that may produce an error often return an additional return value, typically named \"err\". Here is an example of a simple function that reads a file and returns its content as a string: package main import ( \"fmt\" \"io/ioutil\" ) func readFile(filename string) (string, error) { data, err := ioutil.ReadFile(filename) if err != nil { return \"\", err } return string(data), nil } func main() { content, err := readFile(\"example.txt\") if err != nil { fmt.Println(\"Error:\", err) return } fmt.Println(\"File content:\", content) } GoCopy In this example, the readFile function returns two values: the content of the file as a string, and an error value. If an error occurs while reading the file, it returns an empty string and the error. In the main function, we check if the error value is not nil before proceeding with the code execution. 2. Creating Custom Errors Go provides a simple way to create custom errors using the errors package. This can be helpful when you want to provide more context or specific error messages. Here's an example of creating and using a custom error: package main import ( \"errors\" \"fmt\" ) var ErrInvalidNumber = errors.New(\"invalid number\") func checkNumber(n int) (int, error) { if n < 0 { return 0, ErrInvalidNumber } return n * 2, nil } func main() { result, err := checkNumber(-1) if err != nil { fmt.Println(\"Error:\", err) return } fmt.Println(\"Result:\", result) } GoCopy In this example, we defined a custom error named ErrInvalidNumber using the errors.New function. Then, we used it in the checkNumber function to return an error when the input number is negative. In the main function, we checked for the error in the same way as before. 3. Error Wrapping Error wrapping is a technique used to add context to an error without losing the original error information. This can be useful when you want to provide more information about what caused the error or add a custom message to the error. Go 1.13 introduced the fmt.Errorf function, which allows you to wrap errors with additional context. Here's an example: package main import ( \"errors\" \"fmt\" ) var ErrInvalidNumber = errors.New(\"invalid number\") func checkNumber(n int) (int, error) { if n < 0 { return 0, fmt.Errorf(\"checkNumber: %w\", ErrInvalidNumber) } return n * 2, nil } func main() { result, err := checkNumber(-1) if err != nil { fmt.Println(\"Error:\", err) return } fmt.Println(\"Result:\", result) } GoCopy In this example, we wrapped the ErrInvalidNumber error with additional context using the fmt.Errorf function. This allows us to preserve the original error information while adding more context to the error message. 4. Logging Errors in Go Logging errors is an essential part of any application. Go provides the log package for simple logging functionality. Here's an example of how to use the log package to log errors: package main import ( \"errors\" \"fmt\" \"log\" \"os\" ) var ErrInvalidNumber = errors.New(\"invalid number\") func checkNumber(n int) (int, error) { if n < 0 { return 0, fmt.Errorf(\"checkNumber: %w\", ErrInvalidNumber) } return n * 2, nil } func main() { logFile, err := os.OpenFile(\"errors.log\", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644) if err != nil { log.Fatal(err) } defer logFile.Close() log.SetOutput(logFile) result, err := checkNumber(-1) if err != nil { log.Println(\"Error:\", err) return } fmt.Println(\"Result:\", result) } GoCopy In this example, we opened a log file named \"errors.log\" and set it as the output for the log package. Then, we used log.Println to log the error message. This will write the error message to the log file, along with a timestamp. 5. Conclusion In this tutorial, we covered the basics of error handling and logging in Go. We learned how to handle errors using the Go error handling mechanism, create custom errors, wrap errors with additional context, and log errors using the log package. These skills are essential for any Go developer, and they will help you build more robust and maintainable applications. If you are planning to hire remote Go developers, make sure they are proficient in these concepts. Report Outdated Content Share: Facebook Twitter LinkedIn 9 Talk to this post (AI inside)✏️ Start conversation Glossary Creating Custom Errors Custom errors can be created in Go using the errors package. This can be beneficial when you need to provide more context or specific error messages. A custom error is defined and used in a function to return an error when a specific condition is met. Error Handling in Go Error handling in Go involves explicitly checking for errors as they are considered values in the language. When a function returns a result and an error, you check the value of the error and handle it appropriately if it's not nil. Learn more about Error Handling in Go Error Wrapping Error wrapping in Go is a technique used to add context to an error without losing the original error information. This can be useful when you want to provide more information about what caused the error or add a custom message to the error. The fmt.Errorf function, introduced in Go 1.13, allows for the wrapping of errors with additional context. Logging Errors in Go Go provides the log package for simple logging functionality. This is an essential part of any application as it helps in recording errors that occur during the execution of a program. It allows for tracking of errors along with their timestamps, helping developers debug and fix issues more efficiently. Categories Recruiting Engineering Career Managing Soft Skills Success stories Glossary Social Media Instagram Facebook LinkedIn Twitter Apply as Developer Apply Contact us Send us a message Eng English Українська Categories Recruiting Engineering Career Managing Soft Skills Success stories Glossary Social Media Instagram Facebook LinkedIn Twitter Apply as Developer Apply Contact us Send us a message Privacy Policy Terms © Reintech Ltd. is a company registered in England and Wales (No. 08418922)"],"chunk_summaries":["This tutorial explores error handling and logging mechanisms in Go. It explains that Go uses a unique approach to error handling, where errors are considered as values and functions return an additional \"err\" value. The tutorial provides examples of error handling, creating custom errors, error wrapping, and logging errors using the log package. It emphasizes the importance of these concepts for building robust and maintainable applications in Go."],"e_summary":[0.00288670277222991,0.027175284922122955,0.010976184159517288,-0.02340243197977543,-0.013386244885623455,0.010915764607489109,0.004528095480054617,0.0011337021132931113,-0.0034841832239180803,-0.01710539311170578,0.01964300498366356,-0.014446940273046494,-0.023979773744940758,0.021536145359277725,0.003074674168601632,-0.011392406187951565,0.01795126311480999,-0.01687714084982872,0.007001932710409164,-0.005770049057900906,-0.04350193962454796,0.025590956211090088,-0.000013898550605517812,-0.011399119161069393,0.005595504306256771,-0.011264854110777378,0.0032743937335908413,-0.019267063587903976,0.001327547593973577,-0.005256484262645245,0.005679419729858637,-0.020032374188303947,-0.02346956543624401,-0.009398567490279675,-0.0022573345340788364,-0.008868219330906868,-0.00007578643999295309,0.015977565199136734,-0.0050517297349870205,-0.004195788875222206,0.038292448967695236,0.004575088154524565,0.004471032880246639,-0.0049443175084888935,-0.002567822812125087,0.03498952463269234,-0.0003151037381030619,-0.04264264181256294,-0.010217585600912571,-0.021992648020386696,0.02419459819793701,0.0031401284504681826,-0.05094023421406746,-0.008519129827618599,0.005333686713129282,0.012486668303608894,-0.015386797487735748,-0.006028509698808193,0.01902538537979126,-0.011050029657781124,-0.004403899889439344,-0.0022573345340788364,-0.002421809360384941,0.006773681845515966,-0.0009289476438425481,-0.01611183024942875,-0.00709591805934906,0.02477193810045719,-0.018018396571278572,-0.00373928714543581,0.007445008028298616,0.0036117350682616234,0.006834100931882858,0.006397739052772522,0.01852860487997532,-0.029753178358078003,-0.045972421765327454,-0.0022422296460717916,0.021119922399520874,0.0024805504363030195,0.0018964966293424368,-0.015440503135323524,0.0014425122644752264,0.043287117034196854,-0.011003036983311176,-0.015749312937259674,0.018770281225442886,0.0037292172200977802,-0.004407256841659546,-0.01060695480555296,0.017279937863349915,-0.014487219974398613,-0.0004799982416443527,0.009029338136315346,0.008237172849476337,-0.02286537177860737,-0.041138872504234314,0.018246646970510483,-0.01638036035001278,-0.0012654499150812626,-0.0018109024967998266,0.0026752350386232138,-0.003222365863621235,0.0010707653127610683,-0.021428734064102173,-0.003672154387459159,0.02819570153951645,-0.03302925080060959,0.015427077189087868,-0.00441061332821846,-0.011808628216385841,0.03206254169344902,-0.002089502988383174,0.018421191722154617,-0.0008370598661713302,0.046697452664375305,0.05416259914636612,-0.00355802895501256,0.0011261497857049108,-0.02803458273410797,0.0010707653127610683,0.0035983086563646793,0.02255656197667122,0.004014530684798956,-0.00810962077230215,-0.021187055855989456,-0.02910870499908924,0.00177901447750628,0.02910870499908924,-0.02439599484205246,0.025872912257909775,0.01664889045059681,0.011694503016769886,0.01871657557785511,0.0000273512996500358,0.023966345936059952,-0.0238589346408844,0.011956320144236088,-0.025765500962734222,-0.0168368611484766,0.01463491190224886,0.004699283745139837,-0.029054999351501465,0.016554905101656914,-0.01668917015194893,0.0025728577747941017,0.014178410172462463,0.028249407187104225,0.022194044664502144,0.01419183611869812,0.026020605117082596,-0.023214461281895638,-0.004074950236827135,-0.005853964947164059,-0.01116415485739708,0.0357414074242115,-0.028974439948797226,-0.00419914536178112,-0.0015893648378551006,-0.01296330988407135,0.016407212242484093,0.02708129957318306,0.013426524586975574,-0.005021520424634218,0.017467908561229706,0.013909879140555859,0.024785364046692848,-0.004974527284502983,0.011063456535339355,-0.002891737734898925,-0.021871808916330338,0.03018282726407051,-0.032653309404850006,0.017347069457173347,-0.0016279660630971193,0.018662869930267334,0.012573940679430962,0.029699472710490227,-0.021683836355805397,-0.01975041814148426,0.02140188030898571,0.024718232452869415,0.015561342239379883,0.027296124026179314,-0.01254037395119667,0.001116079860366881,0.01121786143630743,0.027054447680711746,0.010687513276934624,0.003193834563717246,-0.017199378460645676,0.02171069011092186,-0.008425144478678703,0.019696712493896484,-0.626857578754425,-0.0033633443526923656,-0.02102593705058098,-0.009727517142891884,-0.0025963541120290756,-0.013936732895672321,-0.014178410172462463,0.021616704761981964,0.0013585964916273952,0.023805228993296623,0.023120475932955742,0.020206918939948082,0.00489061139523983,-0.027322977781295776,0.014809456653892994,-0.004212572239339352,0.003635231638327241,-0.04860401898622513,-0.02662479877471924,0.019549019634723663,-0.0198309775441885,0.011956320144236088,-0.014500646851956844,-0.047932691872119904,0.01625952124595642,-0.007324169389903545,0.003524462692439556,-0.013507083989679813,-0.005823755171149969,0.03813133016228676,-0.012372542172670364,-0.010962757281959057,-0.0071227713488042355,0.029430942609906197,0.042562082409858704,-0.018877694383263588,-0.009485839866101742,-0.0039373282343149185,-0.004987953696399927,0.07545706629753113,-0.020663421601057053,-0.004652290605008602,0.024651098996400833,0.01595071144402027,0.0012411143397912383,-0.012231564149260521,0.027551228180527687,-0.014245542697608471,-0.006652842741459608,0.016930848360061646,0.021455585956573486,-0.01975041814148426,0.006961653009057045,-0.005192708224058151,-0.006485011428594589,-0.017441054806113243,0.0087809469550848,-0.014070997945964336,0.014084423892199993,-0.015198825858533382,-0.01085534505546093,0.009036051109433174,-0.037567414343357086,-0.006317179650068283,-0.012970022857189178,0.010264578275382519,-0.0023899213410913944,0.007928363047540188,0.014514072798192501,-0.0061292084865272045,0.004467675928026438,0.02175096981227398,-0.031203243881464005,-0.002537613036110997,0.0014164983294904232,0.039259158074855804,0.0026836267206817865,-0.003314673202112317,-0.0013426524819806218,0.0056156436912715435,0.0006440536235459149,-0.008807799778878689,-0.016313226893544197,-0.017400775104761124,0.003284463658928871,-0.022301457822322845,-0.03939342498779297,0.004014530684798956,0.008069341070950031,-0.0011806950205937028,0.007055638823658228,0.002752437489107251,-0.021549571305513382,-0.021160202100872993,0.004860402084887028,0.007545706816017628,0.024073759093880653,0.008660108782351017,-0.008519129827618599,0.005877461284399033,-0.026638224720954895,0.006213124375790358,0.013486944139003754,-0.0013602747349068522,0.01745448261499405,0.017441054806113243,-0.002524186624214053,0.004642220679670572,0.031176390126347542,-0.012647786177694798,0.008633255027234554,-0.016434065997600555,0.00040657195495441556,0.0017286650836467743,0.001992160687223077,-0.03088100627064705,0.0009700664086267352,0.005417602602392435,0.01350037008523941,-0.012332262471318245,0.022220898419618607,-0.009445560164749622,0.016810009256005287,0.001455099554732442,-0.0018444687593728304,0.01660861074924469,-0.006085572298616171,0.0065857102163136005,-0.02113335020840168,-0.004242781549692154,0.0032458624336868525,-0.0021482438314706087,0.01576274074614048,-0.016783155500888824,0.0038903355598449707,-0.014514072798192501,0.018152661621570587,-0.0245839674025774,-0.0004401382466312498,-0.030961565673351288,-0.01432610210031271,0.017937837168574333,0.005320260301232338,-0.012815617956221104,-0.012244990095496178,-0.01526595838367939,-0.02945779450237751,-0.026651650667190552,0.009848356246948242,0.015051133930683136,0.00558207742869854,0.0022439078893512487,-0.01772301271557808,-0.0037090773694217205,-0.02247600257396698,-0.0025862841866910458,0.006471585016697645,-0.0035949519369751215,-0.0036755111068487167,-0.02416774444282055,0.004763059783726931,0.03590252622961998,-0.04264264181256294,-0.0006604171940125525,-0.013493657112121582,-0.031042125076055527,-0.027094727382063866,0.016460919752717018,-0.013050582259893417,-0.023966345936059952,0.004544878378510475,0.015709033235907555,-0.004444179590791464,0.004799982532858849,0.031471773982048035,0.03313666209578514,-0.020300904288887978,-0.005189351737499237,-0.002733976114541292,-0.0073778750374913216,0.01852860487997532,0.007344308774918318,-0.00788137037307024,-0.0043904734775424,0.008968918584287167,0.020582862198352814,0.004108516499400139,0.029404088854789734,-0.005598860792815685,0.01588357798755169,-0.017629027366638184,0.017588747665286064,-0.009271015413105488,-0.0003398589033167809,-0.018595736473798752,0.011117162182927132,-0.02175096981227398,0.01331239938735962,-0.008445284329354763,0.01741420291364193,0.03225051239132881,-0.029430942609906197,-0.0037090773694217205,-0.026987314224243164,-0.01129842083901167,-0.019199930131435394,-0.001758874743245542,-0.03071988746523857,0.016084976494312286,-0.00221537658944726,0.007854516617953777,0.0011370588326826692,-0.018246646970510483,-0.0055787209421396255,0.01879713498055935,0.03310981020331383,-0.02136160060763359,0.025188161060214043,-0.013601069338619709,-0.012332262471318245,0.004675787407904863,-0.011822055093944073,-0.003722504014149308,-0.004457606002688408,-0.011023176833987236,0.022650547325611115,-0.016823435202240944,0.004669073969125748,-0.009291155263781548,-0.010976184159517288,-0.0005647531943395734,0.04368991032242775,0.013950158841907978,0.017400775104761124,0.029028145596385002,0.025752075016498566,0.00782766379415989,-0.021106496453285217,0.024557113647460938,-0.003318029921501875,-0.03294869139790535,0.013433237560093403,-0.0011278280289843678,-0.03238477557897568,0.017132245004177094,0.009291155263781548,0.012432961724698544,0.023576976731419563,-0.00949255283921957,0.0035680988803505898,-0.012057019397616386,0.011694503016769886,0.004061523824930191,-0.014943721704185009,0.010828492231667042,0.009599965065717697,0.010398843325674534,-0.021079642698168755,0.0450325645506382,-0.005585434380918741,0.004189075902104378,-0.004276348277926445,0.030934711918234825,-0.028491085395216942,0.02071712724864483,-0.006317179650068283,-0.01119772158563137,-0.023523271083831787,-0.03668126463890076,0.012862610630691051,-0.003334813052788377,-0.016635464504361153,-0.021925514563918114,-0.005625713616609573,0.0334588997066021,0.019119370728731155,0.0061996979638934135,0.014299248345196247,0.007733677979558706,-0.0005068512982688844,-0.0177632924169302,-0.028893880546092987,0.01807210221886635,0.008733954280614853,-0.0010724436724558473,-0.04629465565085411,-0.007995495572686195,0.00047244582674466074,-0.027980877086520195,0.015212252736091614,-0.024140890687704086,0.010479402728378773,-0.005867391359061003,0.007102631498128176,0.015373370610177517,0.010049753822386265,0.034237638115882874,-0.025134453549981117,0.00029202690348029137,-0.011090309359133244,0.0069213733077049255,-0.009774509817361832,-0.02320103533565998,-0.004568375181406736,0.017535042017698288,0.02462424524128437,-0.009599965065717697,0.01056667510420084,-0.007901509292423725,-0.010741219855844975,0.004437466152012348,0.0019518809858709574,0.018864266574382782,-0.044898297637701035,0.0164206400513649,-0.010700940154492855,-0.005135645624250174,-0.007163051050156355,-0.0009012554655782878,0.021200481802225113,-0.015010854229331017,-0.0122919837012887,0.021187055855989456,0.0031518766190856695,0.0390443317592144,0.004642220679670572,0.0009809754556044936,0.005682776682078838,-0.00354795902967453,-0.017790144309401512,-0.02140188030898571,-0.011647510342299938,0.008586262352764606,0.006505151279270649,0.014433514326810837,0.02359040454030037,-0.015964137390255928,-0.00910989660769701,0.022623693570494652,0.017924411222338676,0.02032775804400444,-0.03063932992517948,0.02266397327184677,-0.01664889045059681,0.020730553194880486,-0.0037862800527364016,0.010036326944828033,0.0008819548529572785,0.014420087449252605,0.020233772695064545,0.020529156550765038,0.0003151037381030619,-0.010935904458165169,-0.026718784123659134,-0.005931167397648096,0.024865923449397087,-0.003321386408060789,0.02359040454030037,-0.02001894824206829,0.05612287297844887,-0.004309914540499449,0.006662912666797638,0.008653394877910614,-0.01148639153689146,0.0018931400263682008,0.022623693570494652,0.008472137153148651,-0.003997747786343098,-0.01937447488307953,0.006857597269117832,-0.03474784642457962,0.019898109138011932,0.0036822243127971888,0.0023731382098048925,0.02900129370391369,0.01691742055118084,0.0019233496859669685,0.00987520907074213,0.03321722149848938,-0.009002484381198883,0.006229907274246216,0.016554905101656914,-0.0031434851698577404,-0.02301306277513504,-0.011996599845588207,0.0028313184157013893,-0.04084348678588867,-0.023805228993296623,0.013245266862213612,-0.011244714260101318,0.0012914638500660658,0.00709591805934906,-0.025604382157325745,-0.006421235390007496,0.018689721822738647,-0.023348726332187653,-0.011231287382543087,-0.011822055093944073,0.024597393348813057,0.02604745700955391,0.01629980094730854,-0.001886426704004407,-0.010499542579054832,0.0017269867239519954,0.019132796674966812,-0.026208575814962387,-0.020314332097768784,-0.007814236916601658,0.018783707171678543,0.0171456728130579,-0.0006155222654342651,0.008814513683319092,0.015561342239379883,0.017467908561229706,-0.00264166877605021,0.020529156550765038,-0.0006776198861189187,-0.014460367150604725,0.013265406712889671,0.010694227181375027,0.019079091027379036,0.00786123052239418,0.015829872339963913,-0.03230421990156174,0.0029420871287584305,-0.025376131758093834,-0.02435571514070034,-0.01522567868232727,-0.00202404847368598,0.010774785652756691,0.00747857429087162,-0.007263749837875366,0.005511588416993618,0.007001932710409164,0.032008834183216095,-0.025872912257909775,0.010311570949852467,0.020999085158109665,0.001772301271557808,0.02830311469733715,-0.0115669509395957,0.02929667755961418,0.019535593688488007,-0.030666181817650795,-0.004659004043787718,-0.02431543543934822,0.01948188804090023,0.0029689401853829622,-0.013104287907481194,0.015386797487735748,0.005417602602392435,-0.012647786177694798,-0.013171420432627201,0.0014559387927874923,-0.01830035261809826,0.01772301271557808,-0.015010854229331017,-0.0005748230614699423,-0.008505702950060368,-0.024288583546876907,-0.023644110187888145,0.005249771289527416,-0.018354058265686035,-0.010231011547148228,-0.0030646042432636023,0.0020190137438476086,0.020770832896232605,-0.006578997243195772,-0.02086482010781765,-0.029350383207201958,-0.012647786177694798,0.008123047649860382,0.003007541410624981,0.002655095187947154,0.010707653127610683,0.006229907274246216,-0.018206367269158363,-0.031203243881464005,0.007982068695127964,-0.021764395758509636,-0.002096216194331646,0.0036687979009002447,0.003074674168601632,0.0008802764932624996,0.01733364351093769,-0.02819570153951645,0.02873276174068451,-0.0077001117169857025,-0.024033479392528534,0.005139002110809088,-0.04519368335604668,-0.003876908915117383,-0.02286537177860737,-0.004296487662941217,-0.0031602683011442423,-0.007679971866309643,0.02001894824206829,-0.002540969755500555,0.017279937863349915,-0.010264578275382519,0.019549019634723663,-0.001383771188557148,-0.0238589346408844,-0.04548906534910202,-0.010989610105752945,0.04385102912783623,-0.021495865657925606,0.03324407339096069,-0.014608059078454971,0.0043938299641013145,0.00008249969687312841,-0.0025560746435076,0.0012906247284263372,-0.0033583093900233507,0.0015641901409253478,0.002346285153180361,0.01190932746976614,0.0033046032767742872,0.035607144236564636,0.013077435083687305,-0.006750185042619705,-0.04632151126861572,0.007189903873950243,0.009311295114457607,0.007337595801800489,0.016058122739195824,0.015212252736091614,0.010150452144443989,-0.02205977961421013,0.0035076795611530542,-0.01629980094730854,0.004088376648724079,0.015333090908825397,-0.017884131520986557,-0.03386169672012329,-0.03053191676735878,0.018354058265686035,0.014796029776334763,0.012996875680983067,-0.004098446574062109,-0.004585158079862595,0.0017177560366690159,-0.02830311469733715,-0.017548467963933945,0.0004059425846207887,-0.020529156550765038,0.02638312056660652,0.04081663489341736,-0.010291431099176407,0.003091457299888134,-0.009432133287191391,0.0010061501525342464,0.006575640290975571,0.034425608813762665,0.01656833104789257,0.0023748164530843496,0.002529221586883068,0.00014328618999570608,-0.027470668777823448,0.0010581780225038528,-0.012627646327018738,-0.0038097763899713755,-0.013802466914057732,0.009881922043859959,0.04701969027519226,0.0022254465147852898,-0.03090786002576351,0.011459538713097572,-0.011050029657781124,0.024530259892344475,-0.011660936288535595,0.015937285497784615,0.005132289137691259,-0.014890016056597233,-0.006354102864861488,0.03455987572669983,-0.029618913307785988,0.02324131317436695,-0.020770832896232605,-0.008116333745419979,-0.00020926496654283255,-0.020703701302409172,-0.00019835591956507415,0.011150728911161423,0.017038259655237198,-0.002086146268993616,-0.03214310109615326,-0.0037829233333468437,0.017038259655237198,0.01710539311170578,-0.013815893791615963,-0.008364724926650524,-0.006303753238171339,0.031176390126347542,-0.06063418462872505,0.031552333384752274,0.03278757259249687,-0.017078539356589317,0.005712985992431641,-0.005189351737499237,0.002973975148051977,-0.045086268335580826,-0.010633807629346848,-0.00729731610044837,0.03249219059944153,0.037728533148765564,-0.007733677979558706,-0.006233264226466417,0.010519682429730892,-0.0030444643925875425,0.0003879006835632026,-0.012735058553516865,-0.004182362463325262,0.006011726334691048,-0.016366934403777122,-0.03359316289424896,-0.00507186958566308,0.01791098341345787,0.025993751361966133,-0.03396910801529884,0.003756070276722312,0.0435824990272522,-0.01464833877980709,0.005555224604904652,-0.008747381158173084,0.002181810326874256,-0.0238589346408844,-0.0044743893668055534,-0.009344860911369324,-0.01991153508424759,0.017521614208817482,-0.023254740983247757,-0.014916868880391121,-0.05032261461019516,0.009197168983519077,0.005367253441363573,-0.015453930012881756,-0.008196893148124218,0.002517473418265581,-0.006172844674438238,0.011942893266677856,-0.017091965302824974,0.003234114032238722,0.0355265848338604,0.015118266455829144,-0.005860677920281887,0.025940045714378357,-0.01018401887267828,0.0022825091145932674,0.007445008028298616,-0.0025040467735379934,-0.023764949291944504,-0.012882750481367111,-0.028813321143388748,0.007196617312729359,-0.014057571068406105,0.000746430829167366,-0.007559133227914572,0.006528647616505623,-0.00265173870138824,-0.0061157820746302605,-0.0012209746055305004,0.049302197992801666,0.014205262996256351,-0.006632703356444836,-0.004951030947268009,0.014581205323338509,0.015051133930683136,0.01079492550343275,0.004729493521153927,0.003405302297323942,0.0029370521660894156,-0.019804123789072037,-0.014796029776334763,-0.021428734064102173,0.04342138022184372,-0.0005156624829396605,-0.00809619389474392,-0.025188161060214043,0.0012948204530403018,-0.017132245004177094,-0.020891672000288963,-0.009432133287191391,0.0023949563037604094,0.01672944985330105,0.0215898510068655,-0.001044751494191587,0.023080196231603622,-0.025993751361966133,0.037379443645477295,-0.004867115058004856,-0.027631787583231926,0.011271567083895206,0.0035076795611530542,-0.009391853585839272,-0.018354058265686035,-0.041246283799409866,-0.02220747247338295,0.008787659928202629,0.0055652945302426815,-0.0073644486255943775,0.00025111797731369734,-0.012332262471318245,-0.02685304917395115,-0.05085967481136322,-0.013339252211153507,0.004810052458196878,0.000528249831404537,0.005588790867477655,-0.021267615258693695,0.001884748344309628,0.000881115673109889,-0.001966985873878002,-0.00492082117125392,0.016125256195664406,0.023657536134123802,0.006162774749100208,0.016971126198768616,-0.013446664437651634,-0.005706273019313812,-0.0018881050636991858,0.0045012421905994415,0.006719975732266903,-0.003893692046403885,-0.002658451907336712,0.03286813199520111,-0.023456137627363205,0.012896176427602768,-0.023684389889240265,0.01664889045059681,-0.029162410646677017,0.01726651005446911,-0.021187055855989456,-0.02324131317436695,-0.02393949404358864,-0.011916040442883968,0.002955513773486018,-0.009096470661461353,-0.01772301271557808,-0.01679658144712448,-0.014379807747900486,-0.0229325033724308,0.02776605263352394,-0.016595184803009033,-0.002302648965269327,0.016447491943836212,0.013003588654100895,0.006438018754124641,-0.0052296314388513565,-0.02980688400566578,-0.020663421601057053,-0.015118266455829144,0.0023966345470398664,-0.01423211582005024,0.000036477140383794904,-0.004796626046299934,-0.011936180293560028,-0.0009239127393811941,-0.018730001524090767,-0.0014559387927874923,0.18700464069843292,-0.009009198285639286,0.006850884296000004,0.0004330054216552526,-0.014782603830099106,0.024919629096984863,0.009365000762045383,-0.01710539311170578,-0.014527499675750732,0.022529708221554756,0.00265173870138824,0.028491085395216942,-0.02051572874188423,-0.01050625555217266,0.008035775274038315,-0.021106496453285217,-0.031391214579343796,-0.03206254169344902,-0.01821979321539402,-0.004494529217481613,0.01883741468191147,-0.018045248463749886,-0.019549019634723663,-0.034613579511642456,0.03705720975995064,0.011419259011745453,-0.002097894437611103,0.03190142288804054,0.02416774444282055,0.02980688400566578,-0.016971126198768616,-0.0563914030790329,-0.0016523016383871436,0.010116886347532272,-0.024758512154221535,-0.002871597884222865,0.033082958310842514,-0.007955215871334076,0.0077001117169857025,0.001320834388025105,0.01749476231634617,-0.004659004043787718,0.01737392321228981,-0.006709905806928873,0.011103736236691475,0.032089393585920334,-0.010103459469974041,0.005135645624250174,0.03278757259249687,0.03364687040448189,-0.018555456772446632,0.043555647134780884,0.0008001369424164295,0.01652805134654045,-0.010741219855844975,0.010110173374414444,0.005286694038659334,-0.0252015870064497,0.0061292084865272045,0.021281041204929352,-0.005185995250940323,0.005981516558676958,0.00577340554445982,0.013977011665701866,-0.030827300623059273,0.00022825092310085893,-0.006216480862349272,0.00991548877209425,-0.0008970596827566624,-0.012990162707865238,0.009908774867653847,-0.0020391533616930246,-0.005340400151908398,0.01388302631676197,0.009479125961661339,-0.01968328468501568,-0.00991548877209425,0.015373370610177517,0.008754094131290913,0.025456691160798073,-0.01225170399993658,0.005508231930434704,-0.014782603830099106,-0.006521934177726507,-0.028276260942220688,-0.04548906534910202,0.02485249750316143,-0.01745448261499405,0.00045734099694527686,-0.013802466914057732,-0.00917031615972519,-0.02638312056660652,0.012493381276726723,-0.006881094072014093,0.016165535897016525,0.032089393585920334,-0.005098722875118256,0.0074852872639894485,-0.004004460759460926,0.0084184305742383,-0.0271618589758873,0.053330156952142715,0.03611735254526138,-0.007069065235555172,-0.0010044719092547894,-0.016058122739195824,0.0001931111910380423,0.02316075563430786,-0.0078075239434838295,-0.009015911258757114,-0.0026802700012922287,0.00458180159330368,0.006555500440299511,-0.017253084108233452,0.005642496980726719,0.023268166929483414,0.027954023331403732,0.007371162064373493,-0.01634008064866066,0.0003125862858723849,0.00751885399222374,-0.009042764082551003,-0.011009749956429005,0.00918374303728342,-0.008425144478678703,0.004017887637019157,-0.032626453787088394,-0.009391853585839272,0.004195788875222206,-0.02286537177860737,0.01252023410052061,-0.022261178120970726,0.006448088213801384,-0.03343204781413078,0.017924411222338676,-0.022502854466438293,0.008921925909817219,-0.022892223671078682,-0.03302925080060959,0.02278481237590313,0.006028509698808193,0.018461471423506737,0.01795126311480999,-0.009828216396272182,-0.0008702066261321306,-0.014446940273046494,-0.015104840509593487,0.01464833877980709,-0.014339528046548367,-0.000744752527680248,-0.025913191959261894,0.0001249296183232218,-0.010284718126058578,0.005558581091463566,-0.00945227313786745,-0.023684389889240265,-0.020193492993712425,-0.020797686651349068,0.00559214735403657,-0.015077986754477024,-0.03678867593407631,0.02508074790239334,0.03931286558508873,-0.014473793096840382,-0.024221450090408325,-0.016447491943836212,-0.16777785122394562,0.000547130883205682,0.014299248345196247,-0.014258969575166702,0.03643958643078804,-0.001170625095255673,0.03600993752479553,0.012976735830307007,-0.01127828098833561,0.004605297930538654,-0.017253084108233452,-0.017212804406881332,-0.025899766013026237,-0.03152548149228096,-0.002352998359128833,0.008928638882935047,0.006364172790199518,0.0005525854066945612,0.06826045364141464,0.025335852056741714,0.03732573986053467,-0.026329414919018745,0.009445560164749622,-0.006578997243195772,-0.0198309775441885,0.024986762553453445,0.004081663675606251,-0.027215564623475075,-0.00023811102437321097,-0.025376131758093834,-0.0010657303500920534,0.022153764963150024,-0.003524462692439556,0.009318008087575436,0.006783751770853996,-0.014044145122170448,-0.014433514326810837,-0.01921335607767105,0.004578445106744766,0.004477745853364468,0.009573112241923809,0.03705720975995064,-0.006458158139139414,-0.013715194538235664,0.0030108981300145388,0.01856888271868229,0.017521614208817482,-0.008136473596096039,0.002779290545731783,-0.006632703356444836,0.035070084035396576,-0.024328863248229027,-0.016232667490839958,0.004692570306360722,0.024342289194464684,-0.01607155054807663,-0.0023714599665254354,0.01116415485739708,-0.01603127084672451,-0.013225127011537552,0.027470668777823448,-0.018421191722154617,-0.015373370610177517,0.023335300385951996,0.0011916040675714612,-0.002421809360384941,-0.025684941560029984,-0.018474897369742393,-0.03203568607568741,0.007512140553444624,-0.002883346052840352,-0.015158546157181263,-0.009606678038835526,0.0053504700772464275,0.019267063587903976,-0.0008492276538163424,-0.021267615258693695,0.020918525755405426,-0.007337595801800489,-0.022851943969726562,0.003534532617777586,0.009881922043859959,0.011452825739979744,0.0030209680553525686,0.0016430709511041641,0.02501361444592476,-0.03168659657239914,0.0001111884048441425,0.011050029657781124,-0.01997866854071617,0.014742324128746986,-0.017347069457173347,-0.010465975850820541,-0.0014500647084787488,0.0013107644626870751,0.013507083989679813,0.03302925080060959,-0.0018377555534243584,0.01702483370900154,-0.0027255844324827194,-0.008599689230322838,-0.008660108782351017,-0.009425420314073563,-0.016205815598368645,0.054404277354478836,-0.003425442148000002,-0.011097022332251072,-0.004497885704040527,0.05596175417304039,-0.006881094072014093,-0.04672430455684662,0.020690273493528366,0.013775614090263844,0.021737543866038322,0.0028447448275983334,0.02443627454340458,-0.010418983176350594,-0.00491075124591589,-0.029833737760782242,0.015601621940732002,0.04519368335604668,-0.0017219517612829804,-0.03445246070623398,-0.026611370965838432,-0.02059628814458847,-0.01396358571946621,-0.13641348481178284,-0.017669307067990303,-0.004299844615161419,0.021307894960045815,-0.025456691160798073,0.005598860792815685,-0.011963033117353916,0.015789592638611794,-0.0017840494401752949,0.042669493705034256,-0.013419811613857746,-0.017857277765870094,-0.009405280463397503,0.006847527343779802,-0.01625952124595642,0.011714642867445946,-0.029484648257493973,-0.0013040512567386031,-0.024839069694280624,0.035499729216098785,0.013486944139003754,-0.001319156028330326,-0.012063732370734215,0.0031736947130411863,-0.030102267861366272,-0.018998531624674797,-0.01463491190224886,0.013460091315209866,0.0030209680553525686,0.005182638298720121,-0.0004367816145531833,0.009250875562429428,-0.003752713557332754,-0.006367529276758432,0.038373008370399475,-0.017897557467222214,-0.005390749778598547,-0.010351850651204586,0.025188161060214043,0.009680524468421936,-0.004524738993495703,0.01572246104478836,0.02776605263352394,-0.01710539311170578,-0.017159098759293556,-0.011029889807105064,-0.030773594975471497,0.009814789518713951,0.021469013765454292,-0.002441949211061001,-0.037460003048181534,-0.005652566906064749,-0.04377046972513199,-0.003766140202060342,0.027712346985936165,-0.03286813199520111,0.012090585194528103,0.00782766379415989,0.00614599185064435,0.015668753534555435,0.020770832896232605,-0.0004594388883560896,0.035311758518218994,0.07212729007005692,0.025456691160798073,0.0030595692805945873,-0.021455585956573486,-0.0026903399266302586,0.009922201745212078,0.003997747786343098,0.006276900414377451,0.0035680988803505898,0.0010405556531623006,-0.0047026402316987514,-0.010868771933019161,0.04540850594639778,0.012204711325466633,-0.007961928844451904,0.0014509038301184773,0.00765983248129487,-0.020300904288887978,-0.024570539593696594,-0.008895072154700756,-0.015735886991024017,0.019011959433555603,0.02743038907647133,0.0060083698481321335,-0.006669626105576754,0.008606402203440666,-0.035499729216098785,0.015695607289671898,0.021348174661397934,-0.004538165405392647,0.011694503016769886,0.0028262834530323744,0.004313271027058363,-0.020086081698536873,-0.002329502021893859,-0.008653394877910614,0.0070287855342030525,0.008545982651412487,-0.002198593458160758,-0.04425382614135742,0.008351298049092293,-0.0006142635247670114,0.008384864777326584,-0.0012503451434895396,0.0069079468958079815,0.010130313225090504,-0.018649442121386528,-0.026866475120186806,0.00559214735403657,-0.017736438661813736,0.005927810445427895,-0.012587366625666618,-0.00922402273863554,0.008693674579262733,-0.028276260942220688,0.002643347019329667,0.010331710800528526,0.015252531506121159,0.008069341070950031,-0.014621485024690628,-0.0018461471190676093,0.019549019634723663,0.0024872636422514915,-0.006307109724730253,-0.020193492993712425,-0.011271567083895206,0.011560237966477871,-0.018421191722154617,-0.0202471986413002,0.0115669509395957,0.004085020162165165,0.009888635016977787,0.014728897251188755,0.0007640531403012574,-0.0019233496859669685,0.03472099080681801,0.005676063243299723,0.02918926440179348,0.006746828556060791,-0.01572246104478836,-0.01056667510420084,0.007062351796776056,-0.017306789755821228,-0.005511588416993618,-0.02489277720451355,-0.0011102057760581374,0.01879713498055935,0.03721832484006882,0.011634083464741707,0.025752075016498566,0.01321170013397932,-0.015507635660469532,-0.014796029776334763,0.004340123850852251,-0.01718595065176487,-0.01871657557785511,-0.0015046099433675408,-0.004967814311385155,-0.00906961690634489,0.035607144236564636,0.0024637673050165176,0.0238589346408844,-0.015171973034739494,0.0191059447824955,0.009808076545596123,-0.02819570153951645,0.02542983740568161,0.028061436489224434,-0.04189075529575348,-0.007693398743867874,-0.0030192898120731115,0.0022506210952997208,-0.0036922942381352186,0.025416411459445953,-0.02239544317126274,-0.013695054687559605,0.016286375001072884,-0.0033583093900233507,0.01787070371210575,0.005588790867477655,0.0037023641634732485,-0.020958805456757545,0.025980325415730476,0.010257864370942116,0.0097610829398036,0.020233772695064545,-0.005514944903552532,0.0071496241725981236,-0.011748208664357662,-0.03727203235030174,0.004071593750268221,-0.014916868880391121,0.005045016761869192,0.0007267106557264924,-0.003084744093939662,-0.000800976122263819,0.023993199691176414,0.013137854635715485,-0.009613391943275928,0.01921335607767105,0.022006073966622353,0.0012595758307725191,-0.03179401159286499,-0.013433237560093403,0.0057566226460039616,-0.008827939629554749,-0.022301457822322845,0.020918525755405426,0.016903994604945183,-0.0336737222969532,0.004756346344947815,-0.018085528165102005,0.009405280463397503,-0.011412546038627625,0.004635507706552744,0.02340243197977543,-0.005877461284399033,-0.022140339016914368,0.022583413869142532,-0.0073510222136974335,0.01051296852529049,0.01906566508114338,-0.015561342239379883,0.002203628420829773,0.03098841942846775,0.0038097763899713755,-0.00814990047365427,0.011479678563773632,-0.003991034347563982,0.02185838297009468,-0.00593452388420701,-0.02600717730820179,-0.00913003645837307,-0.00849898997694254,0.01023772545158863,-0.013648062013089657,0.007445008028298616,0.007545706816017628,0.06267501413822174,0.012432961724698544,-0.0034774697851389647,-0.0027289411518722773,-0.014030718244612217,0.032196804881095886,0.00375942699611187,0.02822255529463291,0.02235516346991062,-0.041246283799409866,-0.008774233981966972,-0.0014374773018062115,-0.01023772545158863,-0.008015635423362255,-0.011284993961453438,0.012117438018321991,-0.017884131520986557,0.003096492262557149,-0.013433237560093403,0.012338976375758648,0.0259266197681427,0.032196804881095886,0.010821779258549213,0.006954939570277929,-0.022489428520202637,-0.008163327351212502,0.024369142949581146,0.014312675222754478,-0.038265593349933624,-0.003101527225226164,0.0078075239434838295,-0.005545154679566622,-0.020086081698536873,-0.03458672761917114,0.003093135543167591,0.0034086590167135,-0.008284165523946285,-0.018971679732203484,0.020770832896232605,0.030424505472183228,0.022637121379375458,-0.018474897369742393,0.00016006935038603842,-0.02757808193564415,-0.019146224483847618,0.03571455553174019,-0.0075926994904875755,0.006995219271630049,-0.03598308563232422],"e_chunks":[[0.0016756289405748248,0.017320260405540466,-0.0031986942049115896,-0.032802898436784744,-0.01329532265663147,0.007734463084489107,-0.005139166489243507,-0.0030238458421081305,-0.006520810537040234,-0.010394899174571037,0.032528627663850784,-0.009921779856085777,-0.030828142538666725,0.02021382749080658,0.0004979746299795806,-0.01933615654706955,0.016401449218392372,-0.021420622244477272,0.004899179097265005,0.01360387820750475,-0.044459447264671326,0.025726689025759697,0.005290016066282988,0.004611193668097258,-0.007707035634666681,-0.020446958020329475,0.00508774071931839,-0.014810673892498016,-0.001889046630822122,-0.01030576042830944,0.003575817681849003,-0.03420168533921242,-0.032940033823251724,-0.002980991033837199,-0.019034458324313164,-0.018362492322921753,-0.004364348948001862,-0.0007011071429587901,0.012650784105062485,-0.011121719144284725,0.0416344478726387,0.01095715630799532,0.006795082241296768,0.003447252791374922,-0.010127483867108822,0.048463813960552216,-0.010991440154612064,-0.057761628180742264,-0.007686465512961149,-0.012911342084407806,0.035024501383304596,0.013994715176522732,-0.032528627663850784,-0.010532034561038017,-0.013693016022443771,0.02055666595697403,-0.007028213236480951,-0.008591562509536743,0.016593439504504204,-0.007995021529495716,0.003726667258888483,-0.0013533595483750105,0.0027941432781517506,0.005745992995798588,-0.011752543970942497,-0.006109402980655432,-0.02076237089931965,0.002643293933942914,-0.028606541454792023,-0.0015950616216287017,0.025397563353180885,-0.002339880680665374,-0.0001355288113700226,0.009592654183506966,0.0211052093654871,-0.01689513958990574,-0.034832511097192764,-0.0002562726440373808,0.011258854530751705,-0.004978031851351261,0.006404245272278786,-0.019980695098638535,-0.006160828750580549,0.025452416390180588,-0.000018173181160818785,-0.008831550367176533,0.006428243592381477,0.004700331948697567,-0.025534698739647865,-0.02061152085661888,0.02490387298166752,-0.015167227014899254,-0.004954033065587282,0.0015213510487228632,0.0037095253355801105,-0.023655937984585762,-0.04706503078341484,0.026878630742430687,-0.015894047915935516,-0.0043883477337658405,-0.005430580582469702,-0.009455517865717411,-0.0011253712000325322,0.0056088571436703205,-0.018705332651734352,0.003520963480696082,0.015290649607777596,-0.03485993668437004,0.01919902116060257,-0.0014879241352900863,-0.004357492085546255,0.026960911229252815,0.00523859029635787,0.02007669024169445,-0.010909158736467361,0.035381052643060684,0.033817704766988754,-0.02368336357176304,-0.010744594968855381,-0.024602174758911133,-0.004330065101385117,0.010600602254271507,0.020227540284395218,0.005101454444229603,-0.0023587369360029697,-0.024588461965322495,-0.020940646529197693,-0.0014304985525086522,0.03532620146870613,-0.02523300051689148,0.030279599130153656,0.011437131091952324,0.021530332043766975,0.02578154392540455,0.006112831179052591,0.038754597306251526,-0.027015766128897667,-0.0037060969043523073,-0.017951084300875664,-0.02414962649345398,0.015688342973589897,0.011210856959223747,-0.007830457761883736,0.007275057956576347,-0.02143433690071106,0.009222387336194515,0.004251211881637573,0.004463772289454937,0.019733851775527,0.005516290199011564,0.0110942916944623,-0.001647344557568431,-0.012122810818254948,-0.01482438761740923,-0.016730576753616333,0.01648373156785965,-0.03337886929512024,0.017868803814053535,-0.00949665904045105,-0.030142463743686676,0.0066168056800961494,0.027015766128897667,-0.006606520619243383,0.0012187950778752565,0.025356421247124672,0.026974625885486603,0.011176573112607002,-0.009119534865021706,0.01024404913187027,-0.00016906281234696507,-0.010806306265294552,0.032994888722896576,-0.04476114735007286,0.014659823849797249,0.004758614581078291,0.018335064873099327,-0.00024234478769358248,0.022531423717737198,-0.02590496465563774,-0.021873170509934425,0.019555574283003807,0.018403634428977966,0.022545136511325836,0.03477765619754791,-0.016154605895280838,0.004943748004734516,0.015427784994244576,0.020309822633862495,0.010408611968159676,-0.0118348253890872,-0.011183430440723896,0.032172076404094696,-0.005379154346883297,0.007384766358882189,-0.6108580231666565,-0.009880639612674713,-0.023175962269306183,0.0029741341713815928,-0.010607459582388401,-0.014015285298228264,-0.0037540944758802652,0.008303577080368996,0.008468139916658401,0.0171694103628397,0.015180940739810467,0.015180940739810467,0.007364196237176657,-0.019349871203303337,0.00569799542427063,-0.014934096485376358,0.008920688182115555,-0.04020823538303375,-0.007686465512961149,0.010758308693766594,-0.014124994166195393,0.024053631350398064,-0.015372931025922298,-0.04092134162783623,0.008810979314148426,-0.017443682998418808,-0.00010145911801373586,-0.01954186148941517,-0.00797445047646761,0.04001624509692192,-0.011862252838909626,-0.014193562790751457,0.014454120770096779,0.02069380320608616,0.05175507813692093,-0.022833121940493584,0.00676765525713563,0.01489295531064272,0.00881783664226532,0.08365287631750107,-0.022805694490671158,-0.013027907349169254,0.01710084266960621,0.011169716715812683,0.014097567647695541,-0.009434947744011879,0.033543433994054794,-0.017347687855362892,-0.006126544903963804,0.004690046887844801,0.005410009995102882,-0.020200112834572792,0.002238743007183075,-0.007912739180028439,-0.01037432812154293,-0.007679608650505543,0.009441804140806198,-0.023642223328351974,0.022284578531980515,-0.022942829877138138,-0.005536860786378384,0.012438223697245121,-0.027166616171598434,-0.023518800735473633,-0.031294405460357666,0.0017116270028054714,-0.015414071269333363,-0.008385858498513699,-0.002372450428083539,-0.0028472833801060915,0.0030221317429095507,0.028332270681858063,-0.014810673892498016,-0.007254487369209528,0.0009119535097852349,0.04314294457435608,0.02083093859255314,0.0014099281979724765,0.0003383398870937526,-0.003370113903656602,0.00554371764883399,0.004834039136767387,-0.018348779529333115,-0.027975717559456825,0.011978818103671074,-0.02937450259923935,-0.03793178126215935,-0.004981460515409708,0.003488393733277917,0.004882036708295345,0.008159584365785122,0.012465650215744972,-0.035435907542705536,-0.015455212444067001,0.002243885537609458,0.016840284690260887,0.026288945227861404,-0.001121942768804729,0.004192929249256849,0.008790409192442894,-0.020597808063030243,0.0011176572879776359,0.011039437726140022,0.004943748004734516,0.010820019990205765,0.013288465328514576,-0.009119534865021706,0.006239681970328093,0.028880814090371132,-0.012095383368432522,0.008049875497817993,-0.02068008854985237,0.0037335241213440895,0.010031488724052906,0.0024033060763031244,-0.024917587637901306,-0.002734146313741803,0.0024238764308393,0.021173778921365738,-0.015688342973589897,0.027084333822131157,-0.016648294404149055,0.0005828274297527969,0.013720443472266197,0.006606520619243383,0.010052058845758438,-0.008461283519864082,0.008906974457204342,-0.016236886382102966,-0.004011224023997784,0.02483530528843403,-0.01163597870618105,0.015372931025922298,-0.026494650170207024,0.0005074026994407177,0.010648599825799465,0.03485993668437004,-0.00942809134721756,0.01177311409264803,-0.02183203026652336,-0.003426682436838746,0.022078875452280045,0.009983491152524948,-0.0072133466601371765,-0.018828755244612694,-0.015578635036945343,-0.018088221549987793,-0.0157980527728796,0.009002969600260258,0.013480455614626408,0.01448154728859663,0.010772022418677807,0.008118443191051483,0.015496352687478065,-0.018677905201911926,-0.011807397939264774,0.021214919164776802,-0.007185919675976038,-0.006455671042203903,-0.01844477467238903,-0.0030221317429095507,0.012191378511488438,-0.05238590016961098,-0.004957461729645729,-0.016566012054681778,-0.010648599825799465,-0.016908852383494377,0.015537493862211704,-0.022846834734082222,-0.028387125581502914,0.009140105918049812,-0.002055323915556073,-0.01485181413590908,-0.0028747105970978737,0.038617461919784546,0.033077172935009,-0.015126085840165615,-0.0009668078855611384,-0.007645324803888798,-0.0020741799380630255,0.012664497829973698,0.003421539906412363,-0.02325824275612831,-0.006671660114079714,0.008660130202770233,0.02774258702993393,0.008248722180724144,0.021941738203167915,0.013048477470874786,0.002466731471940875,-0.021338341757655144,0.007755033206194639,-0.021118924021720886,0.003970083314925432,-0.021187491714954376,0.0005841130623593926,-0.03187037631869316,0.0013010764960199594,-0.007535615935921669,0.013309036381542683,0.021544044837355614,-0.009071537293493748,-0.0011108005419373512,-0.03614901378750801,-0.0052934447303414345,-0.012897628359496593,0.0011965103913098574,-0.031513821333646774,0.014330698177218437,-0.031431540846824646,0.0032758330926299095,0.0041312179528176785,-0.010538891889154911,-0.01904817298054695,0.0023364522494375706,0.03384513407945633,-0.028606541454792023,0.03839804232120514,-0.009777787141501904,0.00395294139161706,0.007473904639482498,-0.021269774064421654,-0.0009728075820021331,-0.00973664689809084,-0.006315106526017189,0.02483530528843403,-0.012266803532838821,0.006548237521201372,-0.003802092047408223,-0.015715770423412323,-0.01224623341113329,0.03823348134756088,0.007768746931105852,0.00257644010707736,0.03491479158401489,0.0386723130941391,0.017800236120820045,-0.013315892778337002,0.03332401439547539,-0.009167532436549664,-0.035710178315639496,-0.003918657545000315,0.007988164201378822,-0.017759094014763832,0.00790588278323412,0.000882812135387212,0.02035096287727356,0.0365055687725544,-0.003255262738093734,-0.004120932891964912,-0.01023719273507595,0.021173778921365738,-0.009476088918745518,-0.008522993884980679,0.002562726614996791,0.006589378230273724,0.01926758885383606,-0.01715569756925106,0.02312110736966133,0.004004367161542177,0.003592959837988019,0.013069048523902893,0.02822256088256836,-0.022833121940493584,0.01667572185397148,-0.013206183910369873,-0.025671834126114845,-0.016291741281747818,-0.036532994359731674,-0.0006719657685607672,0.005447722505778074,-0.0027187184896320105,-0.024369044229388237,-0.002266170224174857,0.02074865624308586,0.014906669035553932,0.012650784105062485,0.005077455658465624,0.015208368189632893,-0.0028318557888269424,-0.010765166021883488,-0.024876447394490242,0.01668943464756012,0.009270384907722473,-0.0026707209181040525,-0.029182512313127518,-0.00554714584723115,0.0061951130628585815,-0.028716251254081726,0.011910250410437584,-0.035161636769771576,0.017676813527941704,-0.026604358106851578,-0.005660282913595438,0.007926452904939651,0.021790890023112297,0.04509027302265167,-0.013638162054121494,-0.008235008455812931,0.003215836128219962,0.012602786533534527,-0.00833786092698574,-0.031568676233291626,-0.01689513958990574,0.020117832347750664,0.004144931677728891,-0.0035055356565862894,0.004134646616876125,0.00273928907699883,-0.02822256088256836,0.01336389034986496,0.0068499366752803326,0.01068288367241621,-0.02604210190474987,0.02923736721277237,0.0009839498670771718,-0.007275057956576347,-0.0024255907628685236,0.01566091552376747,0.018060794100165367,-0.0009916637791320682,0.0007096781046129763,0.014700965024530888,0.010456609539687634,0.07981307804584503,0.007473904639482498,0.007638467941433191,0.014687251299619675,0.0023021684028208256,-0.013480455614626408,-0.022682271897792816,-0.025658121332526207,-0.0040626502595841885,0.014742106199264526,0.021146351471543312,-0.0006389674381352961,0.0018290496664121747,0.0011939391260966659,0.009709219448268414,0.001607918064109981,0.033132024109363556,-0.026083242148160934,0.01892475038766861,-0.013377604074776173,0.019624141976237297,-0.011807397939264774,-0.0037678079679608345,0.007240773644298315,0.03837061673402786,0.036258723586797714,0.019980695098638535,0.0014167849440127611,-0.007302484940737486,-0.019637856632471085,0.0018839039839804173,0.036121588200330734,0.006812224164605141,0.007521902211010456,-0.018005939200520515,0.06001065671443939,-0.0016979135107249022,-0.009386950172483921,0.01214338093996048,-0.008893260732293129,0.014810673892498016,0.026028387248516083,0.002333024051040411,0.0015264935791492462,-0.0012547931401059031,0.015098659321665764,-0.023765645921230316,0.025205573067069054,-0.005704852286726236,0.003822662401944399,0.022750839591026306,0.023985063657164574,-0.006997357588261366,0.012362798675894737,0.03691697493195534,-0.005050028208643198,0.018005939200520515,0.011121719144284725,-0.014097567647695541,-0.03965969383716583,-0.015112373046576977,-0.010298904031515121,-0.020570380613207817,-0.010936585254967213,0.00265357899479568,-0.03436625003814697,-0.0014836386544629931,0.0017073415219783783,-0.005344870500266552,0.010182337835431099,0.02212001569569111,-0.038754597306251526,-0.019349871203303337,-0.015071231871843338,0.03288518264889717,0.018211644142866135,0.010216622613370419,-0.002753002569079399,0.006064833607524633,0.008001877926290035,0.021818317472934723,-0.02679634839296341,-0.030499016866087914,-0.016566012054681778,0.01374101359397173,0.025946106761693954,-0.005255732219666243,-0.0032569768372923136,-0.00001706163129711058,0.010922871530056,0.011430274695158005,0.02984076552093029,-0.012657640501856804,-0.009229243732988834,0.009921779856085777,0.022339433431625366,0.007809887640178204,0.005581429693847895,0.030553871765732765,-0.024327902123332024,0.0015624917577952147,-0.002891852520406246,-0.023930208757519722,-0.013370746746659279,0.0011947962921112776,0.013768441043794155,0.012438223697245121,-0.0013276466634124517,0.00493689114227891,-0.00026227234047837555,0.02767401747405529,-0.02143433690071106,0.003354686079546809,0.013727300800383091,-0.012122810818254948,0.03590216860175133,0.012904484756290913,0.0193910114467144,0.021818317472934723,-0.02339538000524044,-0.006973358802497387,-0.03222692757844925,0.02205144800245762,-0.0068876491859555244,-0.0032895465847104788,0.011142289265990257,0.007775603793561459,-0.005495720077306032,-0.0015616347081959248,-0.00622596824541688,-0.02585011161863804,0.006801939103752375,-0.0016713433433324099,-0.012081669643521309,0.0011750829871743917,-0.029593920335173607,-0.009311525151133537,0.0063459621742367744,-0.018636764958500862,-0.011629121378064156,-0.00478261336684227,0.006116259843111038,0.02929222211241722,-0.0017639100551605225,-0.021749747917056084,-0.03979682922363281,0.01214338093996048,-0.005869415123015642,0.013130759820342064,0.02700205333530903,0.006013407837599516,-0.0019113312009721994,-0.030197318643331528,-0.019720137119293213,-0.004576909821480513,-0.03357085958123207,0.006301393266767263,-0.004275210667401552,0.010580032132565975,0.0012196521274745464,0.014056426472961903,-0.03357085958123207,0.020268680527806282,0.009092108346521854,-0.02427304908633232,0.010826876387000084,-0.02863396890461445,-0.014070140197873116,-0.017745381221175194,-0.006407673470675945,0.0020364676602184772,0.003551818896085024,0.020652661100029945,-0.0029569922480732203,0.005444293841719627,-0.021050356328487396,0.006853364873677492,-0.012225662358105183,-0.026755208149552345,-0.04157959669828415,-0.015441498719155788,0.034695375710725784,-0.026343800127506256,0.025603266432881355,-0.01811564899981022,0.0020450386218726635,-0.004840895999222994,0.0028078570030629635,0.016977420076727867,-0.0034815368708223104,-0.014906669035553932,-0.0009530942770652473,0.022613704204559326,0.007549329660832882,0.029127659276127815,-0.011951390653848648,-0.011896536685526371,-0.0465439148247242,0.017073415219783783,0.010895445011556149,0.009366380050778389,0.03195265680551529,0.02454731985926628,0.007871598936617374,-0.0147146787494421,0.0012805061414837837,-0.008728697896003723,-0.01000406127423048,0.00976407341659069,-0.01784137636423111,-0.008468139916658401,-0.02368336357176304,0.01373415719717741,0.007892169058322906,0.0010859447065740824,-0.002243885537609458,0.0074944752268493176,0.029868192970752716,-0.020844651386141777,-0.021242346614599228,-0.005684281699359417,-0.014467834495007992,0.032583482563495636,0.039248283952474594,0.013795868493616581,0.015414071269333363,0.0013756442349404097,-0.0026878630742430687,0.012225662358105183,0.028167707845568657,0.019706424325704575,0.005252303555607796,0.009654365479946136,-0.010970869101583958,-0.031157270073890686,-0.003990653902292252,-0.00469690328463912,0.005475149489939213,-0.002142747864127159,0.027591736987233162,0.02672778069972992,0.009654365479946136,-0.014358125627040863,0.014454120770096779,-0.021201204508543015,0.03140411525964737,0.008379001170396805,0.013850722461938858,-0.01153312623500824,-0.023011399433016777,-0.00901668332517147,0.039467703551054,-0.014097567647695541,0.0286888238042593,0.004576909821480513,0.0026930056046694517,-0.009572083130478859,-0.022490281611680984,0.018732760101556778,0.0013636448420584202,-0.0008592419326305389,0.007377909496426582,-0.029072804376482964,-0.0023175962269306183,0.016099750995635986,0.0308007150888443,-0.0089549720287323,-0.011539983563125134,-0.01245193649083376,0.03304974362254143,-0.045556534081697464,0.023751933127641678,0.022503996267914772,-0.017183125019073486,0.015852905809879303,0.011512556113302708,-0.011567410081624985,-0.037876926362514496,-0.012877058237791061,-0.0072270603850483894,0.03277547284960747,0.03178809583187103,-0.022339433431625366,-0.020296107977628708,-0.0015684914542362094,-0.015318076126277447,0.010442896746098995,-0.010861161164939404,0.007727606222033501,-0.012335371226072311,-0.009606367908418179,-0.020652661100029945,-0.012109097093343735,0.021256059408187866,0.040317945182323456,-0.028990522027015686,-0.0015050661750137806,0.032994888722896576,-0.022216010838747025,0.0005793990567326546,0.001150227151811123,-0.0020536095835268497,-0.022024020552635193,0.008365288376808167,-0.017951084300875664,-0.013720443472266197,0.01034690160304308,-0.01681285724043846,-0.01749853603541851,-0.03908372297883034,-0.00371295353397727,0.01892475038766861,0.005108311306685209,-0.01588033325970173,-0.008996113203465939,-0.011944534257054329,0.010662313550710678,-0.012431366369128227,0.007473904639482498,0.025137005373835564,0.004467200953513384,0.0027992858085781336,0.022668559104204178,-0.006870506796985865,0.015304363332688808,-0.0007041069911792874,-0.0041312179528176785,-0.028606541454792023,-0.021749747917056084,-0.03908372297883034,0.016593439504504204,-0.023751933127641678,0.009620080702006817,-0.003496964694932103,-0.01601746864616871,-0.009284098632633686,-0.011958247981965542,-0.0009128106175921857,0.034091975539922714,0.01010691374540329,-0.00258672540076077,0.015825478360056877,0.019007030874490738,0.02964877523481846,0.017937371507287025,-0.002381021622568369,0.007501332089304924,0.0045631960965693,-0.033872559666633606,-0.011299995705485344,-0.019089313223958015,0.0552108995616436,-0.002734146313741803,-0.003860374679788947,-0.011581123806536198,-0.007323055528104305,-0.031020132824778557,-0.014906669035553932,-0.02354622818529606,0.016593439504504204,0.03071843460202217,0.022613704204559326,-0.0030032754875719547,0.02129719965159893,-0.025589553639292717,0.038425471633672714,-0.0038500893861055374,-0.02225715108215809,-0.0006025407346896827,0.013679303228855133,-0.018074506893754005,-0.002624437678605318,-0.035243917256593704,-0.026686640456318855,0.010566318407654762,-0.013830152340233326,-0.01275363564491272,0.0032038367353379726,-0.010730881243944168,-0.020172685384750366,-0.029127659276127815,-0.0068979342468082905,0.007302484940737486,0.002542156260460615,0.010628029704093933,-0.02652207762002945,-0.013151329942047596,0.014947809278964996,-0.0034112546127289534,-0.007302484940737486,0.00987378228455782,0.02055666595697403,-0.0059825521893799305,0.01221194863319397,-0.005485434550791979,-0.014934096485376358,-0.0026844346430152655,0.012829060666263103,0.02537013590335846,0.0012633642181754112,0.005420295055955648,0.03121212311089039,-0.016634581610560417,0.004796327091753483,-0.015112373046576977,0.009818928316235542,-0.01411128044128418,0.025726689025759697,-0.007165349088609219,-0.03683469444513321,-0.008900118060410023,-0.020323535427451134,-0.0010036631720140576,0.0003593388246372342,-0.021941738203167915,-0.022216010838747025,-0.013466741889715195,-0.016908852383494377,0.02882595919072628,-0.0019387583015486598,-0.0002472730993758887,0.013926147483289242,0.008488710038363934,0.012397082522511482,-0.011354849673807621,-0.041195616126060486,-0.007069353945553303,-0.028167707845568657,-0.01648373156785965,-0.016401449218392372,-0.008605275303125381,-0.009448661468923092,-0.0016833427362143993,0.014015285298228264,0.002338166581466794,0.004724330734461546,0.1949523538351059,-0.025863824412226677,0.02454731985926628,0.005060313735157251,-0.005224876571446657,0.0043437788262963295,0.016319168731570244,-0.024177053943276405,-0.0008738125907257199,0.016511159017682076,-0.010772022418677807,0.013247325085103512,-0.02447875216603279,-0.011313709430396557,0.003373542334884405,-0.015441498719155788,-0.037602655589580536,-0.03634100407361984,-0.01925387606024742,0.009990347549319267,0.003784949891269207,-0.014522688463330269,-0.022764554247260094,-0.02827741578221321,0.01655229926109314,0.023779358714818954,-0.006129973102360964,0.03664270415902138,0.03321430832147598,0.012184522114694118,-0.015153513289988041,-0.0488203689455986,0.0014707822119817138,0.005399724934250116,-0.015208368189632893,-0.011718260124325752,0.030361881479620934,-0.0032912609167397022,0.002291883109137416,-0.008618989028036594,0.013288465328514576,-0.0023604510352015495,0.018060794100165367,-0.004196357447654009,-0.00004692617949331179,0.020309822633862495,-0.005588286556303501,-0.0005793990567326546,0.014508974738419056,0.030444161966443062,-0.010655457153916359,0.03071843460202217,-0.005602000281214714,0.002571297576650977,-0.0020124688744544983,-0.011121719144284725,0.002060466445982456,-0.015139799565076828,-0.006164257414638996,0.016991134732961655,-0.008461283519864082,0.007590470369905233,0.008214438334107399,0.013542166911065578,-0.043115515261888504,0.01845848746597767,-0.013247325085103512,0.0043540638871490955,-0.0029484210535883904,-0.02109149657189846,0.00039362278766930103,-0.024012491106987,-0.027756299823522568,0.006781368516385555,-0.0062979646027088165,-0.014358125627040863,-0.010161767713725567,0.027248896658420563,0.017594531178474426,0.03176066651940346,-0.01556492131203413,0.003555247327312827,-0.009338952600955963,-0.012122810818254948,-0.027111761271953583,-0.03176066651940346,0.01933615654706955,-0.008372144773602486,0.007350482512265444,-0.012294230982661247,-0.002291883109137416,-0.026412367820739746,0.008721841499209404,-0.002648436464369297,0.017484823241829872,0.016799144446849823,-0.0013970716390758753,-0.0012607928365468979,0.0005836845375597477,0.008660130202770233,-0.026576930657029152,0.04925920441746712,0.016648294404149055,-0.0017201980808749795,-0.009572083130478859,-0.012150238268077374,0.005413438193500042,0.024670742452144623,-0.004467200953513384,-0.03189780190587044,-0.00676765525713563,-0.008941258303821087,0.01221194863319397,-0.0033769707661122084,-0.004278638865798712,0.007124208379536867,0.009249813854694366,0.008858976885676384,-0.01885618269443512,-0.019445866346359253,0.00410379096865654,-0.02645350806415081,-0.011711402796208858,0.0011322280624881387,-0.006013407837599516,-0.01620945893228054,-0.05074027180671692,-0.013007337227463722,-0.006483098026365042,-0.04484342783689499,0.021681180223822594,-0.018156789243221283,0.007165349088609219,-0.03839804232120514,0.018431060016155243,-0.016785429790616035,0.027564309537410736,-0.03337886929512024,-0.021736035123467445,0.010264620184898376,0.017416255548596382,0.00371295353397727,0.006267108954489231,-0.0034061120823025703,0.016867712140083313,-0.0004069078422617167,-0.004175787325948477,0.03192523121833801,-0.00949665904045105,-0.0034318252000957727,-0.03362571448087692,0.016922567039728165,0.003241549013182521,0.0030752718448638916,-0.009236101061105728,0.003856946248561144,-0.028935668990015984,-0.027235183864831924,0.012301087379455566,-0.00018856182578019798,-0.04308808967471123,0.01796479895710945,0.03590216860175133,-0.010230335406959057,-0.02978591062128544,-0.01220509223639965,-0.17355915904045105,0.006033978424966335,0.020707515999674797,-0.02102292887866497,0.014906669035553932,0.010826876387000084,0.012019959278404713,0.018403634428977966,0.005814560689032078,0.011389133520424366,-0.02162632718682289,-0.014947809278964996,-0.019418438896536827,-0.03587474301457405,-0.01496152300387621,-0.00847499631345272,0.0012110811658203602,0.01859562285244465,0.06928104162216187,0.009613224305212498,0.03664270415902138,-0.03195265680551529,0.003654670901596546,0.011779971420764923,-0.007803030777722597,0.021283486858010292,-0.0005699709290638566,-0.03872716799378395,-0.009434947744011879,-0.034421101212501526,-0.006771083455532789,0.012129667215049267,0.008968685753643513,0.019144166260957718,-0.006267108954489231,-0.008612132631242275,-0.013110188767313957,-0.014166135340929031,-0.012301087379455566,0.003654670901596546,0.02746831439435482,0.04103105142712593,-0.004923177883028984,-0.016127178445458412,0.009599510580301285,0.015647202730178833,0.021064069122076035,-0.024588461965322495,0.0018650478450581431,-0.009380093775689602,0.01723797805607319,-0.03554561734199524,-0.006647661328315735,0.007254487369209528,0.01723797805607319,-0.009832642041146755,0.0011090863263234496,0.019377298653125763,-0.019651569426059723,-0.018403634428977966,0.008049875497817993,-0.011128575541079044,-0.003946084529161453,0.012767349369823933,-0.00713792210444808,0.000534401333425194,-0.016566012054681778,-0.006853364873677492,-0.03425654023885727,0.013466741889715195,0.013274751603603363,-0.023628510534763336,-0.010511464439332485,0.007103637792170048,0.02997790090739727,-0.004268353804945946,-0.019637856632471085,0.015756910666823387,-0.007686465512961149,-0.02564440667629242,0.010100056417286396,0.005290016066282988,0.015414071269333363,0.008618989028036594,-0.011114861816167831,0.028195135295391083,-0.030553871765732765,-0.0022233151830732822,0.0034352533984929323,0.0034558239858597517,0.01708712987601757,-0.003925514407455921,-0.0013593592448160052,-0.003935799468308687,-0.009078394621610641,0.0035621041897684336,0.021461762487888336,-0.00956522673368454,0.006215683184564114,0.0033752566669136286,0.0007979593356139958,-0.014303270727396011,-0.017333973199129105,-0.0074601913802325726,0.03494222089648247,-0.004978031851351261,-0.002929565031081438,-0.006208826322108507,0.04923177510499954,-0.013302179053425789,-0.03845289722084999,0.0040729353204369545,0.009345808997750282,0.01974756456911564,-0.018732760101556778,0.012472507543861866,0.006363104097545147,-0.01221194863319397,-0.024999868124723434,0.0012179379118606448,0.04692789539694786,-0.009846355766057968,-0.032720617949962616,-0.0038912303280085325,-0.023998776450753212,-0.009887496009469032,-0.09736646711826324,-0.015592347830533981,-0.0016884853830561042,0.03491479158401489,-0.029868192970752716,0.011985674500465393,-0.01078573614358902,0.010209765285253525,-0.0010002347407862544,0.04613250494003296,-0.021804602816700935,-0.005440865643322468,-0.010943442583084106,0.0022301720455288887,-0.006085404194891453,0.018088221549987793,-0.02122863195836544,0.004899179097265005,-0.022147443145513535,0.03351600468158722,0.016223173588514328,-0.0007705321768298745,-0.015153513289988041,-0.0031575532630085945,-0.04067450016736984,-0.02272341400384903,-0.02014525979757309,0.004960889928042889,-0.0006796796224080026,-0.0007011071429587901,0.005207734648138285,0.001985041657462716,0.0025164431426674128,-0.001503351959399879,0.025041010230779648,-0.02169489488005638,-0.010120627470314503,-0.011471414938569069,0.012294230982661247,0.010134340263903141,0.019034458324313164,-0.009434947744011879,0.02495872788131237,-0.022435428574681282,-0.012040529400110245,0.004909464158117771,-0.012362798675894737,0.031705811619758606,-0.00393237080425024,0.0019113312009721994,-0.017333973199129105,-0.014687251299619675,-0.04530969262123108,-0.010401755571365356,0.03403712064027786,-0.03247377276420593,0.018211644142866135,0.001979899127036333,-0.010148053988814354,0.0019936126191169024,0.03304974362254143,-0.0027170043904334307,0.00973664689809084,0.042978379875421524,0.031102415174245834,0.011114861816167831,-0.016456304118037224,0.006781368516385555,0.03181552141904831,0.013658732175827026,-0.007549329660832882,0.019281303510069847,0.005745992995798588,-0.002854140242561698,-0.020913219079375267,0.03521649166941643,0.010045202448964119,-0.016853997483849525,0.0001572776964167133,0.02557583898305893,-0.0027187184896320105,-0.03708153963088989,-0.0014682108303532004,-0.021256059408187866,-0.007172205951064825,0.02040581777691841,0.009167532436549664,-0.010710311122238636,0.01696370728313923,-0.05968153104186058,0.006993929389864206,0.026371227577328682,-0.0020707515068352222,0.006167685613036156,0.011258854530751705,0.023354237899184227,-0.019363583996891975,-0.004768899641931057,-0.008509280160069466,0.020913219079375267,-0.003980368375778198,-0.009647508151829243,-0.05024658143520355,0.02096807397902012,0.005578001495450735,-0.005835131276398897,-0.014577542431652546,-0.00012974339188076556,0.019226448610424995,-0.019487006589770317,-0.012561645358800888,0.019377298653125763,-0.018746472895145416,0.0044363453052937984,-0.011204000562429428,-0.01674428954720497,0.00962693803012371,-0.0020707515068352222,0.009009826928377151,0.004460344091057777,0.006438529118895531,0.010792592540383339,-0.0034763943403959274,-0.0009745217394083738,0.009359522722661495,0.009297811426222324,-0.004943748004734516,-0.009352666325867176,-0.019555574283003807,-0.00265357899479568,-0.013987858779728413,-0.02542499080300331,0.024588461965322495,-0.009969777427613735,0.016908852383494377,0.010689741000533104,0.002295311540365219,-0.012150238268077374,0.04111333191394806,0.013528453186154366,0.028716251254081726,0.013528453186154366,-0.01390557736158371,-0.010641743429005146,0.016360308974981308,-0.0165385864675045,-0.0015573492273688316,-0.014563829638063908,-0.0033341157250106335,-0.019500721246004105,0.02700205333530903,0.009585796855390072,0.025287853553891182,0.022641131654381752,-0.01607232354581356,-0.005673996638506651,0.0021016071550548077,-0.023793073371052742,-0.008248722180724144,0.018677905201911926,0.007926452904939651,-0.000051318813348188996,0.04964318498969078,-0.008934401907026768,0.0221885833889246,-0.02849683351814747,0.015482639893889427,0.02000812254846096,-0.031376685947179794,0.010628029704093933,0.01913045346736908,-0.0408390611410141,-0.022572563961148262,0.005015744362026453,0.013610734604299068,0.02502729557454586,0.02191431261599064,-0.019500721246004105,-0.02978591062128544,0.025274140760302544,-0.017676813527941704,0.01662086695432663,0.007638467941433191,0.001273649395443499,-0.01674428954720497,0.015976328402757645,0.010559462010860443,0.0028609971050173044,0.005039743147790432,-0.008331003598868847,0.01777280867099762,-0.0012445079628378153,-0.05139852315187454,0.012150238268077374,-0.008413285948336124,-0.004456915892660618,0.020254967734217644,0.013878149911761284,-0.005965410266071558,0.01974756456911564,0.025191858410835266,-0.003241549013182521,0.017045987769961357,0.01221194863319397,-0.016799144446849823,-0.04333493486046791,-0.01556492131203413,0.011375419795513153,-0.005756278056651354,-0.02835969813168049,0.0229291170835495,0.011978818103671074,-0.011683976277709007,0.009290955029428005,-0.0072270603850483894,0.022764554247260094,-0.01305533479899168,0.004031794611364603,0.027166616171598434,-0.01967899687588215,-0.021612612530589104,0.029676202684640884,-0.023573655635118484,-0.0037952351849526167,0.02434161677956581,-0.03154125064611435,0.018691617995500565,0.016593439504504204,0.012904484756290913,-0.02877110429108143,0.011512556113302708,-0.014495261013507843,0.019980695098638535,-0.010209765285253525,-0.009956063702702522,0.0030529871582984924,-0.003236406482756138,0.011821111664175987,-0.024067344143986702,-0.006757369730621576,0.009908066131174564,0.0760829821228981,0.04890264943242073,-0.002166746649891138,-0.0016533442540094256,0.0009428090997971594,0.025260426104068756,-0.0036238152533769608,0.021681180223822594,-0.0007671037456020713,-0.05990094691514969,-0.0008755268063396215,-0.013706729747354984,0.0014896383509039879,-0.007309341803193092,-0.008797265589237213,-0.011299995705485344,-0.02028239518404007,0.008324147202074528,-0.004926606081426144,0.022695986554026604,0.016634581610560417,0.03826090693473816,0.02712547406554222,0.019007030874490738,-0.023751933127641678,-0.018691617995500565,0.015990043058991432,0.0244101844727993,-0.04681818559765816,-0.00674708466976881,0.006599663756787777,-0.0014022142859175801,-0.021050356328487396,-0.02347766049206257,0.013267895206809044,0.01967899687588215,-0.017375115305185318,-0.015852905809879303,0.01085430383682251,0.02671406790614128,0.017923658713698387,-0.0011185144539922476,-0.005900270771235228,-0.04273153468966484,-0.027166616171598434,0.03554561734199524,-0.00858470518141985,0.0091263921931386,-0.0337628498673439]],"metadata":{"location":"https://reintech.io/blog/error-handling-and-logging-in-go","source_type":"webpage"}},{"raw_content":"Skip to Main Content\nWhy Go arrow_drop_down\nPress Enter to activate/deactivate dropdown\nCase Studies\nCommon problems companies solve with Go\nUse Cases\nStories about how and why companies use Go\nSecurity\nHow Go can help keep you secure by default\nLearn\nPress Enter to activate/deactivate dropdown\nDocs arrow_drop_down\nPress Enter to activate/deactivate dropdown\nEffective Go\nTips for writing clear, performant, and idiomatic Go code\nGo User Manual\nA complete introduction to building software with Go\nStandard library\nReference documentation for Go's standard library\nRelease Notes\nLearn what's new in each Go release\nPackages\nPress Enter to activate/deactivate dropdown\nCommunity arrow_drop_down\nPress Enter to activate/deactivate dropdown\nRecorded Talks\nVideos from prior events\nMeetups\nopen_in_new\nMeet other local Go developers\nConferences\nopen_in_new\nLearn and network with Go developers from around the world\nGo blog\nThe Go project's official blog.\nGo project\nGet help and stay informed from Go\nGet connected\nWhy Go navigate_next\nnavigate_beforeWhy Go\nCase Studies\nUse Cases\nSecurity\nLearn\nDocs navigate_next\nnavigate_beforeDocs\nEffective Go\nGo User Manual\nStandard library\nRelease Notes\nPackages\nCommunity navigate_next\nnavigate_beforeCommunity\nRecorded Talks\nMeetups\nopen_in_new\nConferences\nopen_in_new\nGo blog\nGo project\nGet connected\nDocumentation\nTutorials\nAdd a test\nAdd a test\nNow that you've gotten your code to a stable place (nicely done, by the way),\nadd a test. Testing your code during development can expose bugs that find\ntheir way in as you make changes. In this topic, you add a test for the\nHello function.\nNote: This topic is part of a multi-part tutorial that begins\nwith Create a Go module.\nGo's built-in support for unit testing makes it easier to test as you go.\nSpecifically, using naming conventions, Go's testing package, and\nthe go test command, you can quickly write and execute tests.\nIn the greetings directory, create a file called greetings_test.go.\nEnding a file's name with _test.go tells the go test command\nthat this file contains test functions.\nIn greetings_test.go, paste the following code and save the file.\npackage greetings\nimport (\n\"testing\"\n\"regexp\"\n)\n// TestHelloName calls greetings.Hello with a name, checking\n// for a valid return value.\nfunc TestHelloName(t *testing.T) {\nname := \"Gladys\"\nwant := regexp.MustCompile(`\\b`+name+`\\b`)\nmsg, err := Hello(\"Gladys\")\nif !want.MatchString(msg) || err != nil {\nt.Fatalf(`Hello(\"Gladys\") = %q, %v, want match for %#q, nil`, msg, err, want)\n}\n}\n// TestHelloEmpty calls greetings.Hello with an empty string,\n// checking for an error.\nfunc TestHelloEmpty(t *testing.T) {\nmsg, err := Hello(\"\")\nif msg != \"\" || err == nil {\nt.Fatalf(`Hello(\"\") = %q, %v, want \"\", error`, msg, err)\n}\n}\nIn this code, you:\nImplement test functions in the same package as the code you're testing.\nCreate two test functions to test the greetings.Hello\nfunction. Test function names have the form TestName,\nwhere Name says something about the specific test. Also, test\nfunctions take a pointer to the testing package's\ntesting.T\ntype as a parameter. You use this parameter's methods for reporting\nand logging from your test.\nImplement two tests:\nTestHelloName calls the Hello function,\npassing a name value with which the function should be\nable to return a valid response message. If the call returns an\nerror or an unexpected response message (one that doesn't include\nthe name you passed in), you use the t parameter's\nFatalf method to print a message to the console\nand end execution.\nTestHelloEmpty calls the Hello function\nwith an empty string. This test is designed to confirm that your\nerror handling works. If the call returns a non-empty string or no\nerror, you use the t parameter's Fatalf\nmethod to print a message to the console and end execution.\nAt the command line in the greetings directory, run the\ngo test command\nto execute the test.\nThe go test command executes test functions (whose names\nbegin with Test) in test files (whose names end with\n_test.go). You can add the -v flag to get verbose output that\nlists all of the tests and their results.\nThe tests should pass.\n$ go test\nPASS\nok\nexample.com/greetings\n0.364s\n$ go test -v\n=== RUN\nTestHelloName\n--- PASS: TestHelloName (0.00s)\n=== RUN\nTestHelloEmpty\n--- PASS: TestHelloEmpty (0.00s)\nPASS\nok\nexample.com/greetings\n0.372s\nBreak the greetings.Hello function to view a failing test.\nThe TestHelloName test function checks the return value for\nthe name you specified as a Hello function parameter. To view\na failing test result, change the greetings.Hello function so\nthat it no longer includes the name.\nIn greetings/greetings.go, paste the following code in place of the\nHello function. Note that the highlighted lines change the\nvalue that the function returns, as if the name argument had\nbeen accidentally removed.\n// Hello returns a greeting for the named person.\nfunc Hello(name string) (string, error) {\n// If no name was given, return an error with a message.\nif name == \"\" {\nreturn name, errors.New(\"empty name\")\n}\n// Create a message using a random format.\n// message := fmt.Sprintf(randomFormat(), name)\nmessage := fmt.Sprint(randomFormat())\nreturn message, nil\n}\nAt the command line in the greetings directory, run go test to\nexecute the test.\nThis time, run go test without the -v flag. The\noutput will include results for only the tests that failed, which can be\nuseful when you have a lot of tests. The TestHelloName test\nshould fail -- TestHelloEmpty still passes.\n$ go test\n--- FAIL: TestHelloName (0.00s)\ngreetings_test.go:15: Hello(\"Gladys\") = \"Hail, %v! Well met!\", <nil>, want match for `\\bGladys\\b`, nil\nFAIL\nexit status 1\nFAIL\nexample.com/greetings\n0.182s\nIn the next (and last) topic, you'll see how to compile and install your code\nto run it locally.\n< Return greetings for multiple people\nCompile and install the application >\nWhy Go\nUse Cases\nCase Studies\nGet Started\nPlayground\nTour\nStack Overflow\nHelp\nPackages\nStandard Library\nAbout Go Packages\nAbout\nDownload\nBlog\nIssue Tracker\nRelease Notes\nBrand Guidelines\nCode of Conduct\nConnect\nTwitter\nGitHub\nSlack\nr/golang\nMeetup\nGolang Weekly\nOpens in new window.\nCopyright\nTerms of Service\nPrivacy Policy\nReport an Issue\ngo.dev uses cookies from Google to deliver and enhance the quality of its services and to\nanalyze traffic. Learn more.\nOkay","summary":"The text provides instructions on how to test Go code using Go's built-in support for unit testing. It explains how to create test functions in the same package as the code being tested, and provides an example of two test functions for testing the \"Hello\" function. It also explains how to run the tests using the \"go test\" command and how to view the test results. Additionally, it demonstrates how to intentionally break the code to view a failing test result.","chunks":["Skip to Main Content Why Go arrow_drop_down Press Enter to activate/deactivate dropdown Case Studies Common problems companies solve with Go Use Cases Stories about how and why companies use Go Security How Go can help keep you secure by default Learn Press Enter to activate/deactivate dropdown Docs arrow_drop_down Press Enter to activate/deactivate dropdown Effective Go Tips for writing clear, performant, and idiomatic Go code Go User Manual A complete introduction to building software with Go Standard library Reference documentation for Go's standard library Release Notes Learn what's new in each Go release Packages Press Enter to activate/deactivate dropdown Community arrow_drop_down Press Enter to activate/deactivate dropdown Recorded Talks Videos from prior events Meetups open_in_new Meet other local Go developers Conferences open_in_new Learn and network with Go developers from around the world Go blog The Go project's official blog. Go project Get help and stay informed from Go Get connected Why Go navigate_next navigate_beforeWhy Go Case Studies Use Cases Security Learn Docs navigate_next navigate_beforeDocs Effective Go Go User Manual Standard library Release Notes Packages Community navigate_next navigate_beforeCommunity Recorded Talks Meetups open_in_new Conferences open_in_new Go blog Go project Get connected Documentation Tutorials Add a test Add a test Now that you've gotten your code to a stable place (nicely done, by the way), add a test. Testing your code during development can expose bugs that find their way in as you make changes. In this topic, you add a test for the Hello function. Note: This topic is part of a multi-part tutorial that begins with Create a Go module. Go's built-in support for unit testing makes it easier to test as you go. Specifically, using naming conventions, Go's testing package, and the go test command, you can quickly write and execute tests. In the greetings directory, create a file called greetings_test.go. Ending a file's name with _test.go tells the go test command that this file contains test functions. In greetings_test.go, paste the following code and save the file. package greetings import ( \"testing\" \"regexp\" ) // TestHelloName calls greetings.Hello with a name, checking // for a valid return value. func TestHelloName(t *testing.T) { name := \"Gladys\" want := regexp.MustCompile(`\\b`+name+`\\b`) msg, err := Hello(\"Gladys\") if !want.MatchString(msg) || err != nil { t.Fatalf(`Hello(\"Gladys\") = %q, %v, want match for %#q, nil`, msg, err, want) } } // TestHelloEmpty calls greetings.Hello with an empty string, // checking for an error. func TestHelloEmpty(t *testing.T) { msg, err := Hello(\"\") if msg != \"\" || err == nil { t.Fatalf(`Hello(\"\") = %q, %v, want \"\", error`, msg, err) } } In this code, you: Implement test functions in the same package as the code you're testing. Create two test functions to test the greetings.Hello function. Test function names have the form TestName, where Name says something about the specific test. Also, test functions take a pointer to the testing package's testing.T type as a parameter. You use this parameter's methods for reporting and logging from your test. Implement two tests: TestHelloName calls the Hello function, passing a name value with which the function should be able to return a valid response message. If the call returns an error or an unexpected response message (one that doesn't include the name you passed in), you use the t parameter's Fatalf method to print a message to the console and end execution. TestHelloEmpty calls the Hello function with an empty string. This test is designed to confirm that your error handling works. If the call returns a non-empty string or no error, you use the t parameter's Fatalf method to print a message to the console and end execution. At the command line in the greetings directory, run the go test command to execute the test. The go test command executes test functions (whose names begin with Test) in test files (whose names end with _test.go). You can add the -v flag to get verbose output that lists all of the tests and their results. The tests should pass. $ go test PASS ok example.com/greetings 0.364s $ go test -v === RUN TestHelloName --- PASS: TestHelloName (0.00s) === RUN TestHelloEmpty --- PASS: TestHelloEmpty (0.00s) PASS ok example.com/greetings 0.372s Break the greetings.Hello function to view a failing test. The TestHelloName test function checks the return value for the name you specified as a Hello function parameter. To view a failing test result, change the greetings.Hello function so that it no longer includes the name. In greetings/greetings.go, paste the following code in place of the Hello function. Note that the highlighted lines change the value that the function returns, as if the name argument had been accidentally removed. // Hello returns a greeting for the named person. func Hello(name string) (string, error) { // If no name was given, return an error with a message. if name == \"\" { return name, errors.New(\"empty name\") } // Create a message using a random format. // message := fmt.Sprintf(randomFormat(), name) message := fmt.Sprint(randomFormat()) return message, nil } At the command line in the greetings directory, run go test to execute the test. This time, run go test without the -v flag. The output will include results for only the tests that failed, which can be useful when you have a lot of tests. The TestHelloName test should fail -- TestHelloEmpty still passes. $ go test --- FAIL: TestHelloName (0.00s) greetings_test.go:15: Hello(\"Gladys\") = \"Hail, %v! Well met!\", <nil>, want match for `\\bGladys\\b`, nil FAIL exit status 1 FAIL example.com/greetings 0.182s In the next (and last) topic, you'll see how to compile and install your code to run it locally. < Return greetings for multiple people Compile and install the application > Why Go Use Cases Case Studies Get Started Playground Tour Stack Overflow Help Packages Standard Library About Go Packages About Download Blog Issue Tracker Release Notes Brand Guidelines Code of Conduct Connect Twitter GitHub Slack r/golang Meetup Golang Weekly Opens in new window. Copyright Terms of Service Privacy Policy Report an Issue go.dev uses cookies from Google to deliver and enhance the quality of its services and to analyze traffic. Learn more. Okay"],"chunk_summaries":["The text provides instructions on how to test Go code using Go's built-in support for unit testing. It explains how to create test functions in the same package as the code being tested, and provides an example of two test functions for testing the \"Hello\" function. It also explains how to run the tests using the \"go test\" command and how to view the test results. Additionally, it demonstrates how to intentionally break the code to view a failing test result."],"e_summary":[0.0035412984434515238,0.020999865606427193,-0.0008677353616803885,-0.0013895492302253842,-0.01119680143892765,0.014701246283948421,-0.009307215921580791,-0.01392397005110979,-0.01736810803413391,-0.010352518409490585,0.01518369372934103,-0.006295269355177879,-0.02248741313815117,-0.009213406592607498,0.009153100661933422,-0.010178301483392715,0.014218798838555813,-0.012483328580856323,0.01011799555271864,-0.008181504905223846,-0.013789956457912922,0.00931391678750515,0.0116323446854949,0.004110854584723711,-0.004626805428415537,-0.014433220028877258,0.008375824429094791,-0.020222589373588562,0.015478522516787052,-0.0157331470400095,0.024095570668578148,-0.02594495192170143,-0.047762300819158554,-0.014701246283948421,-0.002154262037947774,-0.00781966932117939,0.009401025250554085,0.019606128334999084,-0.007035692222416401,-0.00520976260304451,0.025851143524050713,0.007799567189067602,0.0011424623662605882,0.00852993968874216,-0.005286820232868195,0.013964174315333366,0.010238607414066792,-0.041865717619657516,0.002104006940498948,0.0019733442459255457,0.004512893967330456,0.010104593820869923,-0.035674311220645905,-0.008308817632496357,-0.0036652605049312115,0.012208601459860802,-0.020477214828133583,0.009561840444803238,0.00816810317337513,-0.001163401990197599,-0.006429282482713461,0.013803358189761639,0.002078879624605179,0.01238951925188303,0.0031141312792897224,-0.013233802281320095,-0.0002822652750182897,0.01992776058614254,-0.0409812331199646,0.003161035943776369,0.004881430417299271,0.013990976847708225,-0.0031995647586882114,0.024497609585523605,0.020195787772536278,-0.028357189148664474,-0.03819375857710838,-0.012483328580856323,0.010888570919632912,0.004197963047772646,0.009910275228321552,-0.004924984648823738,-0.0032045901753008366,0.034066151827573776,-0.02396155707538128,-0.017046477645635605,0.015277503058314323,0.013046183623373508,-0.0097896633669734,-0.030394190922379494,0.0014590685022994876,-0.001360233873128891,-0.0058329240418970585,0.011719453148543835,-0.003789222799241543,0.0016902412753552198,-0.01606818102300167,0.045725297182798386,-0.021937958896160126,-0.013086387887597084,-0.013274005614221096,0.011752956546843052,-0.008268613368272781,0.0004338676808401942,-0.010178301483392715,0.008389225229620934,0.018185589462518692,-0.028303584083914757,0.0010084492387250066,0.0026986903976649046,-0.015746548771858215,0.03374452143907547,0.0019348153145983815,-0.010821565054357052,-0.012369416654109955,0.02412237413227558,0.012496729381382465,-0.03859579563140869,-0.009059291332960129,-0.0019247643649578094,0.005564897321164608,0.02153591811656952,0.04328626021742821,0.0076052481308579445,-0.004405683372169733,-0.0032799725886434317,-0.030876638367772102,-0.017086680978536606,0.012644143775105476,-0.022795643657445908,0.03642478212714195,0.03218996524810791,0.013937370851635933,0.019820550456643105,-0.012965776026248932,0.02006177417933941,-0.035245466977357864,0.016175391152501106,-0.005467738024890423,0.002722142729908228,0.008000587113201618,0.001436453778296709,0.004566499497741461,-0.006834672298282385,-0.01992776058614254,-0.00001553453694214113,0.018614431843161583,0.01628260128200054,0.017957767471671104,-0.007578445598483086,0.004673709627240896,-0.013736351393163204,-0.0019180637318640947,0.005129354540258646,0.0033201766200363636,0.02755311131477356,-0.014540430158376694,-0.006325422320514917,-0.017421714961528778,-0.011813262477517128,0.0065867481753230095,0.026548011228442192,0.019592728465795517,-0.01182666327804327,0.009240209124982357,0.02945609763264656,0.015103286132216454,-0.0015914065297693014,-0.001178478472866118,-0.00996388029307127,0.012637442909181118,0.030608611181378365,-0.03564750775694847,0.026588216423988342,0.008918577805161476,0.020209187641739845,0.02221938595175743,0.020544221624732018,-0.007926879450678825,-0.0002678169694263488,-0.0013376191491261125,0.0034910435788333416,0.02305026724934578,0.034334179013967514,0.002110707573592663,-0.013481726869940758,0.016523825004696846,0.03339608386158943,0.028518006205558777,-0.0015160241164267063,0.0034843427129089832,0.030957045033574104,-0.0015109986998140812,0.020249392837285995,-0.644120991230011,0.012516831047832966,-0.0022581222001463175,-0.030394190922379494,0.03851538896560669,0.01806497760117054,0.010211804881691933,0.02551610954105854,-0.002827678108587861,0.03859579563140869,0.0009875096147879958,0.0097896633669734,0.0016852158587425947,-0.017515523359179497,-0.0015168617246672511,-0.02309047244489193,0.011612242087721825,-0.03795253485441208,-0.03339608386158943,0.02755311131477356,-0.01880205050110817,0.01629600301384926,0.0036954134702682495,-0.01672484539449215,0.021120477467775345,0.022768840193748474,-0.008851571008563042,-0.02113387919962406,0.004171160515397787,0.04084721952676773,-0.014634239487349987,-0.01624239794909954,-0.0019850702956318855,0.025288287550210953,0.038622599095106125,-0.007960382848978043,-0.016711443662643433,-0.023599721491336823,-0.012918870896100998,0.050710588693618774,-0.021683333441615105,-0.00862374808639288,0.02087925374507904,0.0004171160398982465,0.004861328285187483,-0.01659083180129528,0.014594036154448986,-0.01147822942584753,-0.010761259123682976,0.0028343789745122194,0.0034508395474404097,-0.012858564965426922,0.018051575869321823,-0.005333724897354841,-0.029965348541736603,-0.011404521763324738,0.024202780798077583,-0.013173496350646019,-0.01427240390330553,-0.008791265077888966,0.0010754558024927974,0.013964174315333366,-0.011357617564499378,-0.01676504872739315,-0.02274203673005104,0.02526148594915867,-0.03023337386548519,0.007042393088340759,-0.00767895532771945,-0.00946133118122816,0.0051963613368570805,0.023318294435739517,-0.02161632664501667,0.009535037912428379,0.027043860405683517,0.052613575011491776,0.027405695989727974,-0.008737660013139248,0.002043701009824872,0.009729357436299324,0.007464534603059292,0.005012093111872673,-0.01571974717080593,-0.03302085027098656,0.00922680739313364,-0.014674443751573563,-0.02313067577779293,0.008724258281290531,0.016818653792142868,0.009990682825446129,0.025569716468453407,0.023974958807229996,-0.007156304083764553,-0.022366801276803017,0.009300515055656433,0.016791852191090584,0.001968318596482277,0.016135187819600105,0.00002339995808142703,-0.013381216675043106,-0.005641954950988293,0.0158939640969038,-0.0008120361599139869,0.007129501551389694,0.024015162140130997,0.005876478273421526,-0.015518726781010628,0.024631623178720474,0.025743933394551277,0.007846471853554249,-0.024712031707167625,-0.009816465899348259,-0.019941162317991257,0.014017779380083084,0.005320323631167412,-0.027955150231719017,-0.008496436290442944,0.004747417289763689,0.02491305023431778,-0.0196195300668478,0.010794761590659618,-0.012148295529186726,0.001578005263581872,-0.01715368777513504,0.009521637111902237,0.000915477576199919,0.009273712523281574,-0.00660684984177351,-0.024631623178720474,-0.011290610767900944,-0.005889879539608955,-0.0021659880876541138,0.01932470127940178,-0.018078379333019257,0.0242161825299263,0.008931978605687618,0.03626396879553795,-0.027258282527327538,0.0023000012151896954,-0.019163886085152626,-0.020343201234936714,0.0037590698339045048,0.008322218433022499,-0.0017790250713005662,0.0038729810621589422,0.002234669867902994,-0.05682159215211868,-0.024591419845819473,0.03452179580926895,0.01723409630358219,-0.0015704670222476125,0.010808163322508335,-0.020852452144026756,0.002735544228926301,-0.016215594485402107,-0.02924167737364769,0.01299257855862379,-0.0038294268306344748,-0.009220107458531857,-0.013481726869940758,0.004335326608270407,0.011136495508253574,-0.02248741313815117,0.00814130064100027,-0.011538535356521606,-0.008000587113201618,-0.024980057030916214,0.0427234023809433,-0.008328919298946857,-0.024886248633265495,-0.008382524363696575,0.005893229972571135,-0.021763741970062256,0.004208013880997896,0.02902725525200367,0.01655062846839428,-0.01206118706613779,-0.0028494554571807384,-0.0027020408306270838,-0.024671826511621475,0.019418509677052498,-0.0013635841896757483,-0.00718980748206377,0.016818653792142868,0.025060465559363365,0.028652019798755646,0.01884225383400917,0.005933433771133423,0.0067643155343830585,-0.01529090479016304,-0.009990682825446129,0.022018365561962128,-0.01789076067507267,0.006858124863356352,0.00672411173582077,0.02386774867773056,-0.007859873585402966,0.005531394388526678,0.003407285315915942,-0.0028092514257878065,0.0336909145116806,-0.016135187819600105,-0.014915667474269867,-0.041651297360658646,0.01223540399223566,-0.014969272539019585,0.017167089506983757,-0.014245601370930672,0.005595050286501646,-0.008221709169447422,0.0027589965611696243,-0.03114466369152069,-0.02598515711724758,-0.005695560481399298,0.013240502215921879,0.011659147217869759,-0.0030722522642463446,0.01728770136833191,-0.00399694312363863,0.0025311741046607494,0.01909687928855419,0.02573053166270256,0.020544221624732018,-0.022902853786945343,-0.014031180180609226,0.014057982712984085,-0.00018719966465141624,0.01364924293011427,0.008697455748915672,-0.015867160633206367,-0.001087181968614459,0.010499932803213596,0.01571974717080593,0.0187082402408123,0.03599594160914421,0.005427533760666847,-0.01577335223555565,-0.019941162317991257,0.0204906165599823,-0.004228116013109684,-0.014259003102779388,0.0030270228162407875,0.020557623356580734,-0.02768712490797043,0.02784794010221958,0.017033075913786888,0.029911743476986885,0.012423022650182247,-0.017528925091028214,0.004660308361053467,-0.012851864099502563,0.021066872403025627,-0.024846045300364494,-0.008610347285866737,0.013046183623373508,-0.016001174226403236,0.0003582758654374629,-0.00797378458082676,0.02776753157377243,0.01823919452726841,0.014513627626001835,0.004935035482048988,0.029348887503147125,0.008349020965397358,-0.003869630629196763,-0.017006272450089455,0.023948155343532562,-0.016483621671795845,-0.0429646261036396,-0.01043962687253952,-0.00015767489094287157,0.008771163411438465,-0.005042246077209711,-0.001340131857432425,0.044117141515016556,0.020370004698634148,0.010654048062860966,0.01701967418193817,0.012959075160324574,-0.010499932803213596,-0.034334179013967514,-0.022862648591399193,0.01893606223165989,0.018091779202222824,0.004824474453926086,-0.009977282024919987,-0.007739261258393526,-0.003504444845020771,-0.023211084306240082,0.0079469820484519,-0.007591846864670515,-0.008436130359768867,-0.00399694312363863,-0.01740831322968006,0.005611801985651255,0.025583116337656975,0.018949463963508606,-0.009300515055656433,0.011290610767900944,-0.0054911901243031025,-0.002264822833240032,0.007283616811037064,-0.024980057030916214,-0.008630448952317238,0.03540628403425217,0.0032849982380867004,-0.015612536109983921,-0.002918137004598975,0.015960970893502235,-0.008228409104049206,0.010781360790133476,0.0034977442119270563,0.0009573567076586187,-0.04025756195187569,0.03872980922460556,-0.021174082532525063,-0.028276782482862473,-0.010131396353244781,0.014326009899377823,0.017140286043286324,-0.016188792884349823,-0.022688431665301323,0.007524840533733368,0.009990682825446129,0.051836300641298294,0.01979374699294567,-0.000717808143235743,-0.002474218374118209,-0.019900957122445107,0.011605542153120041,-0.024229584261775017,-0.02041020803153515,0.009213406592607498,0.00012029777280986309,-0.0044291359372437,0.012429722584784031,-0.011377719230949879,-0.008697455748915672,0.011893670074641705,0.02429659105837345,0.006750914268195629,-0.006901679094880819,0.013414720073342323,-0.0032096158247441053,-0.0006859800196252763,0.023318294435739517,0.00920670572668314,0.0019297898979857564,0.015424917452037334,-0.012396219186484814,0.013072986155748367,0.0013803357724100351,0.003554699709638953,-0.024712031707167625,-0.014017779380083084,0.0022329946514219046,0.01911028102040291,0.013441522605717182,-0.01628260128200054,0.05427534133195877,-0.004556448198854923,0.01594756916165352,0.013562134467065334,-0.010734455659985542,0.001871159067377448,-0.004623454995453358,0.011994180269539356,-0.005618502851575613,-0.017488719895482063,0.02456461638212204,-0.011277209967374802,-0.0016785151092335582,0.004405683372169733,-3.7756644815090112e-6,0.011257107369601727,-0.0059267329052090645,-0.0034977442119270563,-0.008469633758068085,0.01412498950958252,0.0032699217554181814,-0.013133292086422443,0.015424917452037334,0.0028209774754941463,-0.025194479152560234,-0.016858858987689018,-0.015558931045234203,-0.011169998906552792,-0.01911028102040291,-0.010453028604388237,-0.030072558671236038,-0.006429282482713461,-0.0025395499542355537,-0.03548669070005417,-0.0063857282511889935,0.010975680314004421,-0.02798195369541645,-0.016564030200242996,-0.0011407872661948204,0.007719159591943026,0.001536963740363717,0.01011799555271864,0.0026584865991026163,-0.014661042019724846,0.006345524452626705,0.006901679094880819,-0.028491202741861343,-0.009240209124982357,-0.020999865606427193,0.030420992523431778,0.03165391460061073,0.021817347034811974,0.020128780975937843,0.020437011495232582,0.02058442495763302,-0.021991563960909843,0.01212819293141365,-0.007404228672385216,-0.02491305023431778,0.010680850595235825,0.014915667474269867,-0.004804372787475586,0.0022882751654833555,0.0054610371589660645,-0.02295645885169506,-0.0006901678862050176,-0.021817347034811974,-0.0027305185794830322,-0.019458714872598648,0.005591700319200754,0.013990976847708225,0.004047198221087456,0.024832643568515778,0.005467738024890423,-0.020691635087132454,0.02299666218459606,-0.01763613522052765,0.014473424293100834,0.026052163913846016,0.0025780785363167524,0.005528043955564499,-0.003732267301529646,0.017997970804572105,0.0027740730438381433,-0.028062360361218452,0.018909260630607605,-0.04183891788125038,0.029831334948539734,-0.004559798631817102,-0.02161632664501667,0.006744213402271271,-0.03127867728471756,-0.001268937368877232,-0.02169673517346382,0.0000917676225071773,-0.011592140421271324,0.013274005614221096,0.00048160989535972476,-0.018225792795419693,0.0019364905310794711,-0.03114466369152069,-0.016389813274145126,0.00922680739313364,-0.0233048927038908,-0.00008564280142309144,-0.009997383691370487,-0.004197963047772646,-0.005621853284537792,-0.012369416654109955,-0.010654048062860966,-0.027445901185274124,-0.0353526771068573,0.006827971898019314,-0.0023787340614944696,0.011484930291771889,0.021388504654169083,0.00875106081366539,-0.0447067990899086,-0.020691635087132454,0.0009213406592607498,-0.03562070429325104,0.012778157368302345,0.013066285289824009,0.03224357217550278,0.010372620075941086,0.01321369968354702,-0.01240962091833353,0.0025931550189852715,0.009548439644277096,-0.009702554903924465,-0.0020353251602500677,-0.021040070801973343,-0.019981365650892258,-0.024444004520773888,-0.021200885996222496,-0.010164899751543999,0.009280413389205933,0.014084786176681519,0.012744653970003128,-0.007109399419277906,0.012918870896100998,-0.009843268431723118,0.015960970893502235,-0.00998398195952177,-0.04409033805131912,-0.01837320812046528,0.026695426553487778,-0.024417202919721603,0.025542913004755974,-0.017863957211375237,-0.0031442842446267605,0.026145972311496735,0.0052265143021941185,0.012476627714931965,0.025181077420711517,0.02382754348218441,-0.015197095461189747,0.005229864735156298,0.00020625467004720122,0.03200234845280647,-0.009307215921580791,0.0070825968869030476,-0.03964110091328621,0.019525721669197083,0.02875922992825508,0.013870364986360073,0.024578018113970757,0.020195787772536278,0.00922680739313364,-0.015666142106056213,0.00966235063970089,-0.03302085027098656,0.010332416743040085,0.00935412012040615,-0.004459288902580738,-0.018962865695357323,-0.032216768711805344,0.02153591811656952,0.024417202919721603,-0.014540430158376694,0.0022212686017155647,-0.008496436290442944,0.0011424623662605882,-0.014326009899377823,-0.01321369968354702,-0.009287113323807716,-0.011438025161623955,0.0354330874979496,0.022594623267650604,-0.0034575401805341244,0.020691635087132454,0.0009045890183188021,0.0008384200045838952,0.0177567470818758,0.014393015764653683,0.006114351563155651,0.010888570919632912,0.0260789655148983,-0.018989669159054756,-0.024095570668578148,0.006516390945762396,0.01705987937748432,-0.003256520489230752,-0.019311299547553062,0.004392282105982304,0.031868334859609604,-0.005698910914361477,-0.02075864188373089,0.01707327924668789,-0.03323527052998543,0.016818653792142868,-0.005541445221751928,-0.0003921979514416307,-0.018574226647615433,0.009849969297647476,-0.01412498950958252,0.02798195369541645,-0.026923248544335365,0.015143489465117455,0.014191996306180954,0.015438319183886051,-0.0025311741046607494,-0.00206380314193666,-0.011411222629249096,0.00918660406023264,0.023599721491336823,0.004700512625277042,-0.02343890629708767,-0.02559651806950569,0.017743345350027084,0.004857977852225304,-0.009421126917004585,-0.0021760391537100077,-0.0068748765625059605,0.030206572264432907,-0.04226775839924812,-0.004455938469618559,0.00786657352000475,0.000261953886365518,0.000465277029434219,-0.010654048062860966,-0.0026584865991026163,-0.02095966227352619,0.006767665967345238,0.011866867542266846,0.04175850749015808,-0.0011516758240759373,-0.005062348209321499,-0.013555433601140976,0.010392722673714161,-0.004368830006569624,-0.019659733399748802,-0.021281294524669647,0.008107797242701054,0.0005745815578848124,-0.011464827693998814,-0.014996075071394444,-0.0177567470818758,-0.005755866412073374,0.031466294080019,-0.029295282438397408,0.014460022561252117,0.04752107709646225,-0.014821858145296574,0.0007102699019014835,-0.016041377559304237,-0.012918870896100998,-0.026695426553487778,0.01119680143892765,-0.02118748426437378,-0.01316679548472166,0.020611228421330452,-0.024551214650273323,-0.01767633855342865,-0.044679995626211166,0.008375824429094791,0.01483525987714529,0.013662644661962986,-0.010707653127610683,-0.013347713276743889,-0.0024256387259811163,0.007873274385929108,0.003980191424489021,-0.018949463963508606,0.02301006391644478,0.006027243100106716,0.005015443544834852,0.014178594574332237,-0.0073707252740859985,-0.0006399129633791745,-0.0010226881131529808,-0.020812246948480606,0.00035387856769375503,-0.010627245530486107,-0.028866440057754517,0.009870070964097977,-0.02165652997791767,0.0168052539229393,-0.010278811678290367,-0.027325289323925972,-0.005246615968644619,-0.009843268431723118,-0.0027640219777822495,0.020986463874578476,0.016577430069446564,-0.00011841321247629821,0.010540137067437172,0.017528925091028214,0.0186680369079113,0.002098981523886323,0.008891775272786617,-0.009340719319880009,0.006295269355177879,-0.03808654844760895,-0.020906057208776474,-0.0065934485755860806,0.04285741597414017,-0.012020982801914215,-0.014393015764653683,-0.010580341331660748,-0.005933433771133423,-0.020329799503087997,-0.004522944800555706,0.00016238629177678376,0.003554699709638953,0.0061512053944170475,0.010258709080517292,-0.016228996217250824,0.04473360255360603,-0.006499639246612787,0.019740141928195953,-0.0279015451669693,-0.009762860834598541,0.01719389110803604,0.007739261258393526,-0.019981365650892258,-0.005290170665830374,-0.018520621582865715,-0.013441522605717182,0.012557035312056541,0.005099201574921608,-0.02002156898379326,-0.003181138075888157,0.011076189577579498,-0.027928348630666733,-0.03428057208657265,0.0018225793028250337,-0.013910568319261074,-0.008000587113201618,-0.009220107458531857,-0.0013191922334954143,-0.012898769229650497,0.003692063270136714,-0.006261765956878662,-0.0077459621243178844,0.0029633664526045322,-0.010633946396410465,-0.011618942953646183,0.018614431843161583,-0.033074453473091125,-0.015960970893502235,-0.007089297287166119,-0.013186897151172161,0.020517418161034584,-0.010560238733887672,0.014245601370930672,0.03457540273666382,-0.009816465899348259,0.007176406215876341,-0.01919068768620491,0.01629600301384926,-0.031814731657505035,-0.005588349886238575,0.0024055365938693285,-0.01819899119436741,-0.05939464271068573,-0.01901647076010704,0.0030605262145400047,-0.006841373164206743,-0.02555631473660469,-0.022849248722195625,-0.0024490910582244396,-0.012114792130887508,0.017837155610322952,-0.004285071510821581,-0.008670653216540813,-0.006154555361717939,-0.020504016429185867,0.005410782527178526,0.019686536863446236,-0.018962865695357323,-0.015223897993564606,-0.01286526583135128,0.03795253485441208,0.009307215921580791,0.0012965775094926357,0.0017337956232950091,-0.006318721454590559,0.0242161825299263,-0.014942470006644726,-0.0007467046962119639,0.20445051789283752,0.0006009654025547206,0.006603499874472618,0.033208467066287994,-0.005879828706383705,0.005243266001343727,-0.0032849982380867004,-0.02590474858880043,-0.005645305383950472,0.0038629299961030483,-0.016523825004696846,0.017260897904634476,0.0019130381988361478,-0.00035450674477033317,0.009736058302223682,-0.011357617564499378,-0.017703142017126083,-0.021066872403025627,-0.013521930202841759,-0.012483328580856323,0.0021576122380793095,-0.015277503058314323,-0.03176112473011017,-0.015907365828752518,0.019780345261096954,-5.594788945018081e-6,-0.026360392570495605,0.03572791442275047,0.041142046451568604,0.00199344614520669,-0.019311299547553062,-0.02538209781050682,0.0038327770307660103,0.012309110723435879,-0.0016542252851650119,0.00936082098633051,0.040659599006175995,0.006509690545499325,0.01594756916165352,-0.0050790999084711075,0.01849381998181343,-0.002675238298252225,-0.018426813185214996,-0.02716447226703167,0.017274299636483192,0.01789076067507267,-0.004070650320500135,-0.004070650320500135,0.026172775775194168,0.016872260719537735,-0.03106425702571869,0.0032900236546993256,0.0012588863028213382,0.012416321784257889,-0.014393015764653683,0.0025814289692789316,0.010432926006615162,-0.035888731479644775,0.016537226736545563,0.01888245716691017,-0.012000881135463715,0.0158939640969038,-0.013468325138092041,0.035111453384160995,-0.027606716379523277,0.01024530827999115,-0.007625350262969732,0.02204516902565956,0.015331108123064041,0.004425785504281521,-0.014433220028877258,-0.0022246188018471003,0.0035178461112082005,-0.0019130381988361478,-0.004328625742346048,-0.011102992109954357,0.0004820286703761667,0.016014575958251953,0.018949463963508606,0.03481662645936012,-0.013977575115859509,0.006834672298282385,-0.005920032504945993,-0.012376117520034313,-0.02045041136443615,-0.038568995893001556,0.0035781520418822765,-0.01845361478626728,0.0071697053499519825,-0.0043554287403821945,-0.009267011657357216,-0.028169572353363037,0.005712312180548906,-0.013253903947770596,0.009401025250554085,0.03803294152021408,-0.0059803384356200695,0.008737660013139248,0.00506904860958457,0.0009071017266251147,-0.02058442495763302,0.04543047025799751,0.005561547353863716,0.007511438801884651,0.004020395688712597,-0.020195787772536278,-0.0010955578181892633,0.013568835332989693,-0.0001861526834545657,-0.0015436643734574318,0.00006260928785195574,-0.010801462456583977,0.0062148612923920155,-0.028625216335058212,0.004275020677596331,0.01905667409300804,0.016215594485402107,-0.00642258208245039,-0.023680130019783974,0.0015453395899385214,-0.0017890760209411383,0.0010788061190396547,-0.016778450459241867,0.005072399042546749,-0.011337515898048878,-0.006894978228956461,-0.025784136727452278,-0.009736058302223682,-0.005072399042546749,-0.03516506031155586,0.0058094714768230915,-0.01975354366004467,0.01858762837946415,-0.007263514678925276,0.018011372536420822,-0.022634826600551605,-0.011712752282619476,-0.007290317211300135,-0.034763019531965256,-0.004194612614810467,0.00859694555401802,-0.004693811759352684,-0.006915080361068249,0.012751354835927486,-0.004358778707683086,-0.015398114919662476,0.008771163411438465,0.011639045551419258,0.010808163322508335,-0.0037691208999603987,-0.03143949434161186,-0.02551610954105854,-0.021040070801973343,0.011572038754820824,-0.00688827782869339,-0.013977575115859509,-0.008563442155718803,-0.02846440114080906,0.030474597588181496,-0.03184153139591217,-0.03674641624093056,0.018775247037410736,0.04063279926776886,0.002646760316565633,-0.025583116337656975,-0.014178594574332237,-0.16982150077819824,0.01316679548472166,0.013528631068766117,-0.025154273957014084,0.022755438461899757,0.02018238604068756,0.03009936213493347,0.0047072130255401134,0.0032816478051245213,0.015317707322537899,-0.0010285511380061507,-0.012938972562551498,-0.016537226736545563,0.00014511114568449557,-0.012965776026248932,0.01793096400797367,-0.00031199943623505533,0.014366213232278824,0.051407456398010254,0.025636721402406693,0.023291490972042084,-0.0029667168855667114,0.018909260630607605,0.005859726574271917,-0.006178007926791906,-0.0027908245101571083,-0.0012882017763331532,-0.004553097765892744,-0.009200004860758781,-0.02153591811656952,0.000554060738068074,0.01412498950958252,-0.025154273957014084,-0.014352812431752682,0.021214287728071213,-0.006750914268195629,0.013026081956923008,-0.004868029151111841,-0.004948436748236418,-0.009300515055656433,0.00903248880058527,0.019244292750954628,-0.021200885996222496,-0.02615937404334545,-0.004747417289763689,0.004837876185774803,0.011216904036700726,-0.016430016607046127,0.014620838686823845,-0.012195199728012085,0.04167810082435608,-0.03280642628669739,-0.00011129376071039587,-0.004321925342082977,0.02833038754761219,-0.023452308028936386,-0.0065632956102490425,0.015545529313385487,-0.0195793267339468,0.001486708759330213,0.0058630770072340965,-0.028437597677111626,-0.007431031204760075,0.022460609674453735,0.028705624863505363,-0.02469862997531891,-0.03261880949139595,0.00019819293811451644,-0.02833038754761219,-0.0006177170434966683,-0.000012655346836254466,-0.026320189237594604,0.008952081203460693,-0.010231906548142433,0.01979374699294567,0.009863370098173618,-0.01872164197266102,0.017703142017126083,0.0024876196403056383,-0.0007693194202147424,-0.018038174137473106,0.0079469820484519,0.035459887236356735,0.010808163322508335,0.00017023862164933234,0.010412824340164661,-0.0279015451669693,0.021549319848418236,-0.030903439968824387,0.0030622011981904507,0.02538209781050682,-0.00859694555401802,-0.022460609674453735,-0.0032900236546993256,0.0076588536612689495,0.003702114336192608,0.024376997724175453,-0.008208307437598705,0.010922074317932129,-0.029563307762145996,0.002114058006554842,-0.015197095461189747,-0.020865852013230324,0.0013820109888911247,0.037282466888427734,0.012664246372878551,0.00551129225641489,0.015223897993564606,0.016041377559304237,-0.008335620164871216,-0.05901940539479256,0.011210203170776367,0.0223533995449543,0.024671826511621475,0.014982674270868301,0.0371752567589283,0.0004853790160268545,-0.02355951815843582,-0.03331567719578743,0.004770869389176369,0.042562589049339294,-0.0070825968869030476,-0.029429296031594276,-0.013294108211994171,0.009521637111902237,-0.00931391678750515,-0.11728833615779877,-0.018962865695357323,0.0024088870268315077,0.039265863597393036,-0.01633620634675026,0.013428120873868465,0.0027589965611696243,0.03682682290673256,0.018185589462518692,0.021241089329123497,-0.0016634386265650392,0.00047867835382930934,-0.01740831322968006,-0.01892266236245632,-0.025676926597952843,-0.010868469253182411,-0.0028745827730745077,-0.013676045462489128,-0.003923235926777124,0.021066872403025627,0.009521637111902237,-0.010004084557294846,0.008630448952317238,-0.03280642628669739,-0.011404521763324738,-0.005115953274071217,-0.01288536749780178,0.020611228421330452,0.006995488423854113,0.011659147217869759,-0.02343890629708767,0.0018527322681620717,0.0019666433800011873,-0.020718438550829887,0.03256520256400108,-0.011706051416695118,-0.010761259123682976,-0.02338530123233795,0.028169572353363037,-0.00002520599628041964,-0.0054610371589660645,0.008181504905223846,0.0066169011406600475,-0.0391586534678936,0.012402920052409172,-0.009521637111902237,-0.02902725525200367,0.030260177329182625,-0.012825061567127705,-0.017220694571733475,-0.0279015451669693,0.019954564049839973,-0.03312806040048599,-0.021455511450767517,0.020463813096284866,-0.0034675912465900183,0.019994767382740974,0.012349314987659454,-0.008469633758068085,0.0013820109888911247,-0.0010637296363711357,0.011317413300275803,0.02819637395441532,0.026105768978595734,-0.00367196137085557,0.016872260719537735,-0.03224357217550278,0.017126884311437607,0.020999865606427193,0.011833364143967628,-0.003702114336192608,0.009347419254481792,-0.005645305383950472,-0.0019398408476263285,-0.01238951925188303,0.024497609585523605,0.003929936792701483,-0.012965776026248932,0.004114204552024603,-0.00704909348860383,-0.03312806040048599,-0.02755311131477356,-0.014821858145296574,-0.01381675899028778,0.014888864941895008,0.005357176996767521,0.0022631476167589426,0.00022949758567847311,0.01412498950958252,-0.03401254490017891,0.003631757339462638,0.03682682290673256,-0.016215594485402107,-0.0028611815068870783,-0.004670359659940004,-0.008074294775724411,-0.007772764656692743,-0.013119890354573727,-0.02365332655608654,0.017488719895482063,-0.028089163824915886,-0.013206999748945236,-0.05154146999120712,0.018386609852313995,-0.005762566812336445,-0.018400009721517563,-0.029831334948539734,0.024484209716320038,0.006255065556615591,-0.020691635087132454,-0.007538241799920797,0.011411222629249096,-0.028652019798755646,0.004727315157651901,-0.013716249726712704,-0.016430016607046127,-0.006626951973885298,-0.02875922992825508,0.013347713276743889,-0.025569716468453407,0.0035178461112082005,0.016001174226403236,0.000773926149122417,-0.02755311131477356,0.01130401249974966,0.0214421097189188,-0.013052884489297867,-0.009441228583455086,-0.016349608078598976,0.02429659105837345,-0.0008467957959510386,-0.017703142017126083,0.015022877603769302,0.007330521009862423,-0.008442830294370651,0.002231319434940815,0.004740716423839331,0.004070650320500135,0.014111588709056377,0.01754232682287693,0.017796950414776802,0.020544221624732018,-0.008583544753491879,0.007940281182527542,0.00961544644087553,-0.0317879281938076,-0.00750473840162158,0.006312021054327488,-0.013897167518734932,0.006352224852889776,0.021803945302963257,0.018011372536420822,0.014111588709056377,0.00013191922334954143,-0.021428707987070084,-0.023934755474328995,0.002341880463063717,-0.04588611423969269,-0.013428120873868465,-0.005765917245298624,-0.00041188113391399384,0.0007626187871210277,0.05266718193888664,0.00890517607331276,0.03460220620036125,0.0044793905690312386,0.015384713187813759,0.007940281182527542,-0.028946848586201668,0.020906057208776474,0.020088575780391693,-0.02473883330821991,-0.01334101241081953,-0.008690754882991314,-0.009213406592607498,-0.004968538880348206,0.02629338763654232,-0.008844870142638683,-0.02339870296418667,0.02522128075361252,-0.005095851141959429,0.02902725525200367,0.01915048435330391,0.02153591811656952,-0.017260897904634476,0.02066483348608017,0.013381216675043106,0.023666728287935257,0.03599594160914421,-0.012148295529186726,0.008221709169447422,-0.011056087911128998,-0.02798195369541645,0.009890172630548477,-0.00890517607331276,0.01655062846839428,0.013280706480145454,-0.0002479243848938495,0.001249672961421311,0.021040070801973343,0.03001895360648632,-0.011243706569075584,0.011712752282619476,0.0018795349169522524,-0.002047051442787051,-0.016966069117188454,-0.009937077760696411,-0.00018803724378813058,-0.022085372358560562,-0.043822310864925385,-0.002350256312638521,0.014460022561252117,-0.016711443662643433,0.004935035482048988,0.014151792041957378,0.009937077760696411,-0.011913771741092205,0.004187912214547396,0.015491924248635769,0.0037088149692863226,-0.02924167737364769,0.019029872491955757,-0.0007299530552700162,0.018815450370311737,0.02959011122584343,0.005280119366943836,0.01366934459656477,0.003140934044495225,0.02083905041217804,-0.00862374808639288,-0.00016008294187486172,-0.003692063270136714,0.0014473424525931478,0.00010344142356188968,-0.03956069052219391,-0.012148295529186726,-0.0003635107714217156,-0.0007065007812343538,-0.0098097650334239,0.008382524363696575,0.006868175696581602,0.06679216772317886,0.031251873821020126,-0.015652740374207497,-0.004539696499705315,-0.0073707252740859985,0.012657545506954193,0.024229584261775017,0.0011717778397724032,0.00520976260304451,-0.0317075178027153,0.0021659880876541138,0.018426813185214996,-0.011337515898048878,-0.010124696418642998,-0.009622146375477314,-0.002953315619379282,-0.011558637022972107,-0.0025211230386048555,-0.016483621671795845,0.02412237413227558,0.032297179102897644,0.023706931620836258,0.008000587113201618,0.018909260630607605,-0.007122800685465336,0.002856156090274453,0.023706931620836258,-0.00905259046703577,-0.02491305023431778,-0.022675031796097755,0.015237298794090748,0.007109399419277906,-0.02819637395441532,-0.030313782393932343,-0.017314502969384193,0.009883472695946693,0.007209909148514271,-0.014017779380083084,0.030179768800735474,0.005333724897354841,0.02248741313815117,-0.028169572353363037,-0.02408216893672943,-0.027579912915825844,-0.032082755118608475,0.03275282308459282,-0.0260789655148983,-0.015076483599841595,-0.015237298794090748],"e_chunks":[[0.008739413693547249,0.017923440784215927,0.007551465183496475,-0.0004993206239305437,-0.012018430978059769,0.019257277250289917,-0.011393195018172264,0.0018670250428840518,-0.025801418349146843,-0.030455954372882843,0.015686484053730965,-0.0033814862836152315,-0.016006048768758774,-0.0008822779054753482,0.007488941308110952,-0.002415843540802598,0.021633176133036613,-0.009267391636967659,0.014894518069922924,-0.020229868590831757,-0.01781228743493557,0.01158076524734497,0.005971006583422422,0.010191351175308228,-0.027746597304940224,-0.026412760838866234,0.024870511144399643,-0.008899196982383728,0.008128072135150433,-0.011087523773312569,0.01895160600543022,-0.029261058196425438,-0.04607296735048294,-0.019048865884542465,-0.004314130637794733,-0.013769092969596386,0.000389470107620582,0.019813043996691704,0.006210680585354567,0.0009291705791838467,0.019340643659234047,-0.007502835709601641,0.006207207217812538,-0.008169754408299923,-0.01444990560412407,0.01187948975712061,-0.006509404629468918,-0.05029678717255592,-0.007648724131286144,-0.000915276468731463,0.012122636660933495,0.020188184455037117,-0.011219518259167671,0.018201323226094246,-0.01586710847914219,-0.005644494201987982,-0.010761011391878128,0.009038138203322887,0.009288232773542404,-0.012087902054190636,0.008336483500897884,-0.002511365804821253,-0.004439177922904491,0.02206389419734478,0.01023998111486435,-0.023453308269381523,-0.01178223080933094,0.0002377200435148552,-0.04512816667556763,0.007627882994711399,-0.0025426275096833706,0.015894895419478416,-0.006776866503059864,0.008815831504762173,0.030372589826583862,-0.03331814706325531,-0.026787901297211647,-0.0095939040184021,0.002087594475597143,-0.010309452190995216,0.025773629546165466,-0.020841209217905998,0.009413279592990875,0.039570510387420654,0.00015240134962368757,-0.0018861294956877828,0.005081781651824713,0.03331814706325531,-0.023536672815680504,-0.02639886550605297,0.004578119143843651,-0.0077529302798211575,-0.004407915752381086,-0.0024662099312990904,0.0057000708766281605,0.002787511795759201,-0.02206389419734478,0.024550944566726685,-0.013206380419433117,0.0038313090335577726,-0.015561436302959919,-0.013852457515895367,0.003619423368945718,-0.0025808364152908325,0.012087902054190636,0.014741682447493076,0.0073013706132769585,-0.022077787667512894,0.009274338372051716,-0.009656427428126335,-0.015186294913291931,0.04571171849966049,-0.005505552981048822,0.0028326676692813635,-0.009343809448182583,0.014866729266941547,0.0028205104172229767,-0.024120226502418518,-0.007238846737891436,-0.011462665162980556,0.005620179697871208,0.007613988593220711,0.012435255572199821,-0.005255458410829306,-0.010114934295415878,0.0025843100156635046,-0.04418336600065231,-0.01635340228676796,0.023328261449933052,-0.04121001809835434,0.053575802594423294,0.017506616190075874,0.01854867674410343,0.019826937466859818,-0.01228936668485403,0.026204347610473633,-0.04226597398519516,0.016825802624225616,-0.000778940215241164,-0.005519446916878223,-0.011448771692812443,0.0011028473963961005,0.004015406593680382,0.009239602833986282,-0.023661719635128975,0.007183270528912544,0.008336483500897884,0.014241493307054043,0.0015361708356067538,-0.0017211366211995482,0.00392509438097477,-0.0029872399754822254,0.018590359017252922,0.0013138646027073264,0.0022543242666870356,0.029900189489126205,-0.02324489690363407,-0.0021501181181520224,-0.001755003584548831,-0.03023364767432213,0.011761389672756195,0.036902833729982376,0.006756025366485119,-0.0014901465037837625,0.004074456635862589,0.03151191025972366,0.01374130416661501,0.002144907834008336,-0.0028326676692813635,-0.006439934018999338,-0.006078686099499464,0.019410112872719765,-0.03326256945729256,0.023897919803857803,0.01163634192198515,0.011796125210821629,0.019451795145869255,0.014199811033904552,-0.000565317808650434,0.009142343886196613,-0.0012982337502762675,-0.008065547794103622,0.015894895419478416,0.04298846796154976,-0.006353095639497042,0.0034579040948301554,0.012358837760984898,0.01635340228676796,0.023897919803857803,-0.0028517721220850945,-0.0037375236861407757,0.023814555257558823,0.015172400511801243,0.014727788046002388,-0.6091191172599792,0.011761389672756195,-0.00892698485404253,-0.026093194261193275,0.012727032415568829,-0.013206380419433117,0.007454206235706806,0.03312363103032112,0.0033050684724003077,0.03845898061990738,-0.0035881616640836,0.01935453712940216,0.003852150170132518,-0.005130411125719547,-0.010726275853812695,-0.009052032604813576,0.012296313419938087,-0.029288846999406815,-0.021758222952485085,0.025926465168595314,-0.016784120351076126,0.02331436611711979,0.012838184833526611,-0.009885680861771107,0.019215594977140427,0.013977504335343838,-0.010378922335803509,-0.028316257521510124,-0.006043951027095318,0.028872022405266762,-0.024342533200979233,-0.007877977564930916,0.004004986025393009,0.018034594133496284,0.05493742972612381,-0.008044706657528877,-0.005526394117623568,-0.01313690934330225,0.007113799452781677,0.05335349589586258,-0.02068837359547615,0.006856758147478104,-0.004967154935002327,-0.0009248286951333284,0.01042755227535963,-0.013880245387554169,0.009753686375916004,-0.009725897572934628,-0.018034594133496284,0.00401887996122241,0.0075792535208165646,-0.01931285485625267,-0.0005679229507222772,-0.009621691890060902,-0.013678780756890774,-0.011129206046462059,0.029010964557528496,-0.012824291363358498,0.021480340510606766,-0.0138871930539608,-0.008906143717467785,0.019868619740009308,-0.01732599176466465,0.012351890094578266,-0.03534669056534767,0.03695841133594513,-0.027885539457201958,-0.007871029898524284,0.0075792535208165646,0.014797259122133255,0.0061273155733942986,0.010719329118728638,-0.02680179663002491,-0.014116446487605572,0.023995179682970047,0.0656914934515953,0.003004607744514942,-0.006540666334331036,0.01656181551516056,0.02161928080022335,0.030094707384705544,-0.0016282194992527366,0.007801559753715992,-0.03190094605088234,0.012393572367727757,-0.024120226502418518,-0.0387924388051033,0.003921621013432741,0.011872542090713978,0.007662618067115545,0.011393195018172264,-0.004296762868762016,-0.03153969720005989,0.0005288457032293081,0.02032712660729885,0.02566247619688511,-0.007593147456645966,0.01546417735517025,0.005995321553200483,-0.02303648367524147,-0.017715027555823326,-0.0032477551139891148,0.012490831315517426,0.013769092969596386,0.015047353692352772,-0.006804654840379953,-0.021341398358345032,0.02639886550605297,0.02707967907190323,-0.0034995866008102894,-0.018729301169514656,-0.01999366655945778,-0.019660208374261856,0.0009213551529683173,0.005224196705967188,-0.026829583570361137,0.0013972294982522726,-0.01984083093702793,0.03173421695828438,-0.015561436302959919,0.021119093522429466,0.0003905555931851268,-0.00514083169400692,-0.007141587790101767,0.026982419192790985,0.008294801227748394,-0.012699243612587452,-0.005231143441051245,-0.016853591427206993,-0.013282797299325466,0.0234810970723629,-0.016742438077926636,0.020757844671607018,-0.024467580020427704,0.030011342838406563,0.021855482831597328,0.039209261536598206,-0.0017437145579606295,0.004532963037490845,-0.023911815136671066,-0.022091683000326157,-0.0018861294956877828,0.01939621940255165,-0.006120368838310242,0.00910760834813118,-0.0018027646001428366,-0.047267865389585495,-0.02157759852707386,0.019701890647411346,0.015964366495609283,0.013442580588161945,0.024148015305399895,0.009746738709509373,0.0063600423745810986,0.0017619506688788533,-0.01671465113759041,-0.010469234548509121,-0.00878109596669674,-0.011684971861541271,0.004039721097797155,0.00884362030774355,0.02805226854979992,-0.02089678682386875,-0.007961342111229897,-0.01586710847914219,-0.009920415468513966,-0.025718053802847862,0.01906275935471058,-0.0010959003120660782,-0.027301985770463943,0.0068116020411252975,-0.0095939040184021,-0.010740170255303383,-0.0038695179391652346,0.028246786445379257,0.02817731536924839,-0.028733082115650177,-0.00304107996635139,-0.0019417060539126396,-0.014366541057825089,0.010767958126962185,-0.004640642553567886,0.008517107926309109,0.008906143717467785,0.0277743861079216,0.029733458533883095,0.011935066431760788,0.004123086109757423,0.004987996071577072,-0.010816588066518307,0.0012634983286261559,-0.0018774456111714244,-0.03259565308690071,0.012157372198998928,-0.004644116386771202,0.010170510038733482,-0.007020014338195324,0.015130718238651752,-0.0007090353174135089,0.007391682360321283,0.015311341732740402,0.004522542469203472,0.005019258242100477,-0.03262344002723694,-0.0032303875777870417,-0.022258412092924118,0.028844233602285385,-0.007982183247804642,0.0019764413591474295,-0.007704300340265036,-0.0009847471956163645,-0.021883269771933556,-0.010587334632873535,0.009399385191500187,0.017742816358804703,0.021480340510606766,-0.023661719635128975,0.012122636660933495,0.011705812998116016,0.02462041564285755,0.012636720202863216,0.02331436611711979,0.014137287624180317,0.0017680292949080467,-0.010476181283593178,0.021341398358345032,0.006019636057317257,0.011844754219055176,-0.008440690115094185,-0.02834404446184635,-0.010955529287457466,0.03192873299121857,-0.0064955102279782295,0.0046996925957500935,0.038681287318468094,0.005665335338562727,0.009232656098902225,-0.01444990560412407,0.017270416021347046,-0.017062004655599594,-0.005283246748149395,-0.008649102412164211,0.00565838860347867,-0.0277743861079216,0.017075898125767708,0.005609759129583836,0.010656805709004402,0.01615888439118862,-0.024745462462306023,0.012553355656564236,-0.009552220813930035,0.026662854477763176,-0.005227670073509216,-0.005050519946962595,0.0033832229673862457,-0.002051122486591339,-0.006380883976817131,-0.001016009016893804,0.02716304361820221,0.02707967907190323,0.005877221003174782,-0.01797901652753353,0.003581214463338256,-0.0006109079695306718,0.0011141363065689802,-0.02166096493601799,0.007037381641566753,-0.004835160914808512,-0.026412760838866234,-0.01708979159593582,-0.015881001949310303,-0.0023116376250982285,-0.007801559753715992,0.0053457701578736305,0.020799526944756508,0.02246682345867157,-0.009406332857906818,0.010573440231382847,0.015769848600029945,-0.003984144423156977,-0.028038375079631805,-0.037347447127103806,0.009086767211556435,0.009580009616911411,-0.003681947011500597,-0.01903497241437435,-0.017520509660243988,-0.017520509660243988,-0.017631663009524345,-0.005998794920742512,-0.019521266222000122,-0.006200260017067194,-0.029372211545705795,0.0028986649122089148,0.0032877009361982346,0.030011342838406563,0.025606900453567505,-0.004720534197986126,0.006106474436819553,0.003407537704333663,0.004925472661852837,0.007919659838080406,-0.026051511988043785,-0.023203212767839432,0.013192486017942429,0.0062488894909620285,-0.014783364720642567,-0.017798393964767456,0.020146502181887627,-0.004175188951194286,0.002417580457404256,0.004303709603846073,0.004244659561663866,-0.03192873299121857,0.03473534807562828,-0.004727480933070183,-0.008531002327799797,-0.004328024573624134,0.026204347610473633,0.006825496442615986,-0.01364404521882534,-0.009989886544644833,0.0035239013377577066,0.02595425397157669,0.06602495163679123,0.022536294534802437,0.002473156899213791,-0.005675756372511387,-0.005859853699803352,0.01817353442311287,-0.03745860233902931,-0.01995198428630829,0.003218230092898011,0.003852150170132518,-0.006446880754083395,0.014185916632413864,-0.024509262293577194,-0.021633176133036613,0.022175047546625137,0.010135775431990623,0.012192107737064362,-0.004380127415060997,-0.001207921770401299,0.0038486768025904894,0.009927363134920597,0.009566115215420723,0.0018375000217929482,0.005859853699803352,0.01931285485625267,0.009295179508626461,0.013282797299325466,0.0062627834267914295,0.00771124754101038,-0.02644054777920246,0.004307183437049389,0.022967012599110603,0.02428695745766163,0.011691918596625328,-0.00996209867298603,0.04326635226607323,-0.001267840270884335,0.010302504524588585,0.003332856809720397,-0.010781852528452873,0.013998346403241158,-0.007363894023001194,-0.006804654840379953,0.00689149321988225,0.0019243384012952447,0.014123393222689629,-0.01668686233460903,-0.007551465183496475,-0.0032842273358255625,0.0022821123711764812,0.01627003774046898,-0.003065394703298807,-0.003310278756543994,-0.02821899764239788,0.013025755994021893,0.01014272216707468,-0.01671465113759041,0.00813501887023449,0.002806616248562932,-0.04246049001812935,-0.004505174700170755,-0.02659338340163231,-0.015547542832791805,-0.0167563334107399,-0.005463870707899332,-0.03812551870942116,-0.019451795145869255,-0.015339130535721779,-0.025329016149044037,0.0005670546088367701,0.002263008151203394,-0.020799526944756508,-0.021035727113485336,-0.004821266513317823,0.005224196705967188,0.016214461997151375,-0.011108364909887314,0.004470439627766609,0.003162653651088476,0.006134262774139643,0.0024992083199322224,-0.02951115369796753,-0.009468856267631054,-0.01384551078081131,0.0109902648255229,0.016464555636048317,0.017187051475048065,0.01590879075229168,-0.00044330989476293325,0.020757844671607018,-0.008183648809790611,0.037180718034505844,-0.012268525548279285,-0.04698998108506203,0.016408979892730713,0.03515217453241348,0.011684971861541271,-0.005637547466903925,0.011844754219055176,-0.004998416639864445,-0.004869895987212658,-0.0039042532444000244,-0.011726654134690762,-0.02889981120824814,-0.008690784685313702,0.016144990921020508,0.011914225295186043,0.004109191708266735,0.009955151006579399,-0.020632797852158546,0.028163421899080276,-0.02242514118552208,0.012706191278994083,0.01821521669626236,0.0028535090386867523,0.02421748638153076,0.012171266600489616,0.031234025955200195,0.007308317814022303,-0.03526332601904869,0.0026259925216436386,-0.03623591735959053,0.03490208089351654,-0.006498984061181545,-0.014950094744563103,0.006207207217812538,-0.013470368459820747,-0.011226464994251728,-0.02923327125608921,0.008662995882332325,-0.02223062328994274,-0.015978259965777397,-0.00408835057169199,-0.024926086887717247,0.004255080129951239,-0.05538204312324524,-0.008475425653159618,0.015853213146328926,-0.028566351160407066,0.016103308647871017,-0.013345321640372276,0.026662854477763176,0.010719329118728638,-0.008607419207692146,-0.004981049336493015,-0.04498922452330589,-0.019118336960673332,0.0009656427428126335,0.0039876182563602924,0.004432230722159147,0.004696219228208065,-0.0023689507506787777,-0.03178979083895683,-0.008711625821888447,0.01959073729813099,-0.01764555834233761,0.019562948495149612,0.0010629016906023026,0.0020163869485259056,-0.00807944219559431,0.029177693650126457,-0.008920038118958473,0.03270680457353592,0.0010359818115830421,-0.003468324663117528,-0.011698865331709385,-0.020382702350616455,-0.01975746639072895,-0.012233790010213852,-0.0006360911065712571,-0.003272069850936532,0.027552079409360886,0.002784038195386529,0.003101866692304611,-0.013581521809101105,0.0028778237756341696,-0.01289376150816679,0.008009972050786018,-0.028510775417089462,-0.061356522142887115,-0.025245651602745056,0.018243005499243736,-0.051352739334106445,0.01652013324201107,-0.02157759852707386,-0.0011236885329708457,0.01931285485625267,0.003353697946295142,0.017673345282673836,0.011566871777176857,0.025537429377436638,-0.016867486760020256,0.0018236058531329036,0.008350377902388573,0.0234810970723629,-0.02517618238925934,-0.014727788046002388,-0.02113298699259758,0.00878109596669674,0.012143478728830814,0.01745104044675827,0.024273062124848366,0.02375897951424122,0.005189461167901754,-0.01457495242357254,0.0023255315609276295,-0.038403403013944626,0.009878733195364475,0.011393195018172264,-0.002553048310801387,-0.023772872984409332,-0.03959829732775688,-0.0013095226604491472,0.014741682447493076,-0.03606918826699257,-0.010399763472378254,-0.005946692079305649,0.008239224553108215,-0.03526332601904869,-0.023411625996232033,-0.023953497409820557,-0.03456861898303032,0.036124762147665024,0.032401133328676224,0.011629395186901093,0.016659073531627655,-0.016853591427206993,0.008003024384379387,0.022841965779662132,0.01963241957128048,0.007926606573164463,0.01444990560412407,0.018882136791944504,0.003174810903146863,-0.02781606838107109,-0.009468856267631054,0.005995321553200483,-0.01870151236653328,-0.008878355845808983,0.024662097916007042,0.03431852534413338,0.009850945323705673,-0.03201209753751755,0.018243005499243736,-0.03298468887805939,0.020174290984869003,0.0014319648034870625,-0.006266257259994745,-0.019646313041448593,-0.007169376127421856,-0.02088289149105549,0.018368052318692207,-0.008128072135150433,0.02218894101679325,0.014658317901194096,0.016131095588207245,-0.016728544607758522,0.005693123675882816,0.0035221644211560488,0.01368572749197483,0.015255765989422798,0.021230245009064674,-0.005408294033259153,-0.0014371750876307487,0.020618904381990433,0.01338005717843771,-0.017992911860346794,0.009586956351995468,-0.004022353328764439,0.03490208089351654,-0.02003534883260727,-0.00635656900703907,0.012053166516125202,-0.01275482028722763,0.009892627596855164,-0.004262027330696583,-0.00874636135995388,-0.018757088109850883,-0.012351890094578266,-0.008412901312112808,0.033707182854413986,0.004036247730255127,-0.014255387708544731,-0.019826937466859818,-0.0018201323691755533,-0.01153908297419548,-0.012053166516125202,-0.007419470697641373,0.016728544607758522,-0.008294801227748394,-0.03562457486987114,-0.013824669644236565,-0.013352268375456333,-0.005908483173698187,0.013810775242745876,-0.03298468887805939,0.021605387330055237,0.04918525367975235,-0.011386247351765633,0.002078910591080785,-0.021633176133036613,-0.006335727870464325,-0.021119093522429466,0.00953137967735529,-0.03834782540798187,-0.01664518006145954,0.013123014941811562,-0.024120226502418518,-0.007468100171536207,-0.049129679799079895,0.007607041392475367,0.02521786466240883,0.004480860196053982,0.02153591625392437,-0.0070686438120901585,0.022439036518335342,0.00939243845641613,0.009378544054925442,-0.007968288846313953,0.022327883169054985,0.010719329118728638,0.003371065715327859,0.01514461264014244,0.004557278007268906,0.002280375687405467,-0.0035568997263908386,-0.02578752301633358,-0.02117466926574707,-0.03387391194701195,-0.013442580588161945,-0.004793478175997734,-0.02416190877556801,0.013921928592026234,-0.018965501338243484,-0.03223440423607826,-0.012303261086344719,-0.008697731420397758,-0.005241564474999905,0.036819469183683395,0.002395002404227853,0.004289815668016672,0.008913090452551842,0.011935066431760788,0.0350688099861145,-0.013255009427666664,0.012143478728830814,0.0019017603481188416,0.01950737275183201,-0.042488280683755875,-0.009760633111000061,0.012442202307283878,0.03662495315074921,0.009197920560836792,-0.006978331599384546,-0.01903497241437435,0.0007012198911979795,-0.034068431705236435,-0.009413279592990875,-0.016131095588207245,0.008232277818024158,0.028274575248360634,-0.004446124657988548,-0.014713894575834274,0.04082098230719566,0.007061696611344814,0.014991777017712593,-0.04084877297282219,-0.002610361436381936,0.019201701506972313,0.007502835709601641,-0.013032703660428524,-0.007447259034961462,-0.031234025955200195,-0.020257655531167984,0.014220652170479298,0.005804277025163174,-0.003489165799692273,-0.007982183247804642,-0.00043809961061924696,-0.019410112872719765,-0.03562457486987114,-0.012497778981924057,-0.019465690478682518,-0.012872920371592045,0.006551086902618408,-0.01571427285671234,-0.02242514118552208,0.011045841500163078,-0.0010976369958370924,-0.0005158199346624315,-0.00268677924759686,0.0040848772041499615,0.00850321352481842,0.016575708985328674,-0.02603761851787567,-0.018645936623215675,0.003409274620935321,-0.0016690335469320416,0.04015406593680382,-0.02339773066341877,0.03192873299121857,0.04223818704485893,0.0016811909154057503,0.00015392102068290114,-0.014838941395282745,0.013505103997886181,-0.03404064103960991,0.0032477551139891148,-0.017701134085655212,-0.03854234516620636,-0.03595803305506706,-0.02671843022108078,-0.003256438998505473,-0.008551843464374542,-0.03101172111928463,-0.034346312284469604,-0.02582920528948307,-0.030150283128023148,0.02635718323290348,0.007058223243802786,-0.020257655531167984,0.0019920722115784883,0.0014111235504969954,0.011129206046462059,0.0138871930539608,-0.029483364894986153,-0.0028083529323339462,0.0014154654927551746,0.011080576106905937,0.014769470319151878,0.005779962055385113,-0.007020014338195324,0.006801181472837925,0.031067296862602234,0.00007652631757082418,-0.014255387708544731,0.21141323447227478,0.008051654323935509,-0.00024553551338613033,0.03348487615585327,-0.006561507470905781,0.022008318454027176,0.006999173201620579,-0.02587088756263256,0.00030306592816486955,0.0042932890355587006,-0.018937712535262108,0.006693501956760883,-0.0037479442544281483,-0.007231900002807379,0.026371076703071594,-0.006168998312205076,-0.020994044840335846,-0.025593005120754242,-0.015297448262572289,-0.011448771692812443,0.0316508524119854,-0.01652013324201107,-0.025606900453567505,-0.01356068067252636,0.008253118954598904,0.010920793749392033,-0.023203212767839432,0.03170642629265785,0.03267901763319969,-0.005179040599614382,-0.023425519466400146,-0.020799526944756508,0.010934688150882721,0.0204799622297287,-0.009427173994481564,0.013546786271035671,0.04615633189678192,-0.010656805709004402,0.008260066621005535,-0.006505930796265602,0.010809640400111675,-0.02100794017314911,-0.013810775242745876,-0.030539318919181824,0.013387003913521767,0.013650992885231972,0.0043627601116895676,0.0015926157357171178,0.03192873299121857,0.011156993918120861,-0.028816446661949158,0.015575330704450607,0.011247306130826473,0.014686105772852898,-0.014561058953404427,-0.0009291705791838467,-0.0012548145605251193,-0.017840076237916946,0.015686484053730965,0.021438658237457275,0.010010727681219578,0.026412760838866234,0.012053166516125202,0.03517996147274971,-0.04740680381655693,0.008294801227748394,-0.0008566605392843485,0.007648724131286144,0.010510916821658611,-0.012692296877503395,-0.024231379851698875,-0.002825720701366663,0.0010681119747459888,-0.004689272027462721,-0.022036105394363403,-0.011775283142924309,0.0016898747999221087,0.03012249618768692,0.013171644881367683,0.03631928190588951,-0.0210496224462986,0.011462665162980556,-0.014255387708544731,-0.019785255193710327,-0.026454443112015724,-0.028566351160407066,0.014908412471413612,-0.011886436492204666,-0.010691540315747261,-0.011532136239111423,-0.014783364720642567,-0.020313233137130737,0.010872164741158485,-0.016978638246655464,0.02959451824426651,0.02193884737789631,0.008183648809790611,0.0017263469053432345,-0.006269730627536774,0.00018442299915477633,-0.026093194261193275,0.03420737385749817,0.005641020834445953,0.01895160600543022,-0.0007446390809491277,-0.017173156142234802,-0.008225331082940102,0.029483364894986153,-0.0028430884703993797,-0.011851700954139233,-0.02235567197203636,-0.00921181496232748,0.008267013356089592,-0.009489697404205799,-0.00010067824041470885,0.015922684222459793,0.0262738186866045,0.01785396970808506,-0.017992911860346794,-0.0006478142458945513,0.004727480933070183,0.0031887050718069077,-0.006971384864300489,0.01984083093702793,0.0021588020026683807,0.000759835762437433,-0.01683969795703888,-0.008808884769678116,0.005627126432955265,-0.02817731536924839,0.0133175328373909,-0.015186294913291931,0.021355293691158295,-0.010809640400111675,0.0034353260416537523,-0.015505860559642315,0.006134262774139643,-0.01906275935471058,-0.024953875690698624,-0.0029872399754822254,0.0024453685618937016,0.011004159227013588,0.002493998035788536,0.011393195018172264,0.002846561837941408,-0.021869376301765442,0.008649102412164211,0.0038417296018451452,0.0048803165555000305,0.003468324663117528,-0.021674858406186104,-0.020146502181887627,-0.016895273700356483,0.003859097370877862,-0.008767202496528625,-0.006679607555270195,-0.011143100447952747,-0.025940358638763428,0.036986202001571655,-0.025940358638763428,-0.046739887446165085,0.020493855699896812,0.03862570971250534,0.011288988403975964,-0.0383756160736084,-0.03709735348820686,-0.17706692218780518,0.03315141797065735,-0.002613835036754608,-0.023508884012699127,0.024342533200979233,0.007308317814022303,0.016200566664338112,0.010330293327569962,0.0067143430933356285,0.010309452190995216,0.0005831196904182434,-0.036291494965553284,-0.012490831315517426,-0.003426642157137394,-0.017103686928749084,-0.009545274078845978,-0.005547235254198313,0.024314744397997856,0.07780718058347702,0.011851700954139233,0.031845368444919586,-0.015491966158151627,0.013963610865175724,0.011462665162980556,0.0011401878437027335,-0.010455340147018433,-0.0011731864651665092,0.008058601059019566,-0.023425519466400146,-0.02437032200396061,-0.02934442274272442,0.005241564474999905,-0.011705812998116016,-0.004935893230140209,0.01656181551516056,-0.0062627834267914295,0.008607419207692146,-0.017131473869085312,-0.009406332857906818,0.010114934295415878,0.027176937088370323,0.02136918716132641,-0.0017480565002188087,-0.01906275935471058,-0.006464248523116112,0.0026728850789368153,0.02409243769943714,-0.012379678897559643,0.01927117258310318,0.00623499508947134,0.03901474550366402,-0.04751795902848244,0.020174290984869003,0.015853213146328926,-0.0009248286951333284,-0.00035516894422471523,0.019701890647411346,0.02077174000442028,-0.00817670114338398,0.010094092227518559,0.008183648809790611,-0.025481851771473885,-0.002415843540802598,0.005297140683978796,0.009878733195364475,-0.008412901312112808,-0.01060817576944828,-0.002825720701366663,-0.022175047546625137,0.008197542279958725,0.0022664815187454224,-0.029205482453107834,0.007989129982888699,-0.009517486207187176,0.029205482453107834,0.031956519931554794,-0.0114557184278965,0.006255836691707373,0.007127693854272366,0.00785713642835617,-0.023592250421643257,0.01829858310520649,0.019160019233822823,0.008760254830121994,-0.01857646554708481,0.0037722589913755655,-0.017909545451402664,0.014936200343072414,-0.024926086887717247,0.011650236323475838,0.01652013324201107,-0.008662995882332325,-0.01449158787727356,-0.00949664507061243,0.017353780567646027,-0.0029160326812416315,0.01415118109434843,-0.007586200255900621,0.010754064656794071,-0.012664508074522018,0.00892698485404253,-0.02542627602815628,-0.0026642014272511005,-0.0040015121921896935,0.04593402519822121,0.012692296877503395,-0.0018461837898939848,0.007197164464741945,0.015227977186441422,-0.014297069981694221,-0.04357202351093292,0.012601984664797783,0.03659716621041298,0.01431096438318491,-0.013366162776947021,0.030789414420723915,0.008433743380010128,-0.026343289762735367,-0.014519375748932362,0.015186294913291931,0.04298846796154976,-0.006412145681679249,-0.014963988214731216,-0.02032712660729885,-0.009371597319841385,-0.013011861592531204,-0.09987107664346695,-0.018562570214271545,-0.006255836691707373,0.02085510455071926,-0.020785633474588394,0.011559924110770226,-0.011441824026405811,0.03554121032357216,0.013407845050096512,0.015450283885002136,-0.025926465168595314,0.0019608105067163706,-0.022980907931923866,-0.01639508455991745,-0.004223818425089121,-0.00803775992244482,-0.0009448014898225665,-0.029455576092004776,-0.01878487691283226,0.02898317575454712,0.0077529302798211575,-0.018673723563551903,0.009927363134920597,-0.03545784577727318,-0.02801058627665043,-0.0057973298244178295,-0.0066309780813753605,-0.0006517220172099769,-0.006936649326235056,0.007224952802062035,-0.022814176976680756,-0.003911200445145369,-0.0004161729011684656,-0.01943790167570114,0.016103308647871017,-0.003348487662151456,-0.01999366655945778,0.020910680294036865,0.017923440784215927,-0.0014328331453725696,0.012331048958003521,0.005741753149777651,0.010517863556742668,-0.01627003774046898,-0.00439054798334837,0.004369706846773624,-0.03190094605088234,0.03937599062919617,-0.010052409954369068,-0.016131095588207245,-0.03170642629265785,-0.014116446487605572,-0.03970945253968239,-0.02417580410838127,0.04401663690805435,-0.011400141753256321,0.009941257536411285,0.004345392342656851,-0.011038893833756447,0.00031023009796626866,0.011719707399606705,-0.006394777912646532,0.031206239014863968,0.03209546208381653,0.026218241080641747,0.019729679450392723,-0.032484497874975204,0.0037375236861407757,0.027996692806482315,0.0143526466563344,-0.027579868212342262,0.03128960356116295,-0.005053993314504623,0.0019451795378699899,-0.0025652055628597736,0.016103308647871017,0.006828969810158014,-0.017353780567646027,0.01426928211003542,0.0012226842809468508,-0.01720094494521618,-0.03359603136777878,0.004765689838677645,-0.014811153523623943,-0.003859097370877862,0.008760254830121994,0.006158577278256416,0.00921181496232748,0.012060113251209259,-0.046739887446165085,0.012615879066288471,0.02514839358627796,0.002450578846037388,0.0019642841070890427,0.005033152177929878,0.019938090816140175,-0.006179418880492449,-0.012094848789274693,0.0019139177165925503,0.03754196688532829,-0.005929324310272932,-0.02263355441391468,-0.050908129662275314,0.0022126417607069016,0.005866800434887409,-0.01131677720695734,-0.02392570860683918,-0.0004537304921541363,-0.020799526944756508,-0.02036880888044834,-0.017659451812505722,0.01793733425438404,-0.01802069880068302,0.009843997657299042,-0.013039650395512581,-0.014727788046002388,-0.020452173426747322,-0.025398487225174904,0.012942391447722912,0.00044222440919838846,0.013776039704680443,0.036374859511852264,-0.0018288161372765899,-0.015408600680530071,-0.0042342389933764935,0.020063137635588646,-0.003938988782465458,-0.004064036067575216,-0.0387924388051033,0.005352717358618975,-0.0034040643367916346,-0.02769102156162262,0.02016039751470089,0.007433364633470774,0.00728747621178627,0.013477316126227379,0.0020771739073097706,0.0022751654032617807,0.02088289149105549,0.0034387996420264244,0.014178969897329807,0.004803898744285107,-0.026912948116660118,0.003852150170132518,0.01724262721836567,-0.02223062328994274,-0.006200260017067194,-0.015311341732740402,-0.013046597130596638,-0.0006122105405665934,0.030150283128023148,0.014088657684624195,0.015005671419203281,0.0167563334107399,-0.016909169033169746,-0.009281285107135773,0.014713894575834274,-0.01865983009338379,-0.01457495242357254,0.0006912334356456995,0.014436011202633381,-0.004296762868762016,0.05043572932481766,0.017603876069188118,0.025982040911912918,-0.013039650395512581,0.013255009427666664,0.007363894023001194,-0.04482249543070793,0.012456096708774567,0.013859404250979424,-0.024398108944296837,-0.013234168291091919,-0.013553733006119728,-0.006141209974884987,0.026329394429922104,0.02352277934551239,0.0016794541152194142,-0.031067296862602234,0.016506237909197807,-0.02073005586862564,0.02136918716132641,0.01149740070104599,0.009607797488570213,-0.013859404250979424,0.010233034379780293,0.011518241837620735,0.007989129982888699,0.025815311819314957,-0.028844233602285385,-0.0013633625349029899,0.0005527262692339718,-0.028274575248360634,-0.003153969766572118,-0.012845132499933243,0.012351890094578266,0.0225501898676157,-0.0075097824446856976,0.016700755804777145,0.02223062328994274,0.04237712547183037,-0.015686484053730965,0.012720084749162197,0.0037479442544281483,-0.007454206235706806,-0.02796890400350094,-0.002103225328028202,0.009871786460280418,-0.02202221192419529,-0.026787901297211647,0.025287333875894547,0.0004463492368813604,-0.013498157262802124,0.013873298652470112,0.01204621884971857,0.02041049115359783,-0.019813043996691704,-0.010205245576798916,0.026565594598650932,-0.014880623668432236,-0.03990396857261658,0.036124762147665024,-0.02923327125608921,-0.009468856267631054,0.04632306098937988,-0.0077668242156505585,0.010795746929943562,0.018117958679795265,0.01135845948010683,-0.0195490550249815,0.011323723942041397,-0.024759357795119286,-0.008510160259902477,-0.008086389862000942,-0.026815690100193024,-0.016047731041908264,0.005592391360551119,0.003928568214178085,0.0068498109467327595,0.013588468544185162,-0.005609759129583836,0.0910344049334526,0.027788279578089714,-0.016144990921020508,0.0034926394000649452,0.002474893582984805,0.023620037361979485,0.00841984897851944,0.0018201323691755533,-0.00850321352481842,-0.04729565232992172,-0.003279017051681876,0.001112399622797966,-0.01967410184442997,0.0006821154383942485,-0.02153591625392437,-0.011400141753256321,-0.03809773176908493,0.012859026901423931,-0.008558790199458599,0.024425897747278214,0.02826067991554737,0.013776039704680443,0.016144990921020508,0.012087902054190636,-0.018923819065093994,0.002655517542734742,0.028107844293117523,0.017464933916926384,-0.028733082115650177,-0.015005671419203281,0.009288232773542404,0.005623653065413237,-0.030372589826583862,-0.023105954751372337,-0.0015153295826166868,0.020396597683429718,-0.005185987800359726,-0.023717297241091728,0.014436011202633381,-0.005377032328397036,0.03618033975362778,-0.040265217423439026,-0.0137829864397645,-0.025940358638763428,-0.015658695250749588,0.03173421695828438,-0.030428165569901466,0.0007046934333629906,-0.006363516207784414]],"metadata":{"location":"https://go.dev/doc/tutorial/add-a-test","source_type":"webpage"}}]